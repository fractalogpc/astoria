// Made with Amplify Shader Editor v1.9.6.3
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit"
{
	Properties
	{
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_SpecColor("Specular Color", Color) = (1,1,1,1)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2040
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)]_RenderFilter("Render Filtering", Float) = 0
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTexSS("Noise Mask SS", 2D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[StyledMessage(Info, Use the Object Height and Radius to remap the procedural height and spherical masks when used for motion., 0, 10)]_ObjectBoundsInfo("# ObjectBoundsInfo", Float) = 0
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalCoatLayerValue("Global Coat Layer", Float) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPaintLayerValue("Global Paint Layer", Float) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalAtmoLayerValue("Global Atmo Layer", Float) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFadeLayerValue("Global Fade Layer", Float) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalGlowLayerValue("Global Glow Layer", Float) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFormLayerValue("Global Form Layer", Float) = 0
		[StyledEnum(Wind Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalWindLayerValue("Global Wind Layer", Float) = 0
		[StyledEnum(Push Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPushLayerValue("Global Push Layer", Float) = 0
		_GlobalCoatPivotValue("Global Coat Pivots", Range( 0 , 1)) = 0
		_GlobalPaintPivotValue("Global Paint Pivots", Range( 0 , 1)) = 0
		_GlobalAtmoPivotValue("Global Atmo Pivots", Range( 0 , 1)) = 0
		_GlobalFadePivotValue("Global Fade Pivots", Range( 0 , 1)) = 0
		_GlobalGlowPivotValue("Global Glow Pivots", Range( 0 , 1)) = 0
		_GlobalFormPivotValue("Global Form Pivots", Range( 0 , 1)) = 1
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to mask out the branches from the leaves when using Dual Colors or for Global Effects. The mask is stored in the Shader texture blue channel. , 0, 10)]_MainMultiMaskInfo("# MainMultiMaskInfo", Float) = 0
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider()]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 100)) = 10
		_VariationNoisePivotValue("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[HideInInspector]_tinting_vert_mode("_tinting_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[HideInInspector]_dryness_vert_mode("_dryness_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTexRT("Overlay Glitter RT", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 0
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 8)) = 4
		_OverlayGlitterDistValue("Overlay Glitter Limit", Range( 0 , 200)) = 100
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap1("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessMeshValue("Wetness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessMeshMode("Wetness Mesh Mask", Float) = 0
		[StyledRemapSlider]_WetnessMeshRemap("Wetness Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		_WetnessWaterBaseValue("Wetness Water Base Mask", Range( 0 , 1)) = 1
		_WetnessWaterMeshValue("Wetness Water Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessWaterMeshMode("Wetness Water Mesh Mask", Float) = 1
		[StyledRemapSlider]_WetnessWaterMeshRemap("Wetness Water Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTexRT("Wetness Drops RT", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( -8 , 8)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 8)) = 0.25
		_WetnessDropsDistValue("Wetness Drops Limit", Range( 0 , 200)) = 50
		_WetnessDropsMeshValue("Wetness Drops Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessDropsMeshMode("Wetness Drops Mesh Mask", Float) = 2
		[StyledRemapSlider]_WetnessDropsMeshRemap("Wetness Drops Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_wetness_water_vert_mode("_wetness_water_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_vert_mode("_wetness_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_drops_vert_mode("_wetness_drops_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[Space(10)]_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 100)) = 10
		[Space(10)][StyledToggle]_CutoutElementMode("Use Fade Globals / Elements", Float) = 1
		[HideInInspector]_cutout_vert_mode("_cutout_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityMinValue("Dither Proximity Start", Range( 0 , 40)) = 0
		_DitherProximityMaxValue("Dither Proximity Limit", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 100)) = 50
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)]_EmissiveColorMode("Emissive Color", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)]_SubsurfaceAproxInfo("# Subsurface Aprox Info", Float) = 0
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Value", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[StyledMessage(Info, Use the disabled Wind mode when the wind flow is controlled exclusivly by global elements. , 0, 10)]_MotionWindOffInfo("# Message Off", Float) = 0
		[StyledMessage(Info, The Optimized wind mode uses the precomputed Motion Texture RT which is only calculated once and reused for all materials. , 0, 10)]_MotionWindOptimizedInfo("# Message Optimized", Float) = 0
		[StyledMessage(Info, The Advanced wind mode allows the setting of the wind Noise__ Tilling__ and Speed per motion layer for advanced control. Use the Noise value to randomize the wind direction., 0, 10)]_MotionWindAdvancedInfo("# Message Advanced", Float) = 0
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTexRT("Motion Texture RT", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Waves Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Waves Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion LayerA Intensity", Range( 0 , 10)) = 0
		_MotionBasePivotValue("Motion LayerA Pivots", Range( 0 , 1)) = 0.8
		_MotionBasePhaseValue("Motion LayerA Phase", Range( 0 , 1)) = 0
		_MotionBaseNoiseValue("Motion LayerA Noise", Range( 0 , 1)) = 0.5
		_MotionBaseTillingValue("Motion LayerA Tilling", Range( 0 , 100)) = 5
		_MotionBaseSpeedValue("Motion LayerA Speed", Range( 0 , 50)) = 5
		_MotionBaseDelayValue("Motion LayerA Wind Delay", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion LayerA Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion LayerA Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion LayerB Intensity", Range( 0 , 10)) = 0
		_MotionSmallPivotValue("Motion LayerB Pivots", Range( 0 , 1)) = 0.6
		_MotionSmallPhaseValue("Motion LayerB Phase", Range( 0 , 1)) = 0
		_MotionSmallNoiseValue("Motion LayerB Noise", Range( 0 , 1)) = 0.5
		_MotionSmallTillingValue("Motion LayerB Tilling", Range( 0 , 100)) = 5
		_MotionSmallSpeedValue("Motion LayerB Speed", Range( 0 , 50)) = 5
		_MotionSmallDelayValue("Motion LayerB Wind Delay", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion LayerB Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion LayerB Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion Flutter Intensity", Range( 0 , 10)) = 0
		_MotionTinyTillingValue("Motion Flutter Tilling", Range( 0 , 100)) = 20
		_MotionTinySpeedValue("Motion Flutter Speed", Range( 0 , 50)) = 20
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion Flutter Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion Flutter Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		[Enum(Off,0,Optimized,1,Advanced,2)]_MotionWindMode("Motion Wind Mode", Float) = 1
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 100)) = 5
		_MotionDistValue("Motion Wind Waves Limit", Range( 0 , 1000)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_mask_mode("_motion_push_mask_mode", Float) = 0
		[HideInInspector]_motion_push_vert_mode("_motion_push_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_proc_mode("_motion_push_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_push_layer_value("_global_push_layer_value", Float) = 0
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalSpace("[ Normal Space ]", Float) = 1
		_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 1
		[HideInInspector]_render_dst("_render_dst", Float) = 0
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSimpleShader("_IsSimpleShader", Float) = 1

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		//_TransStrength( "Trans Strength", Range( 0, 50 ) ) = 1
		//_TransNormal( "Trans Normal Distortion", Range( 0, 1 ) ) = 0.5
		//_TransScattering( "Trans Scattering", Range( 1, 50 ) ) = 2
		//_TransDirect( "Trans Direct", Range( 0, 1 ) ) = 0.9
		//_TransAmbient( "Trans Ambient", Range( 0, 1 ) ) = 0.1
		//_TransShadow( "Trans Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		
		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull [_render_cull]
		AlphaToMask Off
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA
		
		Blend [_render_src] [_render_dst]
		

		CGINCLUDE
#pragma target 4.5

		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fwdbase
			#ifndef UNITY_PASS_FORWARDBASE
				#define UNITY_PASS_FORWARDBASE
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
           //Nature Renderer (Instanced Indirect)
           #include "Assets/Visual Design Cafe/Nature Renderer/Shader Includes/Nature Renderer.templatex"
           #pragma instancing_options procedural:SetupNatureRenderer forwardadd
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if defined(LIGHTMAP_ON) || (!defined(LIGHTMAP_ON) && SHADER_TARGET >= 30)
					float4 lmap : TEXCOORD0;
				#endif
				#if !defined(LIGHTMAP_ON) && UNITY_SHOULD_SAMPLE_SH
					half3 sh : TEXCOORD1;
				#endif
				#if defined(UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS) && UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(2,3)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(2)
					#else
						SHADOW_COORDS(2)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(4)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindMode;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _MotionWindOffInfo;
			uniform half _MotionWindOptimizedInfo;
			uniform half _MotionWindAdvancedInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTexRT);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half _MotionIntensityValue;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBaseTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBaseNoiseValue;
			uniform half _global_wind_layer_value;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseDelayValue;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck33_g171016( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck33_g171017( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171003 = (TVEModelData)0;
				float In_Dummy16_g171003 = 0.0;
				TVEModelData Data16_g170980 = (TVEModelData)0;
				half Dummy1575_g170978 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170980 = Dummy1575_g170978;
				TVEModelData Data16_g170957 = (TVEModelData)0;
				float In_Dummy16_g170957 = 0.0;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				half Dummy181_g170707 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170721 = Dummy181_g170707;
				TVEModelData Data16_g170671 = (TVEModelData)0;
				half Dummy181_g170668 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170671 = Dummy181_g170668;
				TVEModelData Data16_g170583 = (TVEModelData)0;
				half Dummy181_g170580 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170583 = Dummy181_g170580;
				TVEModelData Data16_g170578 = (TVEModelData)0;
				float In_Dummy16_g170578 = 0.0;
				TVEModelData Data16_g170492 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170492 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170492 = PositionOS131_g170478;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_worldPos;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170492 = PositionWS122_g170478;
				float4x4 break19_g170480 = unity_ObjectToWorld;
				float3 appendResult20_g170480 = (float3(break19_g170480[ 0 ][ 3 ] , break19_g170480[ 1 ][ 3 ] , break19_g170480[ 2 ][ 3 ]));
				half3 ObjectData20_g170482 = appendResult20_g170480;
				half3 WorldData19_g170482 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170482 = WorldData19_g170482;
				#else
				float3 staticSwitch14_g170482 = ObjectData20_g170482;
				#endif
				float3 temp_output_124_0_g170480 = staticSwitch14_g170482;
				float3 temp_output_239_7_g170478 = temp_output_124_0_g170480;
				float4x4 break19_g170484 = unity_ObjectToWorld;
				float3 appendResult20_g170484 = (float3(break19_g170484[ 0 ][ 3 ] , break19_g170484[ 1 ][ 3 ] , break19_g170484[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170488 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170488;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170484 = PivotOS149_g170478;
				float3 PivotsOnly105_g170484 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170484 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170486 = ( appendResult20_g170484 + PivotsOnly105_g170484 );
				half3 WorldData19_g170486 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170486 = WorldData19_g170486;
				#else
				float3 staticSwitch14_g170486 = ObjectData20_g170486;
				#endif
				float3 temp_output_124_0_g170484 = staticSwitch14_g170486;
				float3 temp_output_237_7_g170478 = temp_output_124_0_g170484;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170492 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170492 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170492 = float3( 0,0,0 );
				float3 In_PivotOS16_g170492 = PivotOS149_g170478;
				float3 In_PivotWS16_g170492 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170492 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170492 = NormalOS134_g170478;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170492 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170492 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170492 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170492 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170492 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170492 = VertexMasks171_g170478;
				float4 break33_g170491 = _object_phase_mode;
				float temp_output_30_0_g170491 = ( v.ase_color.r * break33_g170491.x );
				float temp_output_29_0_g170491 = ( v.ase_color.g * break33_g170491.y );
				float temp_output_31_0_g170491 = ( v.ase_color.b * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( v.ase_color.a * break33_g170491.w ) );
				float3 break243_g170478 = PivotWO133_g170478;
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170491 + ( break243_g170478.x + break243_g170478.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(1.0 , 1.0 , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_MotionData16_g170492 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170492 = BoundsData254_g170478;
				float4 In_RotationData16_g170492 = float4( 0,0,0,0 );
				Data16_g170492.Dummy = In_Dummy16_g170492;
				Data16_g170492.PositionOS = In_PositionOS16_g170492;
				Data16_g170492.PositionWS = In_PositionWS16_g170492;
				Data16_g170492.PositionWO = In_PositionWO16_g170492;
				Data16_g170492.PositionRawOS = In_PositionRawOS16_g170492;
				Data16_g170492.PositionAddOS = In_PositionAddOS16_g170492;
				Data16_g170492.PivotOS = In_PivotOS16_g170492;
				Data16_g170492.PivotWS = In_PivotWS16_g170492;
				Data16_g170492.PivotWO = In_PivotWO16_g170492;
				Data16_g170492.NormalOS = In_NormalOS16_g170492;
				Data16_g170492.NormalWS = In_NormalWS16_g170492;
				Data16_g170492.NormalRawOS = In_NormalRawOS16_g170492;
				Data16_g170492.NormalRawWS = In_NormalRawWS16_g170492;
				Data16_g170492.TangentOS = In_TangentOS16_g170492;
				Data16_g170492.ViewDirWS = In_ViewDirWS16_g170492;
				Data16_g170492.VertexData = In_VertexData16_g170492;
				Data16_g170492.MotionData = In_MotionData16_g170492;
				Data16_g170492.BoundsData = In_BoundsData16_g170492;
				Data16_g170492.RotationData = In_RotationData16_g170492;
				TVEModelData Data15_g170579 = Data16_g170492;
				float Out_Dummy15_g170579 = 0;
				float3 Out_PositionOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170579 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170579 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170579 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170579 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170579 = float3( 0,0,0 );
				float4 Out_VertexData15_g170579 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170579 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170579 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170579 = float4( 0,0,0,0 );
				Out_Dummy15_g170579 = Data15_g170579.Dummy;
				Out_PositionOS15_g170579 = Data15_g170579.PositionOS;
				Out_PositionWS15_g170579 = Data15_g170579.PositionWS;
				Out_PositionWO15_g170579 = Data15_g170579.PositionWO;
				Out_PositionRawOS15_g170579 = Data15_g170579.PositionRawOS;
				Out_PositionAddOS15_g170579 = Data15_g170579.PositionAddOS;
				Out_PivotOS15_g170579 = Data15_g170579.PivotOS;
				Out_PivotWS15_g170579 = Data15_g170579.PivotWS;
				Out_PivotWO15_g170579 = Data15_g170579.PivotWO;
				Out_NormalOS15_g170579 = Data15_g170579.NormalOS;
				Out_NormalWS15_g170579 = Data15_g170579.NormalWS;
				Out_NormalRawOS15_g170579 = Data15_g170579.NormalRawOS;
				Out_NormalRawWS15_g170579 = Data15_g170579.NormalRawWS;
				Out_TangentOS15_g170579 = Data15_g170579.TangentOS;
				Out_ViewDirWS15_g170579 = Data15_g170579.ViewDirWS;
				Out_VertexData15_g170579 = Data15_g170579.VertexData;
				Out_MotionData15_g170579 = Data15_g170579.MotionData;
				Out_BoundsData15_g170579 = Data15_g170579.BoundsData;
				Out_RotationData15_g170579 = Data15_g170579.RotationData;
				float3 temp_output_218_24_g170577 = Out_PivotOS15_g170579;
				float3 In_PositionOS16_g170578 = ( Out_PositionOS15_g170579 - temp_output_218_24_g170577 );
				float3 In_PositionWS16_g170578 = Out_PositionWS15_g170579;
				float3 In_PositionWO16_g170578 = Out_PositionWO15_g170579;
				float3 In_PositionRawOS16_g170578 = Out_PositionRawOS15_g170579;
				float3 In_PositionAddOS16_g170578 = Out_PositionAddOS15_g170579;
				float3 In_PivotOS16_g170578 = temp_output_218_24_g170577;
				float3 In_PivotWS16_g170578 = Out_PivotWS15_g170579;
				float3 In_PivotWO16_g170578 = Out_PivotWO15_g170579;
				float3 In_NormalOS16_g170578 = Out_NormalOS15_g170579;
				float3 In_NormalWS16_g170578 = Out_NormalWS15_g170579;
				float3 In_NormalRawOS16_g170578 = Out_NormalRawOS15_g170579;
				float3 In_NormalRawWS16_g170578 = Out_NormalRawWS15_g170579;
				float4 In_TangentOS16_g170578 = Out_TangentOS15_g170579;
				float3 In_ViewDirWS16_g170578 = Out_ViewDirWS15_g170579;
				float4 In_VertexData16_g170578 = Out_VertexData15_g170579;
				float4 In_MotionData16_g170578 = Out_MotionData15_g170579;
				float4 In_BoundsData16_g170578 = Out_BoundsData15_g170579;
				float4 In_RotationData16_g170578 = Out_RotationData15_g170579;
				Data16_g170578.Dummy = In_Dummy16_g170578;
				Data16_g170578.PositionOS = In_PositionOS16_g170578;
				Data16_g170578.PositionWS = In_PositionWS16_g170578;
				Data16_g170578.PositionWO = In_PositionWO16_g170578;
				Data16_g170578.PositionRawOS = In_PositionRawOS16_g170578;
				Data16_g170578.PositionAddOS = In_PositionAddOS16_g170578;
				Data16_g170578.PivotOS = In_PivotOS16_g170578;
				Data16_g170578.PivotWS = In_PivotWS16_g170578;
				Data16_g170578.PivotWO = In_PivotWO16_g170578;
				Data16_g170578.NormalOS = In_NormalOS16_g170578;
				Data16_g170578.NormalWS = In_NormalWS16_g170578;
				Data16_g170578.NormalRawOS = In_NormalRawOS16_g170578;
				Data16_g170578.NormalRawWS = In_NormalRawWS16_g170578;
				Data16_g170578.TangentOS = In_TangentOS16_g170578;
				Data16_g170578.ViewDirWS = In_ViewDirWS16_g170578;
				Data16_g170578.VertexData = In_VertexData16_g170578;
				Data16_g170578.MotionData = In_MotionData16_g170578;
				Data16_g170578.BoundsData = In_BoundsData16_g170578;
				Data16_g170578.RotationData = In_RotationData16_g170578;
				TVEModelData Data15_g170581 = Data16_g170578;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_MotionData15_g170581 = Data15_g170581.MotionData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				half3 Model_PositionOS147_g170580 = Out_PositionOS15_g170581;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170582 = unity_CameraToWorld;
				float3 appendResult118_g170582 = (float3(break117_g170582[ 0 ][ 2 ] , break117_g170582[ 1 ][ 2 ] , break117_g170582[ 2 ][ 2 ]));
				float3 lerpResult209_g170580 = lerp( ase_worldViewDir , -appendResult118_g170582 , unity_OrthoParams.w);
				float3 break201_g170580 = cross( lerpResult209_g170580 , half3(0,1,0) );
				float3 appendResult196_g170580 = (float3(-break201_g170580.z , 0.0 , break201_g170580.x));
				float dotResult189_g170580 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170580 = abs( dotResult189_g170580 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170580 = ( Model_PositionOS147_g170580 + ( mul( unity_WorldToObject, float4( appendResult196_g170580 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170580 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170580).y ) ) );
				#else
				float3 staticSwitch211_g170580 = Model_PositionOS147_g170580;
				#endif
				half3 Final_Position178_g170580 = staticSwitch211_g170580;
				float3 In_PositionOS16_g170583 = Final_Position178_g170580;
				float3 In_PositionWS16_g170583 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170583 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170583 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170583 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170583 = Out_PivotOS15_g170581;
				float3 In_PivotWS16_g170583 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170583 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170583 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170583 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170583 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170583 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170583 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170583 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170583 = Out_VertexData15_g170581;
				float4 In_MotionData16_g170583 = Out_MotionData15_g170581;
				float4 In_BoundsData16_g170583 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170583 = Out_RotationData15_g170581;
				Data16_g170583.Dummy = In_Dummy16_g170583;
				Data16_g170583.PositionOS = In_PositionOS16_g170583;
				Data16_g170583.PositionWS = In_PositionWS16_g170583;
				Data16_g170583.PositionWO = In_PositionWO16_g170583;
				Data16_g170583.PositionRawOS = In_PositionRawOS16_g170583;
				Data16_g170583.PositionAddOS = In_PositionAddOS16_g170583;
				Data16_g170583.PivotOS = In_PivotOS16_g170583;
				Data16_g170583.PivotWS = In_PivotWS16_g170583;
				Data16_g170583.PivotWO = In_PivotWO16_g170583;
				Data16_g170583.NormalOS = In_NormalOS16_g170583;
				Data16_g170583.NormalWS = In_NormalWS16_g170583;
				Data16_g170583.NormalRawOS = In_NormalRawOS16_g170583;
				Data16_g170583.NormalRawWS = In_NormalRawWS16_g170583;
				Data16_g170583.TangentOS = In_TangentOS16_g170583;
				Data16_g170583.ViewDirWS = In_ViewDirWS16_g170583;
				Data16_g170583.VertexData = In_VertexData16_g170583;
				Data16_g170583.MotionData = In_MotionData16_g170583;
				Data16_g170583.BoundsData = In_BoundsData16_g170583;
				Data16_g170583.RotationData = In_RotationData16_g170583;
				TVEModelData Data15_g170670 = Data16_g170583;
				float Out_Dummy15_g170670 = 0;
				float3 Out_PositionOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170670 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170670 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170670 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170670 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170670 = float3( 0,0,0 );
				float4 Out_VertexData15_g170670 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170670 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170670 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170670 = float4( 0,0,0,0 );
				Out_Dummy15_g170670 = Data15_g170670.Dummy;
				Out_PositionOS15_g170670 = Data15_g170670.PositionOS;
				Out_PositionWS15_g170670 = Data15_g170670.PositionWS;
				Out_PositionWO15_g170670 = Data15_g170670.PositionWO;
				Out_PositionRawOS15_g170670 = Data15_g170670.PositionRawOS;
				Out_PositionAddOS15_g170670 = Data15_g170670.PositionAddOS;
				Out_PivotOS15_g170670 = Data15_g170670.PivotOS;
				Out_PivotWS15_g170670 = Data15_g170670.PivotWS;
				Out_PivotWO15_g170670 = Data15_g170670.PivotWO;
				Out_NormalOS15_g170670 = Data15_g170670.NormalOS;
				Out_NormalWS15_g170670 = Data15_g170670.NormalWS;
				Out_NormalRawOS15_g170670 = Data15_g170670.NormalRawOS;
				Out_NormalRawWS15_g170670 = Data15_g170670.NormalRawWS;
				Out_TangentOS15_g170670 = Data15_g170670.TangentOS;
				Out_ViewDirWS15_g170670 = Data15_g170670.ViewDirWS;
				Out_VertexData15_g170670 = Data15_g170670.VertexData;
				Out_MotionData15_g170670 = Data15_g170670.MotionData;
				Out_BoundsData15_g170670 = Data15_g170670.BoundsData;
				Out_RotationData15_g170670 = Data15_g170670.RotationData;
				half3 Model_PositionOS147_g170668 = Out_PositionOS15_g170670;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170668 = Out_PivotWO15_g170670;
				half3 Model_PivotWO162_g170668 = temp_output_210_19_g170668;
				float temp_output_7_0_g170669 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170669 = ( _SizeFadeDistMinValue - temp_output_7_0_g170669 );
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170672 = Data204_g170494;
				float Out_Dummy15_g170672 = 0;
				float4 Out_CoatParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170672 = float4( 0,0,0,0 );
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_CoatParams15_g170672 = Data15_g170672.CoatParams;
				Out_PaintParams15_g170672 = Data15_g170672.PaintParams;
				Out_GlowParams15_g170672 = Data15_g170672.GlowParams;
				Out_AtmoParams15_g170672= Data15_g170672.AtmoParams;
				Out_FadeParams15_g170672= Data15_g170672.FadeParams;
				Out_FormParams15_g170672 = Data15_g170672.FormParams;
				Out_LandParams15_g170672 = Data15_g170672.LandParams;
				Out_WindParams15_g170672 = Data15_g170672.WindParams;
				Out_PushParams15_g170672 = Data15_g170672.PushParams;
				half4 Input_FormParams188_g170668 = Out_FormParams15_g170672;
				float lerpResult213_g170668 = lerp( 1.0 , (Input_FormParams188_g170668).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170668 = lerpResult213_g170668;
				#else
				float staticSwitch194_g170668 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170668 = staticSwitch194_g170668;
				float temp_output_189_0_g170668 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170668 ) - temp_output_7_0_g170669 ) / ( temp_output_10_0_g170669 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170668 );
				float3 appendResult200_g170668 = (float3(temp_output_189_0_g170668 , temp_output_189_0_g170668 , temp_output_189_0_g170668));
				float3 appendResult201_g170668 = (float3(1.0 , temp_output_189_0_g170668 , 1.0));
				float3 lerpResult202_g170668 = lerp( appendResult200_g170668 , appendResult201_g170668 , _SizeFadeScaleMode);
				float3 lerpResult184_g170668 = lerp( temp_cast_5 , lerpResult202_g170668 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170668 = ( lerpResult184_g170668 * Model_PositionOS147_g170668 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170668 = temp_output_167_0_g170668;
				#else
				float3 staticSwitch199_g170668 = Model_PositionOS147_g170668;
				#endif
				half3 Final_Position178_g170668 = staticSwitch199_g170668;
				float3 In_PositionOS16_g170671 = Final_Position178_g170668;
				float3 In_PositionWS16_g170671 = Out_PositionWS15_g170670;
				float3 In_PositionWO16_g170671 = Out_PositionWO15_g170670;
				float3 In_PositionRawOS16_g170671 = Out_PositionRawOS15_g170670;
				float3 In_PositionAddOS16_g170671 = Out_PositionAddOS15_g170670;
				float3 temp_output_210_24_g170668 = Out_PivotOS15_g170670;
				float3 In_PivotOS16_g170671 = temp_output_210_24_g170668;
				float3 In_PivotWS16_g170671 = Out_PivotWS15_g170670;
				float3 In_PivotWO16_g170671 = temp_output_210_19_g170668;
				float3 In_NormalOS16_g170671 = Out_NormalOS15_g170670;
				float3 In_NormalWS16_g170671 = Out_NormalWS15_g170670;
				float3 In_NormalRawOS16_g170671 = Out_NormalRawOS15_g170670;
				float3 In_NormalRawWS16_g170671 = Out_NormalRawWS15_g170670;
				float4 In_TangentOS16_g170671 = Out_TangentOS15_g170670;
				float3 In_ViewDirWS16_g170671 = Out_ViewDirWS15_g170670;
				float4 In_VertexData16_g170671 = Out_VertexData15_g170670;
				float4 In_MotionData16_g170671 = Out_MotionData15_g170670;
				float4 In_BoundsData16_g170671 = Out_BoundsData15_g170670;
				float4 In_RotationData16_g170671 = Out_RotationData15_g170670;
				Data16_g170671.Dummy = In_Dummy16_g170671;
				Data16_g170671.PositionOS = In_PositionOS16_g170671;
				Data16_g170671.PositionWS = In_PositionWS16_g170671;
				Data16_g170671.PositionWO = In_PositionWO16_g170671;
				Data16_g170671.PositionRawOS = In_PositionRawOS16_g170671;
				Data16_g170671.PositionAddOS = In_PositionAddOS16_g170671;
				Data16_g170671.PivotOS = In_PivotOS16_g170671;
				Data16_g170671.PivotWS = In_PivotWS16_g170671;
				Data16_g170671.PivotWO = In_PivotWO16_g170671;
				Data16_g170671.NormalOS = In_NormalOS16_g170671;
				Data16_g170671.NormalWS = In_NormalWS16_g170671;
				Data16_g170671.NormalRawOS = In_NormalRawOS16_g170671;
				Data16_g170671.NormalRawWS = In_NormalRawWS16_g170671;
				Data16_g170671.TangentOS = In_TangentOS16_g170671;
				Data16_g170671.ViewDirWS = In_ViewDirWS16_g170671;
				Data16_g170671.VertexData = In_VertexData16_g170671;
				Data16_g170671.MotionData = In_MotionData16_g170671;
				Data16_g170671.BoundsData = In_BoundsData16_g170671;
				Data16_g170671.RotationData = In_RotationData16_g170671;
				TVEModelData Data15_g170717 = Data16_g170671;
				float Out_Dummy15_g170717 = 0;
				float3 Out_PositionOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170717 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170717 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170717 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170717 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170717 = float3( 0,0,0 );
				float4 Out_VertexData15_g170717 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170717 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170717 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170717 = float4( 0,0,0,0 );
				Out_Dummy15_g170717 = Data15_g170717.Dummy;
				Out_PositionOS15_g170717 = Data15_g170717.PositionOS;
				Out_PositionWS15_g170717 = Data15_g170717.PositionWS;
				Out_PositionWO15_g170717 = Data15_g170717.PositionWO;
				Out_PositionRawOS15_g170717 = Data15_g170717.PositionRawOS;
				Out_PositionAddOS15_g170717 = Data15_g170717.PositionAddOS;
				Out_PivotOS15_g170717 = Data15_g170717.PivotOS;
				Out_PivotWS15_g170717 = Data15_g170717.PivotWS;
				Out_PivotWO15_g170717 = Data15_g170717.PivotWO;
				Out_NormalOS15_g170717 = Data15_g170717.NormalOS;
				Out_NormalWS15_g170717 = Data15_g170717.NormalWS;
				Out_NormalRawOS15_g170717 = Data15_g170717.NormalRawOS;
				Out_NormalRawWS15_g170717 = Data15_g170717.NormalRawWS;
				Out_TangentOS15_g170717 = Data15_g170717.TangentOS;
				Out_ViewDirWS15_g170717 = Data15_g170717.ViewDirWS;
				Out_VertexData15_g170717 = Data15_g170717.VertexData;
				Out_MotionData15_g170717 = Data15_g170717.MotionData;
				Out_BoundsData15_g170717 = Data15_g170717.BoundsData;
				Out_RotationData15_g170717 = Data15_g170717.RotationData;
				float3 temp_output_1567_0_g170707 = Out_PositionOS15_g170717;
				float3 In_PositionOS16_g170721 = temp_output_1567_0_g170707;
				float3 temp_output_1567_16_g170707 = Out_PositionWS15_g170717;
				float3 In_PositionWS16_g170721 = temp_output_1567_16_g170707;
				float3 temp_output_1567_17_g170707 = Out_PositionWO15_g170717;
				float3 In_PositionWO16_g170721 = temp_output_1567_17_g170707;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170717;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170707 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170707 = Out_VertexData15_g170717;
				half4 Model_VertexMasks518_g170707 = temp_output_1567_29_g170707;
				float4 break1689_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170719 = _motion_small_vert_mode;
				float temp_output_30_0_g170719 = ( break1689_g170707.x * break33_g170719.x );
				float temp_output_29_0_g170719 = ( break1689_g170707.y * break33_g170719.y );
				float temp_output_31_0_g170719 = ( break1689_g170707.z * break33_g170719.z );
				float temp_output_28_0_g170719 = ( temp_output_30_0_g170719 + temp_output_29_0_g170719 + temp_output_31_0_g170719 + ( break1689_g170707.w * break33_g170719.w ) );
				float temp_output_1727_0_g170707 = temp_output_28_0_g170719;
				float4 temp_output_1567_30_g170707 = Out_BoundsData15_g170717;
				half4 Model_BoundsData1322_g170707 = temp_output_1567_30_g170707;
				float4 break33_g170722 = _motion_small_proc_mode;
				float temp_output_30_0_g170722 = ( (Model_BoundsData1322_g170707).z * break33_g170722.x );
				float temp_output_29_0_g170722 = ( (Model_BoundsData1322_g170707).w * break33_g170722.y );
				float temp_output_1734_0_g170707 = ( temp_output_30_0_g170722 + temp_output_29_0_g170722 );
				float lerpResult1906_g170707 = lerp( temp_output_1727_0_g170707 , temp_output_1734_0_g170707 , _motion_small_mask_mode);
				float enc1805_g170707 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170707 = DecodeFloatToVector2( enc1805_g170707 );
				float2 break1804_g170707 = localDecodeFloatToVector21805_g170707;
				half Small_Mask_Legacy1806_g170707 = break1804_g170707.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170707 = Small_Mask_Legacy1806_g170707;
				#else
				float staticSwitch1800_g170707 = lerpResult1906_g170707;
				#endif
				float clampResult17_g170724 = clamp( staticSwitch1800_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170725 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170725 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170725 );
				float temp_output_6_0_g170743 = saturate( ( ( clampResult17_g170724 - temp_output_7_0_g170725 ) / ( temp_output_10_0_g170725 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170743 = ( temp_output_6_0_g170743 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				half Small_Mask640_g170707 = staticSwitch14_g170743;
				half3 Model_PositionOS147_g170707 = temp_output_1567_0_g170707;
				float3 normalizeResult1832_g170707 = normalize( Model_PositionOS147_g170707 );
				half3 Model_PositionWO162_g170707 = temp_output_1567_17_g170707;
				float3 temp_output_1567_19_g170707 = Out_PivotWO15_g170717;
				half3 Model_PivotWO402_g170707 = temp_output_1567_19_g170707;
				float3 lerpResult829_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170707 = Out_MotionData15_g170717;
				half4 Model_MotionMasks489_g170707 = temp_output_1567_27_g170707;
				half3 Base_Position1394_g170707 = ( lerpResult829_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170750 = Base_Position1394_g170707;
				half Flow_TilllingRT1397_g170707 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170750 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTillingRT670_g170750 * 0.005 );
				half4 Noise_ParamsRT535_g170750 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170750, 0.0 );
				half Flow_Value1855_g170707 = _MotionIntensityValue;
				half Input_MotionValue629_g170750 = Flow_Value1855_g170707;
				float2 lerpResult709_g170750 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult712_g170750 = (float3(lerpResult709_g170750 , ( (Noise_ParamsRT535_g170750).b * Input_MotionValue629_g170750 )));
				float4 lerpResult627_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170750 = (lerpResult627_g170750).xy;
				half Input_MotionTilling321_g170750 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTilling321_g170750 * 0.005 );
				float2 temp_output_3_0_g170751 = Noise_Coord515_g170750;
				float2 temp_output_21_0_g170751 = (Global_WindDirection593_g170750*2.0 + -1.0);
				float lerpResult128_g170756 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170750 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170750 = ( ( lerpResult128_g170756 * Input_MotionSpeed62_g170750 ) * 0.02 );
				float temp_output_15_0_g170751 = Noise_Speed516_g170750;
				float temp_output_23_0_g170751 = frac( temp_output_15_0_g170751 );
				float4 lerpResult39_g170751 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * temp_output_23_0_g170751 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * frac( ( temp_output_15_0_g170751 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170751 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170750 = lerpResult39_g170751;
				half Input_MotionNoise552_g170750 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170750 = (lerpResult627_g170750).z;
				half Motion_Intensity720_g170750 = ( Global_WindIntensity576_g170750 * Input_MotionValue629_g170750 );
				float lerpResult701_g170750 = lerp( 1.0 , Input_MotionNoise552_g170750 , Motion_Intensity720_g170750);
				float2 lerpResult646_g170750 = lerp( Global_WindDirection593_g170750 , (Noise_Params685_g170750).rg , lerpResult701_g170750);
				float2 lerpResult724_g170750 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170750 , Motion_Intensity720_g170750);
				float3 appendResult708_g170750 = (float3(lerpResult724_g170750 , ( (Noise_Params685_g170750).a * Motion_Intensity720_g170750 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170750 = appendResult712_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170750 = appendResult708_g170750;
				#else
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170750 = staticSwitch673_g170750;
				float temp_output_136_0_g170757 = _global_wind_layer_value;
				float temp_output_19_0_g170759 = TVE_WindLayers[(int)temp_output_136_0_g170757];
				half3 Input_Position180_g170760 = Input_PositionWO419_g170750;
				float2 temp_output_75_0_g170760 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_82_0_g170760 = temp_output_136_0_g170757;
				float2 temp_output_119_0_g170760 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_7_0_g170765 = 1.0;
				float temp_output_10_0_g170765 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170765 );
				float4 lerpResult131_g170760 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170760,temp_output_82_0_g170760), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170760,temp_output_82_0_g170760), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170760 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170765 ) / temp_output_10_0_g170765 ) ));
				float4 temp_output_17_0_g170759 = lerpResult131_g170760;
				float4 temp_output_3_0_g170759 = TVE_WindParams;
				float4 ifLocalVar18_g170759 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170759 >= 0.5 )
				ifLocalVar18_g170759 = temp_output_17_0_g170759;
				else
				ifLocalVar18_g170759 = temp_output_3_0_g170759;
				float4 lerpResult22_g170759 = lerp( temp_output_3_0_g170759 , temp_output_17_0_g170759 , temp_output_19_0_g170759);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170759 = lerpResult22_g170759;
				#else
				float4 staticSwitch24_g170759 = ifLocalVar18_g170759;
				#endif
				float4 temp_output_610_0_g170750 = staticSwitch24_g170759;
				float2 lerpResult699_g170750 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult643_g170750 = (float3(lerpResult699_g170750 , ( (temp_output_610_0_g170750).b * Input_MotionValue629_g170750 )));
				float3 lerpResult623_g170750 = lerp( Motion_Local694_g170750 , appendResult643_g170750 , (temp_output_610_0_g170750).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#else
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170750 = staticSwitch693_g170750;
				#else
				float3 staticSwitch612_g170750 = Motion_Local694_g170750;
				#endif
				float3 temp_output_2275_567_g170707 = staticSwitch612_g170750;
				float2 break83_g170739 = ((temp_output_2275_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170739 = (float3(break83_g170739.x , 0.0 , break83_g170739.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170739 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170707 = ( lerpResult1411_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170767 = Small_Position1421_g170707;
				half Input_MotionTillingRT670_g170767 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTillingRT670_g170767 * 0.005 );
				half4 Noise_ParamsRT535_g170767 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170767, 0.0 );
				half Input_MotionValue629_g170767 = Flow_Value1855_g170707;
				float2 lerpResult709_g170767 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult712_g170767 = (float3(lerpResult709_g170767 , ( (Noise_ParamsRT535_g170767).b * Input_MotionValue629_g170767 )));
				float4 lerpResult627_g170767 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170767 = (lerpResult627_g170767).xy;
				half Input_MotionTilling321_g170767 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTilling321_g170767 * 0.005 );
				float2 temp_output_3_0_g170768 = Noise_Coord515_g170767;
				float2 temp_output_21_0_g170768 = (Global_WindDirection593_g170767*2.0 + -1.0);
				float lerpResult128_g170773 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170767 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170767 = ( ( lerpResult128_g170773 * Input_MotionSpeed62_g170767 ) * 0.02 );
				float temp_output_15_0_g170768 = Noise_Speed516_g170767;
				float temp_output_23_0_g170768 = frac( temp_output_15_0_g170768 );
				float4 lerpResult39_g170768 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * temp_output_23_0_g170768 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * frac( ( temp_output_15_0_g170768 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170768 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170767 = lerpResult39_g170768;
				half Input_MotionNoise552_g170767 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170767 = (lerpResult627_g170767).z;
				half Motion_Intensity720_g170767 = ( Global_WindIntensity576_g170767 * Input_MotionValue629_g170767 );
				float lerpResult701_g170767 = lerp( 1.0 , Input_MotionNoise552_g170767 , Motion_Intensity720_g170767);
				float2 lerpResult646_g170767 = lerp( Global_WindDirection593_g170767 , (Noise_Params685_g170767).rg , lerpResult701_g170767);
				float2 lerpResult724_g170767 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170767 , Motion_Intensity720_g170767);
				float3 appendResult708_g170767 = (float3(lerpResult724_g170767 , ( (Noise_Params685_g170767).a * Motion_Intensity720_g170767 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170767 = appendResult712_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170767 = appendResult708_g170767;
				#else
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170767 = staticSwitch673_g170767;
				float temp_output_136_0_g170774 = _global_wind_layer_value;
				float temp_output_19_0_g170776 = TVE_WindLayers[(int)temp_output_136_0_g170774];
				half3 Input_Position180_g170777 = Input_PositionWO419_g170767;
				float2 temp_output_75_0_g170777 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_82_0_g170777 = temp_output_136_0_g170774;
				float2 temp_output_119_0_g170777 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_7_0_g170782 = 1.0;
				float temp_output_10_0_g170782 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170782 );
				float4 lerpResult131_g170777 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170777,temp_output_82_0_g170777), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170777,temp_output_82_0_g170777), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170777 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170782 ) / temp_output_10_0_g170782 ) ));
				float4 temp_output_17_0_g170776 = lerpResult131_g170777;
				float4 temp_output_3_0_g170776 = TVE_WindParams;
				float4 ifLocalVar18_g170776 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170776 >= 0.5 )
				ifLocalVar18_g170776 = temp_output_17_0_g170776;
				else
				ifLocalVar18_g170776 = temp_output_3_0_g170776;
				float4 lerpResult22_g170776 = lerp( temp_output_3_0_g170776 , temp_output_17_0_g170776 , temp_output_19_0_g170776);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170776 = lerpResult22_g170776;
				#else
				float4 staticSwitch24_g170776 = ifLocalVar18_g170776;
				#endif
				float4 temp_output_610_0_g170767 = staticSwitch24_g170776;
				float2 lerpResult699_g170767 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult643_g170767 = (float3(lerpResult699_g170767 , ( (temp_output_610_0_g170767).b * Input_MotionValue629_g170767 )));
				float3 lerpResult623_g170767 = lerp( Motion_Local694_g170767 , appendResult643_g170767 , (temp_output_610_0_g170767).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#else
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170767 = staticSwitch693_g170767;
				#else
				float3 staticSwitch612_g170767 = Motion_Local694_g170767;
				#endif
				float3 temp_output_2276_567_g170707 = staticSwitch612_g170767;
				float2 break83_g170738 = ((temp_output_2276_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170738 = (float3(break83_g170738.x , 0.0 , break83_g170738.y));
				half2 Small_Direction1489_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170738 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170707 = Small_Direction1489_g170707;
				#else
				float2 staticSwitch1485_g170707 = Base_Direction893_g170707;
				#endif
				half2 Wave_Direction1486_g170707 = staticSwitch1485_g170707;
				float2 break1828_g170707 = -Wave_Direction1486_g170707;
				float3 appendResult1830_g170707 = (float3(break1828_g170707.x , 0.0 , break1828_g170707.y));
				float dotResult1831_g170707 = dot( normalizeResult1832_g170707 , appendResult1830_g170707 );
				float lerpResult1826_g170707 = lerp( 1.0 , (dotResult1831_g170707*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170707 = lerpResult1826_g170707;
				float2 break1939_g170707 = Small_Direction1489_g170707;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170767 = Input_MotionSpeed62_g170767;
				#else
				float staticSwitch734_g170767 = 4.0;
				#endif
				float mulTime113_g170783 = _Time.y * staticSwitch734_g170767;
				float lerpResult128_g170783 = lerp( mulTime113_g170783 , ( ( mulTime113_g170783 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170767 = Input_PositionWO419_g170767;
				half Small_Vertical2215_g170707 = ( sin( ( lerpResult128_g170783 + ( ( break726_g170767.x + break726_g170767.y + break726_g170767.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170707 = length( Small_Direction1489_g170707 );
				float3 appendResult2056_g170707 = (float3(break1939_g170707.x , ( Small_Vertical2215_g170707 * Small_Intensity2047_g170707 ) , break1939_g170707.y));
				float lerpResult2098_g170707 = lerp( 1.0 , ( Small_Intensity2047_g170707 * Small_Intensity2047_g170707 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170707 = (float3(lerpResult2098_g170707 , 1.0 , lerpResult2098_g170707));
				half3 Small_Squash789_g170707 = ( Small_Value2180_g170707 * Small_Mask640_g170707 * Motion_FrontMask1142_g170707 * appendResult2056_g170707 * appendResult2101_g170707 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170707 = Small_Squash789_g170707;
				#else
				float3 staticSwitch495_g170707 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170720 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170720 = ( break1710_g170707.x * break33_g170720.x );
				float temp_output_29_0_g170720 = ( break1710_g170707.y * break33_g170720.y );
				float temp_output_31_0_g170720 = ( break1710_g170707.z * break33_g170720.z );
				float temp_output_28_0_g170720 = ( temp_output_30_0_g170720 + temp_output_29_0_g170720 + temp_output_31_0_g170720 + ( break1710_g170707.w * break33_g170720.w ) );
				float temp_output_1729_0_g170707 = temp_output_28_0_g170720;
				float4 break33_g170723 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170723 = ( (Model_BoundsData1322_g170707).z * break33_g170723.x );
				float temp_output_29_0_g170723 = ( (Model_BoundsData1322_g170707).w * break33_g170723.y );
				float temp_output_1735_0_g170707 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 );
				float lerpResult1908_g170707 = lerp( temp_output_1729_0_g170707 , temp_output_1735_0_g170707 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170707 = break1804_g170707.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170707 = Tiny_Mask_Legacy1807_g170707;
				#else
				float staticSwitch1810_g170707 = lerpResult1908_g170707;
				#endif
				float clampResult17_g170726 = clamp( staticSwitch1810_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170727 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170727 );
				float temp_output_6_0_g170728 = saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170727 ) / ( temp_output_10_0_g170727 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				half Tiny_Mask218_g170707 = staticSwitch14_g170728;
				half3 Input_Position500_g170744 = Model_PositionWO162_g170707;
				half Input_MotionTilling321_g170744 = _MotionTinyTillingValue;
				float lerpResult128_g170748 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170744 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170744 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170744).xz * Input_MotionTilling321_g170744 * 0.03 ) + ( lerpResult128_g170748 * Input_MotionSpeed62_g170744 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170707 = temp_output_519_0_g170744;
				half3 Model_PositionWS1819_g170707 = temp_output_1567_16_g170707;
				half Motion_FadeMask1820_g170707 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170707 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170707 = abs( (temp_output_2275_567_g170707).z );
				half Small_Noise1427_g170707 = (temp_output_2276_567_g170707).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170707 = Small_Noise1427_g170707;
				#else
				float staticSwitch2013_g170707 = Base_Noise1159_g170707;
				#endif
				float temp_output_136_0_g170708 = _global_push_layer_value;
				float temp_output_19_0_g170709 = TVE_PushLayers[(int)temp_output_136_0_g170708];
				float3 lerpResult1547_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionPushPivotValue);
				half3 Push_Position1549_g170707 = ( lerpResult1547_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170710 = Push_Position1549_g170707;
				float2 temp_output_75_0_g170710 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_82_0_g170710 = temp_output_136_0_g170708;
				float2 temp_output_119_0_g170710 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_7_0_g170715 = 1.0;
				float temp_output_10_0_g170715 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170715 );
				float4 lerpResult131_g170710 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170710,temp_output_82_0_g170710), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170710,temp_output_82_0_g170710), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170710 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170715 ) / temp_output_10_0_g170715 ) ));
				float4 temp_output_17_0_g170709 = lerpResult131_g170710;
				float4 temp_output_3_0_g170709 = TVE_PushParams;
				float4 ifLocalVar18_g170709 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170709 >= 0.5 )
				ifLocalVar18_g170709 = temp_output_17_0_g170709;
				else
				ifLocalVar18_g170709 = temp_output_3_0_g170709;
				float4 lerpResult22_g170709 = lerp( temp_output_3_0_g170709 , temp_output_17_0_g170709 , temp_output_19_0_g170709);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170709 = lerpResult22_g170709;
				#else
				float4 staticSwitch24_g170709 = ifLocalVar18_g170709;
				#endif
				half4 Global_PushParams214_g170707 = staticSwitch24_g170709;
				half Push_Noise1977_g170707 = (Global_PushParams214_g170707).b;
				half Push_Value1501_g170707 = _MotionPushIntensityValue;
				half Push_Influence1504_g170707 = saturate( ( (Global_PushParams214_g170707).a * Push_Value1501_g170707 ) );
				float lerpResult2016_g170707 = lerp( staticSwitch2013_g170707 , Push_Noise1977_g170707 , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170707 = lerpResult2016_g170707;
				#else
				float staticSwitch2012_g170707 = staticSwitch2013_g170707;
				#endif
				half Wave_Noise1475_g170707 = staticSwitch2012_g170707;
				half3 Tiny_Flutter1451_g170707 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170707 * Tiny_Direction859_g170707 * Motion_FadeMask1820_g170707 * Flow_Value1855_g170707 * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170707 = Tiny_Flutter1451_g170707;
				#else
				float3 staticSwitch414_g170707 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170707 = ( staticSwitch495_g170707 + staticSwitch414_g170707 );
				float3 In_PositionAddOS16_g170721 = Final_PositionADD1569_g170707;
				float3 temp_output_1567_24_g170707 = Out_PivotOS15_g170717;
				float3 In_PivotOS16_g170721 = temp_output_1567_24_g170707;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170717;
				float3 In_PivotWO16_g170721 = temp_output_1567_19_g170707;
				float3 temp_output_1567_20_g170707 = Out_NormalOS15_g170717;
				float3 In_NormalOS16_g170721 = temp_output_1567_20_g170707;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170717;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170717;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170717;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170717;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170717;
				float4 In_VertexData16_g170721 = temp_output_1567_29_g170707;
				float4 In_MotionData16_g170721 = temp_output_1567_27_g170707;
				float4 In_BoundsData16_g170721 = temp_output_1567_30_g170707;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170707 = _MotionBaseIntensityValue;
				float4 break748_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170731 = _motion_base_vert_mode;
				float temp_output_30_0_g170731 = ( break748_g170707.x * break33_g170731.x );
				float temp_output_29_0_g170731 = ( break748_g170707.y * break33_g170731.y );
				float temp_output_31_0_g170731 = ( break748_g170707.z * break33_g170731.z );
				float temp_output_28_0_g170731 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 + temp_output_31_0_g170731 + ( break748_g170707.w * break33_g170731.w ) );
				float temp_output_1731_0_g170707 = temp_output_28_0_g170731;
				float4 break33_g170732 = _motion_base_proc_mode;
				float temp_output_30_0_g170732 = ( (Model_BoundsData1322_g170707).z * break33_g170732.x );
				float temp_output_29_0_g170732 = ( (Model_BoundsData1322_g170707).w * break33_g170732.y );
				float temp_output_1733_0_g170707 = ( temp_output_30_0_g170732 + temp_output_29_0_g170732 );
				float lerpResult1904_g170707 = lerp( temp_output_1731_0_g170707 , temp_output_1733_0_g170707 , _motion_base_mask_mode);
				float clampResult17_g170729 = clamp( lerpResult1904_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170730 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170730 );
				float temp_output_6_0_g170742 = saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170742 = ( temp_output_6_0_g170742 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170742 = temp_output_6_0_g170742;
				#endif
				half Base_Mask217_g170707 = staticSwitch14_g170742;
				half Base_Intensity2041_g170707 = length( Base_Direction893_g170707 );
				float lerpResult2090_g170707 = lerp( 1.0 , ( Base_Intensity2041_g170707 * Base_Intensity2041_g170707 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170707 = ( Base_Value2242_g170707 * Base_Mask217_g170707 * Base_Direction893_g170707 * lerpResult2090_g170707 );
				#else
				float2 staticSwitch1573_g170707 = temp_cast_54;
				#endif
				float4 break1864_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170735 = _motion_push_vert_mode;
				float temp_output_30_0_g170735 = ( break1864_g170707.x * break33_g170735.x );
				float temp_output_29_0_g170735 = ( break1864_g170707.y * break33_g170735.y );
				float temp_output_31_0_g170735 = ( break1864_g170707.z * break33_g170735.z );
				float temp_output_28_0_g170735 = ( temp_output_30_0_g170735 + temp_output_29_0_g170735 + temp_output_31_0_g170735 + ( break1864_g170707.w * break33_g170735.w ) );
				float temp_output_1867_0_g170707 = temp_output_28_0_g170735;
				float4 break33_g170736 = _motion_push_proc_mode;
				float temp_output_30_0_g170736 = ( (Model_BoundsData1322_g170707).z * break33_g170736.x );
				float temp_output_29_0_g170736 = ( (Model_BoundsData1322_g170707).w * break33_g170736.y );
				float temp_output_1868_0_g170707 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 );
				float lerpResult1910_g170707 = lerp( temp_output_1867_0_g170707 , temp_output_1868_0_g170707 , _motion_push_mask_mode);
				float clampResult17_g170733 = clamp( lerpResult1910_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170734 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170734 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170734 );
				float temp_output_6_0_g170737 = saturate( ( ( clampResult17_g170733 - temp_output_7_0_g170734 ) / ( temp_output_10_0_g170734 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Push_Mask1877_g170707 = staticSwitch14_g170737;
				float2 break83_g170740 = ((Global_PushParams214_g170707).rg*2.0 + -1.0);
				float3 appendResult79_g170740 = (float3(break83_g170740.x , 0.0 , break83_g170740.y));
				half2 Push_Direction1972_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170740 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170707 = lerp( staticSwitch1573_g170707 , ( Push_Mask1877_g170707 * Push_Value1501_g170707 * Push_Direction1972_g170707 ) , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170707 = lerpResult1496_g170707;
				#else
				float2 staticSwitch1506_g170707 = staticSwitch1573_g170707;
				#endif
				half2 Base_Bending1440_g170707 = staticSwitch1506_g170707;
				float4 appendResult2023_g170707 = (float4(Base_Bending1440_g170707 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170707 = appendResult2023_g170707;
				float4 In_RotationData16_g170721 = Final_RotationData1570_g170707;
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.MotionData = In_MotionData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				TVEModelData Data15_g170956 = Data16_g170721;
				float Out_Dummy15_g170956 = 0;
				float3 Out_PositionOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170956 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170956 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170956 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170956 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170956 = float3( 0,0,0 );
				float4 Out_VertexData15_g170956 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170956 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170956 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170956 = float4( 0,0,0,0 );
				Out_Dummy15_g170956 = Data15_g170956.Dummy;
				Out_PositionOS15_g170956 = Data15_g170956.PositionOS;
				Out_PositionWS15_g170956 = Data15_g170956.PositionWS;
				Out_PositionWO15_g170956 = Data15_g170956.PositionWO;
				Out_PositionRawOS15_g170956 = Data15_g170956.PositionRawOS;
				Out_PositionAddOS15_g170956 = Data15_g170956.PositionAddOS;
				Out_PivotOS15_g170956 = Data15_g170956.PivotOS;
				Out_PivotWS15_g170956 = Data15_g170956.PivotWS;
				Out_PivotWO15_g170956 = Data15_g170956.PivotWO;
				Out_NormalOS15_g170956 = Data15_g170956.NormalOS;
				Out_NormalWS15_g170956 = Data15_g170956.NormalWS;
				Out_NormalRawOS15_g170956 = Data15_g170956.NormalRawOS;
				Out_NormalRawWS15_g170956 = Data15_g170956.NormalRawWS;
				Out_TangentOS15_g170956 = Data15_g170956.TangentOS;
				Out_ViewDirWS15_g170956 = Data15_g170956.ViewDirWS;
				Out_VertexData15_g170956 = Data15_g170956.VertexData;
				Out_MotionData15_g170956 = Data15_g170956.MotionData;
				Out_BoundsData15_g170956 = Data15_g170956.BoundsData;
				Out_RotationData15_g170956 = Data15_g170956.RotationData;
				half3 Model_PositionOS147_g170955 = Out_PositionOS15_g170956;
				half3 Input_False58_g170958 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170959 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170960 = VertexPos40_g170959;
				float3 appendResult74_g170960 = (float3(VertexPos40_g170960.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170960 = appendResult74_g170960;
				float3 break84_g170960 = VertexPos40_g170960;
				float3 appendResult81_g170960 = (float3(0.0 , break84_g170960.y , break84_g170960.z));
				half3 VertexPosOtherAxis82_g170960 = appendResult81_g170960;
				float4 temp_output_1567_33_g170955 = Out_RotationData15_g170956;
				half4 Model_VertexBend1569_g170955 = temp_output_1567_33_g170955;
				half2 Angle44_g170959 = (Model_VertexBend1569_g170955).xy;
				half Angle44_g170960 = (Angle44_g170959).y;
				half3 VertexPos40_g170961 = ( VertexPosRotationAxis50_g170960 + ( VertexPosOtherAxis82_g170960 * cos( Angle44_g170960 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170960 ) * sin( Angle44_g170960 ) ) );
				float3 appendResult74_g170961 = (float3(0.0 , 0.0 , VertexPos40_g170961.z));
				half3 VertexPosRotationAxis50_g170961 = appendResult74_g170961;
				float3 break84_g170961 = VertexPos40_g170961;
				float3 appendResult81_g170961 = (float3(break84_g170961.x , break84_g170961.y , 0.0));
				half3 VertexPosOtherAxis82_g170961 = appendResult81_g170961;
				half Angle44_g170961 = -(Angle44_g170959).x;
				half3 Input_True57_g170958 = ( VertexPosRotationAxis50_g170961 + ( VertexPosOtherAxis82_g170961 * cos( Angle44_g170961 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170961 ) * sin( Angle44_g170961 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch65_g170958 = Input_False58_g170958;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch67_g170958 = staticSwitch65_g170958;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch69_g170958 = staticSwitch67_g170958;
				#endif
				float3 temp_output_1578_0_g170955 = staticSwitch69_g170958;
				float3 temp_output_1567_31_g170955 = Out_PositionAddOS15_g170956;
				half3 Model_PositionADD1568_g170955 = temp_output_1567_31_g170955;
				half3 Final_PositionOS178_g170955 = ( temp_output_1578_0_g170955 + Model_PositionADD1568_g170955 );
				float3 In_PositionOS16_g170957 = Final_PositionOS178_g170955;
				float3 In_PositionWS16_g170957 = Out_PositionWS15_g170956;
				float3 In_PositionWO16_g170957 = Out_PositionWO15_g170956;
				float3 In_PositionRawOS16_g170957 = Out_PositionRawOS15_g170956;
				float3 In_PositionAddOS16_g170957 = temp_output_1567_31_g170955;
				float3 In_PivotOS16_g170957 = Out_PivotOS15_g170956;
				float3 In_PivotWS16_g170957 = Out_PivotWS15_g170956;
				float3 In_PivotWO16_g170957 = Out_PivotWO15_g170956;
				float3 In_NormalOS16_g170957 = Out_NormalOS15_g170956;
				float3 In_NormalWS16_g170957 = Out_NormalWS15_g170956;
				float3 In_NormalRawOS16_g170957 = Out_NormalRawOS15_g170956;
				float3 In_NormalRawWS16_g170957 = Out_NormalRawWS15_g170956;
				float4 In_TangentOS16_g170957 = Out_TangentOS15_g170956;
				float3 In_ViewDirWS16_g170957 = Out_ViewDirWS15_g170956;
				float4 In_VertexData16_g170957 = Out_VertexData15_g170956;
				float4 In_MotionData16_g170957 = Out_MotionData15_g170956;
				float4 In_BoundsData16_g170957 = Out_BoundsData15_g170956;
				float4 In_RotationData16_g170957 = temp_output_1567_33_g170955;
				Data16_g170957.Dummy = In_Dummy16_g170957;
				Data16_g170957.PositionOS = In_PositionOS16_g170957;
				Data16_g170957.PositionWS = In_PositionWS16_g170957;
				Data16_g170957.PositionWO = In_PositionWO16_g170957;
				Data16_g170957.PositionRawOS = In_PositionRawOS16_g170957;
				Data16_g170957.PositionAddOS = In_PositionAddOS16_g170957;
				Data16_g170957.PivotOS = In_PivotOS16_g170957;
				Data16_g170957.PivotWS = In_PivotWS16_g170957;
				Data16_g170957.PivotWO = In_PivotWO16_g170957;
				Data16_g170957.NormalOS = In_NormalOS16_g170957;
				Data16_g170957.NormalWS = In_NormalWS16_g170957;
				Data16_g170957.NormalRawOS = In_NormalRawOS16_g170957;
				Data16_g170957.NormalRawWS = In_NormalRawWS16_g170957;
				Data16_g170957.TangentOS = In_TangentOS16_g170957;
				Data16_g170957.ViewDirWS = In_ViewDirWS16_g170957;
				Data16_g170957.VertexData = In_VertexData16_g170957;
				Data16_g170957.MotionData = In_MotionData16_g170957;
				Data16_g170957.BoundsData = In_BoundsData16_g170957;
				Data16_g170957.RotationData = In_RotationData16_g170957;
				TVEModelData Data15_g170979 = Data16_g170957;
				float Out_Dummy15_g170979 = 0;
				float3 Out_PositionOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170979 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170979 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170979 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170979 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170979 = float3( 0,0,0 );
				float4 Out_VertexData15_g170979 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170979 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170979 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170979 = float4( 0,0,0,0 );
				Out_Dummy15_g170979 = Data15_g170979.Dummy;
				Out_PositionOS15_g170979 = Data15_g170979.PositionOS;
				Out_PositionWS15_g170979 = Data15_g170979.PositionWS;
				Out_PositionWO15_g170979 = Data15_g170979.PositionWO;
				Out_PositionRawOS15_g170979 = Data15_g170979.PositionRawOS;
				Out_PositionAddOS15_g170979 = Data15_g170979.PositionAddOS;
				Out_PivotOS15_g170979 = Data15_g170979.PivotOS;
				Out_PivotWS15_g170979 = Data15_g170979.PivotWS;
				Out_PivotWO15_g170979 = Data15_g170979.PivotWO;
				Out_NormalOS15_g170979 = Data15_g170979.NormalOS;
				Out_NormalWS15_g170979 = Data15_g170979.NormalWS;
				Out_NormalRawOS15_g170979 = Data15_g170979.NormalRawOS;
				Out_NormalRawWS15_g170979 = Data15_g170979.NormalRawWS;
				Out_TangentOS15_g170979 = Data15_g170979.TangentOS;
				Out_ViewDirWS15_g170979 = Data15_g170979.ViewDirWS;
				Out_VertexData15_g170979 = Data15_g170979.VertexData;
				Out_MotionData15_g170979 = Data15_g170979.MotionData;
				Out_BoundsData15_g170979 = Data15_g170979.BoundsData;
				Out_RotationData15_g170979 = Data15_g170979.RotationData;
				float3 In_PositionOS16_g170980 = Out_PositionOS15_g170979;
				float3 In_PositionWS16_g170980 = Out_PositionWS15_g170979;
				float3 temp_output_1567_17_g170978 = Out_PositionWO15_g170979;
				float3 In_PositionWO16_g170980 = temp_output_1567_17_g170978;
				float3 temp_output_1567_26_g170978 = Out_PositionRawOS15_g170979;
				float3 In_PositionRawOS16_g170980 = temp_output_1567_26_g170978;
				float3 In_PositionAddOS16_g170980 = Out_PositionAddOS15_g170979;
				float3 In_PivotOS16_g170980 = Out_PivotOS15_g170979;
				float3 In_PivotWS16_g170980 = Out_PivotWS15_g170979;
				float3 In_PivotWO16_g170980 = Out_PivotWO15_g170979;
				half3 Model_NormalOS1568_g170978 = Out_NormalOS15_g170979;
				float3 lerpResult1589_g170978 = lerp( Model_NormalOS1568_g170978 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170978 = temp_output_1567_26_g170978;
				float3 normalizeResult1594_g170978 = ASESafeNormalize( ( Model_PositionRAW1592_g170978 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170978 = lerp( lerpResult1589_g170978 , normalizeResult1594_g170978 , _NormalSphereValue);
				half3 Input_False58_g170993 = lerpResult1585_g170978;
				half3 VertexPos40_g170982 = lerpResult1585_g170978;
				half3 VertexPos40_g170983 = VertexPos40_g170982;
				float3 appendResult74_g170983 = (float3(VertexPos40_g170983.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170983 = appendResult74_g170983;
				float3 break84_g170983 = VertexPos40_g170983;
				float3 appendResult81_g170983 = (float3(0.0 , break84_g170983.y , break84_g170983.z));
				half3 VertexPosOtherAxis82_g170983 = appendResult81_g170983;
				float4 temp_output_1567_33_g170978 = Out_RotationData15_g170979;
				half4 Model_RotationData1583_g170978 = temp_output_1567_33_g170978;
				half2 Angle44_g170982 = Model_RotationData1583_g170978.xy;
				half Angle44_g170983 = (Angle44_g170982).y;
				half3 VertexPos40_g170984 = ( VertexPosRotationAxis50_g170983 + ( VertexPosOtherAxis82_g170983 * cos( Angle44_g170983 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170983 ) * sin( Angle44_g170983 ) ) );
				float3 appendResult74_g170984 = (float3(0.0 , 0.0 , VertexPos40_g170984.z));
				half3 VertexPosRotationAxis50_g170984 = appendResult74_g170984;
				float3 break84_g170984 = VertexPos40_g170984;
				float3 appendResult81_g170984 = (float3(break84_g170984.x , break84_g170984.y , 0.0));
				half3 VertexPosOtherAxis82_g170984 = appendResult81_g170984;
				half Angle44_g170984 = -(Angle44_g170982).x;
				float3 lerpResult1591_g170978 = lerp( lerpResult1585_g170978 , ( VertexPosRotationAxis50_g170984 + ( VertexPosOtherAxis82_g170984 * cos( Angle44_g170984 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170984 ) * sin( Angle44_g170984 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170993 = lerpResult1591_g170978;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch65_g170993 = Input_False58_g170993;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch67_g170993 = staticSwitch65_g170993;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch69_g170993 = staticSwitch67_g170993;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170978 = staticSwitch69_g170993;
				#else
				float3 staticSwitch1595_g170978 = lerpResult1585_g170978;
				#endif
				float4 temp_output_1567_29_g170978 = Out_VertexData15_g170979;
				half4 Model_VertexData1608_g170978 = temp_output_1567_29_g170978;
				float4 break1683_g170978 = Model_VertexData1608_g170978;
				float4 break33_g170986 = _normal_vert_mode;
				float temp_output_30_0_g170986 = ( break1683_g170978.x * break33_g170986.x );
				float temp_output_29_0_g170986 = ( break1683_g170978.y * break33_g170986.y );
				float temp_output_31_0_g170986 = ( break1683_g170978.z * break33_g170986.z );
				float temp_output_28_0_g170986 = ( temp_output_30_0_g170986 + temp_output_29_0_g170986 + temp_output_31_0_g170986 + ( break1683_g170978.w * break33_g170986.w ) );
				float clampResult17_g170988 = clamp( temp_output_28_0_g170986 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170987 = _NormalMeshRemap.x;
				float temp_output_10_0_g170987 = ( _NormalMeshRemap.y - temp_output_7_0_g170987 );
				float lerpResult1695_g170978 = lerp( 1.0 , saturate( ( ( clampResult17_g170988 - temp_output_7_0_g170987 ) / ( temp_output_10_0_g170987 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170989 = lerpResult1695_g170978;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170989 = ( temp_output_6_0_g170989 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170989 = temp_output_6_0_g170989;
				#endif
				float temp_output_1690_0_g170978 = staticSwitch14_g170989;
				half Normal_MeskMask1691_g170978 = temp_output_1690_0_g170978;
				half Normal_Proj_Mask1647_g170978 = 1.0;
				float temp_output_1699_0_g170978 = ( Normal_MeskMask1691_g170978 * Normal_Proj_Mask1647_g170978 );
				float3 lerpResult1670_g170978 = lerp( Model_NormalOS1568_g170978 , staticSwitch1595_g170978 , temp_output_1699_0_g170978);
				half3 Final_NormalOS178_g170978 = lerpResult1670_g170978;
				float3 In_NormalOS16_g170980 = Final_NormalOS178_g170978;
				float3 temp_output_1567_21_g170978 = Out_NormalWS15_g170979;
				float3 In_NormalWS16_g170980 = temp_output_1567_21_g170978;
				float3 In_NormalRawOS16_g170980 = Out_NormalRawOS15_g170979;
				float3 In_NormalRawWS16_g170980 = Out_NormalRawWS15_g170979;
				float4 In_TangentOS16_g170980 = Out_TangentOS15_g170979;
				float3 In_ViewDirWS16_g170980 = Out_ViewDirWS15_g170979;
				float4 In_VertexData16_g170980 = temp_output_1567_29_g170978;
				float4 In_MotionData16_g170980 = Out_MotionData15_g170979;
				float4 In_BoundsData16_g170980 = Out_BoundsData15_g170979;
				float4 In_RotationData16_g170980 = temp_output_1567_33_g170978;
				Data16_g170980.Dummy = In_Dummy16_g170980;
				Data16_g170980.PositionOS = In_PositionOS16_g170980;
				Data16_g170980.PositionWS = In_PositionWS16_g170980;
				Data16_g170980.PositionWO = In_PositionWO16_g170980;
				Data16_g170980.PositionRawOS = In_PositionRawOS16_g170980;
				Data16_g170980.PositionAddOS = In_PositionAddOS16_g170980;
				Data16_g170980.PivotOS = In_PivotOS16_g170980;
				Data16_g170980.PivotWS = In_PivotWS16_g170980;
				Data16_g170980.PivotWO = In_PivotWO16_g170980;
				Data16_g170980.NormalOS = In_NormalOS16_g170980;
				Data16_g170980.NormalWS = In_NormalWS16_g170980;
				Data16_g170980.NormalRawOS = In_NormalRawOS16_g170980;
				Data16_g170980.NormalRawWS = In_NormalRawWS16_g170980;
				Data16_g170980.TangentOS = In_TangentOS16_g170980;
				Data16_g170980.ViewDirWS = In_ViewDirWS16_g170980;
				Data16_g170980.VertexData = In_VertexData16_g170980;
				Data16_g170980.MotionData = In_MotionData16_g170980;
				Data16_g170980.BoundsData = In_BoundsData16_g170980;
				Data16_g170980.RotationData = In_RotationData16_g170980;
				TVEModelData Data15_g171002 = Data16_g170980;
				float Out_Dummy15_g171002 = 0;
				float3 Out_PositionOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171002 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171002 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171002 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171002 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171002 = float3( 0,0,0 );
				float4 Out_VertexData15_g171002 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171002 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171002 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171002 = float4( 0,0,0,0 );
				Out_Dummy15_g171002 = Data15_g171002.Dummy;
				Out_PositionOS15_g171002 = Data15_g171002.PositionOS;
				Out_PositionWS15_g171002 = Data15_g171002.PositionWS;
				Out_PositionWO15_g171002 = Data15_g171002.PositionWO;
				Out_PositionRawOS15_g171002 = Data15_g171002.PositionRawOS;
				Out_PositionAddOS15_g171002 = Data15_g171002.PositionAddOS;
				Out_PivotOS15_g171002 = Data15_g171002.PivotOS;
				Out_PivotWS15_g171002 = Data15_g171002.PivotWS;
				Out_PivotWO15_g171002 = Data15_g171002.PivotWO;
				Out_NormalOS15_g171002 = Data15_g171002.NormalOS;
				Out_NormalWS15_g171002 = Data15_g171002.NormalWS;
				Out_NormalRawOS15_g171002 = Data15_g171002.NormalRawOS;
				Out_NormalRawWS15_g171002 = Data15_g171002.NormalRawWS;
				Out_TangentOS15_g171002 = Data15_g171002.TangentOS;
				Out_ViewDirWS15_g171002 = Data15_g171002.ViewDirWS;
				Out_VertexData15_g171002 = Data15_g171002.VertexData;
				Out_MotionData15_g171002 = Data15_g171002.MotionData;
				Out_BoundsData15_g171002 = Data15_g171002.BoundsData;
				Out_RotationData15_g171002 = Data15_g171002.RotationData;
				float3 temp_output_217_24_g171001 = Out_PivotOS15_g171002;
				float3 In_PositionOS16_g171003 = ( Out_PositionOS15_g171002 + temp_output_217_24_g171001 );
				float3 In_PositionWS16_g171003 = Out_PositionWS15_g171002;
				float3 In_PositionWO16_g171003 = Out_PositionWO15_g171002;
				float3 In_PositionRawOS16_g171003 = Out_PositionRawOS15_g171002;
				float3 In_PositionAddOS16_g171003 = Out_PositionAddOS15_g171002;
				float3 In_PivotOS16_g171003 = temp_output_217_24_g171001;
				float3 In_PivotWS16_g171003 = Out_PivotWS15_g171002;
				float3 In_PivotWO16_g171003 = Out_PivotWO15_g171002;
				float3 In_NormalOS16_g171003 = Out_NormalOS15_g171002;
				float3 In_NormalWS16_g171003 = Out_NormalWS15_g171002;
				float3 In_NormalRawOS16_g171003 = Out_NormalRawOS15_g171002;
				float3 In_NormalRawWS16_g171003 = Out_NormalRawWS15_g171002;
				float4 In_TangentOS16_g171003 = Out_TangentOS15_g171002;
				float3 In_ViewDirWS16_g171003 = Out_ViewDirWS15_g171002;
				float4 In_VertexData16_g171003 = Out_VertexData15_g171002;
				float4 In_MotionData16_g171003 = Out_MotionData15_g171002;
				float4 In_BoundsData16_g171003 = Out_BoundsData15_g171002;
				float4 In_RotationData16_g171003 = Out_RotationData15_g171002;
				Data16_g171003.Dummy = In_Dummy16_g171003;
				Data16_g171003.PositionOS = In_PositionOS16_g171003;
				Data16_g171003.PositionWS = In_PositionWS16_g171003;
				Data16_g171003.PositionWO = In_PositionWO16_g171003;
				Data16_g171003.PositionRawOS = In_PositionRawOS16_g171003;
				Data16_g171003.PositionAddOS = In_PositionAddOS16_g171003;
				Data16_g171003.PivotOS = In_PivotOS16_g171003;
				Data16_g171003.PivotWS = In_PivotWS16_g171003;
				Data16_g171003.PivotWO = In_PivotWO16_g171003;
				Data16_g171003.NormalOS = In_NormalOS16_g171003;
				Data16_g171003.NormalWS = In_NormalWS16_g171003;
				Data16_g171003.NormalRawOS = In_NormalRawOS16_g171003;
				Data16_g171003.NormalRawWS = In_NormalRawWS16_g171003;
				Data16_g171003.TangentOS = In_TangentOS16_g171003;
				Data16_g171003.ViewDirWS = In_ViewDirWS16_g171003;
				Data16_g171003.VertexData = In_VertexData16_g171003;
				Data16_g171003.MotionData = In_MotionData16_g171003;
				Data16_g171003.BoundsData = In_BoundsData16_g171003;
				Data16_g171003.RotationData = In_RotationData16_g171003;
				TVEModelData Data15_g171008 = Data16_g171003;
				float Out_Dummy15_g171008 = 0;
				float3 Out_PositionOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171008 = float3( 0,0,0 );
				float4 Out_VertexData15_g171008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171008 = float4( 0,0,0,0 );
				Out_Dummy15_g171008 = Data15_g171008.Dummy;
				Out_PositionOS15_g171008 = Data15_g171008.PositionOS;
				Out_PositionWS15_g171008 = Data15_g171008.PositionWS;
				Out_PositionWO15_g171008 = Data15_g171008.PositionWO;
				Out_PositionRawOS15_g171008 = Data15_g171008.PositionRawOS;
				Out_PositionAddOS15_g171008 = Data15_g171008.PositionAddOS;
				Out_PivotOS15_g171008 = Data15_g171008.PivotOS;
				Out_PivotWS15_g171008 = Data15_g171008.PivotWS;
				Out_PivotWO15_g171008 = Data15_g171008.PivotWO;
				Out_NormalOS15_g171008 = Data15_g171008.NormalOS;
				Out_NormalWS15_g171008 = Data15_g171008.NormalWS;
				Out_NormalRawOS15_g171008 = Data15_g171008.NormalRawOS;
				Out_NormalRawWS15_g171008 = Data15_g171008.NormalRawWS;
				Out_TangentOS15_g171008 = Data15_g171008.TangentOS;
				Out_ViewDirWS15_g171008 = Data15_g171008.ViewDirWS;
				Out_VertexData15_g171008 = Data15_g171008.VertexData;
				Out_MotionData15_g171008 = Data15_g171008.MotionData;
				Out_BoundsData15_g171008 = Data15_g171008.BoundsData;
				Out_RotationData15_g171008 = Data15_g171008.RotationData;
				float3 temp_output_31_0_g171005 = Out_PositionOS15_g171008;
				
				o.ase_texcoord11.xyz = vertexToFrag73_g170478;
				o.ase_texcoord12.xyz = vertexToFrag76_g170478;
				float temp_output_6_0_g170741 = ( _MotionHighlightValue * Motion_FadeMask1820_g170707 * ( Base_Mask217_g170707 * Base_Mask217_g170707 ) * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170741 = ( temp_output_6_0_g170741 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170741 = temp_output_6_0_g170741;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170741;
				float4 appendResult23_g170813 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170813 = appendResult23_g170813;
				o.ase_texcoord13 = vertexToFrag24_g170813;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g171005 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171008;
				v.tangent = Out_TangentOS15_g171008;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
				o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif
				#ifdef LIGHTMAP_ON
				o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						#ifdef VERTEXLIGHT_ON
						o.sh += Shade4PointLights (
							unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
							unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
							unity_4LightAtten0, worldPos, worldNormal);
						#endif
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif

				float localBreakData4_g171011 = ( 0.0 );
				float localCompData3_g170996 = ( 0.0 );
				TVEVisualData Data3_g170996 = (TVEVisualData)0;
				half Dummy145_g170994 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170996 = Dummy145_g170994;
				float localBreakData4_g170995 = ( 0.0 );
				float localCompData3_g170973 = ( 0.0 );
				TVEVisualData Data3_g170973 = (TVEVisualData)0;
				half Dummy145_g170963 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170973 = Dummy145_g170963;
				float localBreakData4_g170972 = ( 0.0 );
				float localCompData3_g170945 = ( 0.0 );
				TVEVisualData Data3_g170945 = (TVEVisualData)0;
				half Dummy594_g170942 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170945 = Dummy594_g170942;
				float localBreakData4_g170944 = ( 0.0 );
				float localCompData3_g170930 = ( 0.0 );
				TVEVisualData Data3_g170930 = (TVEVisualData)0;
				half Dummy594_g170929 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170930 = Dummy594_g170929;
				float localBreakData4_g170940 = ( 0.0 );
				float localCompData3_g170902 = ( 0.0 );
				TVEVisualData Data3_g170902 = (TVEVisualData)0;
				half Dummy594_g170900 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170902 = Dummy594_g170900;
				float localBreakData4_g170901 = ( 0.0 );
				float localCompData3_g170867 = ( 0.0 );
				TVEVisualData Data3_g170867 = (TVEVisualData)0;
				half Dummy594_g170864 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170867 = Dummy594_g170864;
				float localBreakData4_g170865 = ( 0.0 );
				float localCompData3_g170863 = ( 0.0 );
				TVEVisualData Data3_g170863 = (TVEVisualData)0;
				float In_Dummy3_g170863 = 0.0;
				float localBreakData4_g170862 = ( 0.0 );
				float localCompData3_g170841 = ( 0.0 );
				TVEVisualData Data3_g170841 = (TVEVisualData)0;
				half Dummy205_g170838 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170841 = Dummy205_g170838;
				float localBreakData4_g170840 = ( 0.0 );
				float localCompData3_g170835 = ( 0.0 );
				TVEVisualData Data3_g170835 = (TVEVisualData)0;
				half Dummy205_g170814 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170835 = Dummy205_g170814;
				float localBreakData4_g170836 = ( 0.0 );
				float localCompData3_g170807 = ( 0.0 );
				TVEVisualData Data3_g170807 = (TVEVisualData)0;
				half Dummy220_g170804 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170807 = Dummy220_g170804;
				float localBreakData4_g170806 = ( 0.0 );
				float localCompData3_g170797 = ( 0.0 );
				TVEVisualData Data3_g170797 = (TVEVisualData)0;
				half Dummy220_g170794 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170797 = Dummy220_g170794;
				float localBreakData4_g170796 = ( 0.0 );
				float localCompData3_g170786 = ( 0.0 );
				TVEVisualData Data3_g170786 = (TVEVisualData)0;
				half Dummy202_g170784 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170786 = Dummy202_g170784;
				float localBreakData4_g170785 = ( 0.0 );
				float localCompData3_g170691 = ( 0.0 );
				TVEVisualData Data3_g170691 = (TVEVisualData)0;
				half4 Dummy944_g170674 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170691 = Dummy944_g170674.x;
				float localBreakData4_g170690 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170667 = Dummy946_g170634.x;
				float localBreakData4_g170646 = ( 0.0 );
				float localCompData3_g170633 = ( 0.0 );
				TVEVisualData Data3_g170633 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170633 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainAlbedoTex;
				float localFilterTexture19_g170629 = ( 0.0 );
				SamplerState SamplerDefault19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170629 = SamplerDefault19_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170629 = SamplerDefault19_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170629 = SamplerPoint19_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170629 = SamplerLow19_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170629 = SamplerMedium19_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170629 = SamplerHigh19_g170629;
				#endif
				SamplerState Sampler276_g170626 = SS19_g170629;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainAlbedoTex;
				SamplerState Sampler275_g170626 = SS19_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainAlbedoTex;
				SamplerState Sampler238_g170626 = SS19_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170632 = Data16_g170493;
				float Out_Dummy15_g170632 = 0;
				float3 Out_PositionWS15_g170632 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170632 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170632 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170632 = float3( 0,0,0 );
				float4 Out_VertexData15_g170632 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170632 = float4( 0,0,0,0 );
				Out_Dummy15_g170632 = Data15_g170632.Dummy;
				Out_PositionWS15_g170632 = Data15_g170632.PositionWS;
				Out_PositionWO15_g170632 = Data15_g170632.PositionWO;
				Out_PivotWS15_g170632 = Data15_g170632.PivotWS;
				Out_PivotWO15_g170632 = Data15_g170632.PivotWO;
				Out_NormalWS15_g170632 = Data15_g170632.NormalWS;
				Out_ViewDirWS15_g170632 = Data15_g170632.ViewDirWS;
				Out_VertexData15_g170632 = Data15_g170632.VertexData;
				Out_BoundsData15_g170632 = Data15_g170632.BoundsData;
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170632;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainAlbedoTex;
				SamplerState Sampler246_g170626 = SS19_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170632;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainAlbedoTex;
				SamplerState Sampler234_g170626 = SS19_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainAlbedoTex;
				SamplerState Sampler263_g170626 = SS19_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170628) = _MainShaderTex;
				float localFilterTexture30_g170631 = ( 0.0 );
				SamplerState SamplerDefault30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170631 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170631 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170631 = SamplerDefault30_g170631;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170631 = SamplerDefault30_g170631;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170631 = SamplerPoint30_g170631;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170631 = SamplerLow30_g170631;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170631 = SamplerMedium30_g170631;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170631 = SamplerHigh30_g170631;
				#endif
				SamplerState Sampler276_g170628 = SS30_g170631;
				float4 temp_output_37_0_g170628 = Local_Coords180_g170617;
				half4 Coords276_g170628 = temp_output_37_0_g170628;
				half2 TexCoord276_g170628 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170628 = SampleMain( Texture276_g170628 , Sampler276_g170628 , Coords276_g170628 , TexCoord276_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170628) = _MainShaderTex;
				SamplerState Sampler275_g170628 = SS30_g170631;
				half4 Coords275_g170628 = temp_output_37_0_g170628;
				half2 TexCoord275_g170628 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170628 = SampleExtra( Texture275_g170628 , Sampler275_g170628 , Coords275_g170628 , TexCoord275_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170628) = _MainShaderTex;
				SamplerState Sampler238_g170628 = SS30_g170631;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				float3 temp_output_279_0_g170628 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170628) = _MainShaderTex;
				SamplerState Sampler246_g170628 = SS30_g170631;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				float3 temp_output_280_0_g170628 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170628) = _MainShaderTex;
				SamplerState Sampler234_g170628 = SS30_g170631;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170628) = _MainShaderTex;
				SamplerState Sampler263_g170628 = SS30_g170631;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170623 = _MainMultiRemap.x;
				float temp_output_10_0_g170623 = ( _MainMultiRemap.y - temp_output_7_0_g170623 );
				half Local_MultiMask78_g170617 = saturate( ( ( clampResult17_g170622 - temp_output_7_0_g170623 ) / ( temp_output_10_0_g170623 + 0.0001 ) ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170633 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170633 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainNormalTex;
				float localFilterTexture29_g170630 = ( 0.0 );
				SamplerState SamplerDefault29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170630 = SamplerDefault29_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170630 = SamplerDefault29_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170630 = SamplerPoint29_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170630 = SamplerLow29_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170630 = SamplerMedium29_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170630 = SamplerHigh29_g170630;
				#endif
				SamplerState Sampler276_g170627 = SS29_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainNormalTex;
				SamplerState Sampler275_g170627 = SS29_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainNormalTex;
				SamplerState Sampler238_g170627 = SS29_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainNormalTex;
				SamplerState Sampler246_g170627 = SS29_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainNormalTex;
				SamplerState Sampler234_g170627 = SS29_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainNormalTex;
				SamplerState Sampler263_g170627 = SS29_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170633 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170633 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170633 = Local_Masks109_g170617;
				float4 In_Emissive3_g170633 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170633 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170633 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170633 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170633 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170633 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170633 = temp_cast_4;
				float In_Transmission3_g170633 = 1.0;
				float In_Thickness3_g170633 = 0.0;
				float In_Diffusion3_g170633 = 0.0;
				Data3_g170633.Dummy = In_Dummy3_g170633;
				Data3_g170633.Albedo = In_Albedo3_g170633;
				Data3_g170633.AlbedoRaw = In_AlbedoRaw3_g170633;
				Data3_g170633.NormalTS = In_NormalTS3_g170633;
				Data3_g170633.NormalWS = In_NormalWS3_g170633;
				Data3_g170633.Shader = In_Shader3_g170633;
				Data3_g170633.Emissive= In_Emissive3_g170633;
				Data3_g170633.MultiMask = In_MultiMask3_g170633;
				Data3_g170633.Grayscale = In_Grayscale3_g170633;
				Data3_g170633.Luminosity = In_Luminosity3_g170633;
				Data3_g170633.AlphaClip = In_AlphaClip3_g170633;
				Data3_g170633.AlphaFade = In_AlphaFade3_g170633;
				Data3_g170633.Translucency = In_Translucency3_g170633;
				Data3_g170633.Transmission = In_Transmission3_g170633;
				Data3_g170633.Thickness = In_Thickness3_g170633;
				Data3_g170633.Diffusion = In_Diffusion3_g170633;
				TVEVisualData Data4_g170646 = Data3_g170633;
				float Out_Dummy4_g170646 = 0;
				float3 Out_Albedo4_g170646 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170646 = float2( 0,0 );
				float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
				float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170646 = 0;
				float Out_Grayscale4_g170646 = 0;
				float Out_Luminosity4_g170646 = 0;
				float Out_AlphaClip4_g170646 = 0;
				float Out_AlphaFade4_g170646 = 0;
				float3 Out_Translucency4_g170646 = float3( 0,0,0 );
				float Out_Transmission4_g170646 = 0;
				float Out_Thickness4_g170646 = 0;
				float Out_Diffusion4_g170646 = 0;
				Out_Dummy4_g170646 = Data4_g170646.Dummy;
				Out_Albedo4_g170646 = Data4_g170646.Albedo;
				Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
				Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
				Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
				Out_Shader4_g170646 = Data4_g170646.Shader;
				Out_Emissive4_g170646= Data4_g170646.Emissive;
				Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
				Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
				Out_Luminosity4_g170646= Data4_g170646.Luminosity;
				Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
				Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
				Out_Translucency4_g170646 = Data4_g170646.Translucency;
				Out_Transmission4_g170646 = Data4_g170646.Transmission;
				Out_Thickness4_g170646 = Data4_g170646.Thickness;
				Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170646;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170663 = ( 0.0 );
				SamplerState SamplerDefault19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170663 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170663 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170663 = SamplerDefault19_g170663;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170663 = SamplerDefault19_g170663;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170663 = SamplerPoint19_g170663;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170663 = SamplerLow19_g170663;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170663 = SamplerMedium19_g170663;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170663 = SamplerHigh19_g170663;
				#endif
				SamplerState Sampler276_g170635 = SS19_g170663;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170663;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170663;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170666 = Data16_g170493;
				float Out_Dummy15_g170666 = 0;
				float3 Out_PositionWS15_g170666 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170666 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170666 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170666 = float3( 0,0,0 );
				float4 Out_VertexData15_g170666 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_PositionWS15_g170666 = Data15_g170666.PositionWS;
				Out_PositionWO15_g170666 = Data15_g170666.PositionWO;
				Out_PivotWS15_g170666 = Data15_g170666.PivotWS;
				Out_PivotWO15_g170666 = Data15_g170666.PivotWO;
				Out_NormalWS15_g170666 = Data15_g170666.NormalWS;
				Out_ViewDirWS15_g170666 = Data15_g170666.ViewDirWS;
				Out_VertexData15_g170666 = Data15_g170666.VertexData;
				Out_BoundsData15_g170666 = Data15_g170666.BoundsData;
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170666;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170663;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170666;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170663;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170663;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170665 = ( 0.0 );
				SamplerState SamplerDefault30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170665 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170665 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170665 = SamplerDefault30_g170665;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170665 = SamplerDefault30_g170665;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170665 = SamplerPoint30_g170665;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170665 = SamplerLow30_g170665;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170665 = SamplerMedium30_g170665;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170665 = SamplerHigh30_g170665;
				#endif
				SamplerState Sampler276_g170637 = SS30_g170665;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170665;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170665;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170665;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170665;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170665;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170642 = _SecondMultiRemap.x;
				float temp_output_10_0_g170642 = ( _SecondMultiRemap.y - temp_output_7_0_g170642 );
				float temp_output_765_0_g170634 = saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170642 ) / ( temp_output_10_0_g170642 + 0.0001 ) ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170659 = 2.0;
				#else
				float staticSwitch1_g170659 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170659 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170650 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170649 = _SecondMaskRemap.x;
				float temp_output_10_0_g170649 = ( _SecondMaskRemap.y - temp_output_7_0_g170649 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170650 - temp_output_7_0_g170649 ) / ( temp_output_10_0_g170649 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170646;
				float clampResult17_g170651 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _SecondProjRemap.x;
				float temp_output_10_0_g170652 = ( _SecondProjRemap.y - temp_output_7_0_g170652 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170666;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170653 = _second_vert_mode;
				float temp_output_30_0_g170653 = ( break965_g170634.x * break33_g170653.x );
				float temp_output_29_0_g170653 = ( break965_g170634.y * break33_g170653.y );
				float temp_output_31_0_g170653 = ( break965_g170634.z * break33_g170653.z );
				float temp_output_28_0_g170653 = ( temp_output_30_0_g170653 + temp_output_29_0_g170653 + temp_output_31_0_g170653 + ( break965_g170634.w * break33_g170653.w ) );
				float clampResult17_g170647 = clamp( temp_output_28_0_g170653 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170648 = _SecondMeshRemap.x;
				float temp_output_10_0_g170648 = ( _SecondMeshRemap.y - temp_output_7_0_g170648 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170648 ) / ( temp_output_10_0_g170648 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170661 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170661 = ( temp_output_6_0_g170661 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170661 = temp_output_6_0_g170661;
				#endif
				float temp_output_987_0_g170634 = staticSwitch14_g170661;
				half Blend_VertMask918_g170634 = temp_output_987_0_g170634;
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170645 = Data204_g170494;
				float Out_Dummy15_g170645 = 0;
				float4 Out_CoatParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170645 = float4( 0,0,0,0 );
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_CoatParams15_g170645 = Data15_g170645.CoatParams;
				Out_PaintParams15_g170645 = Data15_g170645.PaintParams;
				Out_GlowParams15_g170645 = Data15_g170645.GlowParams;
				Out_AtmoParams15_g170645= Data15_g170645.AtmoParams;
				Out_FadeParams15_g170645= Data15_g170645.FadeParams;
				Out_FormParams15_g170645 = Data15_g170645.FormParams;
				Out_LandParams15_g170645 = Data15_g170645.LandParams;
				Out_WindParams15_g170645 = Data15_g170645.WindParams;
				Out_PushParams15_g170645 = Data15_g170645.PushParams;
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170645;
				float lerpResult1013_g170634 = lerp( 1.0 , (Global_CoatParams975_g170634).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = lerpResult1013_g170634;
				#else
				float staticSwitch971_g170634 = 1.0;
				#endif
				half Blend_GlobalMask972_g170634 = staticSwitch971_g170634;
				float temp_output_432_0_g170634 = ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 );
				float clampResult17_g170655 = clamp( temp_output_432_0_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _SecondBlendRemap.x;
				float temp_output_10_0_g170654 = ( _SecondBlendRemap.y - temp_output_7_0_g170654 );
				half Blend_Mask412_g170634 = ( saturate( ( ( clampResult17_g170655 - temp_output_7_0_g170654 ) / ( temp_output_10_0_g170654 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170667 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170667 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170646;
				float2 lerpResult40_g170657 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170664 = ( 0.0 );
				SamplerState SamplerDefault29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170664 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170664 = SamplerDefault29_g170664;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170664 = SamplerDefault29_g170664;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170664 = SamplerPoint29_g170664;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170664 = SamplerLow29_g170664;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170664 = SamplerMedium29_g170664;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170664 = SamplerHigh29_g170664;
				#endif
				SamplerState Sampler276_g170636 = SS29_g170664;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170664;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170664;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170664;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170664;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170664;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170657 = ( lerpResult40_g170657 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170657 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170667 = Final_NormalTS612_g170634;
				float3 appendResult68_g170658 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170658 = appendResult68_g170658;
				float3 worldNormal74_g170658 = normalize( float3(dot(tanToWorld0,tanNormal74_g170658), dot(tanToWorld1,tanNormal74_g170658), dot(tanToWorld2,tanNormal74_g170658)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170658;
				float3 In_NormalWS3_g170667 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170646;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170667 = Final_Masks613_g170634;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170646;
				float3 temp_output_3_0_g170660 = Final_Albedo601_g170634;
				float dotResult20_g170660 = dot( temp_output_3_0_g170660 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170660;
				float In_Grayscale3_g170667 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170667 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170646;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170667 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170646;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170667 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170646;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170667 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170646;
				float In_Transmission3_g170667 = Out_Transmission4_g170646;
				float In_Thickness3_g170667 = Out_Thickness4_g170646;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170646;
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				TVEVisualData Data4_g170690 = Data3_g170667;
				float Out_Dummy4_g170690 = 0;
				float3 Out_Albedo4_g170690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170690 = float2( 0,0 );
				float3 Out_NormalWS4_g170690 = float3( 0,0,0 );
				float4 Out_Shader4_g170690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170690 = 0;
				float Out_Grayscale4_g170690 = 0;
				float Out_Luminosity4_g170690 = 0;
				float Out_AlphaClip4_g170690 = 0;
				float Out_AlphaFade4_g170690 = 0;
				float3 Out_Translucency4_g170690 = float3( 0,0,0 );
				float Out_Transmission4_g170690 = 0;
				float Out_Thickness4_g170690 = 0;
				float Out_Diffusion4_g170690 = 0;
				Out_Dummy4_g170690 = Data4_g170690.Dummy;
				Out_Albedo4_g170690 = Data4_g170690.Albedo;
				Out_AlbedoRaw4_g170690 = Data4_g170690.AlbedoRaw;
				Out_NormalTS4_g170690 = Data4_g170690.NormalTS;
				Out_NormalWS4_g170690 = Data4_g170690.NormalWS;
				Out_Shader4_g170690 = Data4_g170690.Shader;
				Out_Emissive4_g170690= Data4_g170690.Emissive;
				Out_MultiMask4_g170690 = Data4_g170690.MultiMask;
				Out_Grayscale4_g170690 = Data4_g170690.Grayscale;
				Out_Luminosity4_g170690= Data4_g170690.Luminosity;
				Out_AlphaClip4_g170690 = Data4_g170690.AlphaClip;
				Out_AlphaFade4_g170690 = Data4_g170690.AlphaFade;
				Out_Translucency4_g170690 = Data4_g170690.Translucency;
				Out_Transmission4_g170690 = Data4_g170690.Transmission;
				Out_Thickness4_g170690 = Data4_g170690.Thickness;
				Out_Diffusion4_g170690 = Data4_g170690.Diffusion;
				half3 Visual_Albedo527_g170674 = Out_Albedo4_g170690;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170675) = _ThirdAlbedoTex;
				float localFilterTexture19_g170703 = ( 0.0 );
				SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170703 = SamplerDefault19_g170703;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170703 = SamplerDefault19_g170703;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170703 = SamplerPoint19_g170703;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170703 = SamplerLow19_g170703;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170703 = SamplerMedium19_g170703;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170703 = SamplerHigh19_g170703;
				#endif
				SamplerState Sampler276_g170675 = SS19_g170703;
				half4 Local_LayerCoords790_g170674 = _third_coord_value;
				float4 temp_output_37_0_g170675 = Local_LayerCoords790_g170674;
				half4 Coords276_g170675 = temp_output_37_0_g170675;
				half2 TexCoord276_g170675 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170675 = SampleMain( Texture276_g170675 , Sampler276_g170675 , Coords276_g170675 , TexCoord276_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170675 = SS19_g170703;
				half4 Coords275_g170675 = temp_output_37_0_g170675;
				half2 TexCoord275_g170675 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170675 = SampleExtra( Texture275_g170675 , Sampler275_g170675 , Coords275_g170675 , TexCoord275_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170675 = SS19_g170703;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				TVEModelData Data15_g170706 = Data16_g170493;
				float Out_Dummy15_g170706 = 0;
				float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
				float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
				Out_Dummy15_g170706 = Data15_g170706.Dummy;
				Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
				Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
				Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
				Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
				Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
				Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
				Out_VertexData15_g170706 = Data15_g170706.VertexData;
				Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
				half3 Model_PositionWO636_g170674 = Out_PositionWO15_g170706;
				float3 temp_output_279_0_g170675 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170675 = SS19_g170703;
				half4 Coords246_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition246_g170675 = temp_output_279_0_g170675;
				half3 Model_NormalWS869_g170674 = Out_NormalWS15_g170706;
				float3 temp_output_280_0_g170675 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170675 = temp_output_280_0_g170675;
				half4 localSamplePlanar3D246_g170675 = SamplePlanar3D( Texture246_g170675 , Sampler246_g170675 , Coords246_g170675 , WorldPosition246_g170675 , WorldNormal246_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170675 = SS19_g170703;
				float4 Coords234_g170675 = temp_output_37_0_g170675;
				float3 WorldPosition234_g170675 = temp_output_279_0_g170675;
				float4 localSampleStochastic2D234_g170675 = SampleStochastic2D( Texture234_g170675 , Sampler234_g170675 , Coords234_g170675 , WorldPosition234_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170675 = SS19_g170703;
				half4 Coords263_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition263_g170675 = temp_output_279_0_g170675;
				half3 WorldNormal263_g170675 = temp_output_280_0_g170675;
				half4 localSampleStochastic3D263_g170675 = SampleStochastic3D( Texture263_g170675 , Sampler263_g170675 , Coords263_g170675 , WorldPosition263_g170675 , WorldNormal263_g170675 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170674 = localSampleExtra275_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170674 = localSamplePlanar2D238_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170674 = localSamplePlanar3D246_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170674 = localSampleStochastic2D234_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170674 = localSampleStochastic3D263_g170675;
				#else
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#endif
				half4 Local_AlbedoTex777_g170674 = staticSwitch693_g170674;
				float3 lerpResult716_g170674 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170674).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170674 = lerpResult716_g170674;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170677) = _ThirdShaderTex;
				float localFilterTexture30_g170705 = ( 0.0 );
				SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170705 = SamplerDefault30_g170705;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170705 = SamplerDefault30_g170705;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170705 = SamplerPoint30_g170705;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170705 = SamplerLow30_g170705;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170705 = SamplerMedium30_g170705;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170705 = SamplerHigh30_g170705;
				#endif
				SamplerState Sampler276_g170677 = SS30_g170705;
				float4 temp_output_37_0_g170677 = Local_LayerCoords790_g170674;
				half4 Coords276_g170677 = temp_output_37_0_g170677;
				half2 TexCoord276_g170677 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170677 = SampleMain( Texture276_g170677 , Sampler276_g170677 , Coords276_g170677 , TexCoord276_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170677) = _ThirdShaderTex;
				SamplerState Sampler275_g170677 = SS30_g170705;
				half4 Coords275_g170677 = temp_output_37_0_g170677;
				half2 TexCoord275_g170677 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170677 = SampleExtra( Texture275_g170677 , Sampler275_g170677 , Coords275_g170677 , TexCoord275_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170677) = _ThirdShaderTex;
				SamplerState Sampler238_g170677 = SS30_g170705;
				half4 Coords238_g170677 = temp_output_37_0_g170677;
				float3 temp_output_279_0_g170677 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170677 = temp_output_279_0_g170677;
				half4 localSamplePlanar2D238_g170677 = SamplePlanar2D( Texture238_g170677 , Sampler238_g170677 , Coords238_g170677 , WorldPosition238_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170677) = _ThirdShaderTex;
				SamplerState Sampler246_g170677 = SS30_g170705;
				half4 Coords246_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition246_g170677 = temp_output_279_0_g170677;
				float3 temp_output_280_0_g170677 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170677 = temp_output_280_0_g170677;
				half4 localSamplePlanar3D246_g170677 = SamplePlanar3D( Texture246_g170677 , Sampler246_g170677 , Coords246_g170677 , WorldPosition246_g170677 , WorldNormal246_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170677) = _ThirdShaderTex;
				SamplerState Sampler234_g170677 = SS30_g170705;
				float4 Coords234_g170677 = temp_output_37_0_g170677;
				float3 WorldPosition234_g170677 = temp_output_279_0_g170677;
				float4 localSampleStochastic2D234_g170677 = SampleStochastic2D( Texture234_g170677 , Sampler234_g170677 , Coords234_g170677 , WorldPosition234_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170677) = _ThirdShaderTex;
				SamplerState Sampler263_g170677 = SS30_g170705;
				half4 Coords263_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition263_g170677 = temp_output_279_0_g170677;
				half3 WorldNormal263_g170677 = temp_output_280_0_g170677;
				half4 localSampleStochastic3D263_g170677 = SampleStochastic3D( Texture263_g170677 , Sampler263_g170677 , Coords263_g170677 , WorldPosition263_g170677 , WorldNormal263_g170677 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170674 = localSampleExtra275_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170674 = localSamplePlanar2D238_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170674 = localSamplePlanar3D246_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170674 = localSampleStochastic2D234_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170674 = localSampleStochastic3D263_g170677;
				#else
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#endif
				half4 Local_ShaderTex775_g170674 = staticSwitch722_g170674;
				float lerpResult739_g170674 = lerp( 1.0 , (Local_ShaderTex775_g170674).y , _ThirdOcclusionValue);
				float4 appendResult749_g170674 = (float4(( (Local_ShaderTex775_g170674).x * _ThirdMetallicValue ) , lerpResult739_g170674 , (Local_ShaderTex775_g170674).z , ( (Local_ShaderTex775_g170674).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170674 = appendResult749_g170674;
				float clampResult17_g170680 = clamp( (Local_Masks750_g170674).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170681 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170681 = ( _ThirdMultiRemap.y - temp_output_7_0_g170681 );
				float temp_output_765_0_g170674 = saturate( ( ( clampResult17_g170680 - temp_output_7_0_g170681 ) / ( temp_output_10_0_g170681 + 0.0001 ) ) );
				half Local_MultiMask767_g170674 = temp_output_765_0_g170674;
				float lerpResult705_g170674 = lerp( 1.0 , Local_MultiMask767_g170674 , _ThirdColorMode);
				float4 lerpResult706_g170674 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170674);
				half3 Local_ColorRGB774_g170674 = (lerpResult706_g170674).rgb;
				half3 Local_Albedo768_g170674 = ( Local_AlbedoRGB771_g170674 * Local_ColorRGB774_g170674 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170698 = 2.0;
				#else
				float staticSwitch1_g170698 = 4.594794;
				#endif
				float3 lerpResult985_g170674 = lerp( Local_Albedo768_g170674 , ( Visual_Albedo527_g170674 * Local_Albedo768_g170674 * staticSwitch1_g170698 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
				SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170674 = _third_mask_coord_value;
				float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170674;
				half4 Coords276_g170701 = temp_output_37_0_g170701;
				half2 TexCoord276_g170701 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
				SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
				half4 Coords275_g170701 = temp_output_37_0_g170701;
				half2 TexCoord275_g170701 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
				SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
				half4 Coords238_g170701 = temp_output_37_0_g170701;
				float3 temp_output_279_0_g170701 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
				half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
				SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
				half4 Coords246_g170701 = temp_output_37_0_g170701;
				half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
				float3 temp_output_280_0_g170701 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
				half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170674 = localSampleExtra275_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170674 = localSamplePlanar2D238_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170674 = localSamplePlanar3D246_g170701;
				#else
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#endif
				half4 Local_MaskTex861_g170674 = staticSwitch817_g170674;
				float clampResult17_g170685 = clamp( (Local_MaskTex861_g170674).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170686 = ( _ThirdMaskRemap.y - temp_output_7_0_g170686 );
				float lerpResult1028_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170674 = lerpResult1028_g170674;
				half4 Model_VertexMasks960_g170674 = Out_VertexData15_g170706;
				float4 break961_g170674 = Model_VertexMasks960_g170674;
				float4 break33_g170689 = _third_vert_mode;
				float temp_output_30_0_g170689 = ( break961_g170674.x * break33_g170689.x );
				float temp_output_29_0_g170689 = ( break961_g170674.y * break33_g170689.y );
				float temp_output_31_0_g170689 = ( break961_g170674.z * break33_g170689.z );
				float temp_output_28_0_g170689 = ( temp_output_30_0_g170689 + temp_output_29_0_g170689 + temp_output_31_0_g170689 + ( break961_g170674.w * break33_g170689.w ) );
				float clampResult17_g170683 = clamp( temp_output_28_0_g170689 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170684 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170684 = ( _ThirdMeshRemap.y - temp_output_7_0_g170684 );
				float lerpResult1026_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170683 - temp_output_7_0_g170684 ) / ( temp_output_10_0_g170684 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170700 = lerpResult1026_g170674;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_992_0_g170674 = staticSwitch14_g170700;
				half Blend_VertMask913_g170674 = temp_output_992_0_g170674;
				half3 Visual_NormalWS953_g170674 = Out_NormalWS4_g170690;
				float clampResult17_g170687 = clamp( saturate( (Visual_NormalWS953_g170674).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _ThirdProjRemap.x;
				float temp_output_10_0_g170688 = ( _ThirdProjRemap.y - temp_output_7_0_g170688 );
				float lerpResult1004_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170687 - temp_output_7_0_g170688 ) / ( temp_output_10_0_g170688 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170674 = lerpResult1004_g170674;
				TVEGlobalData Data15_g170692 = Data204_g170494;
				float Out_Dummy15_g170692 = 0;
				float4 Out_CoatParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170692 = float4( 0,0,0,0 );
				Out_Dummy15_g170692 = Data15_g170692.Dummy;
				Out_CoatParams15_g170692 = Data15_g170692.CoatParams;
				Out_PaintParams15_g170692 = Data15_g170692.PaintParams;
				Out_GlowParams15_g170692 = Data15_g170692.GlowParams;
				Out_AtmoParams15_g170692= Data15_g170692.AtmoParams;
				Out_FadeParams15_g170692= Data15_g170692.FadeParams;
				Out_FormParams15_g170692 = Data15_g170692.FormParams;
				Out_LandParams15_g170692 = Data15_g170692.LandParams;
				Out_WindParams15_g170692 = Data15_g170692.WindParams;
				Out_PushParams15_g170692 = Data15_g170692.PushParams;
				half4 Global_CoatParams972_g170674 = Out_CoatParams15_g170692;
				float lerpResult1023_g170674 = lerp( 1.0 , (Global_CoatParams972_g170674).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170674 = lerpResult1023_g170674;
				#else
				float staticSwitch965_g170674 = 1.0;
				#endif
				half Blend_GlobalMask968_g170674 = staticSwitch965_g170674;
				float temp_output_432_0_g170674 = ( _ThirdIntensityValue * Detail_TexMask429_g170674 * Blend_VertMask913_g170674 * Blend_ProjMask912_g170674 * Blend_GlobalMask968_g170674 );
				float clampResult17_g170694 = clamp( temp_output_432_0_g170674 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170693 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170693 = ( _ThirdBlendRemap.y - temp_output_7_0_g170693 );
				half Detail_Mask412_g170674 = ( saturate( ( ( clampResult17_g170694 - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170674 = lerp( Visual_Albedo527_g170674 , lerpResult985_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170674 = lerpResult989_g170674;
				#else
				float3 staticSwitch415_g170674 = Visual_Albedo527_g170674;
				#endif
				half3 Final_Albedo601_g170674 = staticSwitch415_g170674;
				float3 In_Albedo3_g170691 = Final_Albedo601_g170674;
				float3 In_AlbedoRaw3_g170691 = Final_Albedo601_g170674;
				half2 Visual_NormalTS529_g170674 = Out_NormalTS4_g170690;
				float2 lerpResult40_g170696 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170674 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170676) = _ThirdNormalTex;
				float localFilterTexture29_g170704 = ( 0.0 );
				SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170704 = SamplerDefault29_g170704;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170704 = SamplerDefault29_g170704;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170704 = SamplerPoint29_g170704;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170704 = SamplerLow29_g170704;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170704 = SamplerMedium29_g170704;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170704 = SamplerHigh29_g170704;
				#endif
				SamplerState Sampler276_g170676 = SS29_g170704;
				float4 temp_output_37_0_g170676 = Local_LayerCoords790_g170674;
				half4 Coords276_g170676 = temp_output_37_0_g170676;
				half2 TexCoord276_g170676 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170676 = SampleMain( Texture276_g170676 , Sampler276_g170676 , Coords276_g170676 , TexCoord276_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170676) = _ThirdNormalTex;
				SamplerState Sampler275_g170676 = SS29_g170704;
				half4 Coords275_g170676 = temp_output_37_0_g170676;
				half2 TexCoord275_g170676 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170676 = SampleExtra( Texture275_g170676 , Sampler275_g170676 , Coords275_g170676 , TexCoord275_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170676) = _ThirdNormalTex;
				SamplerState Sampler238_g170676 = SS29_g170704;
				half4 Coords238_g170676 = temp_output_37_0_g170676;
				float3 temp_output_279_0_g170676 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170676 = temp_output_279_0_g170676;
				half4 localSamplePlanar2D238_g170676 = SamplePlanar2D( Texture238_g170676 , Sampler238_g170676 , Coords238_g170676 , WorldPosition238_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170676) = _ThirdNormalTex;
				SamplerState Sampler246_g170676 = SS29_g170704;
				half4 Coords246_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition246_g170676 = temp_output_279_0_g170676;
				float3 temp_output_280_0_g170676 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170676 = temp_output_280_0_g170676;
				half4 localSamplePlanar3D246_g170676 = SamplePlanar3D( Texture246_g170676 , Sampler246_g170676 , Coords246_g170676 , WorldPosition246_g170676 , WorldNormal246_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170676) = _ThirdNormalTex;
				SamplerState Sampler234_g170676 = SS29_g170704;
				float4 Coords234_g170676 = temp_output_37_0_g170676;
				float3 WorldPosition234_g170676 = temp_output_279_0_g170676;
				float4 localSampleStochastic2D234_g170676 = SampleStochastic2D( Texture234_g170676 , Sampler234_g170676 , Coords234_g170676 , WorldPosition234_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170676) = _ThirdNormalTex;
				SamplerState Sampler263_g170676 = SS29_g170704;
				half4 Coords263_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition263_g170676 = temp_output_279_0_g170676;
				half3 WorldNormal263_g170676 = temp_output_280_0_g170676;
				half4 localSampleStochastic3D263_g170676 = SampleStochastic3D( Texture263_g170676 , Sampler263_g170676 , Coords263_g170676 , WorldPosition263_g170676 , WorldNormal263_g170676 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170674 = localSampleExtra275_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170674 = localSamplePlanar2D238_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170674 = localSamplePlanar3D246_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170674 = localSampleStochastic2D234_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170674 = localSampleStochastic3D263_g170676;
				#else
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#endif
				half4 Local_NormalTex776_g170674 = staticSwitch698_g170674;
				half4 Normal_Packed45_g170678 = Local_NormalTex776_g170674;
				float2 appendResult58_g170678 = (float2(( (Normal_Packed45_g170678).x * (Normal_Packed45_g170678).w ) , (Normal_Packed45_g170678).y));
				half2 Normal_Default50_g170678 = appendResult58_g170678;
				half2 Normal_ASTC41_g170678 = (Normal_Packed45_g170678).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170678 = Normal_ASTC41_g170678;
				#else
				float2 staticSwitch38_g170678 = Normal_Default50_g170678;
				#endif
				half2 Normal_NO_DTX544_g170678 = (Normal_Packed45_g170678).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170678 = Normal_NO_DTX544_g170678;
				#else
				float2 staticSwitch37_g170678 = staticSwitch38_g170678;
				#endif
				float2 temp_output_724_0_g170674 = ( (staticSwitch37_g170678*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170679 = temp_output_724_0_g170674;
				float2 break71_g170679 = Normal_Planar45_g170679;
				float3 appendResult72_g170679 = (float3(break71_g170679.x , 0.0 , break71_g170679.y));
				float2 temp_output_858_0_g170674 = (mul( ase_worldToTangent, appendResult72_g170679 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#else
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#endif
				half2 Local_NormalTS729_g170674 = staticSwitch727_g170674;
				float2 temp_output_36_0_g170696 = ( lerpResult40_g170696 + Local_NormalTS729_g170674 );
				float2 lerpResult405_g170674 = lerp( Visual_NormalTS529_g170674 , temp_output_36_0_g170696 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170674 = lerpResult405_g170674;
				#else
				float2 staticSwitch418_g170674 = Visual_NormalTS529_g170674;
				#endif
				half2 Final_NormalTS612_g170674 = staticSwitch418_g170674;
				float2 In_NormalTS3_g170691 = Final_NormalTS612_g170674;
				float3 appendResult68_g170697 = (float3(Final_NormalTS612_g170674 , 1.0));
				float3 tanNormal74_g170697 = appendResult68_g170697;
				float3 worldNormal74_g170697 = normalize( float3(dot(tanToWorld0,tanNormal74_g170697), dot(tanToWorld1,tanNormal74_g170697), dot(tanToWorld2,tanNormal74_g170697)) );
				half3 Final_NormalWS956_g170674 = worldNormal74_g170697;
				float3 In_NormalWS3_g170691 = Final_NormalWS956_g170674;
				half4 Visual_Shader531_g170674 = Out_Shader4_g170690;
				float4 lerpResult1000_g170674 = lerp( Local_Masks750_g170674 , ( Visual_Shader531_g170674 * Local_Masks750_g170674 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170674 = lerp( Visual_Shader531_g170674 , lerpResult1000_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170674 = lerpResult998_g170674;
				#else
				float4 staticSwitch451_g170674 = Visual_Shader531_g170674;
				#endif
				half4 Final_Masks613_g170674 = staticSwitch451_g170674;
				float4 In_Shader3_g170691 = Final_Masks613_g170674;
				float4 In_Emissive3_g170691 = Out_Emissive4_g170690;
				float3 temp_output_3_0_g170699 = Final_Albedo601_g170674;
				float dotResult20_g170699 = dot( temp_output_3_0_g170699 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170674 = dotResult20_g170699;
				float In_Grayscale3_g170691 = Final_Grayscale615_g170674;
				float clampResult651_g170674 = clamp( saturate( ( Final_Grayscale615_g170674 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170674 = clampResult651_g170674;
				float In_Luminosity3_g170691 = Final_Luminosity652_g170674;
				half Visual_MultiMask547_g170674 = Out_MultiMask4_g170690;
				float lerpResult477_g170674 = lerp( Visual_MultiMask547_g170674 , Local_MultiMask767_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch482_g170674 = lerpResult477_g170674;
				#else
				float staticSwitch482_g170674 = Visual_MultiMask547_g170674;
				#endif
				half Final_MultiMask572_g170674 = staticSwitch482_g170674;
				float In_MultiMask3_g170691 = Final_MultiMask572_g170674;
				half Visual_AlphaClip559_g170674 = Out_AlphaClip4_g170690;
				float temp_output_718_0_g170674 = (Local_AlbedoTex777_g170674).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170674 = ( temp_output_718_0_g170674 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170674 = temp_output_718_0_g170674;
				#endif
				half Local_AlphaClip772_g170674 = staticSwitch924_g170674;
				float lerpResult448_g170674 = lerp( Visual_AlphaClip559_g170674 , Local_AlphaClip772_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch564_g170674 = lerpResult448_g170674;
				#else
				float staticSwitch564_g170674 = Visual_AlphaClip559_g170674;
				#endif
				half Final_AlphaClip602_g170674 = staticSwitch564_g170674;
				float In_AlphaClip3_g170691 = Final_AlphaClip602_g170674;
				half Visual_AlphaFade588_g170674 = Out_AlphaFade4_g170690;
				half Local_AlphaFade773_g170674 = (lerpResult706_g170674).a;
				float lerpResult604_g170674 = lerp( Visual_AlphaFade588_g170674 , Local_AlphaFade773_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch608_g170674 = lerpResult604_g170674;
				#else
				float staticSwitch608_g170674 = Visual_AlphaFade588_g170674;
				#endif
				half Final_AlphaFade611_g170674 = staticSwitch608_g170674;
				float In_AlphaFade3_g170691 = Final_AlphaFade611_g170674;
				float3 In_Translucency3_g170691 = Out_Translucency4_g170690;
				float In_Transmission3_g170691 = Out_Transmission4_g170690;
				float In_Thickness3_g170691 = Out_Thickness4_g170690;
				float In_Diffusion3_g170691 = Out_Diffusion4_g170690;
				Data3_g170691.Dummy = In_Dummy3_g170691;
				Data3_g170691.Albedo = In_Albedo3_g170691;
				Data3_g170691.AlbedoRaw = In_AlbedoRaw3_g170691;
				Data3_g170691.NormalTS = In_NormalTS3_g170691;
				Data3_g170691.NormalWS = In_NormalWS3_g170691;
				Data3_g170691.Shader = In_Shader3_g170691;
				Data3_g170691.Emissive= In_Emissive3_g170691;
				Data3_g170691.MultiMask = In_MultiMask3_g170691;
				Data3_g170691.Grayscale = In_Grayscale3_g170691;
				Data3_g170691.Luminosity = In_Luminosity3_g170691;
				Data3_g170691.AlphaClip = In_AlphaClip3_g170691;
				Data3_g170691.AlphaFade = In_AlphaFade3_g170691;
				Data3_g170691.Translucency = In_Translucency3_g170691;
				Data3_g170691.Transmission = In_Transmission3_g170691;
				Data3_g170691.Thickness = In_Thickness3_g170691;
				Data3_g170691.Diffusion = In_Diffusion3_g170691;
				TVEVisualData Data4_g170785 = Data3_g170691;
				float Out_Dummy4_g170785 = 0;
				float3 Out_Albedo4_g170785 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170785 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170785 = float2( 0,0 );
				float3 Out_NormalWS4_g170785 = float3( 0,0,0 );
				float4 Out_Shader4_g170785 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170785 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170785 = 0;
				float Out_Grayscale4_g170785 = 0;
				float Out_Luminosity4_g170785 = 0;
				float Out_AlphaClip4_g170785 = 0;
				float Out_AlphaFade4_g170785 = 0;
				float3 Out_Translucency4_g170785 = float3( 0,0,0 );
				float Out_Transmission4_g170785 = 0;
				float Out_Thickness4_g170785 = 0;
				float Out_Diffusion4_g170785 = 0;
				Out_Dummy4_g170785 = Data4_g170785.Dummy;
				Out_Albedo4_g170785 = Data4_g170785.Albedo;
				Out_AlbedoRaw4_g170785 = Data4_g170785.AlbedoRaw;
				Out_NormalTS4_g170785 = Data4_g170785.NormalTS;
				Out_NormalWS4_g170785 = Data4_g170785.NormalWS;
				Out_Shader4_g170785 = Data4_g170785.Shader;
				Out_Emissive4_g170785= Data4_g170785.Emissive;
				Out_MultiMask4_g170785 = Data4_g170785.MultiMask;
				Out_Grayscale4_g170785 = Data4_g170785.Grayscale;
				Out_Luminosity4_g170785= Data4_g170785.Luminosity;
				Out_AlphaClip4_g170785 = Data4_g170785.AlphaClip;
				Out_AlphaFade4_g170785 = Data4_g170785.AlphaFade;
				Out_Translucency4_g170785 = Data4_g170785.Translucency;
				Out_Transmission4_g170785 = Data4_g170785.Transmission;
				Out_Thickness4_g170785 = Data4_g170785.Thickness;
				Out_Diffusion4_g170785 = Data4_g170785.Diffusion;
				half3 Visual_Albedo127_g170784 = Out_Albedo4_g170785;
				TVEModelData Data15_g170793 = Data16_g170493;
				float Out_Dummy15_g170793 = 0;
				float3 Out_PositionWS15_g170793 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170793 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170793 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170793 = float3( 0,0,0 );
				float4 Out_VertexData15_g170793 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170793 = float4( 0,0,0,0 );
				Out_Dummy15_g170793 = Data15_g170793.Dummy;
				Out_PositionWS15_g170793 = Data15_g170793.PositionWS;
				Out_PositionWO15_g170793 = Data15_g170793.PositionWO;
				Out_PivotWS15_g170793 = Data15_g170793.PivotWS;
				Out_PivotWO15_g170793 = Data15_g170793.PivotWO;
				Out_NormalWS15_g170793 = Data15_g170793.NormalWS;
				Out_ViewDirWS15_g170793 = Data15_g170793.ViewDirWS;
				Out_VertexData15_g170793 = Data15_g170793.VertexData;
				Out_BoundsData15_g170793 = Data15_g170793.BoundsData;
				half4 Model_VertexData206_g170784 = Out_VertexData15_g170793;
				float4 break208_g170784 = Model_VertexData206_g170784;
				float4 break33_g170791 = _occlusion_vert_mode;
				float temp_output_30_0_g170791 = ( break208_g170784.x * break33_g170791.x );
				float temp_output_29_0_g170791 = ( break208_g170784.y * break33_g170791.y );
				float temp_output_31_0_g170791 = ( break208_g170784.z * break33_g170791.z );
				float temp_output_28_0_g170791 = ( temp_output_30_0_g170791 + temp_output_29_0_g170791 + temp_output_31_0_g170791 + ( break208_g170784.w * break33_g170791.w ) );
				float temp_output_194_0_g170784 = temp_output_28_0_g170791;
				float clampResult17_g170789 = clamp( temp_output_194_0_g170784 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170788 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170788 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170788 );
				float temp_output_6_0_g170790 = saturate( ( ( clampResult17_g170789 - temp_output_7_0_g170788 ) / ( temp_output_10_0_g170788 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170790 = ( temp_output_6_0_g170790 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170790 = temp_output_6_0_g170790;
				#endif
				half Occlusion_Mask82_g170784 = staticSwitch14_g170790;
				float3 lerpResult75_g170784 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170784);
				float3 lerpResult186_g170784 = lerp( Visual_Albedo127_g170784 , ( Visual_Albedo127_g170784 * lerpResult75_g170784 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170784 = lerpResult186_g170784;
				#else
				float3 staticSwitch171_g170784 = Visual_Albedo127_g170784;
				#endif
				half3 Final_Albedo160_g170784 = staticSwitch171_g170784;
				float3 In_Albedo3_g170786 = Final_Albedo160_g170784;
				float3 In_AlbedoRaw3_g170786 = Final_Albedo160_g170784;
				float2 In_NormalTS3_g170786 = Out_NormalTS4_g170785;
				float3 In_NormalWS3_g170786 = Out_NormalWS4_g170785;
				float4 In_Shader3_g170786 = Out_Shader4_g170785;
				float4 In_Emissive3_g170786 = Out_Emissive4_g170785;
				float3 temp_output_3_0_g170787 = Final_Albedo160_g170784;
				float dotResult20_g170787 = dot( temp_output_3_0_g170787 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170784 = dotResult20_g170787;
				float In_Grayscale3_g170786 = Final_Grayscale164_g170784;
				float clampResult180_g170784 = clamp( saturate( ( Final_Grayscale164_g170784 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170784 = clampResult180_g170784;
				float In_Luminosity3_g170786 = Final_Shading181_g170784;
				float In_MultiMask3_g170786 = Out_MultiMask4_g170785;
				float In_AlphaClip3_g170786 = Out_AlphaClip4_g170785;
				float In_AlphaFade3_g170786 = Out_AlphaFade4_g170785;
				float3 In_Translucency3_g170786 = Out_Translucency4_g170785;
				float In_Transmission3_g170786 = Out_Transmission4_g170785;
				float In_Thickness3_g170786 = Out_Thickness4_g170785;
				float In_Diffusion3_g170786 = Out_Diffusion4_g170785;
				Data3_g170786.Dummy = In_Dummy3_g170786;
				Data3_g170786.Albedo = In_Albedo3_g170786;
				Data3_g170786.AlbedoRaw = In_AlbedoRaw3_g170786;
				Data3_g170786.NormalTS = In_NormalTS3_g170786;
				Data3_g170786.NormalWS = In_NormalWS3_g170786;
				Data3_g170786.Shader = In_Shader3_g170786;
				Data3_g170786.Emissive= In_Emissive3_g170786;
				Data3_g170786.MultiMask = In_MultiMask3_g170786;
				Data3_g170786.Grayscale = In_Grayscale3_g170786;
				Data3_g170786.Luminosity = In_Luminosity3_g170786;
				Data3_g170786.AlphaClip = In_AlphaClip3_g170786;
				Data3_g170786.AlphaFade = In_AlphaFade3_g170786;
				Data3_g170786.Translucency = In_Translucency3_g170786;
				Data3_g170786.Transmission = In_Transmission3_g170786;
				Data3_g170786.Thickness = In_Thickness3_g170786;
				Data3_g170786.Diffusion = In_Diffusion3_g170786;
				TVEVisualData Data4_g170796 = Data3_g170786;
				float Out_Dummy4_g170796 = 0;
				float3 Out_Albedo4_g170796 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170796 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170796 = float2( 0,0 );
				float3 Out_NormalWS4_g170796 = float3( 0,0,0 );
				float4 Out_Shader4_g170796 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170796 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170796 = 0;
				float Out_Grayscale4_g170796 = 0;
				float Out_Luminosity4_g170796 = 0;
				float Out_AlphaClip4_g170796 = 0;
				float Out_AlphaFade4_g170796 = 0;
				float3 Out_Translucency4_g170796 = float3( 0,0,0 );
				float Out_Transmission4_g170796 = 0;
				float Out_Thickness4_g170796 = 0;
				float Out_Diffusion4_g170796 = 0;
				Out_Dummy4_g170796 = Data4_g170796.Dummy;
				Out_Albedo4_g170796 = Data4_g170796.Albedo;
				Out_AlbedoRaw4_g170796 = Data4_g170796.AlbedoRaw;
				Out_NormalTS4_g170796 = Data4_g170796.NormalTS;
				Out_NormalWS4_g170796 = Data4_g170796.NormalWS;
				Out_Shader4_g170796 = Data4_g170796.Shader;
				Out_Emissive4_g170796= Data4_g170796.Emissive;
				Out_MultiMask4_g170796 = Data4_g170796.MultiMask;
				Out_Grayscale4_g170796 = Data4_g170796.Grayscale;
				Out_Luminosity4_g170796= Data4_g170796.Luminosity;
				Out_AlphaClip4_g170796 = Data4_g170796.AlphaClip;
				Out_AlphaFade4_g170796 = Data4_g170796.AlphaFade;
				Out_Translucency4_g170796 = Data4_g170796.Translucency;
				Out_Transmission4_g170796 = Data4_g170796.Transmission;
				Out_Thickness4_g170796 = Data4_g170796.Thickness;
				Out_Diffusion4_g170796 = Data4_g170796.Diffusion;
				half3 Visual_Albedo127_g170794 = Out_Albedo4_g170796;
				TVEModelData Data15_g170803 = Data16_g170493;
				float Out_Dummy15_g170803 = 0;
				float3 Out_PositionWS15_g170803 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170803 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170803 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170803 = float3( 0,0,0 );
				float4 Out_VertexData15_g170803 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170803 = float4( 0,0,0,0 );
				Out_Dummy15_g170803 = Data15_g170803.Dummy;
				Out_PositionWS15_g170803 = Data15_g170803.PositionWS;
				Out_PositionWO15_g170803 = Data15_g170803.PositionWO;
				Out_PivotWS15_g170803 = Data15_g170803.PivotWS;
				Out_PivotWO15_g170803 = Data15_g170803.PivotWO;
				Out_NormalWS15_g170803 = Data15_g170803.NormalWS;
				Out_ViewDirWS15_g170803 = Data15_g170803.ViewDirWS;
				Out_VertexData15_g170803 = Data15_g170803.VertexData;
				Out_BoundsData15_g170803 = Data15_g170803.BoundsData;
				half4 Model_VertexData224_g170794 = Out_VertexData15_g170803;
				float4 break226_g170794 = Model_VertexData224_g170794;
				float4 break33_g170795 = _gradient_vert_mode;
				float temp_output_30_0_g170795 = ( break226_g170794.x * break33_g170795.x );
				float temp_output_29_0_g170795 = ( break226_g170794.y * break33_g170795.y );
				float temp_output_31_0_g170795 = ( break226_g170794.z * break33_g170795.z );
				float temp_output_28_0_g170795 = ( temp_output_30_0_g170795 + temp_output_29_0_g170795 + temp_output_31_0_g170795 + ( break226_g170794.w * break33_g170795.w ) );
				float temp_output_211_0_g170794 = temp_output_28_0_g170795;
				float clampResult17_g170800 = clamp( temp_output_211_0_g170794 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170801 = _GradientMeshRemap.x;
				float temp_output_10_0_g170801 = ( _GradientMeshRemap.y - temp_output_7_0_g170801 );
				float temp_output_6_0_g170802 = saturate( ( ( clampResult17_g170800 - temp_output_7_0_g170801 ) / ( temp_output_10_0_g170801 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170802 = ( temp_output_6_0_g170802 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170802 = temp_output_6_0_g170802;
				#endif
				half Gradient_VertMask82_g170794 = staticSwitch14_g170802;
				half Gradient_Mask200_g170794 = Gradient_VertMask82_g170794;
				float3 lerpResult75_g170794 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170794);
				float temp_output_162_11_g170794 = Out_MultiMask4_g170796;
				half Visual_MultiMask196_g170794 = temp_output_162_11_g170794;
				float lerpResult190_g170794 = lerp( 1.0 , Visual_MultiMask196_g170794 , _GradientMultiValue);
				half Gradient_MultiMask194_g170794 = lerpResult190_g170794;
				float3 lerpResult186_g170794 = lerp( Visual_Albedo127_g170794 , ( Visual_Albedo127_g170794 * lerpResult75_g170794 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170794 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170794 = lerpResult186_g170794;
				#else
				float3 staticSwitch171_g170794 = Visual_Albedo127_g170794;
				#endif
				half3 Final_Albedo160_g170794 = staticSwitch171_g170794;
				float3 In_Albedo3_g170797 = Final_Albedo160_g170794;
				float3 In_AlbedoRaw3_g170797 = Final_Albedo160_g170794;
				float2 In_NormalTS3_g170797 = Out_NormalTS4_g170796;
				float3 In_NormalWS3_g170797 = Out_NormalWS4_g170796;
				float4 In_Shader3_g170797 = Out_Shader4_g170796;
				float4 In_Emissive3_g170797 = Out_Emissive4_g170796;
				float3 temp_output_3_0_g170798 = Final_Albedo160_g170794;
				float dotResult20_g170798 = dot( temp_output_3_0_g170798 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170794 = dotResult20_g170798;
				float In_Grayscale3_g170797 = Final_Grayscale164_g170794;
				float clampResult180_g170794 = clamp( saturate( ( Final_Grayscale164_g170794 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170794 = clampResult180_g170794;
				float In_Luminosity3_g170797 = Final_Luminosity181_g170794;
				float In_MultiMask3_g170797 = temp_output_162_11_g170794;
				float In_AlphaClip3_g170797 = Out_AlphaClip4_g170796;
				float In_AlphaFade3_g170797 = Out_AlphaFade4_g170796;
				float3 In_Translucency3_g170797 = Out_Translucency4_g170796;
				float In_Transmission3_g170797 = Out_Transmission4_g170796;
				float In_Thickness3_g170797 = Out_Thickness4_g170796;
				float In_Diffusion3_g170797 = Out_Diffusion4_g170796;
				Data3_g170797.Dummy = In_Dummy3_g170797;
				Data3_g170797.Albedo = In_Albedo3_g170797;
				Data3_g170797.AlbedoRaw = In_AlbedoRaw3_g170797;
				Data3_g170797.NormalTS = In_NormalTS3_g170797;
				Data3_g170797.NormalWS = In_NormalWS3_g170797;
				Data3_g170797.Shader = In_Shader3_g170797;
				Data3_g170797.Emissive= In_Emissive3_g170797;
				Data3_g170797.MultiMask = In_MultiMask3_g170797;
				Data3_g170797.Grayscale = In_Grayscale3_g170797;
				Data3_g170797.Luminosity = In_Luminosity3_g170797;
				Data3_g170797.AlphaClip = In_AlphaClip3_g170797;
				Data3_g170797.AlphaFade = In_AlphaFade3_g170797;
				Data3_g170797.Translucency = In_Translucency3_g170797;
				Data3_g170797.Transmission = In_Transmission3_g170797;
				Data3_g170797.Thickness = In_Thickness3_g170797;
				Data3_g170797.Diffusion = In_Diffusion3_g170797;
				TVEVisualData Data4_g170806 = Data3_g170797;
				float Out_Dummy4_g170806 = 0;
				float3 Out_Albedo4_g170806 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170806 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170806 = float2( 0,0 );
				float3 Out_NormalWS4_g170806 = float3( 0,0,0 );
				float4 Out_Shader4_g170806 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170806 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170806 = 0;
				float Out_Grayscale4_g170806 = 0;
				float Out_Luminosity4_g170806 = 0;
				float Out_AlphaClip4_g170806 = 0;
				float Out_AlphaFade4_g170806 = 0;
				float3 Out_Translucency4_g170806 = float3( 0,0,0 );
				float Out_Transmission4_g170806 = 0;
				float Out_Thickness4_g170806 = 0;
				float Out_Diffusion4_g170806 = 0;
				Out_Dummy4_g170806 = Data4_g170806.Dummy;
				Out_Albedo4_g170806 = Data4_g170806.Albedo;
				Out_AlbedoRaw4_g170806 = Data4_g170806.AlbedoRaw;
				Out_NormalTS4_g170806 = Data4_g170806.NormalTS;
				Out_NormalWS4_g170806 = Data4_g170806.NormalWS;
				Out_Shader4_g170806 = Data4_g170806.Shader;
				Out_Emissive4_g170806= Data4_g170806.Emissive;
				Out_MultiMask4_g170806 = Data4_g170806.MultiMask;
				Out_Grayscale4_g170806 = Data4_g170806.Grayscale;
				Out_Luminosity4_g170806= Data4_g170806.Luminosity;
				Out_AlphaClip4_g170806 = Data4_g170806.AlphaClip;
				Out_AlphaFade4_g170806 = Data4_g170806.AlphaFade;
				Out_Translucency4_g170806 = Data4_g170806.Translucency;
				Out_Transmission4_g170806 = Data4_g170806.Transmission;
				Out_Thickness4_g170806 = Data4_g170806.Thickness;
				Out_Diffusion4_g170806 = Data4_g170806.Diffusion;
				half3 Visual_Albedo127_g170804 = Out_Albedo4_g170806;
				TVEModelData Data15_g170812 = Data16_g170493;
				float Out_Dummy15_g170812 = 0;
				float3 Out_PositionWS15_g170812 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170812 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170812 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170812 = float3( 0,0,0 );
				float4 Out_VertexData15_g170812 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170812 = float4( 0,0,0,0 );
				Out_Dummy15_g170812 = Data15_g170812.Dummy;
				Out_PositionWS15_g170812 = Data15_g170812.PositionWS;
				Out_PositionWO15_g170812 = Data15_g170812.PositionWO;
				Out_PivotWS15_g170812 = Data15_g170812.PivotWS;
				Out_PivotWO15_g170812 = Data15_g170812.PivotWO;
				Out_NormalWS15_g170812 = Data15_g170812.NormalWS;
				Out_ViewDirWS15_g170812 = Data15_g170812.ViewDirWS;
				Out_VertexData15_g170812 = Data15_g170812.VertexData;
				Out_BoundsData15_g170812 = Data15_g170812.BoundsData;
				half3 Model_PositionWO224_g170804 = Out_PositionWO15_g170812;
				half3 Model_PivotWO239_g170804 = Out_PivotWO15_g170812;
				float3 lerpResult242_g170804 = lerp( Model_PositionWO224_g170804 , Model_PivotWO239_g170804 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170808 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170804 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170810 = clamp( tex3DNode60_g170808.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170811 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170811 = ( _VariationNoiseRemap.y - temp_output_7_0_g170811 );
				float temp_output_238_0_g170804 = saturate( ( ( clampResult17_g170810 - temp_output_7_0_g170811 ) / ( temp_output_10_0_g170811 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170804 = temp_output_238_0_g170804;
				half Variaton_Mask200_g170804 = Variaton_NoiseMask82_g170804;
				float3 lerpResult75_g170804 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170804);
				float temp_output_162_11_g170804 = Out_MultiMask4_g170806;
				half Visual_MultiMask196_g170804 = temp_output_162_11_g170804;
				float lerpResult190_g170804 = lerp( 1.0 , Visual_MultiMask196_g170804 , _VariationMultiValue);
				half Variaton_MultiMask194_g170804 = lerpResult190_g170804;
				float3 lerpResult186_g170804 = lerp( Visual_Albedo127_g170804 , ( Visual_Albedo127_g170804 * lerpResult75_g170804 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170804 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170804 = lerpResult186_g170804;
				#else
				float3 staticSwitch171_g170804 = Visual_Albedo127_g170804;
				#endif
				half3 Final_Albedo160_g170804 = staticSwitch171_g170804;
				float3 In_Albedo3_g170807 = Final_Albedo160_g170804;
				float3 In_AlbedoRaw3_g170807 = Final_Albedo160_g170804;
				float2 In_NormalTS3_g170807 = Out_NormalTS4_g170806;
				float3 In_NormalWS3_g170807 = Out_NormalWS4_g170806;
				float4 In_Shader3_g170807 = Out_Shader4_g170806;
				float4 In_Emissive3_g170807 = Out_Emissive4_g170806;
				float3 temp_output_3_0_g170805 = Final_Albedo160_g170804;
				float dotResult20_g170805 = dot( temp_output_3_0_g170805 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170804 = dotResult20_g170805;
				float In_Grayscale3_g170807 = Final_Grayscale164_g170804;
				float clampResult180_g170804 = clamp( saturate( ( Final_Grayscale164_g170804 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170804 = clampResult180_g170804;
				float In_Luminosity3_g170807 = Final_Luminosity181_g170804;
				float In_MultiMask3_g170807 = temp_output_162_11_g170804;
				float In_AlphaClip3_g170807 = Out_AlphaClip4_g170806;
				float In_AlphaFade3_g170807 = Out_AlphaFade4_g170806;
				float3 In_Translucency3_g170807 = Out_Translucency4_g170806;
				float In_Transmission3_g170807 = Out_Transmission4_g170806;
				float In_Thickness3_g170807 = Out_Thickness4_g170806;
				float In_Diffusion3_g170807 = Out_Diffusion4_g170806;
				Data3_g170807.Dummy = In_Dummy3_g170807;
				Data3_g170807.Albedo = In_Albedo3_g170807;
				Data3_g170807.AlbedoRaw = In_AlbedoRaw3_g170807;
				Data3_g170807.NormalTS = In_NormalTS3_g170807;
				Data3_g170807.NormalWS = In_NormalWS3_g170807;
				Data3_g170807.Shader = In_Shader3_g170807;
				Data3_g170807.Emissive= In_Emissive3_g170807;
				Data3_g170807.MultiMask = In_MultiMask3_g170807;
				Data3_g170807.Grayscale = In_Grayscale3_g170807;
				Data3_g170807.Luminosity = In_Luminosity3_g170807;
				Data3_g170807.AlphaClip = In_AlphaClip3_g170807;
				Data3_g170807.AlphaFade = In_AlphaFade3_g170807;
				Data3_g170807.Translucency = In_Translucency3_g170807;
				Data3_g170807.Transmission = In_Transmission3_g170807;
				Data3_g170807.Thickness = In_Thickness3_g170807;
				Data3_g170807.Diffusion = In_Diffusion3_g170807;
				TVEVisualData Data4_g170836 = Data3_g170807;
				float Out_Dummy4_g170836 = 0;
				float3 Out_Albedo4_g170836 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170836 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170836 = float2( 0,0 );
				float3 Out_NormalWS4_g170836 = float3( 0,0,0 );
				float4 Out_Shader4_g170836 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170836 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170836 = 0;
				float Out_Grayscale4_g170836 = 0;
				float Out_Luminosity4_g170836 = 0;
				float Out_AlphaClip4_g170836 = 0;
				float Out_AlphaFade4_g170836 = 0;
				float3 Out_Translucency4_g170836 = float3( 0,0,0 );
				float Out_Transmission4_g170836 = 0;
				float Out_Thickness4_g170836 = 0;
				float Out_Diffusion4_g170836 = 0;
				Out_Dummy4_g170836 = Data4_g170836.Dummy;
				Out_Albedo4_g170836 = Data4_g170836.Albedo;
				Out_AlbedoRaw4_g170836 = Data4_g170836.AlbedoRaw;
				Out_NormalTS4_g170836 = Data4_g170836.NormalTS;
				Out_NormalWS4_g170836 = Data4_g170836.NormalWS;
				Out_Shader4_g170836 = Data4_g170836.Shader;
				Out_Emissive4_g170836= Data4_g170836.Emissive;
				Out_MultiMask4_g170836 = Data4_g170836.MultiMask;
				Out_Grayscale4_g170836 = Data4_g170836.Grayscale;
				Out_Luminosity4_g170836= Data4_g170836.Luminosity;
				Out_AlphaClip4_g170836 = Data4_g170836.AlphaClip;
				Out_AlphaFade4_g170836 = Data4_g170836.AlphaFade;
				Out_Translucency4_g170836 = Data4_g170836.Translucency;
				Out_Transmission4_g170836 = Data4_g170836.Transmission;
				Out_Thickness4_g170836 = Data4_g170836.Thickness;
				Out_Diffusion4_g170836 = Data4_g170836.Diffusion;
				half3 Visual_Albedo139_g170814 = Out_Albedo4_g170836;
				float temp_output_200_12_g170814 = Out_Grayscale4_g170836;
				half Visual_Grayscale150_g170814 = temp_output_200_12_g170814;
				float3 temp_cast_37 = (Visual_Grayscale150_g170814).xxx;
				TVEGlobalData Data15_g170815 = Data204_g170494;
				float Out_Dummy15_g170815 = 0;
				float4 Out_CoatParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170815 = float4( 0,0,0,0 );
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_CoatParams15_g170815 = Data15_g170815.CoatParams;
				Out_PaintParams15_g170815 = Data15_g170815.PaintParams;
				Out_GlowParams15_g170815 = Data15_g170815.GlowParams;
				Out_AtmoParams15_g170815= Data15_g170815.AtmoParams;
				Out_FadeParams15_g170815= Data15_g170815.FadeParams;
				Out_FormParams15_g170815 = Data15_g170815.FormParams;
				Out_LandParams15_g170815 = Data15_g170815.LandParams;
				Out_WindParams15_g170815 = Data15_g170815.WindParams;
				Out_PushParams15_g170815 = Data15_g170815.PushParams;
				half4 Global_PaintParams209_g170814 = Out_PaintParams15_g170815;
				float temp_output_6_0_g170816 = ( saturate( (Global_PaintParams209_g170814).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170816 = ( temp_output_6_0_g170816 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170816 = temp_output_6_0_g170816;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170814 = staticSwitch14_g170816;
				#else
				float staticSwitch283_g170814 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170814 = staticSwitch283_g170814;
				float3 lerpResult368_g170814 = lerp( Visual_Albedo139_g170814 , temp_cast_37 , ( Tinting_GlobalValue285_g170814 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170834 = 2.0;
				#else
				float staticSwitch1_g170834 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170814 = (Global_PaintParams209_g170814).xyz;
				#else
				float3 staticSwitch288_g170814 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170814 = staticSwitch288_g170814;
				float temp_output_200_11_g170814 = Out_MultiMask4_g170836;
				half Visual_MultiMask181_g170814 = temp_output_200_11_g170814;
				float lerpResult147_g170814 = lerp( 1.0 , Visual_MultiMask181_g170814 , _TintingMultiValue);
				half Tinting_MutiMask121_g170814 = lerpResult147_g170814;
				half Tinting_TexMask385_g170814 = 1.0;
				float temp_output_200_15_g170814 = Out_Luminosity4_g170836;
				half Visual_Luminosity257_g170814 = temp_output_200_15_g170814;
				float clampResult17_g170828 = clamp( Visual_Luminosity257_g170814 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170827 = _TintingLumaRemap.x;
				float temp_output_10_0_g170827 = ( _TintingLumaRemap.y - temp_output_7_0_g170827 );
				float lerpResult228_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170828 - temp_output_7_0_g170827 ) / ( temp_output_10_0_g170827 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170814 = lerpResult228_g170814;
				TVEModelData Data15_g170837 = Data16_g170493;
				float Out_Dummy15_g170837 = 0;
				float3 Out_PositionWS15_g170837 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170837 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170837 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170837 = float3( 0,0,0 );
				float4 Out_VertexData15_g170837 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170837 = float4( 0,0,0,0 );
				Out_Dummy15_g170837 = Data15_g170837.Dummy;
				Out_PositionWS15_g170837 = Data15_g170837.PositionWS;
				Out_PositionWO15_g170837 = Data15_g170837.PositionWO;
				Out_PivotWS15_g170837 = Data15_g170837.PivotWS;
				Out_PivotWO15_g170837 = Data15_g170837.PivotWO;
				Out_NormalWS15_g170837 = Data15_g170837.NormalWS;
				Out_ViewDirWS15_g170837 = Data15_g170837.ViewDirWS;
				Out_VertexData15_g170837 = Data15_g170837.VertexData;
				Out_BoundsData15_g170837 = Data15_g170837.BoundsData;
				half4 Model_VertexMasks307_g170814 = Out_VertexData15_g170837;
				float4 break311_g170814 = Model_VertexMasks307_g170814;
				float4 break33_g170820 = _tinting_vert_mode;
				float temp_output_30_0_g170820 = ( break311_g170814.x * break33_g170820.x );
				float temp_output_29_0_g170820 = ( break311_g170814.y * break33_g170820.y );
				float temp_output_31_0_g170820 = ( break311_g170814.z * break33_g170820.z );
				float temp_output_28_0_g170820 = ( temp_output_30_0_g170820 + temp_output_29_0_g170820 + temp_output_31_0_g170820 + ( break311_g170814.w * break33_g170820.w ) );
				float clampResult17_g170826 = clamp( temp_output_28_0_g170820 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170825 = _TintingMeshRemap.x;
				float temp_output_10_0_g170825 = ( _TintingMeshRemap.y - temp_output_7_0_g170825 );
				float lerpResult370_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170826 - temp_output_7_0_g170825 ) / ( temp_output_10_0_g170825 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170829 = lerpResult370_g170814;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170829 = ( temp_output_6_0_g170829 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170829 = temp_output_6_0_g170829;
				#endif
				float temp_output_333_0_g170814 = staticSwitch14_g170829;
				half Tinting_VertMask309_g170814 = temp_output_333_0_g170814;
				half Tinting_NoiseMask213_g170814 = 1.0;
				half Custom_Mask345_g170814 = 1.0;
				float temp_output_7_0_g170823 = _TintingBlendRemap.x;
				float temp_output_10_0_g170823 = ( _TintingBlendRemap.y - temp_output_7_0_g170823 );
				half Tinting_Mask242_g170814 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170814 * Tinting_TexMask385_g170814 * Tinting_LumaMask153_g170814 * Tinting_VertMask309_g170814 * Tinting_NoiseMask213_g170814 * Tinting_GlobalValue285_g170814 * Custom_Mask345_g170814 ) - temp_output_7_0_g170823 ) / ( temp_output_10_0_g170823 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170814 = lerp( Visual_Albedo139_g170814 , ( lerpResult368_g170814 * staticSwitch1_g170834 * Tinting_ColorGlobal290_g170814 * (_TintingColor).rgb ) , Tinting_Mask242_g170814);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170814 = lerpResult90_g170814;
				#else
				float3 staticSwitch286_g170814 = Visual_Albedo139_g170814;
				#endif
				half3 Final_Albedo97_g170814 = staticSwitch286_g170814;
				float3 In_Albedo3_g170835 = Final_Albedo97_g170814;
				float3 In_AlbedoRaw3_g170835 = Out_AlbedoRaw4_g170836;
				float2 In_NormalTS3_g170835 = Out_NormalTS4_g170836;
				float3 In_NormalWS3_g170835 = Out_NormalWS4_g170836;
				float4 In_Shader3_g170835 = Out_Shader4_g170836;
				float4 In_Emissive3_g170835 = Out_Emissive4_g170836;
				float In_Grayscale3_g170835 = temp_output_200_12_g170814;
				float In_Luminosity3_g170835 = temp_output_200_15_g170814;
				float In_MultiMask3_g170835 = temp_output_200_11_g170814;
				float In_AlphaClip3_g170835 = Out_AlphaClip4_g170836;
				float In_AlphaFade3_g170835 = Out_AlphaFade4_g170836;
				float3 In_Translucency3_g170835 = Out_Translucency4_g170836;
				float In_Transmission3_g170835 = Out_Transmission4_g170836;
				float In_Thickness3_g170835 = Out_Thickness4_g170836;
				float In_Diffusion3_g170835 = Out_Diffusion4_g170836;
				Data3_g170835.Dummy = In_Dummy3_g170835;
				Data3_g170835.Albedo = In_Albedo3_g170835;
				Data3_g170835.AlbedoRaw = In_AlbedoRaw3_g170835;
				Data3_g170835.NormalTS = In_NormalTS3_g170835;
				Data3_g170835.NormalWS = In_NormalWS3_g170835;
				Data3_g170835.Shader = In_Shader3_g170835;
				Data3_g170835.Emissive= In_Emissive3_g170835;
				Data3_g170835.MultiMask = In_MultiMask3_g170835;
				Data3_g170835.Grayscale = In_Grayscale3_g170835;
				Data3_g170835.Luminosity = In_Luminosity3_g170835;
				Data3_g170835.AlphaClip = In_AlphaClip3_g170835;
				Data3_g170835.AlphaFade = In_AlphaFade3_g170835;
				Data3_g170835.Translucency = In_Translucency3_g170835;
				Data3_g170835.Transmission = In_Transmission3_g170835;
				Data3_g170835.Thickness = In_Thickness3_g170835;
				Data3_g170835.Diffusion = In_Diffusion3_g170835;
				TVEVisualData Data4_g170840 = Data3_g170835;
				float Out_Dummy4_g170840 = 0;
				float3 Out_Albedo4_g170840 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170840 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170840 = float2( 0,0 );
				float3 Out_NormalWS4_g170840 = float3( 0,0,0 );
				float4 Out_Shader4_g170840 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170840 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170840 = 0;
				float Out_Grayscale4_g170840 = 0;
				float Out_Luminosity4_g170840 = 0;
				float Out_AlphaClip4_g170840 = 0;
				float Out_AlphaFade4_g170840 = 0;
				float3 Out_Translucency4_g170840 = float3( 0,0,0 );
				float Out_Transmission4_g170840 = 0;
				float Out_Thickness4_g170840 = 0;
				float Out_Diffusion4_g170840 = 0;
				Out_Dummy4_g170840 = Data4_g170840.Dummy;
				Out_Albedo4_g170840 = Data4_g170840.Albedo;
				Out_AlbedoRaw4_g170840 = Data4_g170840.AlbedoRaw;
				Out_NormalTS4_g170840 = Data4_g170840.NormalTS;
				Out_NormalWS4_g170840 = Data4_g170840.NormalWS;
				Out_Shader4_g170840 = Data4_g170840.Shader;
				Out_Emissive4_g170840= Data4_g170840.Emissive;
				Out_MultiMask4_g170840 = Data4_g170840.MultiMask;
				Out_Grayscale4_g170840 = Data4_g170840.Grayscale;
				Out_Luminosity4_g170840= Data4_g170840.Luminosity;
				Out_AlphaClip4_g170840 = Data4_g170840.AlphaClip;
				Out_AlphaFade4_g170840 = Data4_g170840.AlphaFade;
				Out_Translucency4_g170840 = Data4_g170840.Translucency;
				Out_Transmission4_g170840 = Data4_g170840.Transmission;
				Out_Thickness4_g170840 = Data4_g170840.Thickness;
				Out_Diffusion4_g170840 = Data4_g170840.Diffusion;
				half3 Visual_Albedo292_g170838 = Out_Albedo4_g170840;
				float temp_output_280_12_g170838 = Out_Grayscale4_g170840;
				half Visual_Grayscale308_g170838 = temp_output_280_12_g170838;
				float3 temp_cast_39 = (Visual_Grayscale308_g170838).xxx;
				TVEGlobalData Data15_g170839 = Data204_g170494;
				float Out_Dummy15_g170839 = 0;
				float4 Out_CoatParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170839 = float4( 0,0,0,0 );
				Out_Dummy15_g170839 = Data15_g170839.Dummy;
				Out_CoatParams15_g170839 = Data15_g170839.CoatParams;
				Out_PaintParams15_g170839 = Data15_g170839.PaintParams;
				Out_GlowParams15_g170839 = Data15_g170839.GlowParams;
				Out_AtmoParams15_g170839= Data15_g170839.AtmoParams;
				Out_FadeParams15_g170839= Data15_g170839.FadeParams;
				Out_FormParams15_g170839 = Data15_g170839.FormParams;
				Out_LandParams15_g170839 = Data15_g170839.LandParams;
				Out_WindParams15_g170839 = Data15_g170839.WindParams;
				Out_PushParams15_g170839 = Data15_g170839.PushParams;
				half4 Global_AtmoParams314_g170838 = Out_AtmoParams15_g170839;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170838 = ( (Global_AtmoParams314_g170838).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170838 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170838 = staticSwitch351_g170838;
				float3 lerpResult485_g170838 = lerp( Visual_Albedo292_g170838 , temp_cast_39 , ( Dryness_GlobalMask352_g170838 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170859 = RGBToHSV( lerpResult485_g170838 );
				half3 hsvTorgb61_g170859 = HSVToRGB( half3(( hsvTorgb58_g170859.x + _DrynessShiftValue ),hsvTorgb58_g170859.y,hsvTorgb58_g170859.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170838 = hsvTorgb61_g170859;
				#else
				float3 staticSwitch499_g170838 = lerpResult485_g170838;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170858 = 2.0;
				#else
				float staticSwitch1_g170858 = 4.594794;
				#endif
				half Dryness_TexMask478_g170838 = 1.0;
				float temp_output_280_11_g170838 = Out_MultiMask4_g170840;
				half Visual_MultiMask310_g170838 = temp_output_280_11_g170838;
				float lerpResult283_g170838 = lerp( 1.0 , Visual_MultiMask310_g170838 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170838 = lerpResult283_g170838;
				float temp_output_280_15_g170838 = Out_Luminosity4_g170840;
				half Visual_Luminosity309_g170838 = temp_output_280_15_g170838;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170838 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170853 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170853 = ( _DrynessLumaRemap.y - temp_output_7_0_g170853 );
				float lerpResult295_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170854 - temp_output_7_0_g170853 ) / ( temp_output_10_0_g170853 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170838 = lerpResult295_g170838;
				TVEModelData Data15_g170860 = Data16_g170493;
				float Out_Dummy15_g170860 = 0;
				float3 Out_PositionWS15_g170860 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170860 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170860 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170860 = float3( 0,0,0 );
				float4 Out_VertexData15_g170860 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170860 = float4( 0,0,0,0 );
				Out_Dummy15_g170860 = Data15_g170860.Dummy;
				Out_PositionWS15_g170860 = Data15_g170860.PositionWS;
				Out_PositionWO15_g170860 = Data15_g170860.PositionWO;
				Out_PivotWS15_g170860 = Data15_g170860.PivotWS;
				Out_PivotWO15_g170860 = Data15_g170860.PivotWO;
				Out_NormalWS15_g170860 = Data15_g170860.NormalWS;
				Out_ViewDirWS15_g170860 = Data15_g170860.ViewDirWS;
				Out_VertexData15_g170860 = Data15_g170860.VertexData;
				Out_BoundsData15_g170860 = Data15_g170860.BoundsData;
				half4 Model_VertexMasks386_g170838 = Out_VertexData15_g170860;
				float4 break375_g170838 = Model_VertexMasks386_g170838;
				float4 break33_g170847 = _dryness_vert_mode;
				float temp_output_30_0_g170847 = ( break375_g170838.x * break33_g170847.x );
				float temp_output_29_0_g170847 = ( break375_g170838.y * break33_g170847.y );
				float temp_output_31_0_g170847 = ( break375_g170838.z * break33_g170847.z );
				float temp_output_28_0_g170847 = ( temp_output_30_0_g170847 + temp_output_29_0_g170847 + temp_output_31_0_g170847 + ( break375_g170838.w * break33_g170847.w ) );
				float clampResult17_g170848 = clamp( temp_output_28_0_g170847 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170849 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170849 = ( _DrynessMeshRemap.y - temp_output_7_0_g170849 );
				float lerpResult452_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170848 - temp_output_7_0_g170849 ) / ( temp_output_10_0_g170849 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170838;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				float temp_output_448_0_g170838 = staticSwitch14_g170855;
				half Dryness_VertMask378_g170838 = temp_output_448_0_g170838;
				half Dryness_MaskNoise291_g170838 = 1.0;
				half Custom_Mask411_g170838 = 1.0;
				float temp_output_7_0_g170852 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170852 = ( _DrynessBlendRemap.y - temp_output_7_0_g170852 );
				half Dryness_Mask329_g170838 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170838 * Dryness_MultiMask302_g170838 * Dryness_LumaMask301_g170838 * Dryness_VertMask378_g170838 * Dryness_MaskNoise291_g170838 * Dryness_GlobalMask352_g170838 * Custom_Mask411_g170838 ) - temp_output_7_0_g170852 ) / ( temp_output_10_0_g170852 + 0.0001 ) ) );
				float3 lerpResult336_g170838 = lerp( Visual_Albedo292_g170838 , ( staticSwitch499_g170838 * staticSwitch1_g170858 * (_DrynessColor).rgb ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170838 = lerpResult336_g170838;
				#else
				float3 staticSwitch356_g170838 = Visual_Albedo292_g170838;
				#endif
				half3 Final_Albedo331_g170838 = staticSwitch356_g170838;
				float3 In_Albedo3_g170841 = Final_Albedo331_g170838;
				float3 In_AlbedoRaw3_g170841 = Out_AlbedoRaw4_g170840;
				float2 In_NormalTS3_g170841 = Out_NormalTS4_g170840;
				float3 In_NormalWS3_g170841 = Out_NormalWS4_g170840;
				half4 Visual_Shader415_g170838 = Out_Shader4_g170840;
				float4 break438_g170838 = Visual_Shader415_g170838;
				float4 appendResult439_g170838 = (float4(break438_g170838.x , break438_g170838.y , break438_g170838.z , ( break438_g170838.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170838 = lerp( Visual_Shader415_g170838 , appendResult439_g170838 , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170838 = lerpResult427_g170838;
				#else
				float4 staticSwitch426_g170838 = Visual_Shader415_g170838;
				#endif
				half4 Final_Shader433_g170838 = staticSwitch426_g170838;
				float4 In_Shader3_g170841 = Final_Shader433_g170838;
				float4 In_Emissive3_g170841 = Out_Emissive4_g170840;
				float In_Grayscale3_g170841 = temp_output_280_12_g170838;
				float In_Luminosity3_g170841 = temp_output_280_15_g170838;
				float In_MultiMask3_g170841 = temp_output_280_11_g170838;
				float In_AlphaClip3_g170841 = Out_AlphaClip4_g170840;
				float In_AlphaFade3_g170841 = Out_AlphaFade4_g170840;
				float3 In_Translucency3_g170841 = Out_Translucency4_g170840;
				half Visual_Transmission416_g170838 = Out_Transmission4_g170840;
				float lerpResult421_g170838 = lerp( Visual_Transmission416_g170838 , ( Visual_Transmission416_g170838 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170838 = lerpResult421_g170838;
				#else
				float staticSwitch418_g170838 = Visual_Transmission416_g170838;
				#endif
				half Final_Transmission425_g170838 = staticSwitch418_g170838;
				float In_Transmission3_g170841 = Final_Transmission425_g170838;
				float In_Thickness3_g170841 = Out_Thickness4_g170840;
				float In_Diffusion3_g170841 = Out_Diffusion4_g170840;
				Data3_g170841.Dummy = In_Dummy3_g170841;
				Data3_g170841.Albedo = In_Albedo3_g170841;
				Data3_g170841.AlbedoRaw = In_AlbedoRaw3_g170841;
				Data3_g170841.NormalTS = In_NormalTS3_g170841;
				Data3_g170841.NormalWS = In_NormalWS3_g170841;
				Data3_g170841.Shader = In_Shader3_g170841;
				Data3_g170841.Emissive= In_Emissive3_g170841;
				Data3_g170841.MultiMask = In_MultiMask3_g170841;
				Data3_g170841.Grayscale = In_Grayscale3_g170841;
				Data3_g170841.Luminosity = In_Luminosity3_g170841;
				Data3_g170841.AlphaClip = In_AlphaClip3_g170841;
				Data3_g170841.AlphaFade = In_AlphaFade3_g170841;
				Data3_g170841.Translucency = In_Translucency3_g170841;
				Data3_g170841.Transmission = In_Transmission3_g170841;
				Data3_g170841.Thickness = In_Thickness3_g170841;
				Data3_g170841.Diffusion = In_Diffusion3_g170841;
				TVEVisualData Data4_g170862 = Data3_g170841;
				float Out_Dummy4_g170862 = 0;
				float3 Out_Albedo4_g170862 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170862 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170862 = float2( 0,0 );
				float3 Out_NormalWS4_g170862 = float3( 0,0,0 );
				float4 Out_Shader4_g170862 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170862 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170862 = 0;
				float Out_Grayscale4_g170862 = 0;
				float Out_Luminosity4_g170862 = 0;
				float Out_AlphaClip4_g170862 = 0;
				float Out_AlphaFade4_g170862 = 0;
				float3 Out_Translucency4_g170862 = float3( 0,0,0 );
				float Out_Transmission4_g170862 = 0;
				float Out_Thickness4_g170862 = 0;
				float Out_Diffusion4_g170862 = 0;
				Out_Dummy4_g170862 = Data4_g170862.Dummy;
				Out_Albedo4_g170862 = Data4_g170862.Albedo;
				Out_AlbedoRaw4_g170862 = Data4_g170862.AlbedoRaw;
				Out_NormalTS4_g170862 = Data4_g170862.NormalTS;
				Out_NormalWS4_g170862 = Data4_g170862.NormalWS;
				Out_Shader4_g170862 = Data4_g170862.Shader;
				Out_Emissive4_g170862= Data4_g170862.Emissive;
				Out_MultiMask4_g170862 = Data4_g170862.MultiMask;
				Out_Grayscale4_g170862 = Data4_g170862.Grayscale;
				Out_Luminosity4_g170862= Data4_g170862.Luminosity;
				Out_AlphaClip4_g170862 = Data4_g170862.AlphaClip;
				Out_AlphaFade4_g170862 = Data4_g170862.AlphaFade;
				Out_Translucency4_g170862 = Data4_g170862.Translucency;
				Out_Transmission4_g170862 = Data4_g170862.Transmission;
				Out_Thickness4_g170862 = Data4_g170862.Thickness;
				Out_Diffusion4_g170862 = Data4_g170862.Diffusion;
				half3 Visual_Albedo127_g170861 = Out_Albedo4_g170862;
				float4 vertexToFrag24_g170813 = IN.ase_texcoord13;
				half4 Interp_Data1269 = vertexToFrag24_g170813;
				float clampResult208_g170861 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170861 = ( Visual_Albedo127_g170861 + ( ( Visual_Albedo127_g170861 * Visual_Albedo127_g170861 * 200.0 * _motion_highlight_color ) * clampResult208_g170861 ) );
				#else
				float3 staticSwitch214_g170861 = Visual_Albedo127_g170861;
				#endif
				half3 Final_Albedo160_g170861 = staticSwitch214_g170861;
				float3 In_Albedo3_g170863 = Final_Albedo160_g170861;
				float3 In_AlbedoRaw3_g170863 = Out_AlbedoRaw4_g170862;
				float2 In_NormalTS3_g170863 = Out_NormalTS4_g170862;
				float3 In_NormalWS3_g170863 = Out_NormalWS4_g170862;
				float4 In_Shader3_g170863 = Out_Shader4_g170862;
				float4 In_Emissive3_g170863 = Out_Emissive4_g170862;
				float In_Grayscale3_g170863 = Out_Grayscale4_g170862;
				float In_Luminosity3_g170863 = Out_Luminosity4_g170862;
				float In_MultiMask3_g170863 = Out_MultiMask4_g170862;
				float In_AlphaClip3_g170863 = Out_AlphaClip4_g170862;
				float In_AlphaFade3_g170863 = Out_AlphaFade4_g170862;
				float3 In_Translucency3_g170863 = Out_Translucency4_g170862;
				float In_Transmission3_g170863 = Out_Transmission4_g170862;
				float In_Thickness3_g170863 = Out_Thickness4_g170862;
				float In_Diffusion3_g170863 = Out_Diffusion4_g170862;
				Data3_g170863.Dummy = In_Dummy3_g170863;
				Data3_g170863.Albedo = In_Albedo3_g170863;
				Data3_g170863.AlbedoRaw = In_AlbedoRaw3_g170863;
				Data3_g170863.NormalTS = In_NormalTS3_g170863;
				Data3_g170863.NormalWS = In_NormalWS3_g170863;
				Data3_g170863.Shader = In_Shader3_g170863;
				Data3_g170863.Emissive= In_Emissive3_g170863;
				Data3_g170863.MultiMask = In_MultiMask3_g170863;
				Data3_g170863.Grayscale = In_Grayscale3_g170863;
				Data3_g170863.Luminosity = In_Luminosity3_g170863;
				Data3_g170863.AlphaClip = In_AlphaClip3_g170863;
				Data3_g170863.AlphaFade = In_AlphaFade3_g170863;
				Data3_g170863.Translucency = In_Translucency3_g170863;
				Data3_g170863.Transmission = In_Transmission3_g170863;
				Data3_g170863.Thickness = In_Thickness3_g170863;
				Data3_g170863.Diffusion = In_Diffusion3_g170863;
				TVEVisualData Data4_g170865 = Data3_g170863;
				float Out_Dummy4_g170865 = 0;
				float3 Out_Albedo4_g170865 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170865 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170865 = float2( 0,0 );
				float3 Out_NormalWS4_g170865 = float3( 0,0,0 );
				float4 Out_Shader4_g170865 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170865 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170865 = 0;
				float Out_Grayscale4_g170865 = 0;
				float Out_Luminosity4_g170865 = 0;
				float Out_AlphaClip4_g170865 = 0;
				float Out_AlphaFade4_g170865 = 0;
				float3 Out_Translucency4_g170865 = float3( 0,0,0 );
				float Out_Transmission4_g170865 = 0;
				float Out_Thickness4_g170865 = 0;
				float Out_Diffusion4_g170865 = 0;
				Out_Dummy4_g170865 = Data4_g170865.Dummy;
				Out_Albedo4_g170865 = Data4_g170865.Albedo;
				Out_AlbedoRaw4_g170865 = Data4_g170865.AlbedoRaw;
				Out_NormalTS4_g170865 = Data4_g170865.NormalTS;
				Out_NormalWS4_g170865 = Data4_g170865.NormalWS;
				Out_Shader4_g170865 = Data4_g170865.Shader;
				Out_Emissive4_g170865= Data4_g170865.Emissive;
				Out_MultiMask4_g170865 = Data4_g170865.MultiMask;
				Out_Grayscale4_g170865 = Data4_g170865.Grayscale;
				Out_Luminosity4_g170865= Data4_g170865.Luminosity;
				Out_AlphaClip4_g170865 = Data4_g170865.AlphaClip;
				Out_AlphaFade4_g170865 = Data4_g170865.AlphaFade;
				Out_Translucency4_g170865 = Data4_g170865.Translucency;
				Out_Transmission4_g170865 = Data4_g170865.Transmission;
				Out_Thickness4_g170865 = Data4_g170865.Thickness;
				Out_Diffusion4_g170865 = Data4_g170865.Diffusion;
				half3 Visual_Albedo127_g170864 = Out_Albedo4_g170865;
				float3 temp_output_622_0_g170864 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170868) = _OverlayAlbedoTex;
				float localFilterTexture19_g170897 = ( 0.0 );
				SamplerState SamplerDefault19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170897 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170897 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170897 = SamplerDefault19_g170897;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170897 = SamplerDefault19_g170897;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170897 = SamplerPoint19_g170897;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170897 = SamplerLow19_g170897;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170897 = SamplerMedium19_g170897;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170897 = SamplerHigh19_g170897;
				#endif
				SamplerState Sampler238_g170868 = SS19_g170897;
				float4 temp_output_6_0_g170869 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170869 = ( temp_output_6_0_g170869 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170869 = temp_output_6_0_g170869;
				#endif
				half4 Overlay_Coords639_g170864 = staticSwitch14_g170869;
				float4 temp_output_37_0_g170868 = Overlay_Coords639_g170864;
				half4 Coords238_g170868 = temp_output_37_0_g170868;
				TVEModelData Data15_g170899 = Data16_g170493;
				float Out_Dummy15_g170899 = 0;
				float3 Out_PositionWS15_g170899 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170899 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170899 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170899 = float3( 0,0,0 );
				float4 Out_VertexData15_g170899 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170899 = float4( 0,0,0,0 );
				Out_Dummy15_g170899 = Data15_g170899.Dummy;
				Out_PositionWS15_g170899 = Data15_g170899.PositionWS;
				Out_PositionWO15_g170899 = Data15_g170899.PositionWO;
				Out_PivotWS15_g170899 = Data15_g170899.PivotWS;
				Out_PivotWO15_g170899 = Data15_g170899.PivotWO;
				Out_NormalWS15_g170899 = Data15_g170899.NormalWS;
				Out_ViewDirWS15_g170899 = Data15_g170899.ViewDirWS;
				Out_VertexData15_g170899 = Data15_g170899.VertexData;
				Out_BoundsData15_g170899 = Data15_g170899.BoundsData;
				half3 Model_PositionWO602_g170864 = Out_PositionWO15_g170899;
				float3 temp_output_279_0_g170868 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170868 = temp_output_279_0_g170868;
				half4 localSamplePlanar2D238_g170868 = SamplePlanar2D( Texture238_g170868 , Sampler238_g170868 , Coords238_g170868 , WorldPosition238_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170868 = SS19_g170897;
				half4 Coords246_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition246_g170868 = temp_output_279_0_g170868;
				half3 Model_NormalWS712_g170864 = Out_NormalWS15_g170899;
				float3 temp_output_280_0_g170868 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170868 = temp_output_280_0_g170868;
				half4 localSamplePlanar3D246_g170868 = SamplePlanar3D( Texture246_g170868 , Sampler246_g170868 , Coords246_g170868 , WorldPosition246_g170868 , WorldNormal246_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170868 = SS19_g170897;
				float4 Coords234_g170868 = temp_output_37_0_g170868;
				float3 WorldPosition234_g170868 = temp_output_279_0_g170868;
				float4 localSampleStochastic2D234_g170868 = SampleStochastic2D( Texture234_g170868 , Sampler234_g170868 , Coords234_g170868 , WorldPosition234_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170868 = SS19_g170897;
				half4 Coords263_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition263_g170868 = temp_output_279_0_g170868;
				half3 WorldNormal263_g170868 = temp_output_280_0_g170868;
				half4 localSampleStochastic3D263_g170868 = SampleStochastic3D( Texture263_g170868 , Sampler263_g170868 , Coords263_g170868 , WorldPosition263_g170868 , WorldNormal263_g170868 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170864 = localSamplePlanar3D246_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170864 = localSampleStochastic2D234_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170864 = localSampleStochastic3D263_g170868;
				#else
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#endif
				half3 Overlay_Albedo526_g170864 = (staticSwitch676_g170864).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170864 = ( temp_output_622_0_g170864 * Overlay_Albedo526_g170864 );
				#else
				float3 staticSwitch578_g170864 = temp_output_622_0_g170864;
				#endif
				float3 temp_output_6_0_g170875 = staticSwitch578_g170864;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170875 = ( temp_output_6_0_g170875 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170875 = temp_output_6_0_g170875;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170872) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170872 = sampler_Linear_Repeat;
				float4 appendResult863_g170864 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170872 = appendResult863_g170864;
				half4 Coords246_g170872 = temp_output_37_0_g170872;
				float3 temp_output_279_0_g170872 = Model_PositionWO602_g170864;
				half3 WorldPosition246_g170872 = temp_output_279_0_g170872;
				float3 temp_output_280_0_g170872 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170872 = temp_output_280_0_g170872;
				half4 localSamplePlanar3D246_g170872 = SamplePlanar3D( Texture246_g170872 , Sampler246_g170872 , Coords246_g170872 , WorldPosition246_g170872 , WorldNormal246_g170872 );
				half Overlay_GlitterTex854_g170864 = (localSamplePlanar3D246_g170872).x;
				half3 Model_PositionWS879_g170864 = Out_PositionWS15_g170899;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170864 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170864 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170864 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170864 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170864 = staticSwitch868_g170864;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170889) = _OverlayMaskTex;
				SamplerState Sampler276_g170889 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170890 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170890 = temp_output_6_0_g170890;
				#endif
				half4 Local_MaskCoords888_g170864 = staticSwitch14_g170890;
				float4 temp_output_37_0_g170889 = Local_MaskCoords888_g170864;
				half4 Coords276_g170889 = temp_output_37_0_g170889;
				half2 TexCoord276_g170889 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170889 = SampleMain( Texture276_g170889 , Sampler276_g170889 , Coords276_g170889 , TexCoord276_g170889 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170889) = _OverlayMaskTex;
				SamplerState Sampler275_g170889 = sampler_Linear_Repeat;
				half4 Coords275_g170889 = temp_output_37_0_g170889;
				half2 TexCoord275_g170889 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170889 = SampleExtra( Texture275_g170889 , Sampler275_g170889 , Coords275_g170889 , TexCoord275_g170889 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170864 = localSampleExtra275_g170889;
				#else
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#endif
				half4 Local_MaskTex887_g170864 = staticSwitch894_g170864;
				float clampResult17_g170891 = clamp( (Local_MaskTex887_g170864).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170892 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170892 = ( _OverlayMaskRemap.y - temp_output_7_0_g170892 );
				float lerpResult900_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170891 - temp_output_7_0_g170892 ) / ( temp_output_10_0_g170892 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170864 = lerpResult900_g170864;
				float3 temp_output_739_21_g170864 = Out_NormalWS4_g170865;
				half3 Visual_NormalWS749_g170864 = temp_output_739_21_g170864;
				float clampResult17_g170885 = clamp( saturate( (Visual_NormalWS749_g170864).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170884 = _OverlayProjRemap.x;
				float temp_output_10_0_g170884 = ( _OverlayProjRemap.y - temp_output_7_0_g170884 );
				float lerpResult842_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170885 - temp_output_7_0_g170884 ) / ( temp_output_10_0_g170884 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170864 = lerpResult842_g170864;
				float temp_output_739_15_g170864 = Out_Luminosity4_g170865;
				half Visual_Luminosity654_g170864 = temp_output_739_15_g170864;
				float clampResult17_g170887 = clamp( Visual_Luminosity654_g170864 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170886 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170886 = ( _OverlayLumaRemap.y - temp_output_7_0_g170886 );
				float lerpResult587_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170887 - temp_output_7_0_g170886 ) / ( temp_output_10_0_g170886 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170864 = lerpResult587_g170864;
				half4 Model_VertexMasks791_g170864 = Out_VertexData15_g170899;
				float4 break792_g170864 = Model_VertexMasks791_g170864;
				float4 break33_g170877 = _overlay_vert_mode;
				float temp_output_30_0_g170877 = ( break792_g170864.x * break33_g170877.x );
				float temp_output_29_0_g170877 = ( break792_g170864.y * break33_g170877.y );
				float temp_output_31_0_g170877 = ( break792_g170864.z * break33_g170877.z );
				float temp_output_28_0_g170877 = ( temp_output_30_0_g170877 + temp_output_29_0_g170877 + temp_output_31_0_g170877 + ( break792_g170864.w * break33_g170877.w ) );
				float clampResult17_g170878 = clamp( temp_output_28_0_g170877 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170881 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170881 = ( _OverlayMeshRemap.y - temp_output_7_0_g170881 );
				float lerpResult881_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170878 - temp_output_7_0_g170881 ) / ( temp_output_10_0_g170881 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170888 = lerpResult881_g170864;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float temp_output_831_0_g170864 = staticSwitch14_g170888;
				half Overlay_VertMask801_g170864 = temp_output_831_0_g170864;
				half Overlay_MaskNoise427_g170864 = 1.0;
				TVEGlobalData Data15_g170866 = Data204_g170494;
				float Out_Dummy15_g170866 = 0;
				float4 Out_CoatParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170866 = float4( 0,0,0,0 );
				Out_Dummy15_g170866 = Data15_g170866.Dummy;
				Out_CoatParams15_g170866 = Data15_g170866.CoatParams;
				Out_PaintParams15_g170866 = Data15_g170866.PaintParams;
				Out_GlowParams15_g170866 = Data15_g170866.GlowParams;
				Out_AtmoParams15_g170866= Data15_g170866.AtmoParams;
				Out_FadeParams15_g170866= Data15_g170866.FadeParams;
				Out_FormParams15_g170866 = Data15_g170866.FormParams;
				Out_LandParams15_g170866 = Data15_g170866.LandParams;
				Out_WindParams15_g170866 = Data15_g170866.WindParams;
				Out_PushParams15_g170866 = Data15_g170866.PushParams;
				half4 Global_AtmoParams516_g170864 = Out_AtmoParams15_g170866;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170864 = ( (Global_AtmoParams516_g170864).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170864 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170864 = staticSwitch705_g170864;
				half Custom_Mask646_g170864 = 1.0;
				float temp_output_7_0_g170893 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170893 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170893 );
				half Overlay_Mask494_g170864 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170864 * Overlay_MaskProj457_g170864 * Overlay_MaskLuma438_g170864 * Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 * Custom_Mask646_g170864 ) - temp_output_7_0_g170893 ) / ( temp_output_10_0_g170893 + 0.0001 ) ) );
				float3 lerpResult467_g170864 = lerp( Visual_Albedo127_g170864 , ( staticSwitch14_g170875 + Overlay_GlitterColor865_g170864 ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170864 = lerpResult467_g170864;
				#else
				float3 staticSwitch577_g170864 = Visual_Albedo127_g170864;
				#endif
				half3 Final_Albedo493_g170864 = staticSwitch577_g170864;
				float3 In_Albedo3_g170867 = Final_Albedo493_g170864;
				float3 In_AlbedoRaw3_g170867 = Out_AlbedoRaw4_g170865;
				half2 Visual_NormalTS535_g170864 = Out_NormalTS4_g170865;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170870) = _OverlayNormalTex;
				float localFilterTexture29_g170898 = ( 0.0 );
				SamplerState SamplerDefault29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170898 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170898 = SamplerDefault29_g170898;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170898 = SamplerDefault29_g170898;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170898 = SamplerPoint29_g170898;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170898 = SamplerLow29_g170898;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170898 = SamplerMedium29_g170898;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170898 = SamplerHigh29_g170898;
				#endif
				SamplerState Sampler238_g170870 = SS29_g170898;
				float4 temp_output_37_0_g170870 = Overlay_Coords639_g170864;
				half4 Coords238_g170870 = temp_output_37_0_g170870;
				float3 temp_output_279_0_g170870 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170870 = temp_output_279_0_g170870;
				half4 localSamplePlanar2D238_g170870 = SamplePlanar2D( Texture238_g170870 , Sampler238_g170870 , Coords238_g170870 , WorldPosition238_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170870) = _OverlayNormalTex;
				SamplerState Sampler246_g170870 = SS29_g170898;
				half4 Coords246_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition246_g170870 = temp_output_279_0_g170870;
				float3 temp_output_280_0_g170870 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170870 = temp_output_280_0_g170870;
				half4 localSamplePlanar3D246_g170870 = SamplePlanar3D( Texture246_g170870 , Sampler246_g170870 , Coords246_g170870 , WorldPosition246_g170870 , WorldNormal246_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170870) = _OverlayNormalTex;
				SamplerState Sampler234_g170870 = SS29_g170898;
				float4 Coords234_g170870 = temp_output_37_0_g170870;
				float3 WorldPosition234_g170870 = temp_output_279_0_g170870;
				float4 localSampleStochastic2D234_g170870 = SampleStochastic2D( Texture234_g170870 , Sampler234_g170870 , Coords234_g170870 , WorldPosition234_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170870) = _OverlayNormalTex;
				SamplerState Sampler263_g170870 = SS29_g170898;
				half4 Coords263_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition263_g170870 = temp_output_279_0_g170870;
				half3 WorldNormal263_g170870 = temp_output_280_0_g170870;
				half4 localSampleStochastic3D263_g170870 = SampleStochastic3D( Texture263_g170870 , Sampler263_g170870 , Coords263_g170870 , WorldPosition263_g170870 , WorldNormal263_g170870 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170864 = localSamplePlanar3D246_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170864 = localSampleStochastic2D234_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170864 = localSampleStochastic3D263_g170870;
				#else
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#endif
				half4 Normal_Packed45_g170874 = staticSwitch686_g170864;
				float2 appendResult58_g170874 = (float2(( (Normal_Packed45_g170874).x * (Normal_Packed45_g170874).w ) , (Normal_Packed45_g170874).y));
				half2 Normal_Default50_g170874 = appendResult58_g170874;
				half2 Normal_ASTC41_g170874 = (Normal_Packed45_g170874).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170874 = Normal_ASTC41_g170874;
				#else
				float2 staticSwitch38_g170874 = Normal_Default50_g170874;
				#endif
				half2 Normal_NO_DTX544_g170874 = (Normal_Packed45_g170874).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170874 = Normal_NO_DTX544_g170874;
				#else
				float2 staticSwitch37_g170874 = staticSwitch38_g170874;
				#endif
				half2 Normal_Planar45_g170873 = (staticSwitch37_g170874*2.0 + -1.0);
				float2 break71_g170873 = Normal_Planar45_g170873;
				float3 appendResult72_g170873 = (float3(break71_g170873.x , 0.0 , break71_g170873.y));
				half2 Overlay_Normal528_g170864 = (mul( ase_worldToTangent, appendResult72_g170873 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170864 = Overlay_Normal528_g170864;
				#else
				float2 staticSwitch579_g170864 = Visual_NormalTS535_g170864;
				#endif
				float2 lerpResult551_g170864 = lerp( Visual_NormalTS535_g170864 , ( staticSwitch579_g170864 * _OverlayNormalValue ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170864 = lerpResult551_g170864;
				#else
				float2 staticSwitch583_g170864 = Visual_NormalTS535_g170864;
				#endif
				half2 Final_NormalTS499_g170864 = staticSwitch583_g170864;
				float2 In_NormalTS3_g170867 = Final_NormalTS499_g170864;
				float3 In_NormalWS3_g170867 = temp_output_739_21_g170864;
				half4 Visual_Masks536_g170864 = Out_Shader4_g170865;
				float4 appendResult585_g170864 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170864 = lerp( Visual_Masks536_g170864 , appendResult585_g170864 , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170864 = lerpResult584_g170864;
				#else
				float4 staticSwitch586_g170864 = Visual_Masks536_g170864;
				#endif
				half4 Final_Masks482_g170864 = staticSwitch586_g170864;
				float4 In_Shader3_g170867 = Final_Masks482_g170864;
				float4 In_Emissive3_g170867 = Out_Emissive4_g170865;
				float temp_output_739_12_g170864 = Out_Grayscale4_g170865;
				float In_Grayscale3_g170867 = temp_output_739_12_g170864;
				float In_Luminosity3_g170867 = temp_output_739_15_g170864;
				float In_MultiMask3_g170867 = Out_MultiMask4_g170865;
				float In_AlphaClip3_g170867 = Out_AlphaClip4_g170865;
				float In_AlphaFade3_g170867 = Out_AlphaFade4_g170865;
				float3 In_Translucency3_g170867 = Out_Translucency4_g170865;
				half Visual_Transmission699_g170864 = Out_Transmission4_g170865;
				float lerpResult746_g170864 = lerp( Visual_Transmission699_g170864 , ( Visual_Transmission699_g170864 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170864 = lerpResult746_g170864;
				#else
				float staticSwitch703_g170864 = Visual_Transmission699_g170864;
				#endif
				half Final_Transmission702_g170864 = staticSwitch703_g170864;
				float In_Transmission3_g170867 = Final_Transmission702_g170864;
				float In_Thickness3_g170867 = Out_Thickness4_g170865;
				float In_Diffusion3_g170867 = Out_Diffusion4_g170865;
				Data3_g170867.Dummy = In_Dummy3_g170867;
				Data3_g170867.Albedo = In_Albedo3_g170867;
				Data3_g170867.AlbedoRaw = In_AlbedoRaw3_g170867;
				Data3_g170867.NormalTS = In_NormalTS3_g170867;
				Data3_g170867.NormalWS = In_NormalWS3_g170867;
				Data3_g170867.Shader = In_Shader3_g170867;
				Data3_g170867.Emissive= In_Emissive3_g170867;
				Data3_g170867.MultiMask = In_MultiMask3_g170867;
				Data3_g170867.Grayscale = In_Grayscale3_g170867;
				Data3_g170867.Luminosity = In_Luminosity3_g170867;
				Data3_g170867.AlphaClip = In_AlphaClip3_g170867;
				Data3_g170867.AlphaFade = In_AlphaFade3_g170867;
				Data3_g170867.Translucency = In_Translucency3_g170867;
				Data3_g170867.Transmission = In_Transmission3_g170867;
				Data3_g170867.Thickness = In_Thickness3_g170867;
				Data3_g170867.Diffusion = In_Diffusion3_g170867;
				TVEVisualData Data4_g170901 = Data3_g170867;
				float Out_Dummy4_g170901 = 0;
				float3 Out_Albedo4_g170901 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170901 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170901 = float2( 0,0 );
				float3 Out_NormalWS4_g170901 = float3( 0,0,0 );
				float4 Out_Shader4_g170901 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170901 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170901 = 0;
				float Out_Grayscale4_g170901 = 0;
				float Out_Luminosity4_g170901 = 0;
				float Out_AlphaClip4_g170901 = 0;
				float Out_AlphaFade4_g170901 = 0;
				float3 Out_Translucency4_g170901 = float3( 0,0,0 );
				float Out_Transmission4_g170901 = 0;
				float Out_Thickness4_g170901 = 0;
				float Out_Diffusion4_g170901 = 0;
				Out_Dummy4_g170901 = Data4_g170901.Dummy;
				Out_Albedo4_g170901 = Data4_g170901.Albedo;
				Out_AlbedoRaw4_g170901 = Data4_g170901.AlbedoRaw;
				Out_NormalTS4_g170901 = Data4_g170901.NormalTS;
				Out_NormalWS4_g170901 = Data4_g170901.NormalWS;
				Out_Shader4_g170901 = Data4_g170901.Shader;
				Out_Emissive4_g170901= Data4_g170901.Emissive;
				Out_MultiMask4_g170901 = Data4_g170901.MultiMask;
				Out_Grayscale4_g170901 = Data4_g170901.Grayscale;
				Out_Luminosity4_g170901= Data4_g170901.Luminosity;
				Out_AlphaClip4_g170901 = Data4_g170901.AlphaClip;
				Out_AlphaFade4_g170901 = Data4_g170901.AlphaFade;
				Out_Translucency4_g170901 = Data4_g170901.Translucency;
				Out_Transmission4_g170901 = Data4_g170901.Transmission;
				Out_Thickness4_g170901 = Data4_g170901.Thickness;
				Out_Diffusion4_g170901 = Data4_g170901.Diffusion;
				half3 Visual_Albedo127_g170900 = Out_Albedo4_g170901;
				TVEGlobalData Data15_g170906 = Data204_g170494;
				float Out_Dummy15_g170906 = 0;
				float4 Out_CoatParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170906 = float4( 0,0,0,0 );
				Out_Dummy15_g170906 = Data15_g170906.Dummy;
				Out_CoatParams15_g170906 = Data15_g170906.CoatParams;
				Out_PaintParams15_g170906 = Data15_g170906.PaintParams;
				Out_GlowParams15_g170906 = Data15_g170906.GlowParams;
				Out_AtmoParams15_g170906= Data15_g170906.AtmoParams;
				Out_FadeParams15_g170906= Data15_g170906.FadeParams;
				Out_FormParams15_g170906 = Data15_g170906.FormParams;
				Out_LandParams15_g170906 = Data15_g170906.LandParams;
				Out_WindParams15_g170906 = Data15_g170906.WindParams;
				Out_PushParams15_g170906 = Data15_g170906.PushParams;
				half4 Global_AtmoParams516_g170900 = Out_AtmoParams15_g170906;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170900 = ( (Global_AtmoParams516_g170900).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170900 = 1.0;
				#endif
				half Global_Wetness429_g170900 = staticSwitch663_g170900;
				half Wetness_Value1042_g170900 = ( _WetnessIntensityValue * Global_Wetness429_g170900 );
				TVEModelData Data15_g170914 = Data16_g170493;
				float Out_Dummy15_g170914 = 0;
				float3 Out_PositionWS15_g170914 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170914 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170914 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170914 = float3( 0,0,0 );
				float4 Out_VertexData15_g170914 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170914 = float4( 0,0,0,0 );
				Out_Dummy15_g170914 = Data15_g170914.Dummy;
				Out_PositionWS15_g170914 = Data15_g170914.PositionWS;
				Out_PositionWO15_g170914 = Data15_g170914.PositionWO;
				Out_PivotWS15_g170914 = Data15_g170914.PivotWS;
				Out_PivotWO15_g170914 = Data15_g170914.PivotWO;
				Out_NormalWS15_g170914 = Data15_g170914.NormalWS;
				Out_ViewDirWS15_g170914 = Data15_g170914.ViewDirWS;
				Out_VertexData15_g170914 = Data15_g170914.VertexData;
				Out_BoundsData15_g170914 = Data15_g170914.BoundsData;
				half4 Model_VertexData1030_g170900 = Out_VertexData15_g170914;
				float4 break1019_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170919 = _wetness_vert_mode;
				float temp_output_30_0_g170919 = ( break1019_g170900.x * break33_g170919.x );
				float temp_output_29_0_g170919 = ( break1019_g170900.y * break33_g170919.y );
				float temp_output_31_0_g170919 = ( break1019_g170900.z * break33_g170919.z );
				float temp_output_28_0_g170919 = ( temp_output_30_0_g170919 + temp_output_29_0_g170919 + temp_output_31_0_g170919 + ( break1019_g170900.w * break33_g170919.w ) );
				float clampResult17_g170917 = clamp( temp_output_28_0_g170919 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170918 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170918 = ( _WetnessMeshRemap.y - temp_output_7_0_g170918 );
				float lerpResult1026_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170917 - temp_output_7_0_g170918 ) / ( temp_output_10_0_g170918 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170920 = lerpResult1026_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170920 = ( temp_output_6_0_g170920 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170920 = temp_output_6_0_g170920;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170900 = staticSwitch14_g170920;
				#else
				float staticSwitch1110_g170900 = 1.0;
				#endif
				half Wetness_VertMask1024_g170900 = staticSwitch1110_g170900;
				float temp_output_1043_0_g170900 = ( Wetness_Value1042_g170900 * Wetness_VertMask1024_g170900 );
				half Wetness_Mask866_g170900 = temp_output_1043_0_g170900;
				float4 break1083_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170923 = _wetness_water_vert_mode;
				float temp_output_30_0_g170923 = ( break1083_g170900.x * break33_g170923.x );
				float temp_output_29_0_g170923 = ( break1083_g170900.y * break33_g170923.y );
				float temp_output_31_0_g170923 = ( break1083_g170900.z * break33_g170923.z );
				float temp_output_28_0_g170923 = ( temp_output_30_0_g170923 + temp_output_29_0_g170923 + temp_output_31_0_g170923 + ( break1083_g170900.w * break33_g170923.w ) );
				float clampResult17_g170921 = clamp( temp_output_28_0_g170923 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170922 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170922 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170922 );
				float lerpResult1089_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170921 - temp_output_7_0_g170922 ) / ( temp_output_10_0_g170922 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170924 = lerpResult1089_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170924 = ( temp_output_6_0_g170924 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170924 = temp_output_6_0_g170924;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170900 = staticSwitch14_g170924;
				#else
				float staticSwitch1113_g170900 = 1.0;
				#endif
				half Water_VertMask1094_g170900 = staticSwitch1113_g170900;
				half4 Visual_Masks536_g170900 = Out_Shader4_g170901;
				float lerpResult1013_g170900 = lerp( 1.0 , (Visual_Masks536_g170900).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170900 = lerpResult1013_g170900;
				float clampResult17_g170915 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170900 * Water_VertMask1094_g170900 ) - Water_HeightMask782_g170900 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170916 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170916 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170916 );
				half3 Model_NormalWS798_g170900 = Out_NormalWS15_g170914;
				float temp_output_786_0_g170900 = saturate( (Model_NormalWS798_g170900).y );
				half Wetness_ProjMask790_g170900 = temp_output_786_0_g170900;
				half Water_Mask760_g170900 = ( saturate( ( ( clampResult17_g170915 - temp_output_7_0_g170916 ) / ( temp_output_10_0_g170916 + 0.0001 ) ) ) * Wetness_ProjMask790_g170900 );
				float3 lerpResult918_g170900 = lerp( Visual_Albedo127_g170900 , ( Visual_Albedo127_g170900 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170900 = lerpResult918_g170900;
				#else
				float3 staticSwitch946_g170900 = Visual_Albedo127_g170900;
				#endif
				float3 lerpResult768_g170900 = lerp( staticSwitch946_g170900 , ( staticSwitch946_g170900 * staticSwitch946_g170900 ) , _WetnessContrastValue);
				float3 lerpResult651_g170900 = lerp( Visual_Albedo127_g170900 , lerpResult768_g170900 , Wetness_Mask866_g170900);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170900 = lerpResult651_g170900;
				#else
				float3 staticSwitch577_g170900 = Visual_Albedo127_g170900;
				#endif
				half3 Final_Albedo493_g170900 = staticSwitch577_g170900;
				float3 In_Albedo3_g170902 = Final_Albedo493_g170900;
				float3 In_AlbedoRaw3_g170902 = Out_AlbedoRaw4_g170901;
				half2 Visual_Normal535_g170900 = Out_NormalTS4_g170901;
				float lerpResult877_g170900 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170900 = ( Visual_Normal535_g170900 * lerpResult877_g170900 );
				#else
				float2 staticSwitch957_g170900 = Visual_Normal535_g170900;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170912) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170912 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170900 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170912 = appendResult924_g170900;
				half4 Coords238_g170912 = temp_output_37_0_g170912;
				half3 Model_PositionWO602_g170900 = Out_PositionWO15_g170914;
				float3 temp_output_279_0_g170912 = Model_PositionWO602_g170900;
				half3 WorldPosition238_g170912 = temp_output_279_0_g170912;
				half4 localSamplePlanar2D238_g170912 = SamplePlanar2D( Texture238_g170912 , Sampler238_g170912 , Coords238_g170912 , WorldPosition238_g170912 );
				float4 temp_output_1010_0_g170900 = localSamplePlanar2D238_g170912;
				half2 Rain_DropsNormal919_g170900 = (temp_output_1010_0_g170900).zw;
				float2 temp_output_903_0_g170900 = (Rain_DropsNormal919_g170900*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170900 = (temp_output_1010_0_g170900).xy;
				float2 lerpResult904_g170900 = lerp( temp_output_903_0_g170900 , (Rain_RingsNormal713_g170900*2.0 + -1.0) , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170900 = lerpResult904_g170900;
				#else
				float2 staticSwitch960_g170900 = temp_output_903_0_g170900;
				#endif
				half2 Rain_Drops1002_g170900 = ( staticSwitch960_g170900 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170900 = Out_PositionWS15_g170914;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170900 = ( (Global_AtmoParams516_g170900).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170900 = 1.0;
				#endif
				half Global_Rain955_g170900 = staticSwitch949_g170900;
				half Rain_Value1067_g170900 = Global_Rain955_g170900;
				float4 break1097_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170900.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170900.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170900.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170900.w * break33_g170927.w ) );
				float clampResult17_g170925 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170926 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170926 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170926 );
				float lerpResult1100_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170925 - temp_output_7_0_g170926 ) / ( temp_output_10_0_g170926 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170900 = staticSwitch14_g170928;
				#else
				float staticSwitch1115_g170900 = 1.0;
				#endif
				half Rain_VertMask1108_g170900 = staticSwitch1115_g170900;
				half Rain_Mask999_g170900 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170900 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170900 * Rain_VertMask1108_g170900 );
				half2 Normal_Planar45_g170911 = ( Rain_Drops1002_g170900 * Rain_Mask999_g170900 * Wetness_ProjMask790_g170900 );
				float2 break71_g170911 = Normal_Planar45_g170911;
				float3 appendResult72_g170911 = (float3(break71_g170911.x , 0.0 , break71_g170911.y));
				half2 Wetness_Normal526_g170900 = (mul( ase_worldToTangent, appendResult72_g170911 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170900 = Wetness_Normal526_g170900;
				#else
				float2 staticSwitch583_g170900 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170900 = ( staticSwitch957_g170900 + staticSwitch583_g170900 );
				#else
				float2 staticSwitch774_g170900 = Visual_Normal535_g170900;
				#endif
				half2 Final_Normal499_g170900 = staticSwitch774_g170900;
				float2 In_NormalTS3_g170902 = Final_Normal499_g170900;
				float3 In_NormalWS3_g170902 = Out_NormalWS4_g170901;
				float4 break658_g170900 = Visual_Masks536_g170900;
				float temp_output_935_0_g170900 = ( Wetness_Mask866_g170900 * _WetnessSmoothnessValue );
				float lerpResult941_g170900 = lerp( temp_output_935_0_g170900 , 2.0 , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170900 = lerpResult941_g170900;
				#else
				float staticSwitch959_g170900 = temp_output_935_0_g170900;
				#endif
				float4 appendResult661_g170900 = (float4(break658_g170900.x , break658_g170900.y , break658_g170900.z , saturate( ( break658_g170900.w + staticSwitch959_g170900 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170900 = appendResult661_g170900;
				#else
				float4 staticSwitch586_g170900 = Visual_Masks536_g170900;
				#endif
				half4 Final_Masks482_g170900 = staticSwitch586_g170900;
				float4 In_Shader3_g170902 = Final_Masks482_g170900;
				float4 In_Emissive3_g170902 = Out_Emissive4_g170901;
				float In_Grayscale3_g170902 = Out_Grayscale4_g170901;
				float In_Luminosity3_g170902 = Out_Luminosity4_g170901;
				float In_MultiMask3_g170902 = Out_MultiMask4_g170901;
				float In_AlphaClip3_g170902 = Out_AlphaClip4_g170901;
				float In_AlphaFade3_g170902 = Out_AlphaFade4_g170901;
				float3 In_Translucency3_g170902 = Out_Translucency4_g170901;
				float In_Transmission3_g170902 = Out_Transmission4_g170901;
				float In_Thickness3_g170902 = Out_Thickness4_g170901;
				float In_Diffusion3_g170902 = Out_Diffusion4_g170901;
				Data3_g170902.Dummy = In_Dummy3_g170902;
				Data3_g170902.Albedo = In_Albedo3_g170902;
				Data3_g170902.AlbedoRaw = In_AlbedoRaw3_g170902;
				Data3_g170902.NormalTS = In_NormalTS3_g170902;
				Data3_g170902.NormalWS = In_NormalWS3_g170902;
				Data3_g170902.Shader = In_Shader3_g170902;
				Data3_g170902.Emissive= In_Emissive3_g170902;
				Data3_g170902.MultiMask = In_MultiMask3_g170902;
				Data3_g170902.Grayscale = In_Grayscale3_g170902;
				Data3_g170902.Luminosity = In_Luminosity3_g170902;
				Data3_g170902.AlphaClip = In_AlphaClip3_g170902;
				Data3_g170902.AlphaFade = In_AlphaFade3_g170902;
				Data3_g170902.Translucency = In_Translucency3_g170902;
				Data3_g170902.Transmission = In_Transmission3_g170902;
				Data3_g170902.Thickness = In_Thickness3_g170902;
				Data3_g170902.Diffusion = In_Diffusion3_g170902;
				TVEVisualData Data4_g170940 = Data3_g170902;
				float Out_Dummy4_g170940 = 0;
				float3 Out_Albedo4_g170940 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170940 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170940 = float2( 0,0 );
				float3 Out_NormalWS4_g170940 = float3( 0,0,0 );
				float4 Out_Shader4_g170940 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170940 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170940 = 0;
				float Out_Grayscale4_g170940 = 0;
				float Out_Luminosity4_g170940 = 0;
				float Out_AlphaClip4_g170940 = 0;
				float Out_AlphaFade4_g170940 = 0;
				float3 Out_Translucency4_g170940 = float3( 0,0,0 );
				float Out_Transmission4_g170940 = 0;
				float Out_Thickness4_g170940 = 0;
				float Out_Diffusion4_g170940 = 0;
				Out_Dummy4_g170940 = Data4_g170940.Dummy;
				Out_Albedo4_g170940 = Data4_g170940.Albedo;
				Out_AlbedoRaw4_g170940 = Data4_g170940.AlbedoRaw;
				Out_NormalTS4_g170940 = Data4_g170940.NormalTS;
				Out_NormalWS4_g170940 = Data4_g170940.NormalWS;
				Out_Shader4_g170940 = Data4_g170940.Shader;
				Out_Emissive4_g170940= Data4_g170940.Emissive;
				Out_MultiMask4_g170940 = Data4_g170940.MultiMask;
				Out_Grayscale4_g170940 = Data4_g170940.Grayscale;
				Out_Luminosity4_g170940= Data4_g170940.Luminosity;
				Out_AlphaClip4_g170940 = Data4_g170940.AlphaClip;
				Out_AlphaFade4_g170940 = Data4_g170940.AlphaFade;
				Out_Translucency4_g170940 = Data4_g170940.Translucency;
				Out_Transmission4_g170940 = Data4_g170940.Transmission;
				Out_Thickness4_g170940 = Data4_g170940.Thickness;
				Out_Diffusion4_g170940 = Data4_g170940.Diffusion;
				float3 In_Albedo3_g170930 = Out_Albedo4_g170940;
				float3 In_AlbedoRaw3_g170930 = Out_AlbedoRaw4_g170940;
				float2 In_NormalTS3_g170930 = Out_NormalTS4_g170940;
				float3 In_NormalWS3_g170930 = Out_NormalWS4_g170940;
				float4 In_Shader3_g170930 = Out_Shader4_g170940;
				float4 In_Emissive3_g170930 = Out_Emissive4_g170940;
				float In_Grayscale3_g170930 = Out_Grayscale4_g170940;
				float In_Luminosity3_g170930 = Out_Luminosity4_g170940;
				float temp_output_836_11_g170929 = Out_MultiMask4_g170940;
				float In_MultiMask3_g170930 = temp_output_836_11_g170929;
				half Visual_AlphaClip667_g170929 = Out_AlphaClip4_g170940;
				TVEGlobalData Data15_g170939 = Data204_g170494;
				float Out_Dummy15_g170939 = 0;
				float4 Out_CoatParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170939 = float4( 0,0,0,0 );
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_CoatParams15_g170939 = Data15_g170939.CoatParams;
				Out_PaintParams15_g170939 = Data15_g170939.PaintParams;
				Out_GlowParams15_g170939 = Data15_g170939.GlowParams;
				Out_AtmoParams15_g170939= Data15_g170939.AtmoParams;
				Out_FadeParams15_g170939= Data15_g170939.FadeParams;
				Out_FormParams15_g170939 = Data15_g170939.FormParams;
				Out_LandParams15_g170939 = Data15_g170939.LandParams;
				Out_WindParams15_g170939 = Data15_g170939.WindParams;
				Out_PushParams15_g170939 = Data15_g170939.PushParams;
				half4 Global_FadeParams516_g170929 = Out_FadeParams15_g170939;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170929 = saturate( (Global_FadeParams516_g170929).w );
				#else
				float staticSwitch663_g170929 = 1.0;
				#endif
				half Local_GlobalMask429_g170929 = staticSwitch663_g170929;
				float lerpResult811_g170929 = lerp( 1.0 , Visual_AlphaClip667_g170929 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170929 = lerpResult811_g170929;
				TVEModelData Data15_g170941 = Data16_g170493;
				float Out_Dummy15_g170941 = 0;
				float3 Out_PositionWS15_g170941 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170941 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170941 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170941 = float3( 0,0,0 );
				float4 Out_VertexData15_g170941 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170941 = float4( 0,0,0,0 );
				Out_Dummy15_g170941 = Data15_g170941.Dummy;
				Out_PositionWS15_g170941 = Data15_g170941.PositionWS;
				Out_PositionWO15_g170941 = Data15_g170941.PositionWO;
				Out_PivotWS15_g170941 = Data15_g170941.PivotWS;
				Out_PivotWO15_g170941 = Data15_g170941.PivotWO;
				Out_NormalWS15_g170941 = Data15_g170941.NormalWS;
				Out_ViewDirWS15_g170941 = Data15_g170941.ViewDirWS;
				Out_VertexData15_g170941 = Data15_g170941.VertexData;
				Out_BoundsData15_g170941 = Data15_g170941.BoundsData;
				half3 Model_PositionWO602_g170929 = Out_PositionWO15_g170941;
				float4 tex3DNode60_g170933 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170929 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170929 = lerp( 1.0 , tex3DNode60_g170933.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170929 = lerpResult673_g170929;
				half4 Model_VertexMasks752_g170929 = Out_VertexData15_g170941;
				float4 break755_g170929 = Model_VertexMasks752_g170929;
				float4 break33_g170931 = _cutout_vert_mode;
				float temp_output_30_0_g170931 = ( break755_g170929.x * break33_g170931.x );
				float temp_output_29_0_g170931 = ( break755_g170929.y * break33_g170931.y );
				float temp_output_31_0_g170931 = ( break755_g170929.z * break33_g170931.z );
				float temp_output_28_0_g170931 = ( temp_output_30_0_g170931 + temp_output_29_0_g170931 + temp_output_31_0_g170931 + ( break755_g170929.w * break33_g170931.w ) );
				float clampResult17_g170932 = clamp( temp_output_28_0_g170931 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170935 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170935 = ( _CutoutMeshRemap.y - temp_output_7_0_g170935 );
				float lerpResult820_g170929 = lerp( 1.0 , saturate( ( ( clampResult17_g170932 - temp_output_7_0_g170935 ) / ( temp_output_10_0_g170935 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170936 = lerpResult820_g170929;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170936 = ( temp_output_6_0_g170936 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170936 = temp_output_6_0_g170936;
				#endif
				float temp_output_801_0_g170929 = staticSwitch14_g170936;
				half Local_VertMask766_g170929 = temp_output_801_0_g170929;
				half Visual_MultiMask671_g170929 = temp_output_836_11_g170929;
				float lerpResult683_g170929 = lerp( 1.0 , Visual_MultiMask671_g170929 , _CutoutMultiValue);
				half Local_MultiMask685_g170929 = lerpResult683_g170929;
				float lerpResult728_g170929 = lerp( Visual_AlphaClip667_g170929 , min( Visual_AlphaClip667_g170929 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170929 ) - ( Local_AlphaMask814_g170929 * Local_NoiseMask678_g170929 * Local_VertMask766_g170929 ) ) ) ) , Local_MultiMask685_g170929);
				half Local_AlphaClip784_g170929 = lerpResult728_g170929;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170929 = Local_AlphaClip784_g170929;
				#else
				float staticSwitch577_g170929 = Visual_AlphaClip667_g170929;
				#endif
				half Final_AlphaClip795_g170929 = staticSwitch577_g170929;
				float In_AlphaClip3_g170930 = Final_AlphaClip795_g170929;
				float In_AlphaFade3_g170930 = Out_AlphaFade4_g170940;
				float3 In_Translucency3_g170930 = Out_Translucency4_g170940;
				float In_Transmission3_g170930 = Out_Transmission4_g170940;
				float In_Thickness3_g170930 = Out_Thickness4_g170940;
				float In_Diffusion3_g170930 = Out_Diffusion4_g170940;
				Data3_g170930.Dummy = In_Dummy3_g170930;
				Data3_g170930.Albedo = In_Albedo3_g170930;
				Data3_g170930.AlbedoRaw = In_AlbedoRaw3_g170930;
				Data3_g170930.NormalTS = In_NormalTS3_g170930;
				Data3_g170930.NormalWS = In_NormalWS3_g170930;
				Data3_g170930.Shader = In_Shader3_g170930;
				Data3_g170930.Emissive= In_Emissive3_g170930;
				Data3_g170930.MultiMask = In_MultiMask3_g170930;
				Data3_g170930.Grayscale = In_Grayscale3_g170930;
				Data3_g170930.Luminosity = In_Luminosity3_g170930;
				Data3_g170930.AlphaClip = In_AlphaClip3_g170930;
				Data3_g170930.AlphaFade = In_AlphaFade3_g170930;
				Data3_g170930.Translucency = In_Translucency3_g170930;
				Data3_g170930.Transmission = In_Transmission3_g170930;
				Data3_g170930.Thickness = In_Thickness3_g170930;
				Data3_g170930.Diffusion = In_Diffusion3_g170930;
				TVEVisualData Data4_g170944 = Data3_g170930;
				float Out_Dummy4_g170944 = 0;
				float3 Out_Albedo4_g170944 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170944 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170944 = float2( 0,0 );
				float3 Out_NormalWS4_g170944 = float3( 0,0,0 );
				float4 Out_Shader4_g170944 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170944 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170944 = 0;
				float Out_Grayscale4_g170944 = 0;
				float Out_Luminosity4_g170944 = 0;
				float Out_AlphaClip4_g170944 = 0;
				float Out_AlphaFade4_g170944 = 0;
				float3 Out_Translucency4_g170944 = float3( 0,0,0 );
				float Out_Transmission4_g170944 = 0;
				float Out_Thickness4_g170944 = 0;
				float Out_Diffusion4_g170944 = 0;
				Out_Dummy4_g170944 = Data4_g170944.Dummy;
				Out_Albedo4_g170944 = Data4_g170944.Albedo;
				Out_AlbedoRaw4_g170944 = Data4_g170944.AlbedoRaw;
				Out_NormalTS4_g170944 = Data4_g170944.NormalTS;
				Out_NormalWS4_g170944 = Data4_g170944.NormalWS;
				Out_Shader4_g170944 = Data4_g170944.Shader;
				Out_Emissive4_g170944= Data4_g170944.Emissive;
				Out_MultiMask4_g170944 = Data4_g170944.MultiMask;
				Out_Grayscale4_g170944 = Data4_g170944.Grayscale;
				Out_Luminosity4_g170944= Data4_g170944.Luminosity;
				Out_AlphaClip4_g170944 = Data4_g170944.AlphaClip;
				Out_AlphaFade4_g170944 = Data4_g170944.AlphaFade;
				Out_Translucency4_g170944 = Data4_g170944.Translucency;
				Out_Transmission4_g170944 = Data4_g170944.Transmission;
				Out_Thickness4_g170944 = Data4_g170944.Thickness;
				Out_Diffusion4_g170944 = Data4_g170944.Diffusion;
				float3 In_Albedo3_g170945 = Out_Albedo4_g170944;
				float3 In_AlbedoRaw3_g170945 = Out_AlbedoRaw4_g170944;
				float2 In_NormalTS3_g170945 = Out_NormalTS4_g170944;
				float3 In_NormalWS3_g170945 = Out_NormalWS4_g170944;
				float4 In_Shader3_g170945 = Out_Shader4_g170944;
				float4 In_Emissive3_g170945 = Out_Emissive4_g170944;
				float In_Grayscale3_g170945 = Out_Grayscale4_g170944;
				float In_Luminosity3_g170945 = Out_Luminosity4_g170944;
				float temp_output_821_11_g170942 = Out_MultiMask4_g170944;
				float In_MultiMask3_g170945 = temp_output_821_11_g170942;
				half Visual_AlphaClip754_g170942 = Out_AlphaClip4_g170944;
				half Dither_Constant768_g170942 = _DitherConstantValue;
				float temp_output_7_0_g170952 = _DitherProximityMaxValue;
				float temp_output_10_0_g170952 = ( _DitherProximityMinValue - temp_output_7_0_g170952 );
				half Dither_Proximity767_g170942 = ( saturate( ( ( distance( worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170952 ) / ( temp_output_10_0_g170952 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170951 = Data16_g170493;
				float Out_Dummy15_g170951 = 0;
				float3 Out_PositionWS15_g170951 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170951 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170951 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170951 = float3( 0,0,0 );
				float4 Out_VertexData15_g170951 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170951 = float4( 0,0,0,0 );
				Out_Dummy15_g170951 = Data15_g170951.Dummy;
				Out_PositionWS15_g170951 = Data15_g170951.PositionWS;
				Out_PositionWO15_g170951 = Data15_g170951.PositionWO;
				Out_PivotWS15_g170951 = Data15_g170951.PivotWS;
				Out_PivotWO15_g170951 = Data15_g170951.PivotWO;
				Out_NormalWS15_g170951 = Data15_g170951.NormalWS;
				Out_ViewDirWS15_g170951 = Data15_g170951.ViewDirWS;
				Out_VertexData15_g170951 = Data15_g170951.VertexData;
				Out_BoundsData15_g170951 = Data15_g170951.BoundsData;
				half3 Model_PositionWS776_g170942 = Out_PositionWS15_g170951;
				float temp_output_7_0_g170950 = _DitherDistanceMinValue;
				float temp_output_10_0_g170950 = ( _DitherDistanceMaxValue - temp_output_7_0_g170950 );
				half Dither_Distance856_g170942 = ( saturate( ( ( distance( Model_PositionWS776_g170942 , _WorldSpaceCameraPos ) - temp_output_7_0_g170950 ) / ( temp_output_10_0_g170950 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170942 = Out_ViewDirWS15_g170951;
				float3 normalizeResult792_g170942 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
				float dotResult778_g170942 = dot( Model_ViewDirWS845_g170942 , normalizeResult792_g170942 );
				half Dither_Glancing784_g170942 = ( saturate( ( ( 1.0 - abs( dotResult778_g170942 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170942 = max( max( max( Dither_Constant768_g170942 , Dither_Proximity767_g170942 ) , Dither_Distance856_g170942 ) , Dither_Glancing784_g170942 );
				half3 Model_PositionWO602_g170942 = Out_PositionWO15_g170951;
				float4 tex3DNode60_g170948 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170942 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170942 = tex3DNode60_g170948.r;
				half Local_MaskNoise678_g170942 = temp_output_809_0_g170942;
				half Visual_MultiMask671_g170942 = temp_output_821_11_g170942;
				float lerpResult683_g170942 = lerp( 1.0 , Visual_MultiMask671_g170942 , _DitherMultiValue);
				half Local_MaskMulti685_g170942 = lerpResult683_g170942;
				half Custom_Mask826_g170942 = 1.0;
				float lerpResult728_g170942 = lerp( Visual_AlphaClip754_g170942 , min( Visual_AlphaClip754_g170942 , ( -0.001 - ( Dither_Value429_g170942 - Local_MaskNoise678_g170942 ) ) ) , ( Local_MaskMulti685_g170942 * Custom_Mask826_g170942 ));
				half Local_AlphaClip834_g170942 = lerpResult728_g170942;
				#ifdef TVE_DITHER
				float staticSwitch577_g170942 = Local_AlphaClip834_g170942;
				#else
				float staticSwitch577_g170942 = Visual_AlphaClip754_g170942;
				#endif
				half Final_AlphaClip493_g170942 = staticSwitch577_g170942;
				float In_AlphaClip3_g170945 = Final_AlphaClip493_g170942;
				float In_AlphaFade3_g170945 = Out_AlphaFade4_g170944;
				float3 In_Translucency3_g170945 = Out_Translucency4_g170944;
				float In_Transmission3_g170945 = Out_Transmission4_g170944;
				float In_Thickness3_g170945 = Out_Thickness4_g170944;
				float In_Diffusion3_g170945 = Out_Diffusion4_g170944;
				Data3_g170945.Dummy = In_Dummy3_g170945;
				Data3_g170945.Albedo = In_Albedo3_g170945;
				Data3_g170945.AlbedoRaw = In_AlbedoRaw3_g170945;
				Data3_g170945.NormalTS = In_NormalTS3_g170945;
				Data3_g170945.NormalWS = In_NormalWS3_g170945;
				Data3_g170945.Shader = In_Shader3_g170945;
				Data3_g170945.Emissive= In_Emissive3_g170945;
				Data3_g170945.MultiMask = In_MultiMask3_g170945;
				Data3_g170945.Grayscale = In_Grayscale3_g170945;
				Data3_g170945.Luminosity = In_Luminosity3_g170945;
				Data3_g170945.AlphaClip = In_AlphaClip3_g170945;
				Data3_g170945.AlphaFade = In_AlphaFade3_g170945;
				Data3_g170945.Translucency = In_Translucency3_g170945;
				Data3_g170945.Transmission = In_Transmission3_g170945;
				Data3_g170945.Thickness = In_Thickness3_g170945;
				Data3_g170945.Diffusion = In_Diffusion3_g170945;
				TVEVisualData Data4_g170972 = Data3_g170945;
				float Out_Dummy4_g170972 = 0;
				float3 Out_Albedo4_g170972 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170972 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170972 = float2( 0,0 );
				float3 Out_NormalWS4_g170972 = float3( 0,0,0 );
				float4 Out_Shader4_g170972 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170972 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170972 = 0;
				float Out_Grayscale4_g170972 = 0;
				float Out_Luminosity4_g170972 = 0;
				float Out_AlphaClip4_g170972 = 0;
				float Out_AlphaFade4_g170972 = 0;
				float3 Out_Translucency4_g170972 = float3( 0,0,0 );
				float Out_Transmission4_g170972 = 0;
				float Out_Thickness4_g170972 = 0;
				float Out_Diffusion4_g170972 = 0;
				Out_Dummy4_g170972 = Data4_g170972.Dummy;
				Out_Albedo4_g170972 = Data4_g170972.Albedo;
				Out_AlbedoRaw4_g170972 = Data4_g170972.AlbedoRaw;
				Out_NormalTS4_g170972 = Data4_g170972.NormalTS;
				Out_NormalWS4_g170972 = Data4_g170972.NormalWS;
				Out_Shader4_g170972 = Data4_g170972.Shader;
				Out_Emissive4_g170972= Data4_g170972.Emissive;
				Out_MultiMask4_g170972 = Data4_g170972.MultiMask;
				Out_Grayscale4_g170972 = Data4_g170972.Grayscale;
				Out_Luminosity4_g170972= Data4_g170972.Luminosity;
				Out_AlphaClip4_g170972 = Data4_g170972.AlphaClip;
				Out_AlphaFade4_g170972 = Data4_g170972.AlphaFade;
				Out_Translucency4_g170972 = Data4_g170972.Translucency;
				Out_Transmission4_g170972 = Data4_g170972.Transmission;
				Out_Thickness4_g170972 = Data4_g170972.Thickness;
				Out_Diffusion4_g170972 = Data4_g170972.Diffusion;
				float3 temp_output_297_0_g170963 = Out_Albedo4_g170972;
				float3 In_Albedo3_g170973 = temp_output_297_0_g170963;
				float3 temp_output_297_23_g170963 = Out_AlbedoRaw4_g170972;
				float3 In_AlbedoRaw3_g170973 = temp_output_297_23_g170963;
				float2 In_NormalTS3_g170973 = Out_NormalTS4_g170972;
				float3 In_NormalWS3_g170973 = Out_NormalWS4_g170972;
				float4 In_Shader3_g170973 = Out_Shader4_g170972;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170963 = Out_Emissive4_g170972;
				TVEModelData Data15_g170976 = Data16_g170493;
				float Out_Dummy15_g170976 = 0;
				float3 Out_PositionWS15_g170976 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170976 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170976 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170976 = float3( 0,0,0 );
				float4 Out_VertexData15_g170976 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170976 = float4( 0,0,0,0 );
				Out_Dummy15_g170976 = Data15_g170976.Dummy;
				Out_PositionWS15_g170976 = Data15_g170976.PositionWS;
				Out_PositionWO15_g170976 = Data15_g170976.PositionWO;
				Out_PivotWS15_g170976 = Data15_g170976.PivotWS;
				Out_PivotWO15_g170976 = Data15_g170976.PivotWO;
				Out_NormalWS15_g170976 = Data15_g170976.NormalWS;
				Out_ViewDirWS15_g170976 = Data15_g170976.ViewDirWS;
				Out_VertexData15_g170976 = Data15_g170976.VertexData;
				Out_BoundsData15_g170976 = Data15_g170976.BoundsData;
				half4 Model_VertexMasks216_g170963 = Out_VertexData15_g170976;
				float4 break251_g170963 = Model_VertexMasks216_g170963;
				float4 break33_g170967 = _emissive_vert_mode;
				float temp_output_30_0_g170967 = ( break251_g170963.x * break33_g170967.x );
				float temp_output_29_0_g170967 = ( break251_g170963.y * break33_g170967.y );
				float temp_output_31_0_g170967 = ( break251_g170963.z * break33_g170967.z );
				float temp_output_28_0_g170967 = ( temp_output_30_0_g170967 + temp_output_29_0_g170967 + temp_output_31_0_g170967 + ( break251_g170963.w * break33_g170967.w ) );
				float clampResult17_g170966 = clamp( temp_output_28_0_g170967 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170970 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170970 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170970 );
				float lerpResult303_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170966 - temp_output_7_0_g170970 ) / ( temp_output_10_0_g170970 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170975 = lerpResult303_g170963;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170975 = ( temp_output_6_0_g170975 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170975 = temp_output_6_0_g170975;
				#endif
				float temp_output_263_0_g170963 = staticSwitch14_g170975;
				half Emissive_MeshMask221_g170963 = temp_output_263_0_g170963;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170965) = _EmissiveMaskTex;
				SamplerState Sampler276_g170965 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170971 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170971 = ( temp_output_6_0_g170971 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170971 = temp_output_6_0_g170971;
				#endif
				half4 Emissive_Coords167_g170963 = staticSwitch14_g170971;
				float4 temp_output_37_0_g170965 = Emissive_Coords167_g170963;
				half4 Coords276_g170965 = temp_output_37_0_g170965;
				half2 TexCoord276_g170965 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170965 = SampleMain( Texture276_g170965 , Sampler276_g170965 , Coords276_g170965 , TexCoord276_g170965 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170965) = _EmissiveMaskTex;
				SamplerState Sampler275_g170965 = sampler_Linear_Repeat;
				half4 Coords275_g170965 = temp_output_37_0_g170965;
				half2 TexCoord275_g170965 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170965 = SampleExtra( Texture275_g170965 , Sampler275_g170965 , Coords275_g170965 , TexCoord275_g170965 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170963 = localSampleExtra275_g170965;
				#else
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#endif
				half4 Emissive_MaskTex201_g170963 = staticSwitch176_g170963;
				float clampResult17_g170969 = clamp( (Emissive_MaskTex201_g170963).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170968 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170968 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170968 );
				float lerpResult302_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170969 - temp_output_7_0_g170968 ) / ( temp_output_10_0_g170968 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170963 = lerpResult302_g170963;
				float temp_output_279_0_g170963 = ( Emissive_MeshMask221_g170963 * Emissive_Mask103_g170963 );
				float3 appendResult293_g170963 = (float3(temp_output_279_0_g170963 , temp_output_279_0_g170963 , temp_output_279_0_g170963));
				half3 Local_EmissiveColor278_g170963 = appendResult293_g170963;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170964 = Data204_g170494;
				float Out_Dummy15_g170964 = 0;
				float4 Out_CoatParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170964 = float4( 0,0,0,0 );
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_CoatParams15_g170964 = Data15_g170964.CoatParams;
				Out_PaintParams15_g170964 = Data15_g170964.PaintParams;
				Out_GlowParams15_g170964 = Data15_g170964.GlowParams;
				Out_AtmoParams15_g170964= Data15_g170964.AtmoParams;
				Out_FadeParams15_g170964= Data15_g170964.FadeParams;
				Out_FormParams15_g170964 = Data15_g170964.FormParams;
				Out_LandParams15_g170964 = Data15_g170964.LandParams;
				Out_WindParams15_g170964 = Data15_g170964.WindParams;
				Out_PushParams15_g170964 = Data15_g170964.PushParams;
				half4 Global_GlowParams179_g170963 = Out_GlowParams15_g170964;
				float3 lerpResult299_g170963 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170963).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170963 = lerpResult299_g170963;
				#else
				float3 staticSwitch228_g170963 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170963 = staticSwitch228_g170963;
				half3 Visual_AlbedoRaw306_g170963 = temp_output_297_23_g170963;
				float3 lerpResult307_g170963 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170963 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170963 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170963 * lerpResult307_g170963 );
				half3 Emissive_Blend260_g170963 = ( ( (Visual_Emissive255_g170963).xyz * Local_EmissiveColor278_g170963 ) * Local_EmissiveValue88_g170963 );
				float3 temp_output_3_0_g170977 = Emissive_Blend260_g170963;
				float temp_output_15_0_g170977 = _emissive_power_value;
				float3 temp_output_23_0_g170977 = ( temp_output_3_0_g170977 * temp_output_15_0_g170977 );
				half Local_EmissiveMask294_g170963 = temp_output_279_0_g170963;
				float4 appendResult295_g170963 = (float4(temp_output_23_0_g170977 , Local_EmissiveMask294_g170963));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170963 = appendResult295_g170963;
				#else
				float4 staticSwitch129_g170963 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170963 = staticSwitch129_g170963;
				float4 In_Emissive3_g170973 = Final_Emissive184_g170963;
				float In_Grayscale3_g170973 = Out_Grayscale4_g170972;
				float In_Luminosity3_g170973 = Out_Luminosity4_g170972;
				float temp_output_297_11_g170963 = Out_MultiMask4_g170972;
				float In_MultiMask3_g170973 = temp_output_297_11_g170963;
				float In_AlphaClip3_g170973 = Out_AlphaClip4_g170972;
				float In_AlphaFade3_g170973 = Out_AlphaFade4_g170972;
				float3 In_Translucency3_g170973 = Out_Translucency4_g170972;
				float In_Transmission3_g170973 = Out_Transmission4_g170972;
				float In_Thickness3_g170973 = Out_Thickness4_g170972;
				float In_Diffusion3_g170973 = Out_Diffusion4_g170972;
				Data3_g170973.Dummy = In_Dummy3_g170973;
				Data3_g170973.Albedo = In_Albedo3_g170973;
				Data3_g170973.AlbedoRaw = In_AlbedoRaw3_g170973;
				Data3_g170973.NormalTS = In_NormalTS3_g170973;
				Data3_g170973.NormalWS = In_NormalWS3_g170973;
				Data3_g170973.Shader = In_Shader3_g170973;
				Data3_g170973.Emissive= In_Emissive3_g170973;
				Data3_g170973.MultiMask = In_MultiMask3_g170973;
				Data3_g170973.Grayscale = In_Grayscale3_g170973;
				Data3_g170973.Luminosity = In_Luminosity3_g170973;
				Data3_g170973.AlphaClip = In_AlphaClip3_g170973;
				Data3_g170973.AlphaFade = In_AlphaFade3_g170973;
				Data3_g170973.Translucency = In_Translucency3_g170973;
				Data3_g170973.Transmission = In_Transmission3_g170973;
				Data3_g170973.Thickness = In_Thickness3_g170973;
				Data3_g170973.Diffusion = In_Diffusion3_g170973;
				TVEVisualData Data4_g170995 = Data3_g170973;
				float Out_Dummy4_g170995 = 0;
				float3 Out_Albedo4_g170995 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170995 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170995 = float2( 0,0 );
				float3 Out_NormalWS4_g170995 = float3( 0,0,0 );
				float4 Out_Shader4_g170995 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170995 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170995 = 0;
				float Out_Grayscale4_g170995 = 0;
				float Out_Luminosity4_g170995 = 0;
				float Out_AlphaClip4_g170995 = 0;
				float Out_AlphaFade4_g170995 = 0;
				float3 Out_Translucency4_g170995 = float3( 0,0,0 );
				float Out_Transmission4_g170995 = 0;
				float Out_Thickness4_g170995 = 0;
				float Out_Diffusion4_g170995 = 0;
				Out_Dummy4_g170995 = Data4_g170995.Dummy;
				Out_Albedo4_g170995 = Data4_g170995.Albedo;
				Out_AlbedoRaw4_g170995 = Data4_g170995.AlbedoRaw;
				Out_NormalTS4_g170995 = Data4_g170995.NormalTS;
				Out_NormalWS4_g170995 = Data4_g170995.NormalWS;
				Out_Shader4_g170995 = Data4_g170995.Shader;
				Out_Emissive4_g170995= Data4_g170995.Emissive;
				Out_MultiMask4_g170995 = Data4_g170995.MultiMask;
				Out_Grayscale4_g170995 = Data4_g170995.Grayscale;
				Out_Luminosity4_g170995= Data4_g170995.Luminosity;
				Out_AlphaClip4_g170995 = Data4_g170995.AlphaClip;
				Out_AlphaFade4_g170995 = Data4_g170995.AlphaFade;
				Out_Translucency4_g170995 = Data4_g170995.Translucency;
				Out_Transmission4_g170995 = Data4_g170995.Transmission;
				Out_Thickness4_g170995 = Data4_g170995.Thickness;
				Out_Diffusion4_g170995 = Data4_g170995.Diffusion;
				half3 Visual_Albedo199_g170994 = Out_Albedo4_g170995;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170994 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170994 );
				half Visual_Transmission138_g170994 = Out_Transmission4_g170995;
				half Subsurface_Value268_g170994 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170997 = Data204_g170494;
				float Out_Dummy15_g170997 = 0;
				float4 Out_CoatParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170997 = float4( 0,0,0,0 );
				Out_Dummy15_g170997 = Data15_g170997.Dummy;
				Out_CoatParams15_g170997 = Data15_g170997.CoatParams;
				Out_PaintParams15_g170997 = Data15_g170997.PaintParams;
				Out_GlowParams15_g170997 = Data15_g170997.GlowParams;
				Out_AtmoParams15_g170997= Data15_g170997.AtmoParams;
				Out_FadeParams15_g170997= Data15_g170997.FadeParams;
				Out_FormParams15_g170997 = Data15_g170997.FormParams;
				Out_LandParams15_g170997 = Data15_g170997.LandParams;
				Out_WindParams15_g170997 = Data15_g170997.WindParams;
				Out_PushParams15_g170997 = Data15_g170997.PushParams;
				half4 Global_GlowParams373_g170994 = Out_GlowParams15_g170997;
				float lerpResult403_g170994 = lerp( 1.0 , saturate( (Global_GlowParams373_g170994).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170994 = lerpResult403_g170994;
				#else
				float staticSwitch367_g170994 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170994 = staticSwitch367_g170994;
				float temp_output_301_11_g170994 = Out_MultiMask4_g170995;
				half Visual_MultiMask292_g170994 = temp_output_301_11_g170994;
				float lerpResult293_g170994 = lerp( 1.0 , Visual_MultiMask292_g170994 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170994 = lerpResult293_g170994;
				half Custom_Mask363_g170994 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170994 = ( Visual_Transmission138_g170994 * Subsurface_Value268_g170994 * Subsurface_GlobalMask369_g170994 * Subsurface_MultiMask296_g170994 * Custom_Mask363_g170994 );
				#else
				float staticSwitch345_g170994 = 0.0;
				#endif
				half Final_Transmission269_g170994 = staticSwitch345_g170994;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170994 = ( Subsurface_Color264_g170994 * Final_Transmission269_g170994 * 10.0 );
				#else
				float3 staticSwitch348_g170994 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170994 = staticSwitch348_g170994;
				TVEModelData Data15_g171000 = Data16_g170493;
				float Out_Dummy15_g171000 = 0;
				float3 Out_PositionWS15_g171000 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171000 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171000 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171000 = float3( 0,0,0 );
				float4 Out_VertexData15_g171000 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171000 = float4( 0,0,0,0 );
				Out_Dummy15_g171000 = Data15_g171000.Dummy;
				Out_PositionWS15_g171000 = Data15_g171000.PositionWS;
				Out_PositionWO15_g171000 = Data15_g171000.PositionWO;
				Out_PivotWS15_g171000 = Data15_g171000.PivotWS;
				Out_PivotWO15_g171000 = Data15_g171000.PivotWO;
				Out_NormalWS15_g171000 = Data15_g171000.NormalWS;
				Out_ViewDirWS15_g171000 = Data15_g171000.ViewDirWS;
				Out_VertexData15_g171000 = Data15_g171000.VertexData;
				Out_BoundsData15_g171000 = Data15_g171000.BoundsData;
				half3 Model_ViewDirWS392_g170994 = Out_ViewDirWS15_g171000;
				float dotResult324_g170994 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170994 );
				float saferPower323_g170994 = abs( saturate( dotResult324_g170994 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170994 = 0.0;
				#else
				float staticSwitch330_g170994 = ( pow( saferPower323_g170994 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170994 = staticSwitch330_g170994;
				float3 temp_output_6_0_g170998 = ( Final_Translucency254_g170994 * Mask_Subsurface_View320_g170994 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170998 = ( temp_output_6_0_g170998 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170998 = temp_output_6_0_g170998;
				#endif
				half3 Subsurface_Approximation333_g170994 = staticSwitch14_g170998;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170994 = ( Visual_Albedo199_g170994 + Subsurface_Approximation333_g170994 );
				#else
				float3 staticSwitch353_g170994 = Visual_Albedo199_g170994;
				#endif
				half3 Final_Albedo312_g170994 = staticSwitch353_g170994;
				float3 In_Albedo3_g170996 = Final_Albedo312_g170994;
				float3 In_AlbedoRaw3_g170996 = Out_AlbedoRaw4_g170995;
				float2 In_NormalTS3_g170996 = Out_NormalTS4_g170995;
				float3 In_NormalWS3_g170996 = Out_NormalWS4_g170995;
				float4 In_Shader3_g170996 = Out_Shader4_g170995;
				float4 In_Emissive3_g170996 = Out_Emissive4_g170995;
				float In_Grayscale3_g170996 = Out_Grayscale4_g170995;
				float In_Luminosity3_g170996 = Out_Luminosity4_g170995;
				float In_MultiMask3_g170996 = temp_output_301_11_g170994;
				float In_AlphaClip3_g170996 = Out_AlphaClip4_g170995;
				float In_AlphaFade3_g170996 = Out_AlphaFade4_g170995;
				float3 In_Translucency3_g170996 = Final_Translucency254_g170994;
				float In_Transmission3_g170996 = Final_Transmission269_g170994;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170994 = 0.0;
				#else
				float staticSwitch351_g170994 = 1.0;
				#endif
				half Final_Thickness275_g170994 = staticSwitch351_g170994;
				float In_Thickness3_g170996 = Final_Thickness275_g170994;
				float Final_Diffusion340_g170994 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170996 = Final_Diffusion340_g170994;
				Data3_g170996.Dummy = In_Dummy3_g170996;
				Data3_g170996.Albedo = In_Albedo3_g170996;
				Data3_g170996.AlbedoRaw = In_AlbedoRaw3_g170996;
				Data3_g170996.NormalTS = In_NormalTS3_g170996;
				Data3_g170996.NormalWS = In_NormalWS3_g170996;
				Data3_g170996.Shader = In_Shader3_g170996;
				Data3_g170996.Emissive= In_Emissive3_g170996;
				Data3_g170996.MultiMask = In_MultiMask3_g170996;
				Data3_g170996.Grayscale = In_Grayscale3_g170996;
				Data3_g170996.Luminosity = In_Luminosity3_g170996;
				Data3_g170996.AlphaClip = In_AlphaClip3_g170996;
				Data3_g170996.AlphaFade = In_AlphaFade3_g170996;
				Data3_g170996.Translucency = In_Translucency3_g170996;
				Data3_g170996.Transmission = In_Transmission3_g170996;
				Data3_g170996.Thickness = In_Thickness3_g170996;
				Data3_g170996.Diffusion = In_Diffusion3_g170996;
				TVEVisualData Data4_g171011 = Data3_g170996;
				float Out_Dummy4_g171011 = 0;
				float3 Out_Albedo4_g171011 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171011 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171011 = float2( 0,0 );
				float3 Out_NormalWS4_g171011 = float3( 0,0,0 );
				float4 Out_Shader4_g171011 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171011 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171011 = 0;
				float Out_Grayscale4_g171011 = 0;
				float Out_Luminosity4_g171011 = 0;
				float Out_AlphaClip4_g171011 = 0;
				float Out_AlphaFade4_g171011 = 0;
				float3 Out_Translucency4_g171011 = float3( 0,0,0 );
				float Out_Transmission4_g171011 = 0;
				float Out_Thickness4_g171011 = 0;
				float Out_Diffusion4_g171011 = 0;
				Out_Dummy4_g171011 = Data4_g171011.Dummy;
				Out_Albedo4_g171011 = Data4_g171011.Albedo;
				Out_AlbedoRaw4_g171011 = Data4_g171011.AlbedoRaw;
				Out_NormalTS4_g171011 = Data4_g171011.NormalTS;
				Out_NormalWS4_g171011 = Data4_g171011.NormalWS;
				Out_Shader4_g171011 = Data4_g171011.Shader;
				Out_Emissive4_g171011= Data4_g171011.Emissive;
				Out_MultiMask4_g171011 = Data4_g171011.MultiMask;
				Out_Grayscale4_g171011 = Data4_g171011.Grayscale;
				Out_Luminosity4_g171011= Data4_g171011.Luminosity;
				Out_AlphaClip4_g171011 = Data4_g171011.AlphaClip;
				Out_AlphaFade4_g171011 = Data4_g171011.AlphaFade;
				Out_Translucency4_g171011 = Data4_g171011.Translucency;
				Out_Transmission4_g171011 = Data4_g171011.Transmission;
				Out_Thickness4_g171011 = Data4_g171011.Thickness;
				Out_Diffusion4_g171011 = Data4_g171011.Diffusion;
				half3 Input_Albedo24_g171010 = Out_Albedo4_g171011;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g171010 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g171010 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g171010 = staticSwitch22_g171010;
				float4 break24_g171005 = Out_Shader4_g171011;
				half Metallic95_g171005 = break24_g171005.x;
				half Input_Metallic25_g171010 = Metallic95_g171005;
				half OneMinusReflectivity31_g171010 = ( (ColorSpaceDielectricSpec23_g171010).w - ( (ColorSpaceDielectricSpec23_g171010).w * Input_Metallic25_g171010 ) );
				
				float3 appendResult23_g171005 = (float3(Out_NormalTS4_g171011 , 1.0));
				float3 temp_output_13_0_g171009 = appendResult23_g171005;
				float3 temp_output_33_0_g171009 = ( temp_output_13_0_g171009 * _render_normal );
				float3 switchResult12_g171009 = (((ase_vface>0)?(temp_output_13_0_g171009):(temp_output_33_0_g171009)));
				
				half Smoothness105_g171005 = break24_g171005.w;
				half Input_Smoothness43_g171014 = Smoothness105_g171005;
				half Input_True57_g171016 = Input_Smoothness43_g171014;
				half True33_g171016 = Input_True57_g171016;
				half RenderSpec102_g171005 = _RenderSpecular;
				half Input_RenderSpec58_g171014 = RenderSpec102_g171005;
				float temp_output_46_0_g171014 = max( ( Input_Smoothness43_g171014 * Input_RenderSpec58_g171014 ) , 0.001 );
				float temp_output_6_0_g171015 = temp_output_46_0_g171014;
				#ifdef TVE_REGISTER
				float staticSwitch14_g171015 = ( temp_output_6_0_g171015 + ( _SpecColor.r * 0.0 ) );
				#else
				float staticSwitch14_g171015 = temp_output_6_0_g171015;
				#endif
				float temp_output_61_0_g171014 = staticSwitch14_g171015;
				half Input_False58_g171016 = temp_output_61_0_g171014;
				half False33_g171016 = Input_False58_g171016;
				half localShadowPassCheck33_g171016 = ShadowPassCheck33_g171016( True33_g171016 , False33_g171016 );
				
				half Input_True57_g171017 = 0.04;
				half True33_g171017 = Input_True57_g171017;
				half Input_False58_g171017 = temp_output_46_0_g171014;
				half False33_g171017 = Input_False58_g171017;
				half localShadowPassCheck33_g171017 = ShadowPassCheck33_g171017( True33_g171017 , False33_g171017 );
				
				float localCustomAlphaClip19_g171012 = ( 0.0 );
				float temp_output_3_0_g171012 = Out_AlphaClip4_g171011;
				float Alpha19_g171012 = temp_output_3_0_g171012;
				float temp_output_15_0_g171012 = 0.0;
				float Treshold19_g171012 = temp_output_15_0_g171012;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#else
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#endif
				
				o.Albedo = ( Input_Albedo24_g171010 * OneMinusReflectivity31_g171010 );
				o.Normal = switchResult12_g171009;
				o.Emission = (Out_Emissive4_g171011).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = localShadowPassCheck33_g171016;
					o.Gloss = localShadowPassCheck33_g171017;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = fixed3( 1, 1, 1 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = 1;
					o.Smoothness = 0;
				#endif

				o.Alpha = saturate( ( Alpha19_g171012 * Out_AlphaFade4_g171011 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard(o, worldViewDir, gi);
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				c.rgb += o.Emission;

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants INSTANCING_ON
			#pragma multi_compile_fwdadd_fullshadows
			#ifndef UNITY_PASS_FORWARDADD
				#define UNITY_PASS_FORWARDADD
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
           //Nature Renderer (Instanced Indirect)
           #include "Assets/Visual Design Cafe/Nature Renderer/Shader Includes/Nature Renderer.templatex"
           #pragma instancing_options procedural:SetupNatureRenderer forwardadd
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(1,2)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(1)
					#else
						SHADOW_COORDS(1)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(3)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindMode;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _MotionWindOffInfo;
			uniform half _MotionWindOptimizedInfo;
			uniform half _MotionWindAdvancedInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTexRT);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half _MotionIntensityValue;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBaseTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBaseNoiseValue;
			uniform half _global_wind_layer_value;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseDelayValue;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck33_g171016( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck33_g171017( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171003 = (TVEModelData)0;
				float In_Dummy16_g171003 = 0.0;
				TVEModelData Data16_g170980 = (TVEModelData)0;
				half Dummy1575_g170978 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170980 = Dummy1575_g170978;
				TVEModelData Data16_g170957 = (TVEModelData)0;
				float In_Dummy16_g170957 = 0.0;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				half Dummy181_g170707 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170721 = Dummy181_g170707;
				TVEModelData Data16_g170671 = (TVEModelData)0;
				half Dummy181_g170668 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170671 = Dummy181_g170668;
				TVEModelData Data16_g170583 = (TVEModelData)0;
				half Dummy181_g170580 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170583 = Dummy181_g170580;
				TVEModelData Data16_g170578 = (TVEModelData)0;
				float In_Dummy16_g170578 = 0.0;
				TVEModelData Data16_g170492 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170492 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170492 = PositionOS131_g170478;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_worldPos;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170492 = PositionWS122_g170478;
				float4x4 break19_g170480 = unity_ObjectToWorld;
				float3 appendResult20_g170480 = (float3(break19_g170480[ 0 ][ 3 ] , break19_g170480[ 1 ][ 3 ] , break19_g170480[ 2 ][ 3 ]));
				half3 ObjectData20_g170482 = appendResult20_g170480;
				half3 WorldData19_g170482 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170482 = WorldData19_g170482;
				#else
				float3 staticSwitch14_g170482 = ObjectData20_g170482;
				#endif
				float3 temp_output_124_0_g170480 = staticSwitch14_g170482;
				float3 temp_output_239_7_g170478 = temp_output_124_0_g170480;
				float4x4 break19_g170484 = unity_ObjectToWorld;
				float3 appendResult20_g170484 = (float3(break19_g170484[ 0 ][ 3 ] , break19_g170484[ 1 ][ 3 ] , break19_g170484[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170488 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170488;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170484 = PivotOS149_g170478;
				float3 PivotsOnly105_g170484 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170484 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170486 = ( appendResult20_g170484 + PivotsOnly105_g170484 );
				half3 WorldData19_g170486 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170486 = WorldData19_g170486;
				#else
				float3 staticSwitch14_g170486 = ObjectData20_g170486;
				#endif
				float3 temp_output_124_0_g170484 = staticSwitch14_g170486;
				float3 temp_output_237_7_g170478 = temp_output_124_0_g170484;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170492 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170492 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170492 = float3( 0,0,0 );
				float3 In_PivotOS16_g170492 = PivotOS149_g170478;
				float3 In_PivotWS16_g170492 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170492 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170492 = NormalOS134_g170478;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170492 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170492 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170492 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170492 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170492 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170492 = VertexMasks171_g170478;
				float4 break33_g170491 = _object_phase_mode;
				float temp_output_30_0_g170491 = ( v.ase_color.r * break33_g170491.x );
				float temp_output_29_0_g170491 = ( v.ase_color.g * break33_g170491.y );
				float temp_output_31_0_g170491 = ( v.ase_color.b * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( v.ase_color.a * break33_g170491.w ) );
				float3 break243_g170478 = PivotWO133_g170478;
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170491 + ( break243_g170478.x + break243_g170478.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(1.0 , 1.0 , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_MotionData16_g170492 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170492 = BoundsData254_g170478;
				float4 In_RotationData16_g170492 = float4( 0,0,0,0 );
				Data16_g170492.Dummy = In_Dummy16_g170492;
				Data16_g170492.PositionOS = In_PositionOS16_g170492;
				Data16_g170492.PositionWS = In_PositionWS16_g170492;
				Data16_g170492.PositionWO = In_PositionWO16_g170492;
				Data16_g170492.PositionRawOS = In_PositionRawOS16_g170492;
				Data16_g170492.PositionAddOS = In_PositionAddOS16_g170492;
				Data16_g170492.PivotOS = In_PivotOS16_g170492;
				Data16_g170492.PivotWS = In_PivotWS16_g170492;
				Data16_g170492.PivotWO = In_PivotWO16_g170492;
				Data16_g170492.NormalOS = In_NormalOS16_g170492;
				Data16_g170492.NormalWS = In_NormalWS16_g170492;
				Data16_g170492.NormalRawOS = In_NormalRawOS16_g170492;
				Data16_g170492.NormalRawWS = In_NormalRawWS16_g170492;
				Data16_g170492.TangentOS = In_TangentOS16_g170492;
				Data16_g170492.ViewDirWS = In_ViewDirWS16_g170492;
				Data16_g170492.VertexData = In_VertexData16_g170492;
				Data16_g170492.MotionData = In_MotionData16_g170492;
				Data16_g170492.BoundsData = In_BoundsData16_g170492;
				Data16_g170492.RotationData = In_RotationData16_g170492;
				TVEModelData Data15_g170579 = Data16_g170492;
				float Out_Dummy15_g170579 = 0;
				float3 Out_PositionOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170579 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170579 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170579 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170579 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170579 = float3( 0,0,0 );
				float4 Out_VertexData15_g170579 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170579 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170579 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170579 = float4( 0,0,0,0 );
				Out_Dummy15_g170579 = Data15_g170579.Dummy;
				Out_PositionOS15_g170579 = Data15_g170579.PositionOS;
				Out_PositionWS15_g170579 = Data15_g170579.PositionWS;
				Out_PositionWO15_g170579 = Data15_g170579.PositionWO;
				Out_PositionRawOS15_g170579 = Data15_g170579.PositionRawOS;
				Out_PositionAddOS15_g170579 = Data15_g170579.PositionAddOS;
				Out_PivotOS15_g170579 = Data15_g170579.PivotOS;
				Out_PivotWS15_g170579 = Data15_g170579.PivotWS;
				Out_PivotWO15_g170579 = Data15_g170579.PivotWO;
				Out_NormalOS15_g170579 = Data15_g170579.NormalOS;
				Out_NormalWS15_g170579 = Data15_g170579.NormalWS;
				Out_NormalRawOS15_g170579 = Data15_g170579.NormalRawOS;
				Out_NormalRawWS15_g170579 = Data15_g170579.NormalRawWS;
				Out_TangentOS15_g170579 = Data15_g170579.TangentOS;
				Out_ViewDirWS15_g170579 = Data15_g170579.ViewDirWS;
				Out_VertexData15_g170579 = Data15_g170579.VertexData;
				Out_MotionData15_g170579 = Data15_g170579.MotionData;
				Out_BoundsData15_g170579 = Data15_g170579.BoundsData;
				Out_RotationData15_g170579 = Data15_g170579.RotationData;
				float3 temp_output_218_24_g170577 = Out_PivotOS15_g170579;
				float3 In_PositionOS16_g170578 = ( Out_PositionOS15_g170579 - temp_output_218_24_g170577 );
				float3 In_PositionWS16_g170578 = Out_PositionWS15_g170579;
				float3 In_PositionWO16_g170578 = Out_PositionWO15_g170579;
				float3 In_PositionRawOS16_g170578 = Out_PositionRawOS15_g170579;
				float3 In_PositionAddOS16_g170578 = Out_PositionAddOS15_g170579;
				float3 In_PivotOS16_g170578 = temp_output_218_24_g170577;
				float3 In_PivotWS16_g170578 = Out_PivotWS15_g170579;
				float3 In_PivotWO16_g170578 = Out_PivotWO15_g170579;
				float3 In_NormalOS16_g170578 = Out_NormalOS15_g170579;
				float3 In_NormalWS16_g170578 = Out_NormalWS15_g170579;
				float3 In_NormalRawOS16_g170578 = Out_NormalRawOS15_g170579;
				float3 In_NormalRawWS16_g170578 = Out_NormalRawWS15_g170579;
				float4 In_TangentOS16_g170578 = Out_TangentOS15_g170579;
				float3 In_ViewDirWS16_g170578 = Out_ViewDirWS15_g170579;
				float4 In_VertexData16_g170578 = Out_VertexData15_g170579;
				float4 In_MotionData16_g170578 = Out_MotionData15_g170579;
				float4 In_BoundsData16_g170578 = Out_BoundsData15_g170579;
				float4 In_RotationData16_g170578 = Out_RotationData15_g170579;
				Data16_g170578.Dummy = In_Dummy16_g170578;
				Data16_g170578.PositionOS = In_PositionOS16_g170578;
				Data16_g170578.PositionWS = In_PositionWS16_g170578;
				Data16_g170578.PositionWO = In_PositionWO16_g170578;
				Data16_g170578.PositionRawOS = In_PositionRawOS16_g170578;
				Data16_g170578.PositionAddOS = In_PositionAddOS16_g170578;
				Data16_g170578.PivotOS = In_PivotOS16_g170578;
				Data16_g170578.PivotWS = In_PivotWS16_g170578;
				Data16_g170578.PivotWO = In_PivotWO16_g170578;
				Data16_g170578.NormalOS = In_NormalOS16_g170578;
				Data16_g170578.NormalWS = In_NormalWS16_g170578;
				Data16_g170578.NormalRawOS = In_NormalRawOS16_g170578;
				Data16_g170578.NormalRawWS = In_NormalRawWS16_g170578;
				Data16_g170578.TangentOS = In_TangentOS16_g170578;
				Data16_g170578.ViewDirWS = In_ViewDirWS16_g170578;
				Data16_g170578.VertexData = In_VertexData16_g170578;
				Data16_g170578.MotionData = In_MotionData16_g170578;
				Data16_g170578.BoundsData = In_BoundsData16_g170578;
				Data16_g170578.RotationData = In_RotationData16_g170578;
				TVEModelData Data15_g170581 = Data16_g170578;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_MotionData15_g170581 = Data15_g170581.MotionData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				half3 Model_PositionOS147_g170580 = Out_PositionOS15_g170581;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170582 = unity_CameraToWorld;
				float3 appendResult118_g170582 = (float3(break117_g170582[ 0 ][ 2 ] , break117_g170582[ 1 ][ 2 ] , break117_g170582[ 2 ][ 2 ]));
				float3 lerpResult209_g170580 = lerp( ase_worldViewDir , -appendResult118_g170582 , unity_OrthoParams.w);
				float3 break201_g170580 = cross( lerpResult209_g170580 , half3(0,1,0) );
				float3 appendResult196_g170580 = (float3(-break201_g170580.z , 0.0 , break201_g170580.x));
				float dotResult189_g170580 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170580 = abs( dotResult189_g170580 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170580 = ( Model_PositionOS147_g170580 + ( mul( unity_WorldToObject, float4( appendResult196_g170580 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170580 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170580).y ) ) );
				#else
				float3 staticSwitch211_g170580 = Model_PositionOS147_g170580;
				#endif
				half3 Final_Position178_g170580 = staticSwitch211_g170580;
				float3 In_PositionOS16_g170583 = Final_Position178_g170580;
				float3 In_PositionWS16_g170583 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170583 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170583 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170583 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170583 = Out_PivotOS15_g170581;
				float3 In_PivotWS16_g170583 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170583 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170583 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170583 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170583 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170583 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170583 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170583 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170583 = Out_VertexData15_g170581;
				float4 In_MotionData16_g170583 = Out_MotionData15_g170581;
				float4 In_BoundsData16_g170583 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170583 = Out_RotationData15_g170581;
				Data16_g170583.Dummy = In_Dummy16_g170583;
				Data16_g170583.PositionOS = In_PositionOS16_g170583;
				Data16_g170583.PositionWS = In_PositionWS16_g170583;
				Data16_g170583.PositionWO = In_PositionWO16_g170583;
				Data16_g170583.PositionRawOS = In_PositionRawOS16_g170583;
				Data16_g170583.PositionAddOS = In_PositionAddOS16_g170583;
				Data16_g170583.PivotOS = In_PivotOS16_g170583;
				Data16_g170583.PivotWS = In_PivotWS16_g170583;
				Data16_g170583.PivotWO = In_PivotWO16_g170583;
				Data16_g170583.NormalOS = In_NormalOS16_g170583;
				Data16_g170583.NormalWS = In_NormalWS16_g170583;
				Data16_g170583.NormalRawOS = In_NormalRawOS16_g170583;
				Data16_g170583.NormalRawWS = In_NormalRawWS16_g170583;
				Data16_g170583.TangentOS = In_TangentOS16_g170583;
				Data16_g170583.ViewDirWS = In_ViewDirWS16_g170583;
				Data16_g170583.VertexData = In_VertexData16_g170583;
				Data16_g170583.MotionData = In_MotionData16_g170583;
				Data16_g170583.BoundsData = In_BoundsData16_g170583;
				Data16_g170583.RotationData = In_RotationData16_g170583;
				TVEModelData Data15_g170670 = Data16_g170583;
				float Out_Dummy15_g170670 = 0;
				float3 Out_PositionOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170670 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170670 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170670 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170670 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170670 = float3( 0,0,0 );
				float4 Out_VertexData15_g170670 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170670 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170670 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170670 = float4( 0,0,0,0 );
				Out_Dummy15_g170670 = Data15_g170670.Dummy;
				Out_PositionOS15_g170670 = Data15_g170670.PositionOS;
				Out_PositionWS15_g170670 = Data15_g170670.PositionWS;
				Out_PositionWO15_g170670 = Data15_g170670.PositionWO;
				Out_PositionRawOS15_g170670 = Data15_g170670.PositionRawOS;
				Out_PositionAddOS15_g170670 = Data15_g170670.PositionAddOS;
				Out_PivotOS15_g170670 = Data15_g170670.PivotOS;
				Out_PivotWS15_g170670 = Data15_g170670.PivotWS;
				Out_PivotWO15_g170670 = Data15_g170670.PivotWO;
				Out_NormalOS15_g170670 = Data15_g170670.NormalOS;
				Out_NormalWS15_g170670 = Data15_g170670.NormalWS;
				Out_NormalRawOS15_g170670 = Data15_g170670.NormalRawOS;
				Out_NormalRawWS15_g170670 = Data15_g170670.NormalRawWS;
				Out_TangentOS15_g170670 = Data15_g170670.TangentOS;
				Out_ViewDirWS15_g170670 = Data15_g170670.ViewDirWS;
				Out_VertexData15_g170670 = Data15_g170670.VertexData;
				Out_MotionData15_g170670 = Data15_g170670.MotionData;
				Out_BoundsData15_g170670 = Data15_g170670.BoundsData;
				Out_RotationData15_g170670 = Data15_g170670.RotationData;
				half3 Model_PositionOS147_g170668 = Out_PositionOS15_g170670;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170668 = Out_PivotWO15_g170670;
				half3 Model_PivotWO162_g170668 = temp_output_210_19_g170668;
				float temp_output_7_0_g170669 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170669 = ( _SizeFadeDistMinValue - temp_output_7_0_g170669 );
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170672 = Data204_g170494;
				float Out_Dummy15_g170672 = 0;
				float4 Out_CoatParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170672 = float4( 0,0,0,0 );
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_CoatParams15_g170672 = Data15_g170672.CoatParams;
				Out_PaintParams15_g170672 = Data15_g170672.PaintParams;
				Out_GlowParams15_g170672 = Data15_g170672.GlowParams;
				Out_AtmoParams15_g170672= Data15_g170672.AtmoParams;
				Out_FadeParams15_g170672= Data15_g170672.FadeParams;
				Out_FormParams15_g170672 = Data15_g170672.FormParams;
				Out_LandParams15_g170672 = Data15_g170672.LandParams;
				Out_WindParams15_g170672 = Data15_g170672.WindParams;
				Out_PushParams15_g170672 = Data15_g170672.PushParams;
				half4 Input_FormParams188_g170668 = Out_FormParams15_g170672;
				float lerpResult213_g170668 = lerp( 1.0 , (Input_FormParams188_g170668).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170668 = lerpResult213_g170668;
				#else
				float staticSwitch194_g170668 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170668 = staticSwitch194_g170668;
				float temp_output_189_0_g170668 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170668 ) - temp_output_7_0_g170669 ) / ( temp_output_10_0_g170669 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170668 );
				float3 appendResult200_g170668 = (float3(temp_output_189_0_g170668 , temp_output_189_0_g170668 , temp_output_189_0_g170668));
				float3 appendResult201_g170668 = (float3(1.0 , temp_output_189_0_g170668 , 1.0));
				float3 lerpResult202_g170668 = lerp( appendResult200_g170668 , appendResult201_g170668 , _SizeFadeScaleMode);
				float3 lerpResult184_g170668 = lerp( temp_cast_5 , lerpResult202_g170668 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170668 = ( lerpResult184_g170668 * Model_PositionOS147_g170668 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170668 = temp_output_167_0_g170668;
				#else
				float3 staticSwitch199_g170668 = Model_PositionOS147_g170668;
				#endif
				half3 Final_Position178_g170668 = staticSwitch199_g170668;
				float3 In_PositionOS16_g170671 = Final_Position178_g170668;
				float3 In_PositionWS16_g170671 = Out_PositionWS15_g170670;
				float3 In_PositionWO16_g170671 = Out_PositionWO15_g170670;
				float3 In_PositionRawOS16_g170671 = Out_PositionRawOS15_g170670;
				float3 In_PositionAddOS16_g170671 = Out_PositionAddOS15_g170670;
				float3 temp_output_210_24_g170668 = Out_PivotOS15_g170670;
				float3 In_PivotOS16_g170671 = temp_output_210_24_g170668;
				float3 In_PivotWS16_g170671 = Out_PivotWS15_g170670;
				float3 In_PivotWO16_g170671 = temp_output_210_19_g170668;
				float3 In_NormalOS16_g170671 = Out_NormalOS15_g170670;
				float3 In_NormalWS16_g170671 = Out_NormalWS15_g170670;
				float3 In_NormalRawOS16_g170671 = Out_NormalRawOS15_g170670;
				float3 In_NormalRawWS16_g170671 = Out_NormalRawWS15_g170670;
				float4 In_TangentOS16_g170671 = Out_TangentOS15_g170670;
				float3 In_ViewDirWS16_g170671 = Out_ViewDirWS15_g170670;
				float4 In_VertexData16_g170671 = Out_VertexData15_g170670;
				float4 In_MotionData16_g170671 = Out_MotionData15_g170670;
				float4 In_BoundsData16_g170671 = Out_BoundsData15_g170670;
				float4 In_RotationData16_g170671 = Out_RotationData15_g170670;
				Data16_g170671.Dummy = In_Dummy16_g170671;
				Data16_g170671.PositionOS = In_PositionOS16_g170671;
				Data16_g170671.PositionWS = In_PositionWS16_g170671;
				Data16_g170671.PositionWO = In_PositionWO16_g170671;
				Data16_g170671.PositionRawOS = In_PositionRawOS16_g170671;
				Data16_g170671.PositionAddOS = In_PositionAddOS16_g170671;
				Data16_g170671.PivotOS = In_PivotOS16_g170671;
				Data16_g170671.PivotWS = In_PivotWS16_g170671;
				Data16_g170671.PivotWO = In_PivotWO16_g170671;
				Data16_g170671.NormalOS = In_NormalOS16_g170671;
				Data16_g170671.NormalWS = In_NormalWS16_g170671;
				Data16_g170671.NormalRawOS = In_NormalRawOS16_g170671;
				Data16_g170671.NormalRawWS = In_NormalRawWS16_g170671;
				Data16_g170671.TangentOS = In_TangentOS16_g170671;
				Data16_g170671.ViewDirWS = In_ViewDirWS16_g170671;
				Data16_g170671.VertexData = In_VertexData16_g170671;
				Data16_g170671.MotionData = In_MotionData16_g170671;
				Data16_g170671.BoundsData = In_BoundsData16_g170671;
				Data16_g170671.RotationData = In_RotationData16_g170671;
				TVEModelData Data15_g170717 = Data16_g170671;
				float Out_Dummy15_g170717 = 0;
				float3 Out_PositionOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170717 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170717 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170717 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170717 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170717 = float3( 0,0,0 );
				float4 Out_VertexData15_g170717 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170717 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170717 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170717 = float4( 0,0,0,0 );
				Out_Dummy15_g170717 = Data15_g170717.Dummy;
				Out_PositionOS15_g170717 = Data15_g170717.PositionOS;
				Out_PositionWS15_g170717 = Data15_g170717.PositionWS;
				Out_PositionWO15_g170717 = Data15_g170717.PositionWO;
				Out_PositionRawOS15_g170717 = Data15_g170717.PositionRawOS;
				Out_PositionAddOS15_g170717 = Data15_g170717.PositionAddOS;
				Out_PivotOS15_g170717 = Data15_g170717.PivotOS;
				Out_PivotWS15_g170717 = Data15_g170717.PivotWS;
				Out_PivotWO15_g170717 = Data15_g170717.PivotWO;
				Out_NormalOS15_g170717 = Data15_g170717.NormalOS;
				Out_NormalWS15_g170717 = Data15_g170717.NormalWS;
				Out_NormalRawOS15_g170717 = Data15_g170717.NormalRawOS;
				Out_NormalRawWS15_g170717 = Data15_g170717.NormalRawWS;
				Out_TangentOS15_g170717 = Data15_g170717.TangentOS;
				Out_ViewDirWS15_g170717 = Data15_g170717.ViewDirWS;
				Out_VertexData15_g170717 = Data15_g170717.VertexData;
				Out_MotionData15_g170717 = Data15_g170717.MotionData;
				Out_BoundsData15_g170717 = Data15_g170717.BoundsData;
				Out_RotationData15_g170717 = Data15_g170717.RotationData;
				float3 temp_output_1567_0_g170707 = Out_PositionOS15_g170717;
				float3 In_PositionOS16_g170721 = temp_output_1567_0_g170707;
				float3 temp_output_1567_16_g170707 = Out_PositionWS15_g170717;
				float3 In_PositionWS16_g170721 = temp_output_1567_16_g170707;
				float3 temp_output_1567_17_g170707 = Out_PositionWO15_g170717;
				float3 In_PositionWO16_g170721 = temp_output_1567_17_g170707;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170717;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170707 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170707 = Out_VertexData15_g170717;
				half4 Model_VertexMasks518_g170707 = temp_output_1567_29_g170707;
				float4 break1689_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170719 = _motion_small_vert_mode;
				float temp_output_30_0_g170719 = ( break1689_g170707.x * break33_g170719.x );
				float temp_output_29_0_g170719 = ( break1689_g170707.y * break33_g170719.y );
				float temp_output_31_0_g170719 = ( break1689_g170707.z * break33_g170719.z );
				float temp_output_28_0_g170719 = ( temp_output_30_0_g170719 + temp_output_29_0_g170719 + temp_output_31_0_g170719 + ( break1689_g170707.w * break33_g170719.w ) );
				float temp_output_1727_0_g170707 = temp_output_28_0_g170719;
				float4 temp_output_1567_30_g170707 = Out_BoundsData15_g170717;
				half4 Model_BoundsData1322_g170707 = temp_output_1567_30_g170707;
				float4 break33_g170722 = _motion_small_proc_mode;
				float temp_output_30_0_g170722 = ( (Model_BoundsData1322_g170707).z * break33_g170722.x );
				float temp_output_29_0_g170722 = ( (Model_BoundsData1322_g170707).w * break33_g170722.y );
				float temp_output_1734_0_g170707 = ( temp_output_30_0_g170722 + temp_output_29_0_g170722 );
				float lerpResult1906_g170707 = lerp( temp_output_1727_0_g170707 , temp_output_1734_0_g170707 , _motion_small_mask_mode);
				float enc1805_g170707 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170707 = DecodeFloatToVector2( enc1805_g170707 );
				float2 break1804_g170707 = localDecodeFloatToVector21805_g170707;
				half Small_Mask_Legacy1806_g170707 = break1804_g170707.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170707 = Small_Mask_Legacy1806_g170707;
				#else
				float staticSwitch1800_g170707 = lerpResult1906_g170707;
				#endif
				float clampResult17_g170724 = clamp( staticSwitch1800_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170725 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170725 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170725 );
				float temp_output_6_0_g170743 = saturate( ( ( clampResult17_g170724 - temp_output_7_0_g170725 ) / ( temp_output_10_0_g170725 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170743 = ( temp_output_6_0_g170743 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				half Small_Mask640_g170707 = staticSwitch14_g170743;
				half3 Model_PositionOS147_g170707 = temp_output_1567_0_g170707;
				float3 normalizeResult1832_g170707 = normalize( Model_PositionOS147_g170707 );
				half3 Model_PositionWO162_g170707 = temp_output_1567_17_g170707;
				float3 temp_output_1567_19_g170707 = Out_PivotWO15_g170717;
				half3 Model_PivotWO402_g170707 = temp_output_1567_19_g170707;
				float3 lerpResult829_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170707 = Out_MotionData15_g170717;
				half4 Model_MotionMasks489_g170707 = temp_output_1567_27_g170707;
				half3 Base_Position1394_g170707 = ( lerpResult829_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170750 = Base_Position1394_g170707;
				half Flow_TilllingRT1397_g170707 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170750 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTillingRT670_g170750 * 0.005 );
				half4 Noise_ParamsRT535_g170750 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170750, 0.0 );
				half Flow_Value1855_g170707 = _MotionIntensityValue;
				half Input_MotionValue629_g170750 = Flow_Value1855_g170707;
				float2 lerpResult709_g170750 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult712_g170750 = (float3(lerpResult709_g170750 , ( (Noise_ParamsRT535_g170750).b * Input_MotionValue629_g170750 )));
				float4 lerpResult627_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170750 = (lerpResult627_g170750).xy;
				half Input_MotionTilling321_g170750 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTilling321_g170750 * 0.005 );
				float2 temp_output_3_0_g170751 = Noise_Coord515_g170750;
				float2 temp_output_21_0_g170751 = (Global_WindDirection593_g170750*2.0 + -1.0);
				float lerpResult128_g170756 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170750 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170750 = ( ( lerpResult128_g170756 * Input_MotionSpeed62_g170750 ) * 0.02 );
				float temp_output_15_0_g170751 = Noise_Speed516_g170750;
				float temp_output_23_0_g170751 = frac( temp_output_15_0_g170751 );
				float4 lerpResult39_g170751 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * temp_output_23_0_g170751 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * frac( ( temp_output_15_0_g170751 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170751 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170750 = lerpResult39_g170751;
				half Input_MotionNoise552_g170750 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170750 = (lerpResult627_g170750).z;
				half Motion_Intensity720_g170750 = ( Global_WindIntensity576_g170750 * Input_MotionValue629_g170750 );
				float lerpResult701_g170750 = lerp( 1.0 , Input_MotionNoise552_g170750 , Motion_Intensity720_g170750);
				float2 lerpResult646_g170750 = lerp( Global_WindDirection593_g170750 , (Noise_Params685_g170750).rg , lerpResult701_g170750);
				float2 lerpResult724_g170750 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170750 , Motion_Intensity720_g170750);
				float3 appendResult708_g170750 = (float3(lerpResult724_g170750 , ( (Noise_Params685_g170750).a * Motion_Intensity720_g170750 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170750 = appendResult712_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170750 = appendResult708_g170750;
				#else
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170750 = staticSwitch673_g170750;
				float temp_output_136_0_g170757 = _global_wind_layer_value;
				float temp_output_19_0_g170759 = TVE_WindLayers[(int)temp_output_136_0_g170757];
				half3 Input_Position180_g170760 = Input_PositionWO419_g170750;
				float2 temp_output_75_0_g170760 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_82_0_g170760 = temp_output_136_0_g170757;
				float2 temp_output_119_0_g170760 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_7_0_g170765 = 1.0;
				float temp_output_10_0_g170765 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170765 );
				float4 lerpResult131_g170760 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170760,temp_output_82_0_g170760), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170760,temp_output_82_0_g170760), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170760 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170765 ) / temp_output_10_0_g170765 ) ));
				float4 temp_output_17_0_g170759 = lerpResult131_g170760;
				float4 temp_output_3_0_g170759 = TVE_WindParams;
				float4 ifLocalVar18_g170759 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170759 >= 0.5 )
				ifLocalVar18_g170759 = temp_output_17_0_g170759;
				else
				ifLocalVar18_g170759 = temp_output_3_0_g170759;
				float4 lerpResult22_g170759 = lerp( temp_output_3_0_g170759 , temp_output_17_0_g170759 , temp_output_19_0_g170759);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170759 = lerpResult22_g170759;
				#else
				float4 staticSwitch24_g170759 = ifLocalVar18_g170759;
				#endif
				float4 temp_output_610_0_g170750 = staticSwitch24_g170759;
				float2 lerpResult699_g170750 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult643_g170750 = (float3(lerpResult699_g170750 , ( (temp_output_610_0_g170750).b * Input_MotionValue629_g170750 )));
				float3 lerpResult623_g170750 = lerp( Motion_Local694_g170750 , appendResult643_g170750 , (temp_output_610_0_g170750).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#else
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170750 = staticSwitch693_g170750;
				#else
				float3 staticSwitch612_g170750 = Motion_Local694_g170750;
				#endif
				float3 temp_output_2275_567_g170707 = staticSwitch612_g170750;
				float2 break83_g170739 = ((temp_output_2275_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170739 = (float3(break83_g170739.x , 0.0 , break83_g170739.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170739 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170707 = ( lerpResult1411_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170767 = Small_Position1421_g170707;
				half Input_MotionTillingRT670_g170767 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTillingRT670_g170767 * 0.005 );
				half4 Noise_ParamsRT535_g170767 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170767, 0.0 );
				half Input_MotionValue629_g170767 = Flow_Value1855_g170707;
				float2 lerpResult709_g170767 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult712_g170767 = (float3(lerpResult709_g170767 , ( (Noise_ParamsRT535_g170767).b * Input_MotionValue629_g170767 )));
				float4 lerpResult627_g170767 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170767 = (lerpResult627_g170767).xy;
				half Input_MotionTilling321_g170767 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTilling321_g170767 * 0.005 );
				float2 temp_output_3_0_g170768 = Noise_Coord515_g170767;
				float2 temp_output_21_0_g170768 = (Global_WindDirection593_g170767*2.0 + -1.0);
				float lerpResult128_g170773 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170767 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170767 = ( ( lerpResult128_g170773 * Input_MotionSpeed62_g170767 ) * 0.02 );
				float temp_output_15_0_g170768 = Noise_Speed516_g170767;
				float temp_output_23_0_g170768 = frac( temp_output_15_0_g170768 );
				float4 lerpResult39_g170768 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * temp_output_23_0_g170768 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * frac( ( temp_output_15_0_g170768 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170768 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170767 = lerpResult39_g170768;
				half Input_MotionNoise552_g170767 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170767 = (lerpResult627_g170767).z;
				half Motion_Intensity720_g170767 = ( Global_WindIntensity576_g170767 * Input_MotionValue629_g170767 );
				float lerpResult701_g170767 = lerp( 1.0 , Input_MotionNoise552_g170767 , Motion_Intensity720_g170767);
				float2 lerpResult646_g170767 = lerp( Global_WindDirection593_g170767 , (Noise_Params685_g170767).rg , lerpResult701_g170767);
				float2 lerpResult724_g170767 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170767 , Motion_Intensity720_g170767);
				float3 appendResult708_g170767 = (float3(lerpResult724_g170767 , ( (Noise_Params685_g170767).a * Motion_Intensity720_g170767 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170767 = appendResult712_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170767 = appendResult708_g170767;
				#else
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170767 = staticSwitch673_g170767;
				float temp_output_136_0_g170774 = _global_wind_layer_value;
				float temp_output_19_0_g170776 = TVE_WindLayers[(int)temp_output_136_0_g170774];
				half3 Input_Position180_g170777 = Input_PositionWO419_g170767;
				float2 temp_output_75_0_g170777 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_82_0_g170777 = temp_output_136_0_g170774;
				float2 temp_output_119_0_g170777 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_7_0_g170782 = 1.0;
				float temp_output_10_0_g170782 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170782 );
				float4 lerpResult131_g170777 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170777,temp_output_82_0_g170777), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170777,temp_output_82_0_g170777), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170777 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170782 ) / temp_output_10_0_g170782 ) ));
				float4 temp_output_17_0_g170776 = lerpResult131_g170777;
				float4 temp_output_3_0_g170776 = TVE_WindParams;
				float4 ifLocalVar18_g170776 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170776 >= 0.5 )
				ifLocalVar18_g170776 = temp_output_17_0_g170776;
				else
				ifLocalVar18_g170776 = temp_output_3_0_g170776;
				float4 lerpResult22_g170776 = lerp( temp_output_3_0_g170776 , temp_output_17_0_g170776 , temp_output_19_0_g170776);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170776 = lerpResult22_g170776;
				#else
				float4 staticSwitch24_g170776 = ifLocalVar18_g170776;
				#endif
				float4 temp_output_610_0_g170767 = staticSwitch24_g170776;
				float2 lerpResult699_g170767 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult643_g170767 = (float3(lerpResult699_g170767 , ( (temp_output_610_0_g170767).b * Input_MotionValue629_g170767 )));
				float3 lerpResult623_g170767 = lerp( Motion_Local694_g170767 , appendResult643_g170767 , (temp_output_610_0_g170767).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#else
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170767 = staticSwitch693_g170767;
				#else
				float3 staticSwitch612_g170767 = Motion_Local694_g170767;
				#endif
				float3 temp_output_2276_567_g170707 = staticSwitch612_g170767;
				float2 break83_g170738 = ((temp_output_2276_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170738 = (float3(break83_g170738.x , 0.0 , break83_g170738.y));
				half2 Small_Direction1489_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170738 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170707 = Small_Direction1489_g170707;
				#else
				float2 staticSwitch1485_g170707 = Base_Direction893_g170707;
				#endif
				half2 Wave_Direction1486_g170707 = staticSwitch1485_g170707;
				float2 break1828_g170707 = -Wave_Direction1486_g170707;
				float3 appendResult1830_g170707 = (float3(break1828_g170707.x , 0.0 , break1828_g170707.y));
				float dotResult1831_g170707 = dot( normalizeResult1832_g170707 , appendResult1830_g170707 );
				float lerpResult1826_g170707 = lerp( 1.0 , (dotResult1831_g170707*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170707 = lerpResult1826_g170707;
				float2 break1939_g170707 = Small_Direction1489_g170707;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170767 = Input_MotionSpeed62_g170767;
				#else
				float staticSwitch734_g170767 = 4.0;
				#endif
				float mulTime113_g170783 = _Time.y * staticSwitch734_g170767;
				float lerpResult128_g170783 = lerp( mulTime113_g170783 , ( ( mulTime113_g170783 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170767 = Input_PositionWO419_g170767;
				half Small_Vertical2215_g170707 = ( sin( ( lerpResult128_g170783 + ( ( break726_g170767.x + break726_g170767.y + break726_g170767.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170707 = length( Small_Direction1489_g170707 );
				float3 appendResult2056_g170707 = (float3(break1939_g170707.x , ( Small_Vertical2215_g170707 * Small_Intensity2047_g170707 ) , break1939_g170707.y));
				float lerpResult2098_g170707 = lerp( 1.0 , ( Small_Intensity2047_g170707 * Small_Intensity2047_g170707 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170707 = (float3(lerpResult2098_g170707 , 1.0 , lerpResult2098_g170707));
				half3 Small_Squash789_g170707 = ( Small_Value2180_g170707 * Small_Mask640_g170707 * Motion_FrontMask1142_g170707 * appendResult2056_g170707 * appendResult2101_g170707 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170707 = Small_Squash789_g170707;
				#else
				float3 staticSwitch495_g170707 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170720 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170720 = ( break1710_g170707.x * break33_g170720.x );
				float temp_output_29_0_g170720 = ( break1710_g170707.y * break33_g170720.y );
				float temp_output_31_0_g170720 = ( break1710_g170707.z * break33_g170720.z );
				float temp_output_28_0_g170720 = ( temp_output_30_0_g170720 + temp_output_29_0_g170720 + temp_output_31_0_g170720 + ( break1710_g170707.w * break33_g170720.w ) );
				float temp_output_1729_0_g170707 = temp_output_28_0_g170720;
				float4 break33_g170723 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170723 = ( (Model_BoundsData1322_g170707).z * break33_g170723.x );
				float temp_output_29_0_g170723 = ( (Model_BoundsData1322_g170707).w * break33_g170723.y );
				float temp_output_1735_0_g170707 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 );
				float lerpResult1908_g170707 = lerp( temp_output_1729_0_g170707 , temp_output_1735_0_g170707 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170707 = break1804_g170707.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170707 = Tiny_Mask_Legacy1807_g170707;
				#else
				float staticSwitch1810_g170707 = lerpResult1908_g170707;
				#endif
				float clampResult17_g170726 = clamp( staticSwitch1810_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170727 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170727 );
				float temp_output_6_0_g170728 = saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170727 ) / ( temp_output_10_0_g170727 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				half Tiny_Mask218_g170707 = staticSwitch14_g170728;
				half3 Input_Position500_g170744 = Model_PositionWO162_g170707;
				half Input_MotionTilling321_g170744 = _MotionTinyTillingValue;
				float lerpResult128_g170748 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170744 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170744 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170744).xz * Input_MotionTilling321_g170744 * 0.03 ) + ( lerpResult128_g170748 * Input_MotionSpeed62_g170744 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170707 = temp_output_519_0_g170744;
				half3 Model_PositionWS1819_g170707 = temp_output_1567_16_g170707;
				half Motion_FadeMask1820_g170707 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170707 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170707 = abs( (temp_output_2275_567_g170707).z );
				half Small_Noise1427_g170707 = (temp_output_2276_567_g170707).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170707 = Small_Noise1427_g170707;
				#else
				float staticSwitch2013_g170707 = Base_Noise1159_g170707;
				#endif
				float temp_output_136_0_g170708 = _global_push_layer_value;
				float temp_output_19_0_g170709 = TVE_PushLayers[(int)temp_output_136_0_g170708];
				float3 lerpResult1547_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionPushPivotValue);
				half3 Push_Position1549_g170707 = ( lerpResult1547_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170710 = Push_Position1549_g170707;
				float2 temp_output_75_0_g170710 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_82_0_g170710 = temp_output_136_0_g170708;
				float2 temp_output_119_0_g170710 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_7_0_g170715 = 1.0;
				float temp_output_10_0_g170715 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170715 );
				float4 lerpResult131_g170710 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170710,temp_output_82_0_g170710), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170710,temp_output_82_0_g170710), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170710 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170715 ) / temp_output_10_0_g170715 ) ));
				float4 temp_output_17_0_g170709 = lerpResult131_g170710;
				float4 temp_output_3_0_g170709 = TVE_PushParams;
				float4 ifLocalVar18_g170709 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170709 >= 0.5 )
				ifLocalVar18_g170709 = temp_output_17_0_g170709;
				else
				ifLocalVar18_g170709 = temp_output_3_0_g170709;
				float4 lerpResult22_g170709 = lerp( temp_output_3_0_g170709 , temp_output_17_0_g170709 , temp_output_19_0_g170709);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170709 = lerpResult22_g170709;
				#else
				float4 staticSwitch24_g170709 = ifLocalVar18_g170709;
				#endif
				half4 Global_PushParams214_g170707 = staticSwitch24_g170709;
				half Push_Noise1977_g170707 = (Global_PushParams214_g170707).b;
				half Push_Value1501_g170707 = _MotionPushIntensityValue;
				half Push_Influence1504_g170707 = saturate( ( (Global_PushParams214_g170707).a * Push_Value1501_g170707 ) );
				float lerpResult2016_g170707 = lerp( staticSwitch2013_g170707 , Push_Noise1977_g170707 , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170707 = lerpResult2016_g170707;
				#else
				float staticSwitch2012_g170707 = staticSwitch2013_g170707;
				#endif
				half Wave_Noise1475_g170707 = staticSwitch2012_g170707;
				half3 Tiny_Flutter1451_g170707 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170707 * Tiny_Direction859_g170707 * Motion_FadeMask1820_g170707 * Flow_Value1855_g170707 * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170707 = Tiny_Flutter1451_g170707;
				#else
				float3 staticSwitch414_g170707 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170707 = ( staticSwitch495_g170707 + staticSwitch414_g170707 );
				float3 In_PositionAddOS16_g170721 = Final_PositionADD1569_g170707;
				float3 temp_output_1567_24_g170707 = Out_PivotOS15_g170717;
				float3 In_PivotOS16_g170721 = temp_output_1567_24_g170707;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170717;
				float3 In_PivotWO16_g170721 = temp_output_1567_19_g170707;
				float3 temp_output_1567_20_g170707 = Out_NormalOS15_g170717;
				float3 In_NormalOS16_g170721 = temp_output_1567_20_g170707;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170717;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170717;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170717;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170717;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170717;
				float4 In_VertexData16_g170721 = temp_output_1567_29_g170707;
				float4 In_MotionData16_g170721 = temp_output_1567_27_g170707;
				float4 In_BoundsData16_g170721 = temp_output_1567_30_g170707;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170707 = _MotionBaseIntensityValue;
				float4 break748_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170731 = _motion_base_vert_mode;
				float temp_output_30_0_g170731 = ( break748_g170707.x * break33_g170731.x );
				float temp_output_29_0_g170731 = ( break748_g170707.y * break33_g170731.y );
				float temp_output_31_0_g170731 = ( break748_g170707.z * break33_g170731.z );
				float temp_output_28_0_g170731 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 + temp_output_31_0_g170731 + ( break748_g170707.w * break33_g170731.w ) );
				float temp_output_1731_0_g170707 = temp_output_28_0_g170731;
				float4 break33_g170732 = _motion_base_proc_mode;
				float temp_output_30_0_g170732 = ( (Model_BoundsData1322_g170707).z * break33_g170732.x );
				float temp_output_29_0_g170732 = ( (Model_BoundsData1322_g170707).w * break33_g170732.y );
				float temp_output_1733_0_g170707 = ( temp_output_30_0_g170732 + temp_output_29_0_g170732 );
				float lerpResult1904_g170707 = lerp( temp_output_1731_0_g170707 , temp_output_1733_0_g170707 , _motion_base_mask_mode);
				float clampResult17_g170729 = clamp( lerpResult1904_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170730 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170730 );
				float temp_output_6_0_g170742 = saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170742 = ( temp_output_6_0_g170742 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170742 = temp_output_6_0_g170742;
				#endif
				half Base_Mask217_g170707 = staticSwitch14_g170742;
				half Base_Intensity2041_g170707 = length( Base_Direction893_g170707 );
				float lerpResult2090_g170707 = lerp( 1.0 , ( Base_Intensity2041_g170707 * Base_Intensity2041_g170707 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170707 = ( Base_Value2242_g170707 * Base_Mask217_g170707 * Base_Direction893_g170707 * lerpResult2090_g170707 );
				#else
				float2 staticSwitch1573_g170707 = temp_cast_54;
				#endif
				float4 break1864_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170735 = _motion_push_vert_mode;
				float temp_output_30_0_g170735 = ( break1864_g170707.x * break33_g170735.x );
				float temp_output_29_0_g170735 = ( break1864_g170707.y * break33_g170735.y );
				float temp_output_31_0_g170735 = ( break1864_g170707.z * break33_g170735.z );
				float temp_output_28_0_g170735 = ( temp_output_30_0_g170735 + temp_output_29_0_g170735 + temp_output_31_0_g170735 + ( break1864_g170707.w * break33_g170735.w ) );
				float temp_output_1867_0_g170707 = temp_output_28_0_g170735;
				float4 break33_g170736 = _motion_push_proc_mode;
				float temp_output_30_0_g170736 = ( (Model_BoundsData1322_g170707).z * break33_g170736.x );
				float temp_output_29_0_g170736 = ( (Model_BoundsData1322_g170707).w * break33_g170736.y );
				float temp_output_1868_0_g170707 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 );
				float lerpResult1910_g170707 = lerp( temp_output_1867_0_g170707 , temp_output_1868_0_g170707 , _motion_push_mask_mode);
				float clampResult17_g170733 = clamp( lerpResult1910_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170734 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170734 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170734 );
				float temp_output_6_0_g170737 = saturate( ( ( clampResult17_g170733 - temp_output_7_0_g170734 ) / ( temp_output_10_0_g170734 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Push_Mask1877_g170707 = staticSwitch14_g170737;
				float2 break83_g170740 = ((Global_PushParams214_g170707).rg*2.0 + -1.0);
				float3 appendResult79_g170740 = (float3(break83_g170740.x , 0.0 , break83_g170740.y));
				half2 Push_Direction1972_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170740 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170707 = lerp( staticSwitch1573_g170707 , ( Push_Mask1877_g170707 * Push_Value1501_g170707 * Push_Direction1972_g170707 ) , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170707 = lerpResult1496_g170707;
				#else
				float2 staticSwitch1506_g170707 = staticSwitch1573_g170707;
				#endif
				half2 Base_Bending1440_g170707 = staticSwitch1506_g170707;
				float4 appendResult2023_g170707 = (float4(Base_Bending1440_g170707 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170707 = appendResult2023_g170707;
				float4 In_RotationData16_g170721 = Final_RotationData1570_g170707;
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.MotionData = In_MotionData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				TVEModelData Data15_g170956 = Data16_g170721;
				float Out_Dummy15_g170956 = 0;
				float3 Out_PositionOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170956 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170956 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170956 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170956 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170956 = float3( 0,0,0 );
				float4 Out_VertexData15_g170956 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170956 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170956 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170956 = float4( 0,0,0,0 );
				Out_Dummy15_g170956 = Data15_g170956.Dummy;
				Out_PositionOS15_g170956 = Data15_g170956.PositionOS;
				Out_PositionWS15_g170956 = Data15_g170956.PositionWS;
				Out_PositionWO15_g170956 = Data15_g170956.PositionWO;
				Out_PositionRawOS15_g170956 = Data15_g170956.PositionRawOS;
				Out_PositionAddOS15_g170956 = Data15_g170956.PositionAddOS;
				Out_PivotOS15_g170956 = Data15_g170956.PivotOS;
				Out_PivotWS15_g170956 = Data15_g170956.PivotWS;
				Out_PivotWO15_g170956 = Data15_g170956.PivotWO;
				Out_NormalOS15_g170956 = Data15_g170956.NormalOS;
				Out_NormalWS15_g170956 = Data15_g170956.NormalWS;
				Out_NormalRawOS15_g170956 = Data15_g170956.NormalRawOS;
				Out_NormalRawWS15_g170956 = Data15_g170956.NormalRawWS;
				Out_TangentOS15_g170956 = Data15_g170956.TangentOS;
				Out_ViewDirWS15_g170956 = Data15_g170956.ViewDirWS;
				Out_VertexData15_g170956 = Data15_g170956.VertexData;
				Out_MotionData15_g170956 = Data15_g170956.MotionData;
				Out_BoundsData15_g170956 = Data15_g170956.BoundsData;
				Out_RotationData15_g170956 = Data15_g170956.RotationData;
				half3 Model_PositionOS147_g170955 = Out_PositionOS15_g170956;
				half3 Input_False58_g170958 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170959 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170960 = VertexPos40_g170959;
				float3 appendResult74_g170960 = (float3(VertexPos40_g170960.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170960 = appendResult74_g170960;
				float3 break84_g170960 = VertexPos40_g170960;
				float3 appendResult81_g170960 = (float3(0.0 , break84_g170960.y , break84_g170960.z));
				half3 VertexPosOtherAxis82_g170960 = appendResult81_g170960;
				float4 temp_output_1567_33_g170955 = Out_RotationData15_g170956;
				half4 Model_VertexBend1569_g170955 = temp_output_1567_33_g170955;
				half2 Angle44_g170959 = (Model_VertexBend1569_g170955).xy;
				half Angle44_g170960 = (Angle44_g170959).y;
				half3 VertexPos40_g170961 = ( VertexPosRotationAxis50_g170960 + ( VertexPosOtherAxis82_g170960 * cos( Angle44_g170960 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170960 ) * sin( Angle44_g170960 ) ) );
				float3 appendResult74_g170961 = (float3(0.0 , 0.0 , VertexPos40_g170961.z));
				half3 VertexPosRotationAxis50_g170961 = appendResult74_g170961;
				float3 break84_g170961 = VertexPos40_g170961;
				float3 appendResult81_g170961 = (float3(break84_g170961.x , break84_g170961.y , 0.0));
				half3 VertexPosOtherAxis82_g170961 = appendResult81_g170961;
				half Angle44_g170961 = -(Angle44_g170959).x;
				half3 Input_True57_g170958 = ( VertexPosRotationAxis50_g170961 + ( VertexPosOtherAxis82_g170961 * cos( Angle44_g170961 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170961 ) * sin( Angle44_g170961 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch65_g170958 = Input_False58_g170958;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch67_g170958 = staticSwitch65_g170958;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch69_g170958 = staticSwitch67_g170958;
				#endif
				float3 temp_output_1578_0_g170955 = staticSwitch69_g170958;
				float3 temp_output_1567_31_g170955 = Out_PositionAddOS15_g170956;
				half3 Model_PositionADD1568_g170955 = temp_output_1567_31_g170955;
				half3 Final_PositionOS178_g170955 = ( temp_output_1578_0_g170955 + Model_PositionADD1568_g170955 );
				float3 In_PositionOS16_g170957 = Final_PositionOS178_g170955;
				float3 In_PositionWS16_g170957 = Out_PositionWS15_g170956;
				float3 In_PositionWO16_g170957 = Out_PositionWO15_g170956;
				float3 In_PositionRawOS16_g170957 = Out_PositionRawOS15_g170956;
				float3 In_PositionAddOS16_g170957 = temp_output_1567_31_g170955;
				float3 In_PivotOS16_g170957 = Out_PivotOS15_g170956;
				float3 In_PivotWS16_g170957 = Out_PivotWS15_g170956;
				float3 In_PivotWO16_g170957 = Out_PivotWO15_g170956;
				float3 In_NormalOS16_g170957 = Out_NormalOS15_g170956;
				float3 In_NormalWS16_g170957 = Out_NormalWS15_g170956;
				float3 In_NormalRawOS16_g170957 = Out_NormalRawOS15_g170956;
				float3 In_NormalRawWS16_g170957 = Out_NormalRawWS15_g170956;
				float4 In_TangentOS16_g170957 = Out_TangentOS15_g170956;
				float3 In_ViewDirWS16_g170957 = Out_ViewDirWS15_g170956;
				float4 In_VertexData16_g170957 = Out_VertexData15_g170956;
				float4 In_MotionData16_g170957 = Out_MotionData15_g170956;
				float4 In_BoundsData16_g170957 = Out_BoundsData15_g170956;
				float4 In_RotationData16_g170957 = temp_output_1567_33_g170955;
				Data16_g170957.Dummy = In_Dummy16_g170957;
				Data16_g170957.PositionOS = In_PositionOS16_g170957;
				Data16_g170957.PositionWS = In_PositionWS16_g170957;
				Data16_g170957.PositionWO = In_PositionWO16_g170957;
				Data16_g170957.PositionRawOS = In_PositionRawOS16_g170957;
				Data16_g170957.PositionAddOS = In_PositionAddOS16_g170957;
				Data16_g170957.PivotOS = In_PivotOS16_g170957;
				Data16_g170957.PivotWS = In_PivotWS16_g170957;
				Data16_g170957.PivotWO = In_PivotWO16_g170957;
				Data16_g170957.NormalOS = In_NormalOS16_g170957;
				Data16_g170957.NormalWS = In_NormalWS16_g170957;
				Data16_g170957.NormalRawOS = In_NormalRawOS16_g170957;
				Data16_g170957.NormalRawWS = In_NormalRawWS16_g170957;
				Data16_g170957.TangentOS = In_TangentOS16_g170957;
				Data16_g170957.ViewDirWS = In_ViewDirWS16_g170957;
				Data16_g170957.VertexData = In_VertexData16_g170957;
				Data16_g170957.MotionData = In_MotionData16_g170957;
				Data16_g170957.BoundsData = In_BoundsData16_g170957;
				Data16_g170957.RotationData = In_RotationData16_g170957;
				TVEModelData Data15_g170979 = Data16_g170957;
				float Out_Dummy15_g170979 = 0;
				float3 Out_PositionOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170979 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170979 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170979 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170979 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170979 = float3( 0,0,0 );
				float4 Out_VertexData15_g170979 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170979 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170979 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170979 = float4( 0,0,0,0 );
				Out_Dummy15_g170979 = Data15_g170979.Dummy;
				Out_PositionOS15_g170979 = Data15_g170979.PositionOS;
				Out_PositionWS15_g170979 = Data15_g170979.PositionWS;
				Out_PositionWO15_g170979 = Data15_g170979.PositionWO;
				Out_PositionRawOS15_g170979 = Data15_g170979.PositionRawOS;
				Out_PositionAddOS15_g170979 = Data15_g170979.PositionAddOS;
				Out_PivotOS15_g170979 = Data15_g170979.PivotOS;
				Out_PivotWS15_g170979 = Data15_g170979.PivotWS;
				Out_PivotWO15_g170979 = Data15_g170979.PivotWO;
				Out_NormalOS15_g170979 = Data15_g170979.NormalOS;
				Out_NormalWS15_g170979 = Data15_g170979.NormalWS;
				Out_NormalRawOS15_g170979 = Data15_g170979.NormalRawOS;
				Out_NormalRawWS15_g170979 = Data15_g170979.NormalRawWS;
				Out_TangentOS15_g170979 = Data15_g170979.TangentOS;
				Out_ViewDirWS15_g170979 = Data15_g170979.ViewDirWS;
				Out_VertexData15_g170979 = Data15_g170979.VertexData;
				Out_MotionData15_g170979 = Data15_g170979.MotionData;
				Out_BoundsData15_g170979 = Data15_g170979.BoundsData;
				Out_RotationData15_g170979 = Data15_g170979.RotationData;
				float3 In_PositionOS16_g170980 = Out_PositionOS15_g170979;
				float3 In_PositionWS16_g170980 = Out_PositionWS15_g170979;
				float3 temp_output_1567_17_g170978 = Out_PositionWO15_g170979;
				float3 In_PositionWO16_g170980 = temp_output_1567_17_g170978;
				float3 temp_output_1567_26_g170978 = Out_PositionRawOS15_g170979;
				float3 In_PositionRawOS16_g170980 = temp_output_1567_26_g170978;
				float3 In_PositionAddOS16_g170980 = Out_PositionAddOS15_g170979;
				float3 In_PivotOS16_g170980 = Out_PivotOS15_g170979;
				float3 In_PivotWS16_g170980 = Out_PivotWS15_g170979;
				float3 In_PivotWO16_g170980 = Out_PivotWO15_g170979;
				half3 Model_NormalOS1568_g170978 = Out_NormalOS15_g170979;
				float3 lerpResult1589_g170978 = lerp( Model_NormalOS1568_g170978 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170978 = temp_output_1567_26_g170978;
				float3 normalizeResult1594_g170978 = ASESafeNormalize( ( Model_PositionRAW1592_g170978 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170978 = lerp( lerpResult1589_g170978 , normalizeResult1594_g170978 , _NormalSphereValue);
				half3 Input_False58_g170993 = lerpResult1585_g170978;
				half3 VertexPos40_g170982 = lerpResult1585_g170978;
				half3 VertexPos40_g170983 = VertexPos40_g170982;
				float3 appendResult74_g170983 = (float3(VertexPos40_g170983.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170983 = appendResult74_g170983;
				float3 break84_g170983 = VertexPos40_g170983;
				float3 appendResult81_g170983 = (float3(0.0 , break84_g170983.y , break84_g170983.z));
				half3 VertexPosOtherAxis82_g170983 = appendResult81_g170983;
				float4 temp_output_1567_33_g170978 = Out_RotationData15_g170979;
				half4 Model_RotationData1583_g170978 = temp_output_1567_33_g170978;
				half2 Angle44_g170982 = Model_RotationData1583_g170978.xy;
				half Angle44_g170983 = (Angle44_g170982).y;
				half3 VertexPos40_g170984 = ( VertexPosRotationAxis50_g170983 + ( VertexPosOtherAxis82_g170983 * cos( Angle44_g170983 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170983 ) * sin( Angle44_g170983 ) ) );
				float3 appendResult74_g170984 = (float3(0.0 , 0.0 , VertexPos40_g170984.z));
				half3 VertexPosRotationAxis50_g170984 = appendResult74_g170984;
				float3 break84_g170984 = VertexPos40_g170984;
				float3 appendResult81_g170984 = (float3(break84_g170984.x , break84_g170984.y , 0.0));
				half3 VertexPosOtherAxis82_g170984 = appendResult81_g170984;
				half Angle44_g170984 = -(Angle44_g170982).x;
				float3 lerpResult1591_g170978 = lerp( lerpResult1585_g170978 , ( VertexPosRotationAxis50_g170984 + ( VertexPosOtherAxis82_g170984 * cos( Angle44_g170984 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170984 ) * sin( Angle44_g170984 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170993 = lerpResult1591_g170978;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch65_g170993 = Input_False58_g170993;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch67_g170993 = staticSwitch65_g170993;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch69_g170993 = staticSwitch67_g170993;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170978 = staticSwitch69_g170993;
				#else
				float3 staticSwitch1595_g170978 = lerpResult1585_g170978;
				#endif
				float4 temp_output_1567_29_g170978 = Out_VertexData15_g170979;
				half4 Model_VertexData1608_g170978 = temp_output_1567_29_g170978;
				float4 break1683_g170978 = Model_VertexData1608_g170978;
				float4 break33_g170986 = _normal_vert_mode;
				float temp_output_30_0_g170986 = ( break1683_g170978.x * break33_g170986.x );
				float temp_output_29_0_g170986 = ( break1683_g170978.y * break33_g170986.y );
				float temp_output_31_0_g170986 = ( break1683_g170978.z * break33_g170986.z );
				float temp_output_28_0_g170986 = ( temp_output_30_0_g170986 + temp_output_29_0_g170986 + temp_output_31_0_g170986 + ( break1683_g170978.w * break33_g170986.w ) );
				float clampResult17_g170988 = clamp( temp_output_28_0_g170986 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170987 = _NormalMeshRemap.x;
				float temp_output_10_0_g170987 = ( _NormalMeshRemap.y - temp_output_7_0_g170987 );
				float lerpResult1695_g170978 = lerp( 1.0 , saturate( ( ( clampResult17_g170988 - temp_output_7_0_g170987 ) / ( temp_output_10_0_g170987 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170989 = lerpResult1695_g170978;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170989 = ( temp_output_6_0_g170989 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170989 = temp_output_6_0_g170989;
				#endif
				float temp_output_1690_0_g170978 = staticSwitch14_g170989;
				half Normal_MeskMask1691_g170978 = temp_output_1690_0_g170978;
				half Normal_Proj_Mask1647_g170978 = 1.0;
				float temp_output_1699_0_g170978 = ( Normal_MeskMask1691_g170978 * Normal_Proj_Mask1647_g170978 );
				float3 lerpResult1670_g170978 = lerp( Model_NormalOS1568_g170978 , staticSwitch1595_g170978 , temp_output_1699_0_g170978);
				half3 Final_NormalOS178_g170978 = lerpResult1670_g170978;
				float3 In_NormalOS16_g170980 = Final_NormalOS178_g170978;
				float3 temp_output_1567_21_g170978 = Out_NormalWS15_g170979;
				float3 In_NormalWS16_g170980 = temp_output_1567_21_g170978;
				float3 In_NormalRawOS16_g170980 = Out_NormalRawOS15_g170979;
				float3 In_NormalRawWS16_g170980 = Out_NormalRawWS15_g170979;
				float4 In_TangentOS16_g170980 = Out_TangentOS15_g170979;
				float3 In_ViewDirWS16_g170980 = Out_ViewDirWS15_g170979;
				float4 In_VertexData16_g170980 = temp_output_1567_29_g170978;
				float4 In_MotionData16_g170980 = Out_MotionData15_g170979;
				float4 In_BoundsData16_g170980 = Out_BoundsData15_g170979;
				float4 In_RotationData16_g170980 = temp_output_1567_33_g170978;
				Data16_g170980.Dummy = In_Dummy16_g170980;
				Data16_g170980.PositionOS = In_PositionOS16_g170980;
				Data16_g170980.PositionWS = In_PositionWS16_g170980;
				Data16_g170980.PositionWO = In_PositionWO16_g170980;
				Data16_g170980.PositionRawOS = In_PositionRawOS16_g170980;
				Data16_g170980.PositionAddOS = In_PositionAddOS16_g170980;
				Data16_g170980.PivotOS = In_PivotOS16_g170980;
				Data16_g170980.PivotWS = In_PivotWS16_g170980;
				Data16_g170980.PivotWO = In_PivotWO16_g170980;
				Data16_g170980.NormalOS = In_NormalOS16_g170980;
				Data16_g170980.NormalWS = In_NormalWS16_g170980;
				Data16_g170980.NormalRawOS = In_NormalRawOS16_g170980;
				Data16_g170980.NormalRawWS = In_NormalRawWS16_g170980;
				Data16_g170980.TangentOS = In_TangentOS16_g170980;
				Data16_g170980.ViewDirWS = In_ViewDirWS16_g170980;
				Data16_g170980.VertexData = In_VertexData16_g170980;
				Data16_g170980.MotionData = In_MotionData16_g170980;
				Data16_g170980.BoundsData = In_BoundsData16_g170980;
				Data16_g170980.RotationData = In_RotationData16_g170980;
				TVEModelData Data15_g171002 = Data16_g170980;
				float Out_Dummy15_g171002 = 0;
				float3 Out_PositionOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171002 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171002 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171002 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171002 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171002 = float3( 0,0,0 );
				float4 Out_VertexData15_g171002 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171002 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171002 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171002 = float4( 0,0,0,0 );
				Out_Dummy15_g171002 = Data15_g171002.Dummy;
				Out_PositionOS15_g171002 = Data15_g171002.PositionOS;
				Out_PositionWS15_g171002 = Data15_g171002.PositionWS;
				Out_PositionWO15_g171002 = Data15_g171002.PositionWO;
				Out_PositionRawOS15_g171002 = Data15_g171002.PositionRawOS;
				Out_PositionAddOS15_g171002 = Data15_g171002.PositionAddOS;
				Out_PivotOS15_g171002 = Data15_g171002.PivotOS;
				Out_PivotWS15_g171002 = Data15_g171002.PivotWS;
				Out_PivotWO15_g171002 = Data15_g171002.PivotWO;
				Out_NormalOS15_g171002 = Data15_g171002.NormalOS;
				Out_NormalWS15_g171002 = Data15_g171002.NormalWS;
				Out_NormalRawOS15_g171002 = Data15_g171002.NormalRawOS;
				Out_NormalRawWS15_g171002 = Data15_g171002.NormalRawWS;
				Out_TangentOS15_g171002 = Data15_g171002.TangentOS;
				Out_ViewDirWS15_g171002 = Data15_g171002.ViewDirWS;
				Out_VertexData15_g171002 = Data15_g171002.VertexData;
				Out_MotionData15_g171002 = Data15_g171002.MotionData;
				Out_BoundsData15_g171002 = Data15_g171002.BoundsData;
				Out_RotationData15_g171002 = Data15_g171002.RotationData;
				float3 temp_output_217_24_g171001 = Out_PivotOS15_g171002;
				float3 In_PositionOS16_g171003 = ( Out_PositionOS15_g171002 + temp_output_217_24_g171001 );
				float3 In_PositionWS16_g171003 = Out_PositionWS15_g171002;
				float3 In_PositionWO16_g171003 = Out_PositionWO15_g171002;
				float3 In_PositionRawOS16_g171003 = Out_PositionRawOS15_g171002;
				float3 In_PositionAddOS16_g171003 = Out_PositionAddOS15_g171002;
				float3 In_PivotOS16_g171003 = temp_output_217_24_g171001;
				float3 In_PivotWS16_g171003 = Out_PivotWS15_g171002;
				float3 In_PivotWO16_g171003 = Out_PivotWO15_g171002;
				float3 In_NormalOS16_g171003 = Out_NormalOS15_g171002;
				float3 In_NormalWS16_g171003 = Out_NormalWS15_g171002;
				float3 In_NormalRawOS16_g171003 = Out_NormalRawOS15_g171002;
				float3 In_NormalRawWS16_g171003 = Out_NormalRawWS15_g171002;
				float4 In_TangentOS16_g171003 = Out_TangentOS15_g171002;
				float3 In_ViewDirWS16_g171003 = Out_ViewDirWS15_g171002;
				float4 In_VertexData16_g171003 = Out_VertexData15_g171002;
				float4 In_MotionData16_g171003 = Out_MotionData15_g171002;
				float4 In_BoundsData16_g171003 = Out_BoundsData15_g171002;
				float4 In_RotationData16_g171003 = Out_RotationData15_g171002;
				Data16_g171003.Dummy = In_Dummy16_g171003;
				Data16_g171003.PositionOS = In_PositionOS16_g171003;
				Data16_g171003.PositionWS = In_PositionWS16_g171003;
				Data16_g171003.PositionWO = In_PositionWO16_g171003;
				Data16_g171003.PositionRawOS = In_PositionRawOS16_g171003;
				Data16_g171003.PositionAddOS = In_PositionAddOS16_g171003;
				Data16_g171003.PivotOS = In_PivotOS16_g171003;
				Data16_g171003.PivotWS = In_PivotWS16_g171003;
				Data16_g171003.PivotWO = In_PivotWO16_g171003;
				Data16_g171003.NormalOS = In_NormalOS16_g171003;
				Data16_g171003.NormalWS = In_NormalWS16_g171003;
				Data16_g171003.NormalRawOS = In_NormalRawOS16_g171003;
				Data16_g171003.NormalRawWS = In_NormalRawWS16_g171003;
				Data16_g171003.TangentOS = In_TangentOS16_g171003;
				Data16_g171003.ViewDirWS = In_ViewDirWS16_g171003;
				Data16_g171003.VertexData = In_VertexData16_g171003;
				Data16_g171003.MotionData = In_MotionData16_g171003;
				Data16_g171003.BoundsData = In_BoundsData16_g171003;
				Data16_g171003.RotationData = In_RotationData16_g171003;
				TVEModelData Data15_g171008 = Data16_g171003;
				float Out_Dummy15_g171008 = 0;
				float3 Out_PositionOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171008 = float3( 0,0,0 );
				float4 Out_VertexData15_g171008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171008 = float4( 0,0,0,0 );
				Out_Dummy15_g171008 = Data15_g171008.Dummy;
				Out_PositionOS15_g171008 = Data15_g171008.PositionOS;
				Out_PositionWS15_g171008 = Data15_g171008.PositionWS;
				Out_PositionWO15_g171008 = Data15_g171008.PositionWO;
				Out_PositionRawOS15_g171008 = Data15_g171008.PositionRawOS;
				Out_PositionAddOS15_g171008 = Data15_g171008.PositionAddOS;
				Out_PivotOS15_g171008 = Data15_g171008.PivotOS;
				Out_PivotWS15_g171008 = Data15_g171008.PivotWS;
				Out_PivotWO15_g171008 = Data15_g171008.PivotWO;
				Out_NormalOS15_g171008 = Data15_g171008.NormalOS;
				Out_NormalWS15_g171008 = Data15_g171008.NormalWS;
				Out_NormalRawOS15_g171008 = Data15_g171008.NormalRawOS;
				Out_NormalRawWS15_g171008 = Data15_g171008.NormalRawWS;
				Out_TangentOS15_g171008 = Data15_g171008.TangentOS;
				Out_ViewDirWS15_g171008 = Data15_g171008.ViewDirWS;
				Out_VertexData15_g171008 = Data15_g171008.VertexData;
				Out_MotionData15_g171008 = Data15_g171008.MotionData;
				Out_BoundsData15_g171008 = Data15_g171008.BoundsData;
				Out_RotationData15_g171008 = Data15_g171008.RotationData;
				float3 temp_output_31_0_g171005 = Out_PositionOS15_g171008;
				
				o.ase_texcoord11.xyz = vertexToFrag73_g170478;
				o.ase_texcoord12.xyz = vertexToFrag76_g170478;
				float temp_output_6_0_g170741 = ( _MotionHighlightValue * Motion_FadeMask1820_g170707 * ( Base_Mask217_g170707 * Base_Mask217_g170707 ) * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170741 = ( temp_output_6_0_g170741 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170741 = temp_output_6_0_g170741;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170741;
				float4 appendResult23_g170813 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170813 = appendResult23_g170813;
				o.ase_texcoord13 = vertexToFrag24_g170813;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g171005 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171008;
				v.tangent = Out_TangentOS15_g171008;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif


				float localBreakData4_g171011 = ( 0.0 );
				float localCompData3_g170996 = ( 0.0 );
				TVEVisualData Data3_g170996 = (TVEVisualData)0;
				half Dummy145_g170994 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170996 = Dummy145_g170994;
				float localBreakData4_g170995 = ( 0.0 );
				float localCompData3_g170973 = ( 0.0 );
				TVEVisualData Data3_g170973 = (TVEVisualData)0;
				half Dummy145_g170963 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170973 = Dummy145_g170963;
				float localBreakData4_g170972 = ( 0.0 );
				float localCompData3_g170945 = ( 0.0 );
				TVEVisualData Data3_g170945 = (TVEVisualData)0;
				half Dummy594_g170942 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170945 = Dummy594_g170942;
				float localBreakData4_g170944 = ( 0.0 );
				float localCompData3_g170930 = ( 0.0 );
				TVEVisualData Data3_g170930 = (TVEVisualData)0;
				half Dummy594_g170929 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170930 = Dummy594_g170929;
				float localBreakData4_g170940 = ( 0.0 );
				float localCompData3_g170902 = ( 0.0 );
				TVEVisualData Data3_g170902 = (TVEVisualData)0;
				half Dummy594_g170900 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170902 = Dummy594_g170900;
				float localBreakData4_g170901 = ( 0.0 );
				float localCompData3_g170867 = ( 0.0 );
				TVEVisualData Data3_g170867 = (TVEVisualData)0;
				half Dummy594_g170864 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170867 = Dummy594_g170864;
				float localBreakData4_g170865 = ( 0.0 );
				float localCompData3_g170863 = ( 0.0 );
				TVEVisualData Data3_g170863 = (TVEVisualData)0;
				float In_Dummy3_g170863 = 0.0;
				float localBreakData4_g170862 = ( 0.0 );
				float localCompData3_g170841 = ( 0.0 );
				TVEVisualData Data3_g170841 = (TVEVisualData)0;
				half Dummy205_g170838 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170841 = Dummy205_g170838;
				float localBreakData4_g170840 = ( 0.0 );
				float localCompData3_g170835 = ( 0.0 );
				TVEVisualData Data3_g170835 = (TVEVisualData)0;
				half Dummy205_g170814 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170835 = Dummy205_g170814;
				float localBreakData4_g170836 = ( 0.0 );
				float localCompData3_g170807 = ( 0.0 );
				TVEVisualData Data3_g170807 = (TVEVisualData)0;
				half Dummy220_g170804 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170807 = Dummy220_g170804;
				float localBreakData4_g170806 = ( 0.0 );
				float localCompData3_g170797 = ( 0.0 );
				TVEVisualData Data3_g170797 = (TVEVisualData)0;
				half Dummy220_g170794 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170797 = Dummy220_g170794;
				float localBreakData4_g170796 = ( 0.0 );
				float localCompData3_g170786 = ( 0.0 );
				TVEVisualData Data3_g170786 = (TVEVisualData)0;
				half Dummy202_g170784 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170786 = Dummy202_g170784;
				float localBreakData4_g170785 = ( 0.0 );
				float localCompData3_g170691 = ( 0.0 );
				TVEVisualData Data3_g170691 = (TVEVisualData)0;
				half4 Dummy944_g170674 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170691 = Dummy944_g170674.x;
				float localBreakData4_g170690 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170667 = Dummy946_g170634.x;
				float localBreakData4_g170646 = ( 0.0 );
				float localCompData3_g170633 = ( 0.0 );
				TVEVisualData Data3_g170633 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170633 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainAlbedoTex;
				float localFilterTexture19_g170629 = ( 0.0 );
				SamplerState SamplerDefault19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170629 = SamplerDefault19_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170629 = SamplerDefault19_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170629 = SamplerPoint19_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170629 = SamplerLow19_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170629 = SamplerMedium19_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170629 = SamplerHigh19_g170629;
				#endif
				SamplerState Sampler276_g170626 = SS19_g170629;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainAlbedoTex;
				SamplerState Sampler275_g170626 = SS19_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainAlbedoTex;
				SamplerState Sampler238_g170626 = SS19_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170632 = Data16_g170493;
				float Out_Dummy15_g170632 = 0;
				float3 Out_PositionWS15_g170632 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170632 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170632 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170632 = float3( 0,0,0 );
				float4 Out_VertexData15_g170632 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170632 = float4( 0,0,0,0 );
				Out_Dummy15_g170632 = Data15_g170632.Dummy;
				Out_PositionWS15_g170632 = Data15_g170632.PositionWS;
				Out_PositionWO15_g170632 = Data15_g170632.PositionWO;
				Out_PivotWS15_g170632 = Data15_g170632.PivotWS;
				Out_PivotWO15_g170632 = Data15_g170632.PivotWO;
				Out_NormalWS15_g170632 = Data15_g170632.NormalWS;
				Out_ViewDirWS15_g170632 = Data15_g170632.ViewDirWS;
				Out_VertexData15_g170632 = Data15_g170632.VertexData;
				Out_BoundsData15_g170632 = Data15_g170632.BoundsData;
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170632;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainAlbedoTex;
				SamplerState Sampler246_g170626 = SS19_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170632;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainAlbedoTex;
				SamplerState Sampler234_g170626 = SS19_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainAlbedoTex;
				SamplerState Sampler263_g170626 = SS19_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170628) = _MainShaderTex;
				float localFilterTexture30_g170631 = ( 0.0 );
				SamplerState SamplerDefault30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170631 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170631 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170631 = SamplerDefault30_g170631;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170631 = SamplerDefault30_g170631;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170631 = SamplerPoint30_g170631;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170631 = SamplerLow30_g170631;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170631 = SamplerMedium30_g170631;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170631 = SamplerHigh30_g170631;
				#endif
				SamplerState Sampler276_g170628 = SS30_g170631;
				float4 temp_output_37_0_g170628 = Local_Coords180_g170617;
				half4 Coords276_g170628 = temp_output_37_0_g170628;
				half2 TexCoord276_g170628 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170628 = SampleMain( Texture276_g170628 , Sampler276_g170628 , Coords276_g170628 , TexCoord276_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170628) = _MainShaderTex;
				SamplerState Sampler275_g170628 = SS30_g170631;
				half4 Coords275_g170628 = temp_output_37_0_g170628;
				half2 TexCoord275_g170628 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170628 = SampleExtra( Texture275_g170628 , Sampler275_g170628 , Coords275_g170628 , TexCoord275_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170628) = _MainShaderTex;
				SamplerState Sampler238_g170628 = SS30_g170631;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				float3 temp_output_279_0_g170628 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170628) = _MainShaderTex;
				SamplerState Sampler246_g170628 = SS30_g170631;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				float3 temp_output_280_0_g170628 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170628) = _MainShaderTex;
				SamplerState Sampler234_g170628 = SS30_g170631;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170628) = _MainShaderTex;
				SamplerState Sampler263_g170628 = SS30_g170631;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170623 = _MainMultiRemap.x;
				float temp_output_10_0_g170623 = ( _MainMultiRemap.y - temp_output_7_0_g170623 );
				half Local_MultiMask78_g170617 = saturate( ( ( clampResult17_g170622 - temp_output_7_0_g170623 ) / ( temp_output_10_0_g170623 + 0.0001 ) ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170633 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170633 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainNormalTex;
				float localFilterTexture29_g170630 = ( 0.0 );
				SamplerState SamplerDefault29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170630 = SamplerDefault29_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170630 = SamplerDefault29_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170630 = SamplerPoint29_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170630 = SamplerLow29_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170630 = SamplerMedium29_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170630 = SamplerHigh29_g170630;
				#endif
				SamplerState Sampler276_g170627 = SS29_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainNormalTex;
				SamplerState Sampler275_g170627 = SS29_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainNormalTex;
				SamplerState Sampler238_g170627 = SS29_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainNormalTex;
				SamplerState Sampler246_g170627 = SS29_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainNormalTex;
				SamplerState Sampler234_g170627 = SS29_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainNormalTex;
				SamplerState Sampler263_g170627 = SS29_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170633 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170633 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170633 = Local_Masks109_g170617;
				float4 In_Emissive3_g170633 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170633 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170633 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170633 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170633 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170633 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170633 = temp_cast_4;
				float In_Transmission3_g170633 = 1.0;
				float In_Thickness3_g170633 = 0.0;
				float In_Diffusion3_g170633 = 0.0;
				Data3_g170633.Dummy = In_Dummy3_g170633;
				Data3_g170633.Albedo = In_Albedo3_g170633;
				Data3_g170633.AlbedoRaw = In_AlbedoRaw3_g170633;
				Data3_g170633.NormalTS = In_NormalTS3_g170633;
				Data3_g170633.NormalWS = In_NormalWS3_g170633;
				Data3_g170633.Shader = In_Shader3_g170633;
				Data3_g170633.Emissive= In_Emissive3_g170633;
				Data3_g170633.MultiMask = In_MultiMask3_g170633;
				Data3_g170633.Grayscale = In_Grayscale3_g170633;
				Data3_g170633.Luminosity = In_Luminosity3_g170633;
				Data3_g170633.AlphaClip = In_AlphaClip3_g170633;
				Data3_g170633.AlphaFade = In_AlphaFade3_g170633;
				Data3_g170633.Translucency = In_Translucency3_g170633;
				Data3_g170633.Transmission = In_Transmission3_g170633;
				Data3_g170633.Thickness = In_Thickness3_g170633;
				Data3_g170633.Diffusion = In_Diffusion3_g170633;
				TVEVisualData Data4_g170646 = Data3_g170633;
				float Out_Dummy4_g170646 = 0;
				float3 Out_Albedo4_g170646 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170646 = float2( 0,0 );
				float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
				float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170646 = 0;
				float Out_Grayscale4_g170646 = 0;
				float Out_Luminosity4_g170646 = 0;
				float Out_AlphaClip4_g170646 = 0;
				float Out_AlphaFade4_g170646 = 0;
				float3 Out_Translucency4_g170646 = float3( 0,0,0 );
				float Out_Transmission4_g170646 = 0;
				float Out_Thickness4_g170646 = 0;
				float Out_Diffusion4_g170646 = 0;
				Out_Dummy4_g170646 = Data4_g170646.Dummy;
				Out_Albedo4_g170646 = Data4_g170646.Albedo;
				Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
				Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
				Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
				Out_Shader4_g170646 = Data4_g170646.Shader;
				Out_Emissive4_g170646= Data4_g170646.Emissive;
				Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
				Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
				Out_Luminosity4_g170646= Data4_g170646.Luminosity;
				Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
				Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
				Out_Translucency4_g170646 = Data4_g170646.Translucency;
				Out_Transmission4_g170646 = Data4_g170646.Transmission;
				Out_Thickness4_g170646 = Data4_g170646.Thickness;
				Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170646;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170663 = ( 0.0 );
				SamplerState SamplerDefault19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170663 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170663 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170663 = SamplerDefault19_g170663;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170663 = SamplerDefault19_g170663;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170663 = SamplerPoint19_g170663;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170663 = SamplerLow19_g170663;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170663 = SamplerMedium19_g170663;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170663 = SamplerHigh19_g170663;
				#endif
				SamplerState Sampler276_g170635 = SS19_g170663;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170663;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170663;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170666 = Data16_g170493;
				float Out_Dummy15_g170666 = 0;
				float3 Out_PositionWS15_g170666 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170666 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170666 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170666 = float3( 0,0,0 );
				float4 Out_VertexData15_g170666 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_PositionWS15_g170666 = Data15_g170666.PositionWS;
				Out_PositionWO15_g170666 = Data15_g170666.PositionWO;
				Out_PivotWS15_g170666 = Data15_g170666.PivotWS;
				Out_PivotWO15_g170666 = Data15_g170666.PivotWO;
				Out_NormalWS15_g170666 = Data15_g170666.NormalWS;
				Out_ViewDirWS15_g170666 = Data15_g170666.ViewDirWS;
				Out_VertexData15_g170666 = Data15_g170666.VertexData;
				Out_BoundsData15_g170666 = Data15_g170666.BoundsData;
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170666;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170663;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170666;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170663;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170663;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170665 = ( 0.0 );
				SamplerState SamplerDefault30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170665 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170665 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170665 = SamplerDefault30_g170665;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170665 = SamplerDefault30_g170665;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170665 = SamplerPoint30_g170665;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170665 = SamplerLow30_g170665;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170665 = SamplerMedium30_g170665;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170665 = SamplerHigh30_g170665;
				#endif
				SamplerState Sampler276_g170637 = SS30_g170665;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170665;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170665;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170665;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170665;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170665;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170642 = _SecondMultiRemap.x;
				float temp_output_10_0_g170642 = ( _SecondMultiRemap.y - temp_output_7_0_g170642 );
				float temp_output_765_0_g170634 = saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170642 ) / ( temp_output_10_0_g170642 + 0.0001 ) ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170659 = 2.0;
				#else
				float staticSwitch1_g170659 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170659 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170650 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170649 = _SecondMaskRemap.x;
				float temp_output_10_0_g170649 = ( _SecondMaskRemap.y - temp_output_7_0_g170649 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170650 - temp_output_7_0_g170649 ) / ( temp_output_10_0_g170649 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170646;
				float clampResult17_g170651 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _SecondProjRemap.x;
				float temp_output_10_0_g170652 = ( _SecondProjRemap.y - temp_output_7_0_g170652 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170666;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170653 = _second_vert_mode;
				float temp_output_30_0_g170653 = ( break965_g170634.x * break33_g170653.x );
				float temp_output_29_0_g170653 = ( break965_g170634.y * break33_g170653.y );
				float temp_output_31_0_g170653 = ( break965_g170634.z * break33_g170653.z );
				float temp_output_28_0_g170653 = ( temp_output_30_0_g170653 + temp_output_29_0_g170653 + temp_output_31_0_g170653 + ( break965_g170634.w * break33_g170653.w ) );
				float clampResult17_g170647 = clamp( temp_output_28_0_g170653 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170648 = _SecondMeshRemap.x;
				float temp_output_10_0_g170648 = ( _SecondMeshRemap.y - temp_output_7_0_g170648 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170648 ) / ( temp_output_10_0_g170648 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170661 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170661 = ( temp_output_6_0_g170661 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170661 = temp_output_6_0_g170661;
				#endif
				float temp_output_987_0_g170634 = staticSwitch14_g170661;
				half Blend_VertMask918_g170634 = temp_output_987_0_g170634;
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170645 = Data204_g170494;
				float Out_Dummy15_g170645 = 0;
				float4 Out_CoatParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170645 = float4( 0,0,0,0 );
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_CoatParams15_g170645 = Data15_g170645.CoatParams;
				Out_PaintParams15_g170645 = Data15_g170645.PaintParams;
				Out_GlowParams15_g170645 = Data15_g170645.GlowParams;
				Out_AtmoParams15_g170645= Data15_g170645.AtmoParams;
				Out_FadeParams15_g170645= Data15_g170645.FadeParams;
				Out_FormParams15_g170645 = Data15_g170645.FormParams;
				Out_LandParams15_g170645 = Data15_g170645.LandParams;
				Out_WindParams15_g170645 = Data15_g170645.WindParams;
				Out_PushParams15_g170645 = Data15_g170645.PushParams;
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170645;
				float lerpResult1013_g170634 = lerp( 1.0 , (Global_CoatParams975_g170634).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = lerpResult1013_g170634;
				#else
				float staticSwitch971_g170634 = 1.0;
				#endif
				half Blend_GlobalMask972_g170634 = staticSwitch971_g170634;
				float temp_output_432_0_g170634 = ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 );
				float clampResult17_g170655 = clamp( temp_output_432_0_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _SecondBlendRemap.x;
				float temp_output_10_0_g170654 = ( _SecondBlendRemap.y - temp_output_7_0_g170654 );
				half Blend_Mask412_g170634 = ( saturate( ( ( clampResult17_g170655 - temp_output_7_0_g170654 ) / ( temp_output_10_0_g170654 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170667 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170667 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170646;
				float2 lerpResult40_g170657 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170664 = ( 0.0 );
				SamplerState SamplerDefault29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170664 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170664 = SamplerDefault29_g170664;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170664 = SamplerDefault29_g170664;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170664 = SamplerPoint29_g170664;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170664 = SamplerLow29_g170664;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170664 = SamplerMedium29_g170664;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170664 = SamplerHigh29_g170664;
				#endif
				SamplerState Sampler276_g170636 = SS29_g170664;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170664;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170664;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170664;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170664;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170664;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170657 = ( lerpResult40_g170657 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170657 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170667 = Final_NormalTS612_g170634;
				float3 appendResult68_g170658 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170658 = appendResult68_g170658;
				float3 worldNormal74_g170658 = normalize( float3(dot(tanToWorld0,tanNormal74_g170658), dot(tanToWorld1,tanNormal74_g170658), dot(tanToWorld2,tanNormal74_g170658)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170658;
				float3 In_NormalWS3_g170667 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170646;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170667 = Final_Masks613_g170634;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170646;
				float3 temp_output_3_0_g170660 = Final_Albedo601_g170634;
				float dotResult20_g170660 = dot( temp_output_3_0_g170660 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170660;
				float In_Grayscale3_g170667 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170667 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170646;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170667 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170646;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170667 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170646;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170667 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170646;
				float In_Transmission3_g170667 = Out_Transmission4_g170646;
				float In_Thickness3_g170667 = Out_Thickness4_g170646;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170646;
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				TVEVisualData Data4_g170690 = Data3_g170667;
				float Out_Dummy4_g170690 = 0;
				float3 Out_Albedo4_g170690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170690 = float2( 0,0 );
				float3 Out_NormalWS4_g170690 = float3( 0,0,0 );
				float4 Out_Shader4_g170690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170690 = 0;
				float Out_Grayscale4_g170690 = 0;
				float Out_Luminosity4_g170690 = 0;
				float Out_AlphaClip4_g170690 = 0;
				float Out_AlphaFade4_g170690 = 0;
				float3 Out_Translucency4_g170690 = float3( 0,0,0 );
				float Out_Transmission4_g170690 = 0;
				float Out_Thickness4_g170690 = 0;
				float Out_Diffusion4_g170690 = 0;
				Out_Dummy4_g170690 = Data4_g170690.Dummy;
				Out_Albedo4_g170690 = Data4_g170690.Albedo;
				Out_AlbedoRaw4_g170690 = Data4_g170690.AlbedoRaw;
				Out_NormalTS4_g170690 = Data4_g170690.NormalTS;
				Out_NormalWS4_g170690 = Data4_g170690.NormalWS;
				Out_Shader4_g170690 = Data4_g170690.Shader;
				Out_Emissive4_g170690= Data4_g170690.Emissive;
				Out_MultiMask4_g170690 = Data4_g170690.MultiMask;
				Out_Grayscale4_g170690 = Data4_g170690.Grayscale;
				Out_Luminosity4_g170690= Data4_g170690.Luminosity;
				Out_AlphaClip4_g170690 = Data4_g170690.AlphaClip;
				Out_AlphaFade4_g170690 = Data4_g170690.AlphaFade;
				Out_Translucency4_g170690 = Data4_g170690.Translucency;
				Out_Transmission4_g170690 = Data4_g170690.Transmission;
				Out_Thickness4_g170690 = Data4_g170690.Thickness;
				Out_Diffusion4_g170690 = Data4_g170690.Diffusion;
				half3 Visual_Albedo527_g170674 = Out_Albedo4_g170690;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170675) = _ThirdAlbedoTex;
				float localFilterTexture19_g170703 = ( 0.0 );
				SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170703 = SamplerDefault19_g170703;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170703 = SamplerDefault19_g170703;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170703 = SamplerPoint19_g170703;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170703 = SamplerLow19_g170703;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170703 = SamplerMedium19_g170703;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170703 = SamplerHigh19_g170703;
				#endif
				SamplerState Sampler276_g170675 = SS19_g170703;
				half4 Local_LayerCoords790_g170674 = _third_coord_value;
				float4 temp_output_37_0_g170675 = Local_LayerCoords790_g170674;
				half4 Coords276_g170675 = temp_output_37_0_g170675;
				half2 TexCoord276_g170675 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170675 = SampleMain( Texture276_g170675 , Sampler276_g170675 , Coords276_g170675 , TexCoord276_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170675 = SS19_g170703;
				half4 Coords275_g170675 = temp_output_37_0_g170675;
				half2 TexCoord275_g170675 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170675 = SampleExtra( Texture275_g170675 , Sampler275_g170675 , Coords275_g170675 , TexCoord275_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170675 = SS19_g170703;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				TVEModelData Data15_g170706 = Data16_g170493;
				float Out_Dummy15_g170706 = 0;
				float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
				float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
				Out_Dummy15_g170706 = Data15_g170706.Dummy;
				Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
				Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
				Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
				Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
				Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
				Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
				Out_VertexData15_g170706 = Data15_g170706.VertexData;
				Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
				half3 Model_PositionWO636_g170674 = Out_PositionWO15_g170706;
				float3 temp_output_279_0_g170675 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170675 = SS19_g170703;
				half4 Coords246_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition246_g170675 = temp_output_279_0_g170675;
				half3 Model_NormalWS869_g170674 = Out_NormalWS15_g170706;
				float3 temp_output_280_0_g170675 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170675 = temp_output_280_0_g170675;
				half4 localSamplePlanar3D246_g170675 = SamplePlanar3D( Texture246_g170675 , Sampler246_g170675 , Coords246_g170675 , WorldPosition246_g170675 , WorldNormal246_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170675 = SS19_g170703;
				float4 Coords234_g170675 = temp_output_37_0_g170675;
				float3 WorldPosition234_g170675 = temp_output_279_0_g170675;
				float4 localSampleStochastic2D234_g170675 = SampleStochastic2D( Texture234_g170675 , Sampler234_g170675 , Coords234_g170675 , WorldPosition234_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170675 = SS19_g170703;
				half4 Coords263_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition263_g170675 = temp_output_279_0_g170675;
				half3 WorldNormal263_g170675 = temp_output_280_0_g170675;
				half4 localSampleStochastic3D263_g170675 = SampleStochastic3D( Texture263_g170675 , Sampler263_g170675 , Coords263_g170675 , WorldPosition263_g170675 , WorldNormal263_g170675 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170674 = localSampleExtra275_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170674 = localSamplePlanar2D238_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170674 = localSamplePlanar3D246_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170674 = localSampleStochastic2D234_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170674 = localSampleStochastic3D263_g170675;
				#else
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#endif
				half4 Local_AlbedoTex777_g170674 = staticSwitch693_g170674;
				float3 lerpResult716_g170674 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170674).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170674 = lerpResult716_g170674;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170677) = _ThirdShaderTex;
				float localFilterTexture30_g170705 = ( 0.0 );
				SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170705 = SamplerDefault30_g170705;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170705 = SamplerDefault30_g170705;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170705 = SamplerPoint30_g170705;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170705 = SamplerLow30_g170705;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170705 = SamplerMedium30_g170705;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170705 = SamplerHigh30_g170705;
				#endif
				SamplerState Sampler276_g170677 = SS30_g170705;
				float4 temp_output_37_0_g170677 = Local_LayerCoords790_g170674;
				half4 Coords276_g170677 = temp_output_37_0_g170677;
				half2 TexCoord276_g170677 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170677 = SampleMain( Texture276_g170677 , Sampler276_g170677 , Coords276_g170677 , TexCoord276_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170677) = _ThirdShaderTex;
				SamplerState Sampler275_g170677 = SS30_g170705;
				half4 Coords275_g170677 = temp_output_37_0_g170677;
				half2 TexCoord275_g170677 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170677 = SampleExtra( Texture275_g170677 , Sampler275_g170677 , Coords275_g170677 , TexCoord275_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170677) = _ThirdShaderTex;
				SamplerState Sampler238_g170677 = SS30_g170705;
				half4 Coords238_g170677 = temp_output_37_0_g170677;
				float3 temp_output_279_0_g170677 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170677 = temp_output_279_0_g170677;
				half4 localSamplePlanar2D238_g170677 = SamplePlanar2D( Texture238_g170677 , Sampler238_g170677 , Coords238_g170677 , WorldPosition238_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170677) = _ThirdShaderTex;
				SamplerState Sampler246_g170677 = SS30_g170705;
				half4 Coords246_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition246_g170677 = temp_output_279_0_g170677;
				float3 temp_output_280_0_g170677 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170677 = temp_output_280_0_g170677;
				half4 localSamplePlanar3D246_g170677 = SamplePlanar3D( Texture246_g170677 , Sampler246_g170677 , Coords246_g170677 , WorldPosition246_g170677 , WorldNormal246_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170677) = _ThirdShaderTex;
				SamplerState Sampler234_g170677 = SS30_g170705;
				float4 Coords234_g170677 = temp_output_37_0_g170677;
				float3 WorldPosition234_g170677 = temp_output_279_0_g170677;
				float4 localSampleStochastic2D234_g170677 = SampleStochastic2D( Texture234_g170677 , Sampler234_g170677 , Coords234_g170677 , WorldPosition234_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170677) = _ThirdShaderTex;
				SamplerState Sampler263_g170677 = SS30_g170705;
				half4 Coords263_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition263_g170677 = temp_output_279_0_g170677;
				half3 WorldNormal263_g170677 = temp_output_280_0_g170677;
				half4 localSampleStochastic3D263_g170677 = SampleStochastic3D( Texture263_g170677 , Sampler263_g170677 , Coords263_g170677 , WorldPosition263_g170677 , WorldNormal263_g170677 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170674 = localSampleExtra275_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170674 = localSamplePlanar2D238_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170674 = localSamplePlanar3D246_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170674 = localSampleStochastic2D234_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170674 = localSampleStochastic3D263_g170677;
				#else
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#endif
				half4 Local_ShaderTex775_g170674 = staticSwitch722_g170674;
				float lerpResult739_g170674 = lerp( 1.0 , (Local_ShaderTex775_g170674).y , _ThirdOcclusionValue);
				float4 appendResult749_g170674 = (float4(( (Local_ShaderTex775_g170674).x * _ThirdMetallicValue ) , lerpResult739_g170674 , (Local_ShaderTex775_g170674).z , ( (Local_ShaderTex775_g170674).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170674 = appendResult749_g170674;
				float clampResult17_g170680 = clamp( (Local_Masks750_g170674).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170681 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170681 = ( _ThirdMultiRemap.y - temp_output_7_0_g170681 );
				float temp_output_765_0_g170674 = saturate( ( ( clampResult17_g170680 - temp_output_7_0_g170681 ) / ( temp_output_10_0_g170681 + 0.0001 ) ) );
				half Local_MultiMask767_g170674 = temp_output_765_0_g170674;
				float lerpResult705_g170674 = lerp( 1.0 , Local_MultiMask767_g170674 , _ThirdColorMode);
				float4 lerpResult706_g170674 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170674);
				half3 Local_ColorRGB774_g170674 = (lerpResult706_g170674).rgb;
				half3 Local_Albedo768_g170674 = ( Local_AlbedoRGB771_g170674 * Local_ColorRGB774_g170674 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170698 = 2.0;
				#else
				float staticSwitch1_g170698 = 4.594794;
				#endif
				float3 lerpResult985_g170674 = lerp( Local_Albedo768_g170674 , ( Visual_Albedo527_g170674 * Local_Albedo768_g170674 * staticSwitch1_g170698 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
				SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170674 = _third_mask_coord_value;
				float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170674;
				half4 Coords276_g170701 = temp_output_37_0_g170701;
				half2 TexCoord276_g170701 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
				SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
				half4 Coords275_g170701 = temp_output_37_0_g170701;
				half2 TexCoord275_g170701 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
				SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
				half4 Coords238_g170701 = temp_output_37_0_g170701;
				float3 temp_output_279_0_g170701 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
				half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
				SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
				half4 Coords246_g170701 = temp_output_37_0_g170701;
				half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
				float3 temp_output_280_0_g170701 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
				half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170674 = localSampleExtra275_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170674 = localSamplePlanar2D238_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170674 = localSamplePlanar3D246_g170701;
				#else
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#endif
				half4 Local_MaskTex861_g170674 = staticSwitch817_g170674;
				float clampResult17_g170685 = clamp( (Local_MaskTex861_g170674).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170686 = ( _ThirdMaskRemap.y - temp_output_7_0_g170686 );
				float lerpResult1028_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170674 = lerpResult1028_g170674;
				half4 Model_VertexMasks960_g170674 = Out_VertexData15_g170706;
				float4 break961_g170674 = Model_VertexMasks960_g170674;
				float4 break33_g170689 = _third_vert_mode;
				float temp_output_30_0_g170689 = ( break961_g170674.x * break33_g170689.x );
				float temp_output_29_0_g170689 = ( break961_g170674.y * break33_g170689.y );
				float temp_output_31_0_g170689 = ( break961_g170674.z * break33_g170689.z );
				float temp_output_28_0_g170689 = ( temp_output_30_0_g170689 + temp_output_29_0_g170689 + temp_output_31_0_g170689 + ( break961_g170674.w * break33_g170689.w ) );
				float clampResult17_g170683 = clamp( temp_output_28_0_g170689 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170684 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170684 = ( _ThirdMeshRemap.y - temp_output_7_0_g170684 );
				float lerpResult1026_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170683 - temp_output_7_0_g170684 ) / ( temp_output_10_0_g170684 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170700 = lerpResult1026_g170674;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_992_0_g170674 = staticSwitch14_g170700;
				half Blend_VertMask913_g170674 = temp_output_992_0_g170674;
				half3 Visual_NormalWS953_g170674 = Out_NormalWS4_g170690;
				float clampResult17_g170687 = clamp( saturate( (Visual_NormalWS953_g170674).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _ThirdProjRemap.x;
				float temp_output_10_0_g170688 = ( _ThirdProjRemap.y - temp_output_7_0_g170688 );
				float lerpResult1004_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170687 - temp_output_7_0_g170688 ) / ( temp_output_10_0_g170688 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170674 = lerpResult1004_g170674;
				TVEGlobalData Data15_g170692 = Data204_g170494;
				float Out_Dummy15_g170692 = 0;
				float4 Out_CoatParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170692 = float4( 0,0,0,0 );
				Out_Dummy15_g170692 = Data15_g170692.Dummy;
				Out_CoatParams15_g170692 = Data15_g170692.CoatParams;
				Out_PaintParams15_g170692 = Data15_g170692.PaintParams;
				Out_GlowParams15_g170692 = Data15_g170692.GlowParams;
				Out_AtmoParams15_g170692= Data15_g170692.AtmoParams;
				Out_FadeParams15_g170692= Data15_g170692.FadeParams;
				Out_FormParams15_g170692 = Data15_g170692.FormParams;
				Out_LandParams15_g170692 = Data15_g170692.LandParams;
				Out_WindParams15_g170692 = Data15_g170692.WindParams;
				Out_PushParams15_g170692 = Data15_g170692.PushParams;
				half4 Global_CoatParams972_g170674 = Out_CoatParams15_g170692;
				float lerpResult1023_g170674 = lerp( 1.0 , (Global_CoatParams972_g170674).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170674 = lerpResult1023_g170674;
				#else
				float staticSwitch965_g170674 = 1.0;
				#endif
				half Blend_GlobalMask968_g170674 = staticSwitch965_g170674;
				float temp_output_432_0_g170674 = ( _ThirdIntensityValue * Detail_TexMask429_g170674 * Blend_VertMask913_g170674 * Blend_ProjMask912_g170674 * Blend_GlobalMask968_g170674 );
				float clampResult17_g170694 = clamp( temp_output_432_0_g170674 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170693 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170693 = ( _ThirdBlendRemap.y - temp_output_7_0_g170693 );
				half Detail_Mask412_g170674 = ( saturate( ( ( clampResult17_g170694 - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170674 = lerp( Visual_Albedo527_g170674 , lerpResult985_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170674 = lerpResult989_g170674;
				#else
				float3 staticSwitch415_g170674 = Visual_Albedo527_g170674;
				#endif
				half3 Final_Albedo601_g170674 = staticSwitch415_g170674;
				float3 In_Albedo3_g170691 = Final_Albedo601_g170674;
				float3 In_AlbedoRaw3_g170691 = Final_Albedo601_g170674;
				half2 Visual_NormalTS529_g170674 = Out_NormalTS4_g170690;
				float2 lerpResult40_g170696 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170674 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170676) = _ThirdNormalTex;
				float localFilterTexture29_g170704 = ( 0.0 );
				SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170704 = SamplerDefault29_g170704;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170704 = SamplerDefault29_g170704;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170704 = SamplerPoint29_g170704;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170704 = SamplerLow29_g170704;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170704 = SamplerMedium29_g170704;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170704 = SamplerHigh29_g170704;
				#endif
				SamplerState Sampler276_g170676 = SS29_g170704;
				float4 temp_output_37_0_g170676 = Local_LayerCoords790_g170674;
				half4 Coords276_g170676 = temp_output_37_0_g170676;
				half2 TexCoord276_g170676 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170676 = SampleMain( Texture276_g170676 , Sampler276_g170676 , Coords276_g170676 , TexCoord276_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170676) = _ThirdNormalTex;
				SamplerState Sampler275_g170676 = SS29_g170704;
				half4 Coords275_g170676 = temp_output_37_0_g170676;
				half2 TexCoord275_g170676 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170676 = SampleExtra( Texture275_g170676 , Sampler275_g170676 , Coords275_g170676 , TexCoord275_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170676) = _ThirdNormalTex;
				SamplerState Sampler238_g170676 = SS29_g170704;
				half4 Coords238_g170676 = temp_output_37_0_g170676;
				float3 temp_output_279_0_g170676 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170676 = temp_output_279_0_g170676;
				half4 localSamplePlanar2D238_g170676 = SamplePlanar2D( Texture238_g170676 , Sampler238_g170676 , Coords238_g170676 , WorldPosition238_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170676) = _ThirdNormalTex;
				SamplerState Sampler246_g170676 = SS29_g170704;
				half4 Coords246_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition246_g170676 = temp_output_279_0_g170676;
				float3 temp_output_280_0_g170676 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170676 = temp_output_280_0_g170676;
				half4 localSamplePlanar3D246_g170676 = SamplePlanar3D( Texture246_g170676 , Sampler246_g170676 , Coords246_g170676 , WorldPosition246_g170676 , WorldNormal246_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170676) = _ThirdNormalTex;
				SamplerState Sampler234_g170676 = SS29_g170704;
				float4 Coords234_g170676 = temp_output_37_0_g170676;
				float3 WorldPosition234_g170676 = temp_output_279_0_g170676;
				float4 localSampleStochastic2D234_g170676 = SampleStochastic2D( Texture234_g170676 , Sampler234_g170676 , Coords234_g170676 , WorldPosition234_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170676) = _ThirdNormalTex;
				SamplerState Sampler263_g170676 = SS29_g170704;
				half4 Coords263_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition263_g170676 = temp_output_279_0_g170676;
				half3 WorldNormal263_g170676 = temp_output_280_0_g170676;
				half4 localSampleStochastic3D263_g170676 = SampleStochastic3D( Texture263_g170676 , Sampler263_g170676 , Coords263_g170676 , WorldPosition263_g170676 , WorldNormal263_g170676 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170674 = localSampleExtra275_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170674 = localSamplePlanar2D238_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170674 = localSamplePlanar3D246_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170674 = localSampleStochastic2D234_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170674 = localSampleStochastic3D263_g170676;
				#else
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#endif
				half4 Local_NormalTex776_g170674 = staticSwitch698_g170674;
				half4 Normal_Packed45_g170678 = Local_NormalTex776_g170674;
				float2 appendResult58_g170678 = (float2(( (Normal_Packed45_g170678).x * (Normal_Packed45_g170678).w ) , (Normal_Packed45_g170678).y));
				half2 Normal_Default50_g170678 = appendResult58_g170678;
				half2 Normal_ASTC41_g170678 = (Normal_Packed45_g170678).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170678 = Normal_ASTC41_g170678;
				#else
				float2 staticSwitch38_g170678 = Normal_Default50_g170678;
				#endif
				half2 Normal_NO_DTX544_g170678 = (Normal_Packed45_g170678).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170678 = Normal_NO_DTX544_g170678;
				#else
				float2 staticSwitch37_g170678 = staticSwitch38_g170678;
				#endif
				float2 temp_output_724_0_g170674 = ( (staticSwitch37_g170678*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170679 = temp_output_724_0_g170674;
				float2 break71_g170679 = Normal_Planar45_g170679;
				float3 appendResult72_g170679 = (float3(break71_g170679.x , 0.0 , break71_g170679.y));
				float2 temp_output_858_0_g170674 = (mul( ase_worldToTangent, appendResult72_g170679 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#else
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#endif
				half2 Local_NormalTS729_g170674 = staticSwitch727_g170674;
				float2 temp_output_36_0_g170696 = ( lerpResult40_g170696 + Local_NormalTS729_g170674 );
				float2 lerpResult405_g170674 = lerp( Visual_NormalTS529_g170674 , temp_output_36_0_g170696 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170674 = lerpResult405_g170674;
				#else
				float2 staticSwitch418_g170674 = Visual_NormalTS529_g170674;
				#endif
				half2 Final_NormalTS612_g170674 = staticSwitch418_g170674;
				float2 In_NormalTS3_g170691 = Final_NormalTS612_g170674;
				float3 appendResult68_g170697 = (float3(Final_NormalTS612_g170674 , 1.0));
				float3 tanNormal74_g170697 = appendResult68_g170697;
				float3 worldNormal74_g170697 = normalize( float3(dot(tanToWorld0,tanNormal74_g170697), dot(tanToWorld1,tanNormal74_g170697), dot(tanToWorld2,tanNormal74_g170697)) );
				half3 Final_NormalWS956_g170674 = worldNormal74_g170697;
				float3 In_NormalWS3_g170691 = Final_NormalWS956_g170674;
				half4 Visual_Shader531_g170674 = Out_Shader4_g170690;
				float4 lerpResult1000_g170674 = lerp( Local_Masks750_g170674 , ( Visual_Shader531_g170674 * Local_Masks750_g170674 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170674 = lerp( Visual_Shader531_g170674 , lerpResult1000_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170674 = lerpResult998_g170674;
				#else
				float4 staticSwitch451_g170674 = Visual_Shader531_g170674;
				#endif
				half4 Final_Masks613_g170674 = staticSwitch451_g170674;
				float4 In_Shader3_g170691 = Final_Masks613_g170674;
				float4 In_Emissive3_g170691 = Out_Emissive4_g170690;
				float3 temp_output_3_0_g170699 = Final_Albedo601_g170674;
				float dotResult20_g170699 = dot( temp_output_3_0_g170699 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170674 = dotResult20_g170699;
				float In_Grayscale3_g170691 = Final_Grayscale615_g170674;
				float clampResult651_g170674 = clamp( saturate( ( Final_Grayscale615_g170674 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170674 = clampResult651_g170674;
				float In_Luminosity3_g170691 = Final_Luminosity652_g170674;
				half Visual_MultiMask547_g170674 = Out_MultiMask4_g170690;
				float lerpResult477_g170674 = lerp( Visual_MultiMask547_g170674 , Local_MultiMask767_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch482_g170674 = lerpResult477_g170674;
				#else
				float staticSwitch482_g170674 = Visual_MultiMask547_g170674;
				#endif
				half Final_MultiMask572_g170674 = staticSwitch482_g170674;
				float In_MultiMask3_g170691 = Final_MultiMask572_g170674;
				half Visual_AlphaClip559_g170674 = Out_AlphaClip4_g170690;
				float temp_output_718_0_g170674 = (Local_AlbedoTex777_g170674).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170674 = ( temp_output_718_0_g170674 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170674 = temp_output_718_0_g170674;
				#endif
				half Local_AlphaClip772_g170674 = staticSwitch924_g170674;
				float lerpResult448_g170674 = lerp( Visual_AlphaClip559_g170674 , Local_AlphaClip772_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch564_g170674 = lerpResult448_g170674;
				#else
				float staticSwitch564_g170674 = Visual_AlphaClip559_g170674;
				#endif
				half Final_AlphaClip602_g170674 = staticSwitch564_g170674;
				float In_AlphaClip3_g170691 = Final_AlphaClip602_g170674;
				half Visual_AlphaFade588_g170674 = Out_AlphaFade4_g170690;
				half Local_AlphaFade773_g170674 = (lerpResult706_g170674).a;
				float lerpResult604_g170674 = lerp( Visual_AlphaFade588_g170674 , Local_AlphaFade773_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch608_g170674 = lerpResult604_g170674;
				#else
				float staticSwitch608_g170674 = Visual_AlphaFade588_g170674;
				#endif
				half Final_AlphaFade611_g170674 = staticSwitch608_g170674;
				float In_AlphaFade3_g170691 = Final_AlphaFade611_g170674;
				float3 In_Translucency3_g170691 = Out_Translucency4_g170690;
				float In_Transmission3_g170691 = Out_Transmission4_g170690;
				float In_Thickness3_g170691 = Out_Thickness4_g170690;
				float In_Diffusion3_g170691 = Out_Diffusion4_g170690;
				Data3_g170691.Dummy = In_Dummy3_g170691;
				Data3_g170691.Albedo = In_Albedo3_g170691;
				Data3_g170691.AlbedoRaw = In_AlbedoRaw3_g170691;
				Data3_g170691.NormalTS = In_NormalTS3_g170691;
				Data3_g170691.NormalWS = In_NormalWS3_g170691;
				Data3_g170691.Shader = In_Shader3_g170691;
				Data3_g170691.Emissive= In_Emissive3_g170691;
				Data3_g170691.MultiMask = In_MultiMask3_g170691;
				Data3_g170691.Grayscale = In_Grayscale3_g170691;
				Data3_g170691.Luminosity = In_Luminosity3_g170691;
				Data3_g170691.AlphaClip = In_AlphaClip3_g170691;
				Data3_g170691.AlphaFade = In_AlphaFade3_g170691;
				Data3_g170691.Translucency = In_Translucency3_g170691;
				Data3_g170691.Transmission = In_Transmission3_g170691;
				Data3_g170691.Thickness = In_Thickness3_g170691;
				Data3_g170691.Diffusion = In_Diffusion3_g170691;
				TVEVisualData Data4_g170785 = Data3_g170691;
				float Out_Dummy4_g170785 = 0;
				float3 Out_Albedo4_g170785 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170785 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170785 = float2( 0,0 );
				float3 Out_NormalWS4_g170785 = float3( 0,0,0 );
				float4 Out_Shader4_g170785 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170785 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170785 = 0;
				float Out_Grayscale4_g170785 = 0;
				float Out_Luminosity4_g170785 = 0;
				float Out_AlphaClip4_g170785 = 0;
				float Out_AlphaFade4_g170785 = 0;
				float3 Out_Translucency4_g170785 = float3( 0,0,0 );
				float Out_Transmission4_g170785 = 0;
				float Out_Thickness4_g170785 = 0;
				float Out_Diffusion4_g170785 = 0;
				Out_Dummy4_g170785 = Data4_g170785.Dummy;
				Out_Albedo4_g170785 = Data4_g170785.Albedo;
				Out_AlbedoRaw4_g170785 = Data4_g170785.AlbedoRaw;
				Out_NormalTS4_g170785 = Data4_g170785.NormalTS;
				Out_NormalWS4_g170785 = Data4_g170785.NormalWS;
				Out_Shader4_g170785 = Data4_g170785.Shader;
				Out_Emissive4_g170785= Data4_g170785.Emissive;
				Out_MultiMask4_g170785 = Data4_g170785.MultiMask;
				Out_Grayscale4_g170785 = Data4_g170785.Grayscale;
				Out_Luminosity4_g170785= Data4_g170785.Luminosity;
				Out_AlphaClip4_g170785 = Data4_g170785.AlphaClip;
				Out_AlphaFade4_g170785 = Data4_g170785.AlphaFade;
				Out_Translucency4_g170785 = Data4_g170785.Translucency;
				Out_Transmission4_g170785 = Data4_g170785.Transmission;
				Out_Thickness4_g170785 = Data4_g170785.Thickness;
				Out_Diffusion4_g170785 = Data4_g170785.Diffusion;
				half3 Visual_Albedo127_g170784 = Out_Albedo4_g170785;
				TVEModelData Data15_g170793 = Data16_g170493;
				float Out_Dummy15_g170793 = 0;
				float3 Out_PositionWS15_g170793 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170793 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170793 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170793 = float3( 0,0,0 );
				float4 Out_VertexData15_g170793 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170793 = float4( 0,0,0,0 );
				Out_Dummy15_g170793 = Data15_g170793.Dummy;
				Out_PositionWS15_g170793 = Data15_g170793.PositionWS;
				Out_PositionWO15_g170793 = Data15_g170793.PositionWO;
				Out_PivotWS15_g170793 = Data15_g170793.PivotWS;
				Out_PivotWO15_g170793 = Data15_g170793.PivotWO;
				Out_NormalWS15_g170793 = Data15_g170793.NormalWS;
				Out_ViewDirWS15_g170793 = Data15_g170793.ViewDirWS;
				Out_VertexData15_g170793 = Data15_g170793.VertexData;
				Out_BoundsData15_g170793 = Data15_g170793.BoundsData;
				half4 Model_VertexData206_g170784 = Out_VertexData15_g170793;
				float4 break208_g170784 = Model_VertexData206_g170784;
				float4 break33_g170791 = _occlusion_vert_mode;
				float temp_output_30_0_g170791 = ( break208_g170784.x * break33_g170791.x );
				float temp_output_29_0_g170791 = ( break208_g170784.y * break33_g170791.y );
				float temp_output_31_0_g170791 = ( break208_g170784.z * break33_g170791.z );
				float temp_output_28_0_g170791 = ( temp_output_30_0_g170791 + temp_output_29_0_g170791 + temp_output_31_0_g170791 + ( break208_g170784.w * break33_g170791.w ) );
				float temp_output_194_0_g170784 = temp_output_28_0_g170791;
				float clampResult17_g170789 = clamp( temp_output_194_0_g170784 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170788 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170788 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170788 );
				float temp_output_6_0_g170790 = saturate( ( ( clampResult17_g170789 - temp_output_7_0_g170788 ) / ( temp_output_10_0_g170788 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170790 = ( temp_output_6_0_g170790 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170790 = temp_output_6_0_g170790;
				#endif
				half Occlusion_Mask82_g170784 = staticSwitch14_g170790;
				float3 lerpResult75_g170784 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170784);
				float3 lerpResult186_g170784 = lerp( Visual_Albedo127_g170784 , ( Visual_Albedo127_g170784 * lerpResult75_g170784 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170784 = lerpResult186_g170784;
				#else
				float3 staticSwitch171_g170784 = Visual_Albedo127_g170784;
				#endif
				half3 Final_Albedo160_g170784 = staticSwitch171_g170784;
				float3 In_Albedo3_g170786 = Final_Albedo160_g170784;
				float3 In_AlbedoRaw3_g170786 = Final_Albedo160_g170784;
				float2 In_NormalTS3_g170786 = Out_NormalTS4_g170785;
				float3 In_NormalWS3_g170786 = Out_NormalWS4_g170785;
				float4 In_Shader3_g170786 = Out_Shader4_g170785;
				float4 In_Emissive3_g170786 = Out_Emissive4_g170785;
				float3 temp_output_3_0_g170787 = Final_Albedo160_g170784;
				float dotResult20_g170787 = dot( temp_output_3_0_g170787 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170784 = dotResult20_g170787;
				float In_Grayscale3_g170786 = Final_Grayscale164_g170784;
				float clampResult180_g170784 = clamp( saturate( ( Final_Grayscale164_g170784 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170784 = clampResult180_g170784;
				float In_Luminosity3_g170786 = Final_Shading181_g170784;
				float In_MultiMask3_g170786 = Out_MultiMask4_g170785;
				float In_AlphaClip3_g170786 = Out_AlphaClip4_g170785;
				float In_AlphaFade3_g170786 = Out_AlphaFade4_g170785;
				float3 In_Translucency3_g170786 = Out_Translucency4_g170785;
				float In_Transmission3_g170786 = Out_Transmission4_g170785;
				float In_Thickness3_g170786 = Out_Thickness4_g170785;
				float In_Diffusion3_g170786 = Out_Diffusion4_g170785;
				Data3_g170786.Dummy = In_Dummy3_g170786;
				Data3_g170786.Albedo = In_Albedo3_g170786;
				Data3_g170786.AlbedoRaw = In_AlbedoRaw3_g170786;
				Data3_g170786.NormalTS = In_NormalTS3_g170786;
				Data3_g170786.NormalWS = In_NormalWS3_g170786;
				Data3_g170786.Shader = In_Shader3_g170786;
				Data3_g170786.Emissive= In_Emissive3_g170786;
				Data3_g170786.MultiMask = In_MultiMask3_g170786;
				Data3_g170786.Grayscale = In_Grayscale3_g170786;
				Data3_g170786.Luminosity = In_Luminosity3_g170786;
				Data3_g170786.AlphaClip = In_AlphaClip3_g170786;
				Data3_g170786.AlphaFade = In_AlphaFade3_g170786;
				Data3_g170786.Translucency = In_Translucency3_g170786;
				Data3_g170786.Transmission = In_Transmission3_g170786;
				Data3_g170786.Thickness = In_Thickness3_g170786;
				Data3_g170786.Diffusion = In_Diffusion3_g170786;
				TVEVisualData Data4_g170796 = Data3_g170786;
				float Out_Dummy4_g170796 = 0;
				float3 Out_Albedo4_g170796 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170796 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170796 = float2( 0,0 );
				float3 Out_NormalWS4_g170796 = float3( 0,0,0 );
				float4 Out_Shader4_g170796 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170796 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170796 = 0;
				float Out_Grayscale4_g170796 = 0;
				float Out_Luminosity4_g170796 = 0;
				float Out_AlphaClip4_g170796 = 0;
				float Out_AlphaFade4_g170796 = 0;
				float3 Out_Translucency4_g170796 = float3( 0,0,0 );
				float Out_Transmission4_g170796 = 0;
				float Out_Thickness4_g170796 = 0;
				float Out_Diffusion4_g170796 = 0;
				Out_Dummy4_g170796 = Data4_g170796.Dummy;
				Out_Albedo4_g170796 = Data4_g170796.Albedo;
				Out_AlbedoRaw4_g170796 = Data4_g170796.AlbedoRaw;
				Out_NormalTS4_g170796 = Data4_g170796.NormalTS;
				Out_NormalWS4_g170796 = Data4_g170796.NormalWS;
				Out_Shader4_g170796 = Data4_g170796.Shader;
				Out_Emissive4_g170796= Data4_g170796.Emissive;
				Out_MultiMask4_g170796 = Data4_g170796.MultiMask;
				Out_Grayscale4_g170796 = Data4_g170796.Grayscale;
				Out_Luminosity4_g170796= Data4_g170796.Luminosity;
				Out_AlphaClip4_g170796 = Data4_g170796.AlphaClip;
				Out_AlphaFade4_g170796 = Data4_g170796.AlphaFade;
				Out_Translucency4_g170796 = Data4_g170796.Translucency;
				Out_Transmission4_g170796 = Data4_g170796.Transmission;
				Out_Thickness4_g170796 = Data4_g170796.Thickness;
				Out_Diffusion4_g170796 = Data4_g170796.Diffusion;
				half3 Visual_Albedo127_g170794 = Out_Albedo4_g170796;
				TVEModelData Data15_g170803 = Data16_g170493;
				float Out_Dummy15_g170803 = 0;
				float3 Out_PositionWS15_g170803 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170803 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170803 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170803 = float3( 0,0,0 );
				float4 Out_VertexData15_g170803 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170803 = float4( 0,0,0,0 );
				Out_Dummy15_g170803 = Data15_g170803.Dummy;
				Out_PositionWS15_g170803 = Data15_g170803.PositionWS;
				Out_PositionWO15_g170803 = Data15_g170803.PositionWO;
				Out_PivotWS15_g170803 = Data15_g170803.PivotWS;
				Out_PivotWO15_g170803 = Data15_g170803.PivotWO;
				Out_NormalWS15_g170803 = Data15_g170803.NormalWS;
				Out_ViewDirWS15_g170803 = Data15_g170803.ViewDirWS;
				Out_VertexData15_g170803 = Data15_g170803.VertexData;
				Out_BoundsData15_g170803 = Data15_g170803.BoundsData;
				half4 Model_VertexData224_g170794 = Out_VertexData15_g170803;
				float4 break226_g170794 = Model_VertexData224_g170794;
				float4 break33_g170795 = _gradient_vert_mode;
				float temp_output_30_0_g170795 = ( break226_g170794.x * break33_g170795.x );
				float temp_output_29_0_g170795 = ( break226_g170794.y * break33_g170795.y );
				float temp_output_31_0_g170795 = ( break226_g170794.z * break33_g170795.z );
				float temp_output_28_0_g170795 = ( temp_output_30_0_g170795 + temp_output_29_0_g170795 + temp_output_31_0_g170795 + ( break226_g170794.w * break33_g170795.w ) );
				float temp_output_211_0_g170794 = temp_output_28_0_g170795;
				float clampResult17_g170800 = clamp( temp_output_211_0_g170794 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170801 = _GradientMeshRemap.x;
				float temp_output_10_0_g170801 = ( _GradientMeshRemap.y - temp_output_7_0_g170801 );
				float temp_output_6_0_g170802 = saturate( ( ( clampResult17_g170800 - temp_output_7_0_g170801 ) / ( temp_output_10_0_g170801 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170802 = ( temp_output_6_0_g170802 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170802 = temp_output_6_0_g170802;
				#endif
				half Gradient_VertMask82_g170794 = staticSwitch14_g170802;
				half Gradient_Mask200_g170794 = Gradient_VertMask82_g170794;
				float3 lerpResult75_g170794 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170794);
				float temp_output_162_11_g170794 = Out_MultiMask4_g170796;
				half Visual_MultiMask196_g170794 = temp_output_162_11_g170794;
				float lerpResult190_g170794 = lerp( 1.0 , Visual_MultiMask196_g170794 , _GradientMultiValue);
				half Gradient_MultiMask194_g170794 = lerpResult190_g170794;
				float3 lerpResult186_g170794 = lerp( Visual_Albedo127_g170794 , ( Visual_Albedo127_g170794 * lerpResult75_g170794 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170794 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170794 = lerpResult186_g170794;
				#else
				float3 staticSwitch171_g170794 = Visual_Albedo127_g170794;
				#endif
				half3 Final_Albedo160_g170794 = staticSwitch171_g170794;
				float3 In_Albedo3_g170797 = Final_Albedo160_g170794;
				float3 In_AlbedoRaw3_g170797 = Final_Albedo160_g170794;
				float2 In_NormalTS3_g170797 = Out_NormalTS4_g170796;
				float3 In_NormalWS3_g170797 = Out_NormalWS4_g170796;
				float4 In_Shader3_g170797 = Out_Shader4_g170796;
				float4 In_Emissive3_g170797 = Out_Emissive4_g170796;
				float3 temp_output_3_0_g170798 = Final_Albedo160_g170794;
				float dotResult20_g170798 = dot( temp_output_3_0_g170798 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170794 = dotResult20_g170798;
				float In_Grayscale3_g170797 = Final_Grayscale164_g170794;
				float clampResult180_g170794 = clamp( saturate( ( Final_Grayscale164_g170794 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170794 = clampResult180_g170794;
				float In_Luminosity3_g170797 = Final_Luminosity181_g170794;
				float In_MultiMask3_g170797 = temp_output_162_11_g170794;
				float In_AlphaClip3_g170797 = Out_AlphaClip4_g170796;
				float In_AlphaFade3_g170797 = Out_AlphaFade4_g170796;
				float3 In_Translucency3_g170797 = Out_Translucency4_g170796;
				float In_Transmission3_g170797 = Out_Transmission4_g170796;
				float In_Thickness3_g170797 = Out_Thickness4_g170796;
				float In_Diffusion3_g170797 = Out_Diffusion4_g170796;
				Data3_g170797.Dummy = In_Dummy3_g170797;
				Data3_g170797.Albedo = In_Albedo3_g170797;
				Data3_g170797.AlbedoRaw = In_AlbedoRaw3_g170797;
				Data3_g170797.NormalTS = In_NormalTS3_g170797;
				Data3_g170797.NormalWS = In_NormalWS3_g170797;
				Data3_g170797.Shader = In_Shader3_g170797;
				Data3_g170797.Emissive= In_Emissive3_g170797;
				Data3_g170797.MultiMask = In_MultiMask3_g170797;
				Data3_g170797.Grayscale = In_Grayscale3_g170797;
				Data3_g170797.Luminosity = In_Luminosity3_g170797;
				Data3_g170797.AlphaClip = In_AlphaClip3_g170797;
				Data3_g170797.AlphaFade = In_AlphaFade3_g170797;
				Data3_g170797.Translucency = In_Translucency3_g170797;
				Data3_g170797.Transmission = In_Transmission3_g170797;
				Data3_g170797.Thickness = In_Thickness3_g170797;
				Data3_g170797.Diffusion = In_Diffusion3_g170797;
				TVEVisualData Data4_g170806 = Data3_g170797;
				float Out_Dummy4_g170806 = 0;
				float3 Out_Albedo4_g170806 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170806 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170806 = float2( 0,0 );
				float3 Out_NormalWS4_g170806 = float3( 0,0,0 );
				float4 Out_Shader4_g170806 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170806 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170806 = 0;
				float Out_Grayscale4_g170806 = 0;
				float Out_Luminosity4_g170806 = 0;
				float Out_AlphaClip4_g170806 = 0;
				float Out_AlphaFade4_g170806 = 0;
				float3 Out_Translucency4_g170806 = float3( 0,0,0 );
				float Out_Transmission4_g170806 = 0;
				float Out_Thickness4_g170806 = 0;
				float Out_Diffusion4_g170806 = 0;
				Out_Dummy4_g170806 = Data4_g170806.Dummy;
				Out_Albedo4_g170806 = Data4_g170806.Albedo;
				Out_AlbedoRaw4_g170806 = Data4_g170806.AlbedoRaw;
				Out_NormalTS4_g170806 = Data4_g170806.NormalTS;
				Out_NormalWS4_g170806 = Data4_g170806.NormalWS;
				Out_Shader4_g170806 = Data4_g170806.Shader;
				Out_Emissive4_g170806= Data4_g170806.Emissive;
				Out_MultiMask4_g170806 = Data4_g170806.MultiMask;
				Out_Grayscale4_g170806 = Data4_g170806.Grayscale;
				Out_Luminosity4_g170806= Data4_g170806.Luminosity;
				Out_AlphaClip4_g170806 = Data4_g170806.AlphaClip;
				Out_AlphaFade4_g170806 = Data4_g170806.AlphaFade;
				Out_Translucency4_g170806 = Data4_g170806.Translucency;
				Out_Transmission4_g170806 = Data4_g170806.Transmission;
				Out_Thickness4_g170806 = Data4_g170806.Thickness;
				Out_Diffusion4_g170806 = Data4_g170806.Diffusion;
				half3 Visual_Albedo127_g170804 = Out_Albedo4_g170806;
				TVEModelData Data15_g170812 = Data16_g170493;
				float Out_Dummy15_g170812 = 0;
				float3 Out_PositionWS15_g170812 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170812 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170812 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170812 = float3( 0,0,0 );
				float4 Out_VertexData15_g170812 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170812 = float4( 0,0,0,0 );
				Out_Dummy15_g170812 = Data15_g170812.Dummy;
				Out_PositionWS15_g170812 = Data15_g170812.PositionWS;
				Out_PositionWO15_g170812 = Data15_g170812.PositionWO;
				Out_PivotWS15_g170812 = Data15_g170812.PivotWS;
				Out_PivotWO15_g170812 = Data15_g170812.PivotWO;
				Out_NormalWS15_g170812 = Data15_g170812.NormalWS;
				Out_ViewDirWS15_g170812 = Data15_g170812.ViewDirWS;
				Out_VertexData15_g170812 = Data15_g170812.VertexData;
				Out_BoundsData15_g170812 = Data15_g170812.BoundsData;
				half3 Model_PositionWO224_g170804 = Out_PositionWO15_g170812;
				half3 Model_PivotWO239_g170804 = Out_PivotWO15_g170812;
				float3 lerpResult242_g170804 = lerp( Model_PositionWO224_g170804 , Model_PivotWO239_g170804 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170808 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170804 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170810 = clamp( tex3DNode60_g170808.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170811 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170811 = ( _VariationNoiseRemap.y - temp_output_7_0_g170811 );
				float temp_output_238_0_g170804 = saturate( ( ( clampResult17_g170810 - temp_output_7_0_g170811 ) / ( temp_output_10_0_g170811 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170804 = temp_output_238_0_g170804;
				half Variaton_Mask200_g170804 = Variaton_NoiseMask82_g170804;
				float3 lerpResult75_g170804 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170804);
				float temp_output_162_11_g170804 = Out_MultiMask4_g170806;
				half Visual_MultiMask196_g170804 = temp_output_162_11_g170804;
				float lerpResult190_g170804 = lerp( 1.0 , Visual_MultiMask196_g170804 , _VariationMultiValue);
				half Variaton_MultiMask194_g170804 = lerpResult190_g170804;
				float3 lerpResult186_g170804 = lerp( Visual_Albedo127_g170804 , ( Visual_Albedo127_g170804 * lerpResult75_g170804 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170804 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170804 = lerpResult186_g170804;
				#else
				float3 staticSwitch171_g170804 = Visual_Albedo127_g170804;
				#endif
				half3 Final_Albedo160_g170804 = staticSwitch171_g170804;
				float3 In_Albedo3_g170807 = Final_Albedo160_g170804;
				float3 In_AlbedoRaw3_g170807 = Final_Albedo160_g170804;
				float2 In_NormalTS3_g170807 = Out_NormalTS4_g170806;
				float3 In_NormalWS3_g170807 = Out_NormalWS4_g170806;
				float4 In_Shader3_g170807 = Out_Shader4_g170806;
				float4 In_Emissive3_g170807 = Out_Emissive4_g170806;
				float3 temp_output_3_0_g170805 = Final_Albedo160_g170804;
				float dotResult20_g170805 = dot( temp_output_3_0_g170805 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170804 = dotResult20_g170805;
				float In_Grayscale3_g170807 = Final_Grayscale164_g170804;
				float clampResult180_g170804 = clamp( saturate( ( Final_Grayscale164_g170804 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170804 = clampResult180_g170804;
				float In_Luminosity3_g170807 = Final_Luminosity181_g170804;
				float In_MultiMask3_g170807 = temp_output_162_11_g170804;
				float In_AlphaClip3_g170807 = Out_AlphaClip4_g170806;
				float In_AlphaFade3_g170807 = Out_AlphaFade4_g170806;
				float3 In_Translucency3_g170807 = Out_Translucency4_g170806;
				float In_Transmission3_g170807 = Out_Transmission4_g170806;
				float In_Thickness3_g170807 = Out_Thickness4_g170806;
				float In_Diffusion3_g170807 = Out_Diffusion4_g170806;
				Data3_g170807.Dummy = In_Dummy3_g170807;
				Data3_g170807.Albedo = In_Albedo3_g170807;
				Data3_g170807.AlbedoRaw = In_AlbedoRaw3_g170807;
				Data3_g170807.NormalTS = In_NormalTS3_g170807;
				Data3_g170807.NormalWS = In_NormalWS3_g170807;
				Data3_g170807.Shader = In_Shader3_g170807;
				Data3_g170807.Emissive= In_Emissive3_g170807;
				Data3_g170807.MultiMask = In_MultiMask3_g170807;
				Data3_g170807.Grayscale = In_Grayscale3_g170807;
				Data3_g170807.Luminosity = In_Luminosity3_g170807;
				Data3_g170807.AlphaClip = In_AlphaClip3_g170807;
				Data3_g170807.AlphaFade = In_AlphaFade3_g170807;
				Data3_g170807.Translucency = In_Translucency3_g170807;
				Data3_g170807.Transmission = In_Transmission3_g170807;
				Data3_g170807.Thickness = In_Thickness3_g170807;
				Data3_g170807.Diffusion = In_Diffusion3_g170807;
				TVEVisualData Data4_g170836 = Data3_g170807;
				float Out_Dummy4_g170836 = 0;
				float3 Out_Albedo4_g170836 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170836 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170836 = float2( 0,0 );
				float3 Out_NormalWS4_g170836 = float3( 0,0,0 );
				float4 Out_Shader4_g170836 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170836 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170836 = 0;
				float Out_Grayscale4_g170836 = 0;
				float Out_Luminosity4_g170836 = 0;
				float Out_AlphaClip4_g170836 = 0;
				float Out_AlphaFade4_g170836 = 0;
				float3 Out_Translucency4_g170836 = float3( 0,0,0 );
				float Out_Transmission4_g170836 = 0;
				float Out_Thickness4_g170836 = 0;
				float Out_Diffusion4_g170836 = 0;
				Out_Dummy4_g170836 = Data4_g170836.Dummy;
				Out_Albedo4_g170836 = Data4_g170836.Albedo;
				Out_AlbedoRaw4_g170836 = Data4_g170836.AlbedoRaw;
				Out_NormalTS4_g170836 = Data4_g170836.NormalTS;
				Out_NormalWS4_g170836 = Data4_g170836.NormalWS;
				Out_Shader4_g170836 = Data4_g170836.Shader;
				Out_Emissive4_g170836= Data4_g170836.Emissive;
				Out_MultiMask4_g170836 = Data4_g170836.MultiMask;
				Out_Grayscale4_g170836 = Data4_g170836.Grayscale;
				Out_Luminosity4_g170836= Data4_g170836.Luminosity;
				Out_AlphaClip4_g170836 = Data4_g170836.AlphaClip;
				Out_AlphaFade4_g170836 = Data4_g170836.AlphaFade;
				Out_Translucency4_g170836 = Data4_g170836.Translucency;
				Out_Transmission4_g170836 = Data4_g170836.Transmission;
				Out_Thickness4_g170836 = Data4_g170836.Thickness;
				Out_Diffusion4_g170836 = Data4_g170836.Diffusion;
				half3 Visual_Albedo139_g170814 = Out_Albedo4_g170836;
				float temp_output_200_12_g170814 = Out_Grayscale4_g170836;
				half Visual_Grayscale150_g170814 = temp_output_200_12_g170814;
				float3 temp_cast_37 = (Visual_Grayscale150_g170814).xxx;
				TVEGlobalData Data15_g170815 = Data204_g170494;
				float Out_Dummy15_g170815 = 0;
				float4 Out_CoatParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170815 = float4( 0,0,0,0 );
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_CoatParams15_g170815 = Data15_g170815.CoatParams;
				Out_PaintParams15_g170815 = Data15_g170815.PaintParams;
				Out_GlowParams15_g170815 = Data15_g170815.GlowParams;
				Out_AtmoParams15_g170815= Data15_g170815.AtmoParams;
				Out_FadeParams15_g170815= Data15_g170815.FadeParams;
				Out_FormParams15_g170815 = Data15_g170815.FormParams;
				Out_LandParams15_g170815 = Data15_g170815.LandParams;
				Out_WindParams15_g170815 = Data15_g170815.WindParams;
				Out_PushParams15_g170815 = Data15_g170815.PushParams;
				half4 Global_PaintParams209_g170814 = Out_PaintParams15_g170815;
				float temp_output_6_0_g170816 = ( saturate( (Global_PaintParams209_g170814).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170816 = ( temp_output_6_0_g170816 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170816 = temp_output_6_0_g170816;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170814 = staticSwitch14_g170816;
				#else
				float staticSwitch283_g170814 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170814 = staticSwitch283_g170814;
				float3 lerpResult368_g170814 = lerp( Visual_Albedo139_g170814 , temp_cast_37 , ( Tinting_GlobalValue285_g170814 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170834 = 2.0;
				#else
				float staticSwitch1_g170834 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170814 = (Global_PaintParams209_g170814).xyz;
				#else
				float3 staticSwitch288_g170814 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170814 = staticSwitch288_g170814;
				float temp_output_200_11_g170814 = Out_MultiMask4_g170836;
				half Visual_MultiMask181_g170814 = temp_output_200_11_g170814;
				float lerpResult147_g170814 = lerp( 1.0 , Visual_MultiMask181_g170814 , _TintingMultiValue);
				half Tinting_MutiMask121_g170814 = lerpResult147_g170814;
				half Tinting_TexMask385_g170814 = 1.0;
				float temp_output_200_15_g170814 = Out_Luminosity4_g170836;
				half Visual_Luminosity257_g170814 = temp_output_200_15_g170814;
				float clampResult17_g170828 = clamp( Visual_Luminosity257_g170814 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170827 = _TintingLumaRemap.x;
				float temp_output_10_0_g170827 = ( _TintingLumaRemap.y - temp_output_7_0_g170827 );
				float lerpResult228_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170828 - temp_output_7_0_g170827 ) / ( temp_output_10_0_g170827 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170814 = lerpResult228_g170814;
				TVEModelData Data15_g170837 = Data16_g170493;
				float Out_Dummy15_g170837 = 0;
				float3 Out_PositionWS15_g170837 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170837 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170837 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170837 = float3( 0,0,0 );
				float4 Out_VertexData15_g170837 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170837 = float4( 0,0,0,0 );
				Out_Dummy15_g170837 = Data15_g170837.Dummy;
				Out_PositionWS15_g170837 = Data15_g170837.PositionWS;
				Out_PositionWO15_g170837 = Data15_g170837.PositionWO;
				Out_PivotWS15_g170837 = Data15_g170837.PivotWS;
				Out_PivotWO15_g170837 = Data15_g170837.PivotWO;
				Out_NormalWS15_g170837 = Data15_g170837.NormalWS;
				Out_ViewDirWS15_g170837 = Data15_g170837.ViewDirWS;
				Out_VertexData15_g170837 = Data15_g170837.VertexData;
				Out_BoundsData15_g170837 = Data15_g170837.BoundsData;
				half4 Model_VertexMasks307_g170814 = Out_VertexData15_g170837;
				float4 break311_g170814 = Model_VertexMasks307_g170814;
				float4 break33_g170820 = _tinting_vert_mode;
				float temp_output_30_0_g170820 = ( break311_g170814.x * break33_g170820.x );
				float temp_output_29_0_g170820 = ( break311_g170814.y * break33_g170820.y );
				float temp_output_31_0_g170820 = ( break311_g170814.z * break33_g170820.z );
				float temp_output_28_0_g170820 = ( temp_output_30_0_g170820 + temp_output_29_0_g170820 + temp_output_31_0_g170820 + ( break311_g170814.w * break33_g170820.w ) );
				float clampResult17_g170826 = clamp( temp_output_28_0_g170820 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170825 = _TintingMeshRemap.x;
				float temp_output_10_0_g170825 = ( _TintingMeshRemap.y - temp_output_7_0_g170825 );
				float lerpResult370_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170826 - temp_output_7_0_g170825 ) / ( temp_output_10_0_g170825 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170829 = lerpResult370_g170814;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170829 = ( temp_output_6_0_g170829 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170829 = temp_output_6_0_g170829;
				#endif
				float temp_output_333_0_g170814 = staticSwitch14_g170829;
				half Tinting_VertMask309_g170814 = temp_output_333_0_g170814;
				half Tinting_NoiseMask213_g170814 = 1.0;
				half Custom_Mask345_g170814 = 1.0;
				float temp_output_7_0_g170823 = _TintingBlendRemap.x;
				float temp_output_10_0_g170823 = ( _TintingBlendRemap.y - temp_output_7_0_g170823 );
				half Tinting_Mask242_g170814 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170814 * Tinting_TexMask385_g170814 * Tinting_LumaMask153_g170814 * Tinting_VertMask309_g170814 * Tinting_NoiseMask213_g170814 * Tinting_GlobalValue285_g170814 * Custom_Mask345_g170814 ) - temp_output_7_0_g170823 ) / ( temp_output_10_0_g170823 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170814 = lerp( Visual_Albedo139_g170814 , ( lerpResult368_g170814 * staticSwitch1_g170834 * Tinting_ColorGlobal290_g170814 * (_TintingColor).rgb ) , Tinting_Mask242_g170814);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170814 = lerpResult90_g170814;
				#else
				float3 staticSwitch286_g170814 = Visual_Albedo139_g170814;
				#endif
				half3 Final_Albedo97_g170814 = staticSwitch286_g170814;
				float3 In_Albedo3_g170835 = Final_Albedo97_g170814;
				float3 In_AlbedoRaw3_g170835 = Out_AlbedoRaw4_g170836;
				float2 In_NormalTS3_g170835 = Out_NormalTS4_g170836;
				float3 In_NormalWS3_g170835 = Out_NormalWS4_g170836;
				float4 In_Shader3_g170835 = Out_Shader4_g170836;
				float4 In_Emissive3_g170835 = Out_Emissive4_g170836;
				float In_Grayscale3_g170835 = temp_output_200_12_g170814;
				float In_Luminosity3_g170835 = temp_output_200_15_g170814;
				float In_MultiMask3_g170835 = temp_output_200_11_g170814;
				float In_AlphaClip3_g170835 = Out_AlphaClip4_g170836;
				float In_AlphaFade3_g170835 = Out_AlphaFade4_g170836;
				float3 In_Translucency3_g170835 = Out_Translucency4_g170836;
				float In_Transmission3_g170835 = Out_Transmission4_g170836;
				float In_Thickness3_g170835 = Out_Thickness4_g170836;
				float In_Diffusion3_g170835 = Out_Diffusion4_g170836;
				Data3_g170835.Dummy = In_Dummy3_g170835;
				Data3_g170835.Albedo = In_Albedo3_g170835;
				Data3_g170835.AlbedoRaw = In_AlbedoRaw3_g170835;
				Data3_g170835.NormalTS = In_NormalTS3_g170835;
				Data3_g170835.NormalWS = In_NormalWS3_g170835;
				Data3_g170835.Shader = In_Shader3_g170835;
				Data3_g170835.Emissive= In_Emissive3_g170835;
				Data3_g170835.MultiMask = In_MultiMask3_g170835;
				Data3_g170835.Grayscale = In_Grayscale3_g170835;
				Data3_g170835.Luminosity = In_Luminosity3_g170835;
				Data3_g170835.AlphaClip = In_AlphaClip3_g170835;
				Data3_g170835.AlphaFade = In_AlphaFade3_g170835;
				Data3_g170835.Translucency = In_Translucency3_g170835;
				Data3_g170835.Transmission = In_Transmission3_g170835;
				Data3_g170835.Thickness = In_Thickness3_g170835;
				Data3_g170835.Diffusion = In_Diffusion3_g170835;
				TVEVisualData Data4_g170840 = Data3_g170835;
				float Out_Dummy4_g170840 = 0;
				float3 Out_Albedo4_g170840 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170840 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170840 = float2( 0,0 );
				float3 Out_NormalWS4_g170840 = float3( 0,0,0 );
				float4 Out_Shader4_g170840 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170840 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170840 = 0;
				float Out_Grayscale4_g170840 = 0;
				float Out_Luminosity4_g170840 = 0;
				float Out_AlphaClip4_g170840 = 0;
				float Out_AlphaFade4_g170840 = 0;
				float3 Out_Translucency4_g170840 = float3( 0,0,0 );
				float Out_Transmission4_g170840 = 0;
				float Out_Thickness4_g170840 = 0;
				float Out_Diffusion4_g170840 = 0;
				Out_Dummy4_g170840 = Data4_g170840.Dummy;
				Out_Albedo4_g170840 = Data4_g170840.Albedo;
				Out_AlbedoRaw4_g170840 = Data4_g170840.AlbedoRaw;
				Out_NormalTS4_g170840 = Data4_g170840.NormalTS;
				Out_NormalWS4_g170840 = Data4_g170840.NormalWS;
				Out_Shader4_g170840 = Data4_g170840.Shader;
				Out_Emissive4_g170840= Data4_g170840.Emissive;
				Out_MultiMask4_g170840 = Data4_g170840.MultiMask;
				Out_Grayscale4_g170840 = Data4_g170840.Grayscale;
				Out_Luminosity4_g170840= Data4_g170840.Luminosity;
				Out_AlphaClip4_g170840 = Data4_g170840.AlphaClip;
				Out_AlphaFade4_g170840 = Data4_g170840.AlphaFade;
				Out_Translucency4_g170840 = Data4_g170840.Translucency;
				Out_Transmission4_g170840 = Data4_g170840.Transmission;
				Out_Thickness4_g170840 = Data4_g170840.Thickness;
				Out_Diffusion4_g170840 = Data4_g170840.Diffusion;
				half3 Visual_Albedo292_g170838 = Out_Albedo4_g170840;
				float temp_output_280_12_g170838 = Out_Grayscale4_g170840;
				half Visual_Grayscale308_g170838 = temp_output_280_12_g170838;
				float3 temp_cast_39 = (Visual_Grayscale308_g170838).xxx;
				TVEGlobalData Data15_g170839 = Data204_g170494;
				float Out_Dummy15_g170839 = 0;
				float4 Out_CoatParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170839 = float4( 0,0,0,0 );
				Out_Dummy15_g170839 = Data15_g170839.Dummy;
				Out_CoatParams15_g170839 = Data15_g170839.CoatParams;
				Out_PaintParams15_g170839 = Data15_g170839.PaintParams;
				Out_GlowParams15_g170839 = Data15_g170839.GlowParams;
				Out_AtmoParams15_g170839= Data15_g170839.AtmoParams;
				Out_FadeParams15_g170839= Data15_g170839.FadeParams;
				Out_FormParams15_g170839 = Data15_g170839.FormParams;
				Out_LandParams15_g170839 = Data15_g170839.LandParams;
				Out_WindParams15_g170839 = Data15_g170839.WindParams;
				Out_PushParams15_g170839 = Data15_g170839.PushParams;
				half4 Global_AtmoParams314_g170838 = Out_AtmoParams15_g170839;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170838 = ( (Global_AtmoParams314_g170838).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170838 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170838 = staticSwitch351_g170838;
				float3 lerpResult485_g170838 = lerp( Visual_Albedo292_g170838 , temp_cast_39 , ( Dryness_GlobalMask352_g170838 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170859 = RGBToHSV( lerpResult485_g170838 );
				half3 hsvTorgb61_g170859 = HSVToRGB( half3(( hsvTorgb58_g170859.x + _DrynessShiftValue ),hsvTorgb58_g170859.y,hsvTorgb58_g170859.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170838 = hsvTorgb61_g170859;
				#else
				float3 staticSwitch499_g170838 = lerpResult485_g170838;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170858 = 2.0;
				#else
				float staticSwitch1_g170858 = 4.594794;
				#endif
				half Dryness_TexMask478_g170838 = 1.0;
				float temp_output_280_11_g170838 = Out_MultiMask4_g170840;
				half Visual_MultiMask310_g170838 = temp_output_280_11_g170838;
				float lerpResult283_g170838 = lerp( 1.0 , Visual_MultiMask310_g170838 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170838 = lerpResult283_g170838;
				float temp_output_280_15_g170838 = Out_Luminosity4_g170840;
				half Visual_Luminosity309_g170838 = temp_output_280_15_g170838;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170838 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170853 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170853 = ( _DrynessLumaRemap.y - temp_output_7_0_g170853 );
				float lerpResult295_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170854 - temp_output_7_0_g170853 ) / ( temp_output_10_0_g170853 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170838 = lerpResult295_g170838;
				TVEModelData Data15_g170860 = Data16_g170493;
				float Out_Dummy15_g170860 = 0;
				float3 Out_PositionWS15_g170860 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170860 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170860 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170860 = float3( 0,0,0 );
				float4 Out_VertexData15_g170860 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170860 = float4( 0,0,0,0 );
				Out_Dummy15_g170860 = Data15_g170860.Dummy;
				Out_PositionWS15_g170860 = Data15_g170860.PositionWS;
				Out_PositionWO15_g170860 = Data15_g170860.PositionWO;
				Out_PivotWS15_g170860 = Data15_g170860.PivotWS;
				Out_PivotWO15_g170860 = Data15_g170860.PivotWO;
				Out_NormalWS15_g170860 = Data15_g170860.NormalWS;
				Out_ViewDirWS15_g170860 = Data15_g170860.ViewDirWS;
				Out_VertexData15_g170860 = Data15_g170860.VertexData;
				Out_BoundsData15_g170860 = Data15_g170860.BoundsData;
				half4 Model_VertexMasks386_g170838 = Out_VertexData15_g170860;
				float4 break375_g170838 = Model_VertexMasks386_g170838;
				float4 break33_g170847 = _dryness_vert_mode;
				float temp_output_30_0_g170847 = ( break375_g170838.x * break33_g170847.x );
				float temp_output_29_0_g170847 = ( break375_g170838.y * break33_g170847.y );
				float temp_output_31_0_g170847 = ( break375_g170838.z * break33_g170847.z );
				float temp_output_28_0_g170847 = ( temp_output_30_0_g170847 + temp_output_29_0_g170847 + temp_output_31_0_g170847 + ( break375_g170838.w * break33_g170847.w ) );
				float clampResult17_g170848 = clamp( temp_output_28_0_g170847 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170849 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170849 = ( _DrynessMeshRemap.y - temp_output_7_0_g170849 );
				float lerpResult452_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170848 - temp_output_7_0_g170849 ) / ( temp_output_10_0_g170849 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170838;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				float temp_output_448_0_g170838 = staticSwitch14_g170855;
				half Dryness_VertMask378_g170838 = temp_output_448_0_g170838;
				half Dryness_MaskNoise291_g170838 = 1.0;
				half Custom_Mask411_g170838 = 1.0;
				float temp_output_7_0_g170852 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170852 = ( _DrynessBlendRemap.y - temp_output_7_0_g170852 );
				half Dryness_Mask329_g170838 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170838 * Dryness_MultiMask302_g170838 * Dryness_LumaMask301_g170838 * Dryness_VertMask378_g170838 * Dryness_MaskNoise291_g170838 * Dryness_GlobalMask352_g170838 * Custom_Mask411_g170838 ) - temp_output_7_0_g170852 ) / ( temp_output_10_0_g170852 + 0.0001 ) ) );
				float3 lerpResult336_g170838 = lerp( Visual_Albedo292_g170838 , ( staticSwitch499_g170838 * staticSwitch1_g170858 * (_DrynessColor).rgb ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170838 = lerpResult336_g170838;
				#else
				float3 staticSwitch356_g170838 = Visual_Albedo292_g170838;
				#endif
				half3 Final_Albedo331_g170838 = staticSwitch356_g170838;
				float3 In_Albedo3_g170841 = Final_Albedo331_g170838;
				float3 In_AlbedoRaw3_g170841 = Out_AlbedoRaw4_g170840;
				float2 In_NormalTS3_g170841 = Out_NormalTS4_g170840;
				float3 In_NormalWS3_g170841 = Out_NormalWS4_g170840;
				half4 Visual_Shader415_g170838 = Out_Shader4_g170840;
				float4 break438_g170838 = Visual_Shader415_g170838;
				float4 appendResult439_g170838 = (float4(break438_g170838.x , break438_g170838.y , break438_g170838.z , ( break438_g170838.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170838 = lerp( Visual_Shader415_g170838 , appendResult439_g170838 , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170838 = lerpResult427_g170838;
				#else
				float4 staticSwitch426_g170838 = Visual_Shader415_g170838;
				#endif
				half4 Final_Shader433_g170838 = staticSwitch426_g170838;
				float4 In_Shader3_g170841 = Final_Shader433_g170838;
				float4 In_Emissive3_g170841 = Out_Emissive4_g170840;
				float In_Grayscale3_g170841 = temp_output_280_12_g170838;
				float In_Luminosity3_g170841 = temp_output_280_15_g170838;
				float In_MultiMask3_g170841 = temp_output_280_11_g170838;
				float In_AlphaClip3_g170841 = Out_AlphaClip4_g170840;
				float In_AlphaFade3_g170841 = Out_AlphaFade4_g170840;
				float3 In_Translucency3_g170841 = Out_Translucency4_g170840;
				half Visual_Transmission416_g170838 = Out_Transmission4_g170840;
				float lerpResult421_g170838 = lerp( Visual_Transmission416_g170838 , ( Visual_Transmission416_g170838 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170838 = lerpResult421_g170838;
				#else
				float staticSwitch418_g170838 = Visual_Transmission416_g170838;
				#endif
				half Final_Transmission425_g170838 = staticSwitch418_g170838;
				float In_Transmission3_g170841 = Final_Transmission425_g170838;
				float In_Thickness3_g170841 = Out_Thickness4_g170840;
				float In_Diffusion3_g170841 = Out_Diffusion4_g170840;
				Data3_g170841.Dummy = In_Dummy3_g170841;
				Data3_g170841.Albedo = In_Albedo3_g170841;
				Data3_g170841.AlbedoRaw = In_AlbedoRaw3_g170841;
				Data3_g170841.NormalTS = In_NormalTS3_g170841;
				Data3_g170841.NormalWS = In_NormalWS3_g170841;
				Data3_g170841.Shader = In_Shader3_g170841;
				Data3_g170841.Emissive= In_Emissive3_g170841;
				Data3_g170841.MultiMask = In_MultiMask3_g170841;
				Data3_g170841.Grayscale = In_Grayscale3_g170841;
				Data3_g170841.Luminosity = In_Luminosity3_g170841;
				Data3_g170841.AlphaClip = In_AlphaClip3_g170841;
				Data3_g170841.AlphaFade = In_AlphaFade3_g170841;
				Data3_g170841.Translucency = In_Translucency3_g170841;
				Data3_g170841.Transmission = In_Transmission3_g170841;
				Data3_g170841.Thickness = In_Thickness3_g170841;
				Data3_g170841.Diffusion = In_Diffusion3_g170841;
				TVEVisualData Data4_g170862 = Data3_g170841;
				float Out_Dummy4_g170862 = 0;
				float3 Out_Albedo4_g170862 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170862 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170862 = float2( 0,0 );
				float3 Out_NormalWS4_g170862 = float3( 0,0,0 );
				float4 Out_Shader4_g170862 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170862 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170862 = 0;
				float Out_Grayscale4_g170862 = 0;
				float Out_Luminosity4_g170862 = 0;
				float Out_AlphaClip4_g170862 = 0;
				float Out_AlphaFade4_g170862 = 0;
				float3 Out_Translucency4_g170862 = float3( 0,0,0 );
				float Out_Transmission4_g170862 = 0;
				float Out_Thickness4_g170862 = 0;
				float Out_Diffusion4_g170862 = 0;
				Out_Dummy4_g170862 = Data4_g170862.Dummy;
				Out_Albedo4_g170862 = Data4_g170862.Albedo;
				Out_AlbedoRaw4_g170862 = Data4_g170862.AlbedoRaw;
				Out_NormalTS4_g170862 = Data4_g170862.NormalTS;
				Out_NormalWS4_g170862 = Data4_g170862.NormalWS;
				Out_Shader4_g170862 = Data4_g170862.Shader;
				Out_Emissive4_g170862= Data4_g170862.Emissive;
				Out_MultiMask4_g170862 = Data4_g170862.MultiMask;
				Out_Grayscale4_g170862 = Data4_g170862.Grayscale;
				Out_Luminosity4_g170862= Data4_g170862.Luminosity;
				Out_AlphaClip4_g170862 = Data4_g170862.AlphaClip;
				Out_AlphaFade4_g170862 = Data4_g170862.AlphaFade;
				Out_Translucency4_g170862 = Data4_g170862.Translucency;
				Out_Transmission4_g170862 = Data4_g170862.Transmission;
				Out_Thickness4_g170862 = Data4_g170862.Thickness;
				Out_Diffusion4_g170862 = Data4_g170862.Diffusion;
				half3 Visual_Albedo127_g170861 = Out_Albedo4_g170862;
				float4 vertexToFrag24_g170813 = IN.ase_texcoord13;
				half4 Interp_Data1269 = vertexToFrag24_g170813;
				float clampResult208_g170861 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170861 = ( Visual_Albedo127_g170861 + ( ( Visual_Albedo127_g170861 * Visual_Albedo127_g170861 * 200.0 * _motion_highlight_color ) * clampResult208_g170861 ) );
				#else
				float3 staticSwitch214_g170861 = Visual_Albedo127_g170861;
				#endif
				half3 Final_Albedo160_g170861 = staticSwitch214_g170861;
				float3 In_Albedo3_g170863 = Final_Albedo160_g170861;
				float3 In_AlbedoRaw3_g170863 = Out_AlbedoRaw4_g170862;
				float2 In_NormalTS3_g170863 = Out_NormalTS4_g170862;
				float3 In_NormalWS3_g170863 = Out_NormalWS4_g170862;
				float4 In_Shader3_g170863 = Out_Shader4_g170862;
				float4 In_Emissive3_g170863 = Out_Emissive4_g170862;
				float In_Grayscale3_g170863 = Out_Grayscale4_g170862;
				float In_Luminosity3_g170863 = Out_Luminosity4_g170862;
				float In_MultiMask3_g170863 = Out_MultiMask4_g170862;
				float In_AlphaClip3_g170863 = Out_AlphaClip4_g170862;
				float In_AlphaFade3_g170863 = Out_AlphaFade4_g170862;
				float3 In_Translucency3_g170863 = Out_Translucency4_g170862;
				float In_Transmission3_g170863 = Out_Transmission4_g170862;
				float In_Thickness3_g170863 = Out_Thickness4_g170862;
				float In_Diffusion3_g170863 = Out_Diffusion4_g170862;
				Data3_g170863.Dummy = In_Dummy3_g170863;
				Data3_g170863.Albedo = In_Albedo3_g170863;
				Data3_g170863.AlbedoRaw = In_AlbedoRaw3_g170863;
				Data3_g170863.NormalTS = In_NormalTS3_g170863;
				Data3_g170863.NormalWS = In_NormalWS3_g170863;
				Data3_g170863.Shader = In_Shader3_g170863;
				Data3_g170863.Emissive= In_Emissive3_g170863;
				Data3_g170863.MultiMask = In_MultiMask3_g170863;
				Data3_g170863.Grayscale = In_Grayscale3_g170863;
				Data3_g170863.Luminosity = In_Luminosity3_g170863;
				Data3_g170863.AlphaClip = In_AlphaClip3_g170863;
				Data3_g170863.AlphaFade = In_AlphaFade3_g170863;
				Data3_g170863.Translucency = In_Translucency3_g170863;
				Data3_g170863.Transmission = In_Transmission3_g170863;
				Data3_g170863.Thickness = In_Thickness3_g170863;
				Data3_g170863.Diffusion = In_Diffusion3_g170863;
				TVEVisualData Data4_g170865 = Data3_g170863;
				float Out_Dummy4_g170865 = 0;
				float3 Out_Albedo4_g170865 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170865 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170865 = float2( 0,0 );
				float3 Out_NormalWS4_g170865 = float3( 0,0,0 );
				float4 Out_Shader4_g170865 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170865 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170865 = 0;
				float Out_Grayscale4_g170865 = 0;
				float Out_Luminosity4_g170865 = 0;
				float Out_AlphaClip4_g170865 = 0;
				float Out_AlphaFade4_g170865 = 0;
				float3 Out_Translucency4_g170865 = float3( 0,0,0 );
				float Out_Transmission4_g170865 = 0;
				float Out_Thickness4_g170865 = 0;
				float Out_Diffusion4_g170865 = 0;
				Out_Dummy4_g170865 = Data4_g170865.Dummy;
				Out_Albedo4_g170865 = Data4_g170865.Albedo;
				Out_AlbedoRaw4_g170865 = Data4_g170865.AlbedoRaw;
				Out_NormalTS4_g170865 = Data4_g170865.NormalTS;
				Out_NormalWS4_g170865 = Data4_g170865.NormalWS;
				Out_Shader4_g170865 = Data4_g170865.Shader;
				Out_Emissive4_g170865= Data4_g170865.Emissive;
				Out_MultiMask4_g170865 = Data4_g170865.MultiMask;
				Out_Grayscale4_g170865 = Data4_g170865.Grayscale;
				Out_Luminosity4_g170865= Data4_g170865.Luminosity;
				Out_AlphaClip4_g170865 = Data4_g170865.AlphaClip;
				Out_AlphaFade4_g170865 = Data4_g170865.AlphaFade;
				Out_Translucency4_g170865 = Data4_g170865.Translucency;
				Out_Transmission4_g170865 = Data4_g170865.Transmission;
				Out_Thickness4_g170865 = Data4_g170865.Thickness;
				Out_Diffusion4_g170865 = Data4_g170865.Diffusion;
				half3 Visual_Albedo127_g170864 = Out_Albedo4_g170865;
				float3 temp_output_622_0_g170864 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170868) = _OverlayAlbedoTex;
				float localFilterTexture19_g170897 = ( 0.0 );
				SamplerState SamplerDefault19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170897 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170897 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170897 = SamplerDefault19_g170897;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170897 = SamplerDefault19_g170897;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170897 = SamplerPoint19_g170897;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170897 = SamplerLow19_g170897;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170897 = SamplerMedium19_g170897;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170897 = SamplerHigh19_g170897;
				#endif
				SamplerState Sampler238_g170868 = SS19_g170897;
				float4 temp_output_6_0_g170869 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170869 = ( temp_output_6_0_g170869 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170869 = temp_output_6_0_g170869;
				#endif
				half4 Overlay_Coords639_g170864 = staticSwitch14_g170869;
				float4 temp_output_37_0_g170868 = Overlay_Coords639_g170864;
				half4 Coords238_g170868 = temp_output_37_0_g170868;
				TVEModelData Data15_g170899 = Data16_g170493;
				float Out_Dummy15_g170899 = 0;
				float3 Out_PositionWS15_g170899 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170899 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170899 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170899 = float3( 0,0,0 );
				float4 Out_VertexData15_g170899 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170899 = float4( 0,0,0,0 );
				Out_Dummy15_g170899 = Data15_g170899.Dummy;
				Out_PositionWS15_g170899 = Data15_g170899.PositionWS;
				Out_PositionWO15_g170899 = Data15_g170899.PositionWO;
				Out_PivotWS15_g170899 = Data15_g170899.PivotWS;
				Out_PivotWO15_g170899 = Data15_g170899.PivotWO;
				Out_NormalWS15_g170899 = Data15_g170899.NormalWS;
				Out_ViewDirWS15_g170899 = Data15_g170899.ViewDirWS;
				Out_VertexData15_g170899 = Data15_g170899.VertexData;
				Out_BoundsData15_g170899 = Data15_g170899.BoundsData;
				half3 Model_PositionWO602_g170864 = Out_PositionWO15_g170899;
				float3 temp_output_279_0_g170868 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170868 = temp_output_279_0_g170868;
				half4 localSamplePlanar2D238_g170868 = SamplePlanar2D( Texture238_g170868 , Sampler238_g170868 , Coords238_g170868 , WorldPosition238_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170868 = SS19_g170897;
				half4 Coords246_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition246_g170868 = temp_output_279_0_g170868;
				half3 Model_NormalWS712_g170864 = Out_NormalWS15_g170899;
				float3 temp_output_280_0_g170868 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170868 = temp_output_280_0_g170868;
				half4 localSamplePlanar3D246_g170868 = SamplePlanar3D( Texture246_g170868 , Sampler246_g170868 , Coords246_g170868 , WorldPosition246_g170868 , WorldNormal246_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170868 = SS19_g170897;
				float4 Coords234_g170868 = temp_output_37_0_g170868;
				float3 WorldPosition234_g170868 = temp_output_279_0_g170868;
				float4 localSampleStochastic2D234_g170868 = SampleStochastic2D( Texture234_g170868 , Sampler234_g170868 , Coords234_g170868 , WorldPosition234_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170868 = SS19_g170897;
				half4 Coords263_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition263_g170868 = temp_output_279_0_g170868;
				half3 WorldNormal263_g170868 = temp_output_280_0_g170868;
				half4 localSampleStochastic3D263_g170868 = SampleStochastic3D( Texture263_g170868 , Sampler263_g170868 , Coords263_g170868 , WorldPosition263_g170868 , WorldNormal263_g170868 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170864 = localSamplePlanar3D246_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170864 = localSampleStochastic2D234_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170864 = localSampleStochastic3D263_g170868;
				#else
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#endif
				half3 Overlay_Albedo526_g170864 = (staticSwitch676_g170864).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170864 = ( temp_output_622_0_g170864 * Overlay_Albedo526_g170864 );
				#else
				float3 staticSwitch578_g170864 = temp_output_622_0_g170864;
				#endif
				float3 temp_output_6_0_g170875 = staticSwitch578_g170864;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170875 = ( temp_output_6_0_g170875 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170875 = temp_output_6_0_g170875;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170872) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170872 = sampler_Linear_Repeat;
				float4 appendResult863_g170864 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170872 = appendResult863_g170864;
				half4 Coords246_g170872 = temp_output_37_0_g170872;
				float3 temp_output_279_0_g170872 = Model_PositionWO602_g170864;
				half3 WorldPosition246_g170872 = temp_output_279_0_g170872;
				float3 temp_output_280_0_g170872 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170872 = temp_output_280_0_g170872;
				half4 localSamplePlanar3D246_g170872 = SamplePlanar3D( Texture246_g170872 , Sampler246_g170872 , Coords246_g170872 , WorldPosition246_g170872 , WorldNormal246_g170872 );
				half Overlay_GlitterTex854_g170864 = (localSamplePlanar3D246_g170872).x;
				half3 Model_PositionWS879_g170864 = Out_PositionWS15_g170899;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170864 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170864 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170864 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170864 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170864 = staticSwitch868_g170864;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170889) = _OverlayMaskTex;
				SamplerState Sampler276_g170889 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170890 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170890 = temp_output_6_0_g170890;
				#endif
				half4 Local_MaskCoords888_g170864 = staticSwitch14_g170890;
				float4 temp_output_37_0_g170889 = Local_MaskCoords888_g170864;
				half4 Coords276_g170889 = temp_output_37_0_g170889;
				half2 TexCoord276_g170889 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170889 = SampleMain( Texture276_g170889 , Sampler276_g170889 , Coords276_g170889 , TexCoord276_g170889 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170889) = _OverlayMaskTex;
				SamplerState Sampler275_g170889 = sampler_Linear_Repeat;
				half4 Coords275_g170889 = temp_output_37_0_g170889;
				half2 TexCoord275_g170889 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170889 = SampleExtra( Texture275_g170889 , Sampler275_g170889 , Coords275_g170889 , TexCoord275_g170889 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170864 = localSampleExtra275_g170889;
				#else
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#endif
				half4 Local_MaskTex887_g170864 = staticSwitch894_g170864;
				float clampResult17_g170891 = clamp( (Local_MaskTex887_g170864).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170892 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170892 = ( _OverlayMaskRemap.y - temp_output_7_0_g170892 );
				float lerpResult900_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170891 - temp_output_7_0_g170892 ) / ( temp_output_10_0_g170892 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170864 = lerpResult900_g170864;
				float3 temp_output_739_21_g170864 = Out_NormalWS4_g170865;
				half3 Visual_NormalWS749_g170864 = temp_output_739_21_g170864;
				float clampResult17_g170885 = clamp( saturate( (Visual_NormalWS749_g170864).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170884 = _OverlayProjRemap.x;
				float temp_output_10_0_g170884 = ( _OverlayProjRemap.y - temp_output_7_0_g170884 );
				float lerpResult842_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170885 - temp_output_7_0_g170884 ) / ( temp_output_10_0_g170884 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170864 = lerpResult842_g170864;
				float temp_output_739_15_g170864 = Out_Luminosity4_g170865;
				half Visual_Luminosity654_g170864 = temp_output_739_15_g170864;
				float clampResult17_g170887 = clamp( Visual_Luminosity654_g170864 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170886 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170886 = ( _OverlayLumaRemap.y - temp_output_7_0_g170886 );
				float lerpResult587_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170887 - temp_output_7_0_g170886 ) / ( temp_output_10_0_g170886 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170864 = lerpResult587_g170864;
				half4 Model_VertexMasks791_g170864 = Out_VertexData15_g170899;
				float4 break792_g170864 = Model_VertexMasks791_g170864;
				float4 break33_g170877 = _overlay_vert_mode;
				float temp_output_30_0_g170877 = ( break792_g170864.x * break33_g170877.x );
				float temp_output_29_0_g170877 = ( break792_g170864.y * break33_g170877.y );
				float temp_output_31_0_g170877 = ( break792_g170864.z * break33_g170877.z );
				float temp_output_28_0_g170877 = ( temp_output_30_0_g170877 + temp_output_29_0_g170877 + temp_output_31_0_g170877 + ( break792_g170864.w * break33_g170877.w ) );
				float clampResult17_g170878 = clamp( temp_output_28_0_g170877 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170881 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170881 = ( _OverlayMeshRemap.y - temp_output_7_0_g170881 );
				float lerpResult881_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170878 - temp_output_7_0_g170881 ) / ( temp_output_10_0_g170881 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170888 = lerpResult881_g170864;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float temp_output_831_0_g170864 = staticSwitch14_g170888;
				half Overlay_VertMask801_g170864 = temp_output_831_0_g170864;
				half Overlay_MaskNoise427_g170864 = 1.0;
				TVEGlobalData Data15_g170866 = Data204_g170494;
				float Out_Dummy15_g170866 = 0;
				float4 Out_CoatParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170866 = float4( 0,0,0,0 );
				Out_Dummy15_g170866 = Data15_g170866.Dummy;
				Out_CoatParams15_g170866 = Data15_g170866.CoatParams;
				Out_PaintParams15_g170866 = Data15_g170866.PaintParams;
				Out_GlowParams15_g170866 = Data15_g170866.GlowParams;
				Out_AtmoParams15_g170866= Data15_g170866.AtmoParams;
				Out_FadeParams15_g170866= Data15_g170866.FadeParams;
				Out_FormParams15_g170866 = Data15_g170866.FormParams;
				Out_LandParams15_g170866 = Data15_g170866.LandParams;
				Out_WindParams15_g170866 = Data15_g170866.WindParams;
				Out_PushParams15_g170866 = Data15_g170866.PushParams;
				half4 Global_AtmoParams516_g170864 = Out_AtmoParams15_g170866;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170864 = ( (Global_AtmoParams516_g170864).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170864 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170864 = staticSwitch705_g170864;
				half Custom_Mask646_g170864 = 1.0;
				float temp_output_7_0_g170893 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170893 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170893 );
				half Overlay_Mask494_g170864 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170864 * Overlay_MaskProj457_g170864 * Overlay_MaskLuma438_g170864 * Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 * Custom_Mask646_g170864 ) - temp_output_7_0_g170893 ) / ( temp_output_10_0_g170893 + 0.0001 ) ) );
				float3 lerpResult467_g170864 = lerp( Visual_Albedo127_g170864 , ( staticSwitch14_g170875 + Overlay_GlitterColor865_g170864 ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170864 = lerpResult467_g170864;
				#else
				float3 staticSwitch577_g170864 = Visual_Albedo127_g170864;
				#endif
				half3 Final_Albedo493_g170864 = staticSwitch577_g170864;
				float3 In_Albedo3_g170867 = Final_Albedo493_g170864;
				float3 In_AlbedoRaw3_g170867 = Out_AlbedoRaw4_g170865;
				half2 Visual_NormalTS535_g170864 = Out_NormalTS4_g170865;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170870) = _OverlayNormalTex;
				float localFilterTexture29_g170898 = ( 0.0 );
				SamplerState SamplerDefault29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170898 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170898 = SamplerDefault29_g170898;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170898 = SamplerDefault29_g170898;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170898 = SamplerPoint29_g170898;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170898 = SamplerLow29_g170898;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170898 = SamplerMedium29_g170898;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170898 = SamplerHigh29_g170898;
				#endif
				SamplerState Sampler238_g170870 = SS29_g170898;
				float4 temp_output_37_0_g170870 = Overlay_Coords639_g170864;
				half4 Coords238_g170870 = temp_output_37_0_g170870;
				float3 temp_output_279_0_g170870 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170870 = temp_output_279_0_g170870;
				half4 localSamplePlanar2D238_g170870 = SamplePlanar2D( Texture238_g170870 , Sampler238_g170870 , Coords238_g170870 , WorldPosition238_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170870) = _OverlayNormalTex;
				SamplerState Sampler246_g170870 = SS29_g170898;
				half4 Coords246_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition246_g170870 = temp_output_279_0_g170870;
				float3 temp_output_280_0_g170870 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170870 = temp_output_280_0_g170870;
				half4 localSamplePlanar3D246_g170870 = SamplePlanar3D( Texture246_g170870 , Sampler246_g170870 , Coords246_g170870 , WorldPosition246_g170870 , WorldNormal246_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170870) = _OverlayNormalTex;
				SamplerState Sampler234_g170870 = SS29_g170898;
				float4 Coords234_g170870 = temp_output_37_0_g170870;
				float3 WorldPosition234_g170870 = temp_output_279_0_g170870;
				float4 localSampleStochastic2D234_g170870 = SampleStochastic2D( Texture234_g170870 , Sampler234_g170870 , Coords234_g170870 , WorldPosition234_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170870) = _OverlayNormalTex;
				SamplerState Sampler263_g170870 = SS29_g170898;
				half4 Coords263_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition263_g170870 = temp_output_279_0_g170870;
				half3 WorldNormal263_g170870 = temp_output_280_0_g170870;
				half4 localSampleStochastic3D263_g170870 = SampleStochastic3D( Texture263_g170870 , Sampler263_g170870 , Coords263_g170870 , WorldPosition263_g170870 , WorldNormal263_g170870 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170864 = localSamplePlanar3D246_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170864 = localSampleStochastic2D234_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170864 = localSampleStochastic3D263_g170870;
				#else
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#endif
				half4 Normal_Packed45_g170874 = staticSwitch686_g170864;
				float2 appendResult58_g170874 = (float2(( (Normal_Packed45_g170874).x * (Normal_Packed45_g170874).w ) , (Normal_Packed45_g170874).y));
				half2 Normal_Default50_g170874 = appendResult58_g170874;
				half2 Normal_ASTC41_g170874 = (Normal_Packed45_g170874).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170874 = Normal_ASTC41_g170874;
				#else
				float2 staticSwitch38_g170874 = Normal_Default50_g170874;
				#endif
				half2 Normal_NO_DTX544_g170874 = (Normal_Packed45_g170874).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170874 = Normal_NO_DTX544_g170874;
				#else
				float2 staticSwitch37_g170874 = staticSwitch38_g170874;
				#endif
				half2 Normal_Planar45_g170873 = (staticSwitch37_g170874*2.0 + -1.0);
				float2 break71_g170873 = Normal_Planar45_g170873;
				float3 appendResult72_g170873 = (float3(break71_g170873.x , 0.0 , break71_g170873.y));
				half2 Overlay_Normal528_g170864 = (mul( ase_worldToTangent, appendResult72_g170873 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170864 = Overlay_Normal528_g170864;
				#else
				float2 staticSwitch579_g170864 = Visual_NormalTS535_g170864;
				#endif
				float2 lerpResult551_g170864 = lerp( Visual_NormalTS535_g170864 , ( staticSwitch579_g170864 * _OverlayNormalValue ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170864 = lerpResult551_g170864;
				#else
				float2 staticSwitch583_g170864 = Visual_NormalTS535_g170864;
				#endif
				half2 Final_NormalTS499_g170864 = staticSwitch583_g170864;
				float2 In_NormalTS3_g170867 = Final_NormalTS499_g170864;
				float3 In_NormalWS3_g170867 = temp_output_739_21_g170864;
				half4 Visual_Masks536_g170864 = Out_Shader4_g170865;
				float4 appendResult585_g170864 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170864 = lerp( Visual_Masks536_g170864 , appendResult585_g170864 , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170864 = lerpResult584_g170864;
				#else
				float4 staticSwitch586_g170864 = Visual_Masks536_g170864;
				#endif
				half4 Final_Masks482_g170864 = staticSwitch586_g170864;
				float4 In_Shader3_g170867 = Final_Masks482_g170864;
				float4 In_Emissive3_g170867 = Out_Emissive4_g170865;
				float temp_output_739_12_g170864 = Out_Grayscale4_g170865;
				float In_Grayscale3_g170867 = temp_output_739_12_g170864;
				float In_Luminosity3_g170867 = temp_output_739_15_g170864;
				float In_MultiMask3_g170867 = Out_MultiMask4_g170865;
				float In_AlphaClip3_g170867 = Out_AlphaClip4_g170865;
				float In_AlphaFade3_g170867 = Out_AlphaFade4_g170865;
				float3 In_Translucency3_g170867 = Out_Translucency4_g170865;
				half Visual_Transmission699_g170864 = Out_Transmission4_g170865;
				float lerpResult746_g170864 = lerp( Visual_Transmission699_g170864 , ( Visual_Transmission699_g170864 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170864 = lerpResult746_g170864;
				#else
				float staticSwitch703_g170864 = Visual_Transmission699_g170864;
				#endif
				half Final_Transmission702_g170864 = staticSwitch703_g170864;
				float In_Transmission3_g170867 = Final_Transmission702_g170864;
				float In_Thickness3_g170867 = Out_Thickness4_g170865;
				float In_Diffusion3_g170867 = Out_Diffusion4_g170865;
				Data3_g170867.Dummy = In_Dummy3_g170867;
				Data3_g170867.Albedo = In_Albedo3_g170867;
				Data3_g170867.AlbedoRaw = In_AlbedoRaw3_g170867;
				Data3_g170867.NormalTS = In_NormalTS3_g170867;
				Data3_g170867.NormalWS = In_NormalWS3_g170867;
				Data3_g170867.Shader = In_Shader3_g170867;
				Data3_g170867.Emissive= In_Emissive3_g170867;
				Data3_g170867.MultiMask = In_MultiMask3_g170867;
				Data3_g170867.Grayscale = In_Grayscale3_g170867;
				Data3_g170867.Luminosity = In_Luminosity3_g170867;
				Data3_g170867.AlphaClip = In_AlphaClip3_g170867;
				Data3_g170867.AlphaFade = In_AlphaFade3_g170867;
				Data3_g170867.Translucency = In_Translucency3_g170867;
				Data3_g170867.Transmission = In_Transmission3_g170867;
				Data3_g170867.Thickness = In_Thickness3_g170867;
				Data3_g170867.Diffusion = In_Diffusion3_g170867;
				TVEVisualData Data4_g170901 = Data3_g170867;
				float Out_Dummy4_g170901 = 0;
				float3 Out_Albedo4_g170901 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170901 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170901 = float2( 0,0 );
				float3 Out_NormalWS4_g170901 = float3( 0,0,0 );
				float4 Out_Shader4_g170901 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170901 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170901 = 0;
				float Out_Grayscale4_g170901 = 0;
				float Out_Luminosity4_g170901 = 0;
				float Out_AlphaClip4_g170901 = 0;
				float Out_AlphaFade4_g170901 = 0;
				float3 Out_Translucency4_g170901 = float3( 0,0,0 );
				float Out_Transmission4_g170901 = 0;
				float Out_Thickness4_g170901 = 0;
				float Out_Diffusion4_g170901 = 0;
				Out_Dummy4_g170901 = Data4_g170901.Dummy;
				Out_Albedo4_g170901 = Data4_g170901.Albedo;
				Out_AlbedoRaw4_g170901 = Data4_g170901.AlbedoRaw;
				Out_NormalTS4_g170901 = Data4_g170901.NormalTS;
				Out_NormalWS4_g170901 = Data4_g170901.NormalWS;
				Out_Shader4_g170901 = Data4_g170901.Shader;
				Out_Emissive4_g170901= Data4_g170901.Emissive;
				Out_MultiMask4_g170901 = Data4_g170901.MultiMask;
				Out_Grayscale4_g170901 = Data4_g170901.Grayscale;
				Out_Luminosity4_g170901= Data4_g170901.Luminosity;
				Out_AlphaClip4_g170901 = Data4_g170901.AlphaClip;
				Out_AlphaFade4_g170901 = Data4_g170901.AlphaFade;
				Out_Translucency4_g170901 = Data4_g170901.Translucency;
				Out_Transmission4_g170901 = Data4_g170901.Transmission;
				Out_Thickness4_g170901 = Data4_g170901.Thickness;
				Out_Diffusion4_g170901 = Data4_g170901.Diffusion;
				half3 Visual_Albedo127_g170900 = Out_Albedo4_g170901;
				TVEGlobalData Data15_g170906 = Data204_g170494;
				float Out_Dummy15_g170906 = 0;
				float4 Out_CoatParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170906 = float4( 0,0,0,0 );
				Out_Dummy15_g170906 = Data15_g170906.Dummy;
				Out_CoatParams15_g170906 = Data15_g170906.CoatParams;
				Out_PaintParams15_g170906 = Data15_g170906.PaintParams;
				Out_GlowParams15_g170906 = Data15_g170906.GlowParams;
				Out_AtmoParams15_g170906= Data15_g170906.AtmoParams;
				Out_FadeParams15_g170906= Data15_g170906.FadeParams;
				Out_FormParams15_g170906 = Data15_g170906.FormParams;
				Out_LandParams15_g170906 = Data15_g170906.LandParams;
				Out_WindParams15_g170906 = Data15_g170906.WindParams;
				Out_PushParams15_g170906 = Data15_g170906.PushParams;
				half4 Global_AtmoParams516_g170900 = Out_AtmoParams15_g170906;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170900 = ( (Global_AtmoParams516_g170900).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170900 = 1.0;
				#endif
				half Global_Wetness429_g170900 = staticSwitch663_g170900;
				half Wetness_Value1042_g170900 = ( _WetnessIntensityValue * Global_Wetness429_g170900 );
				TVEModelData Data15_g170914 = Data16_g170493;
				float Out_Dummy15_g170914 = 0;
				float3 Out_PositionWS15_g170914 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170914 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170914 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170914 = float3( 0,0,0 );
				float4 Out_VertexData15_g170914 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170914 = float4( 0,0,0,0 );
				Out_Dummy15_g170914 = Data15_g170914.Dummy;
				Out_PositionWS15_g170914 = Data15_g170914.PositionWS;
				Out_PositionWO15_g170914 = Data15_g170914.PositionWO;
				Out_PivotWS15_g170914 = Data15_g170914.PivotWS;
				Out_PivotWO15_g170914 = Data15_g170914.PivotWO;
				Out_NormalWS15_g170914 = Data15_g170914.NormalWS;
				Out_ViewDirWS15_g170914 = Data15_g170914.ViewDirWS;
				Out_VertexData15_g170914 = Data15_g170914.VertexData;
				Out_BoundsData15_g170914 = Data15_g170914.BoundsData;
				half4 Model_VertexData1030_g170900 = Out_VertexData15_g170914;
				float4 break1019_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170919 = _wetness_vert_mode;
				float temp_output_30_0_g170919 = ( break1019_g170900.x * break33_g170919.x );
				float temp_output_29_0_g170919 = ( break1019_g170900.y * break33_g170919.y );
				float temp_output_31_0_g170919 = ( break1019_g170900.z * break33_g170919.z );
				float temp_output_28_0_g170919 = ( temp_output_30_0_g170919 + temp_output_29_0_g170919 + temp_output_31_0_g170919 + ( break1019_g170900.w * break33_g170919.w ) );
				float clampResult17_g170917 = clamp( temp_output_28_0_g170919 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170918 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170918 = ( _WetnessMeshRemap.y - temp_output_7_0_g170918 );
				float lerpResult1026_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170917 - temp_output_7_0_g170918 ) / ( temp_output_10_0_g170918 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170920 = lerpResult1026_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170920 = ( temp_output_6_0_g170920 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170920 = temp_output_6_0_g170920;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170900 = staticSwitch14_g170920;
				#else
				float staticSwitch1110_g170900 = 1.0;
				#endif
				half Wetness_VertMask1024_g170900 = staticSwitch1110_g170900;
				float temp_output_1043_0_g170900 = ( Wetness_Value1042_g170900 * Wetness_VertMask1024_g170900 );
				half Wetness_Mask866_g170900 = temp_output_1043_0_g170900;
				float4 break1083_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170923 = _wetness_water_vert_mode;
				float temp_output_30_0_g170923 = ( break1083_g170900.x * break33_g170923.x );
				float temp_output_29_0_g170923 = ( break1083_g170900.y * break33_g170923.y );
				float temp_output_31_0_g170923 = ( break1083_g170900.z * break33_g170923.z );
				float temp_output_28_0_g170923 = ( temp_output_30_0_g170923 + temp_output_29_0_g170923 + temp_output_31_0_g170923 + ( break1083_g170900.w * break33_g170923.w ) );
				float clampResult17_g170921 = clamp( temp_output_28_0_g170923 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170922 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170922 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170922 );
				float lerpResult1089_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170921 - temp_output_7_0_g170922 ) / ( temp_output_10_0_g170922 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170924 = lerpResult1089_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170924 = ( temp_output_6_0_g170924 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170924 = temp_output_6_0_g170924;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170900 = staticSwitch14_g170924;
				#else
				float staticSwitch1113_g170900 = 1.0;
				#endif
				half Water_VertMask1094_g170900 = staticSwitch1113_g170900;
				half4 Visual_Masks536_g170900 = Out_Shader4_g170901;
				float lerpResult1013_g170900 = lerp( 1.0 , (Visual_Masks536_g170900).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170900 = lerpResult1013_g170900;
				float clampResult17_g170915 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170900 * Water_VertMask1094_g170900 ) - Water_HeightMask782_g170900 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170916 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170916 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170916 );
				half3 Model_NormalWS798_g170900 = Out_NormalWS15_g170914;
				float temp_output_786_0_g170900 = saturate( (Model_NormalWS798_g170900).y );
				half Wetness_ProjMask790_g170900 = temp_output_786_0_g170900;
				half Water_Mask760_g170900 = ( saturate( ( ( clampResult17_g170915 - temp_output_7_0_g170916 ) / ( temp_output_10_0_g170916 + 0.0001 ) ) ) * Wetness_ProjMask790_g170900 );
				float3 lerpResult918_g170900 = lerp( Visual_Albedo127_g170900 , ( Visual_Albedo127_g170900 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170900 = lerpResult918_g170900;
				#else
				float3 staticSwitch946_g170900 = Visual_Albedo127_g170900;
				#endif
				float3 lerpResult768_g170900 = lerp( staticSwitch946_g170900 , ( staticSwitch946_g170900 * staticSwitch946_g170900 ) , _WetnessContrastValue);
				float3 lerpResult651_g170900 = lerp( Visual_Albedo127_g170900 , lerpResult768_g170900 , Wetness_Mask866_g170900);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170900 = lerpResult651_g170900;
				#else
				float3 staticSwitch577_g170900 = Visual_Albedo127_g170900;
				#endif
				half3 Final_Albedo493_g170900 = staticSwitch577_g170900;
				float3 In_Albedo3_g170902 = Final_Albedo493_g170900;
				float3 In_AlbedoRaw3_g170902 = Out_AlbedoRaw4_g170901;
				half2 Visual_Normal535_g170900 = Out_NormalTS4_g170901;
				float lerpResult877_g170900 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170900 = ( Visual_Normal535_g170900 * lerpResult877_g170900 );
				#else
				float2 staticSwitch957_g170900 = Visual_Normal535_g170900;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170912) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170912 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170900 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170912 = appendResult924_g170900;
				half4 Coords238_g170912 = temp_output_37_0_g170912;
				half3 Model_PositionWO602_g170900 = Out_PositionWO15_g170914;
				float3 temp_output_279_0_g170912 = Model_PositionWO602_g170900;
				half3 WorldPosition238_g170912 = temp_output_279_0_g170912;
				half4 localSamplePlanar2D238_g170912 = SamplePlanar2D( Texture238_g170912 , Sampler238_g170912 , Coords238_g170912 , WorldPosition238_g170912 );
				float4 temp_output_1010_0_g170900 = localSamplePlanar2D238_g170912;
				half2 Rain_DropsNormal919_g170900 = (temp_output_1010_0_g170900).zw;
				float2 temp_output_903_0_g170900 = (Rain_DropsNormal919_g170900*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170900 = (temp_output_1010_0_g170900).xy;
				float2 lerpResult904_g170900 = lerp( temp_output_903_0_g170900 , (Rain_RingsNormal713_g170900*2.0 + -1.0) , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170900 = lerpResult904_g170900;
				#else
				float2 staticSwitch960_g170900 = temp_output_903_0_g170900;
				#endif
				half2 Rain_Drops1002_g170900 = ( staticSwitch960_g170900 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170900 = Out_PositionWS15_g170914;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170900 = ( (Global_AtmoParams516_g170900).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170900 = 1.0;
				#endif
				half Global_Rain955_g170900 = staticSwitch949_g170900;
				half Rain_Value1067_g170900 = Global_Rain955_g170900;
				float4 break1097_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170900.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170900.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170900.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170900.w * break33_g170927.w ) );
				float clampResult17_g170925 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170926 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170926 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170926 );
				float lerpResult1100_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170925 - temp_output_7_0_g170926 ) / ( temp_output_10_0_g170926 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170900 = staticSwitch14_g170928;
				#else
				float staticSwitch1115_g170900 = 1.0;
				#endif
				half Rain_VertMask1108_g170900 = staticSwitch1115_g170900;
				half Rain_Mask999_g170900 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170900 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170900 * Rain_VertMask1108_g170900 );
				half2 Normal_Planar45_g170911 = ( Rain_Drops1002_g170900 * Rain_Mask999_g170900 * Wetness_ProjMask790_g170900 );
				float2 break71_g170911 = Normal_Planar45_g170911;
				float3 appendResult72_g170911 = (float3(break71_g170911.x , 0.0 , break71_g170911.y));
				half2 Wetness_Normal526_g170900 = (mul( ase_worldToTangent, appendResult72_g170911 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170900 = Wetness_Normal526_g170900;
				#else
				float2 staticSwitch583_g170900 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170900 = ( staticSwitch957_g170900 + staticSwitch583_g170900 );
				#else
				float2 staticSwitch774_g170900 = Visual_Normal535_g170900;
				#endif
				half2 Final_Normal499_g170900 = staticSwitch774_g170900;
				float2 In_NormalTS3_g170902 = Final_Normal499_g170900;
				float3 In_NormalWS3_g170902 = Out_NormalWS4_g170901;
				float4 break658_g170900 = Visual_Masks536_g170900;
				float temp_output_935_0_g170900 = ( Wetness_Mask866_g170900 * _WetnessSmoothnessValue );
				float lerpResult941_g170900 = lerp( temp_output_935_0_g170900 , 2.0 , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170900 = lerpResult941_g170900;
				#else
				float staticSwitch959_g170900 = temp_output_935_0_g170900;
				#endif
				float4 appendResult661_g170900 = (float4(break658_g170900.x , break658_g170900.y , break658_g170900.z , saturate( ( break658_g170900.w + staticSwitch959_g170900 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170900 = appendResult661_g170900;
				#else
				float4 staticSwitch586_g170900 = Visual_Masks536_g170900;
				#endif
				half4 Final_Masks482_g170900 = staticSwitch586_g170900;
				float4 In_Shader3_g170902 = Final_Masks482_g170900;
				float4 In_Emissive3_g170902 = Out_Emissive4_g170901;
				float In_Grayscale3_g170902 = Out_Grayscale4_g170901;
				float In_Luminosity3_g170902 = Out_Luminosity4_g170901;
				float In_MultiMask3_g170902 = Out_MultiMask4_g170901;
				float In_AlphaClip3_g170902 = Out_AlphaClip4_g170901;
				float In_AlphaFade3_g170902 = Out_AlphaFade4_g170901;
				float3 In_Translucency3_g170902 = Out_Translucency4_g170901;
				float In_Transmission3_g170902 = Out_Transmission4_g170901;
				float In_Thickness3_g170902 = Out_Thickness4_g170901;
				float In_Diffusion3_g170902 = Out_Diffusion4_g170901;
				Data3_g170902.Dummy = In_Dummy3_g170902;
				Data3_g170902.Albedo = In_Albedo3_g170902;
				Data3_g170902.AlbedoRaw = In_AlbedoRaw3_g170902;
				Data3_g170902.NormalTS = In_NormalTS3_g170902;
				Data3_g170902.NormalWS = In_NormalWS3_g170902;
				Data3_g170902.Shader = In_Shader3_g170902;
				Data3_g170902.Emissive= In_Emissive3_g170902;
				Data3_g170902.MultiMask = In_MultiMask3_g170902;
				Data3_g170902.Grayscale = In_Grayscale3_g170902;
				Data3_g170902.Luminosity = In_Luminosity3_g170902;
				Data3_g170902.AlphaClip = In_AlphaClip3_g170902;
				Data3_g170902.AlphaFade = In_AlphaFade3_g170902;
				Data3_g170902.Translucency = In_Translucency3_g170902;
				Data3_g170902.Transmission = In_Transmission3_g170902;
				Data3_g170902.Thickness = In_Thickness3_g170902;
				Data3_g170902.Diffusion = In_Diffusion3_g170902;
				TVEVisualData Data4_g170940 = Data3_g170902;
				float Out_Dummy4_g170940 = 0;
				float3 Out_Albedo4_g170940 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170940 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170940 = float2( 0,0 );
				float3 Out_NormalWS4_g170940 = float3( 0,0,0 );
				float4 Out_Shader4_g170940 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170940 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170940 = 0;
				float Out_Grayscale4_g170940 = 0;
				float Out_Luminosity4_g170940 = 0;
				float Out_AlphaClip4_g170940 = 0;
				float Out_AlphaFade4_g170940 = 0;
				float3 Out_Translucency4_g170940 = float3( 0,0,0 );
				float Out_Transmission4_g170940 = 0;
				float Out_Thickness4_g170940 = 0;
				float Out_Diffusion4_g170940 = 0;
				Out_Dummy4_g170940 = Data4_g170940.Dummy;
				Out_Albedo4_g170940 = Data4_g170940.Albedo;
				Out_AlbedoRaw4_g170940 = Data4_g170940.AlbedoRaw;
				Out_NormalTS4_g170940 = Data4_g170940.NormalTS;
				Out_NormalWS4_g170940 = Data4_g170940.NormalWS;
				Out_Shader4_g170940 = Data4_g170940.Shader;
				Out_Emissive4_g170940= Data4_g170940.Emissive;
				Out_MultiMask4_g170940 = Data4_g170940.MultiMask;
				Out_Grayscale4_g170940 = Data4_g170940.Grayscale;
				Out_Luminosity4_g170940= Data4_g170940.Luminosity;
				Out_AlphaClip4_g170940 = Data4_g170940.AlphaClip;
				Out_AlphaFade4_g170940 = Data4_g170940.AlphaFade;
				Out_Translucency4_g170940 = Data4_g170940.Translucency;
				Out_Transmission4_g170940 = Data4_g170940.Transmission;
				Out_Thickness4_g170940 = Data4_g170940.Thickness;
				Out_Diffusion4_g170940 = Data4_g170940.Diffusion;
				float3 In_Albedo3_g170930 = Out_Albedo4_g170940;
				float3 In_AlbedoRaw3_g170930 = Out_AlbedoRaw4_g170940;
				float2 In_NormalTS3_g170930 = Out_NormalTS4_g170940;
				float3 In_NormalWS3_g170930 = Out_NormalWS4_g170940;
				float4 In_Shader3_g170930 = Out_Shader4_g170940;
				float4 In_Emissive3_g170930 = Out_Emissive4_g170940;
				float In_Grayscale3_g170930 = Out_Grayscale4_g170940;
				float In_Luminosity3_g170930 = Out_Luminosity4_g170940;
				float temp_output_836_11_g170929 = Out_MultiMask4_g170940;
				float In_MultiMask3_g170930 = temp_output_836_11_g170929;
				half Visual_AlphaClip667_g170929 = Out_AlphaClip4_g170940;
				TVEGlobalData Data15_g170939 = Data204_g170494;
				float Out_Dummy15_g170939 = 0;
				float4 Out_CoatParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170939 = float4( 0,0,0,0 );
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_CoatParams15_g170939 = Data15_g170939.CoatParams;
				Out_PaintParams15_g170939 = Data15_g170939.PaintParams;
				Out_GlowParams15_g170939 = Data15_g170939.GlowParams;
				Out_AtmoParams15_g170939= Data15_g170939.AtmoParams;
				Out_FadeParams15_g170939= Data15_g170939.FadeParams;
				Out_FormParams15_g170939 = Data15_g170939.FormParams;
				Out_LandParams15_g170939 = Data15_g170939.LandParams;
				Out_WindParams15_g170939 = Data15_g170939.WindParams;
				Out_PushParams15_g170939 = Data15_g170939.PushParams;
				half4 Global_FadeParams516_g170929 = Out_FadeParams15_g170939;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170929 = saturate( (Global_FadeParams516_g170929).w );
				#else
				float staticSwitch663_g170929 = 1.0;
				#endif
				half Local_GlobalMask429_g170929 = staticSwitch663_g170929;
				float lerpResult811_g170929 = lerp( 1.0 , Visual_AlphaClip667_g170929 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170929 = lerpResult811_g170929;
				TVEModelData Data15_g170941 = Data16_g170493;
				float Out_Dummy15_g170941 = 0;
				float3 Out_PositionWS15_g170941 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170941 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170941 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170941 = float3( 0,0,0 );
				float4 Out_VertexData15_g170941 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170941 = float4( 0,0,0,0 );
				Out_Dummy15_g170941 = Data15_g170941.Dummy;
				Out_PositionWS15_g170941 = Data15_g170941.PositionWS;
				Out_PositionWO15_g170941 = Data15_g170941.PositionWO;
				Out_PivotWS15_g170941 = Data15_g170941.PivotWS;
				Out_PivotWO15_g170941 = Data15_g170941.PivotWO;
				Out_NormalWS15_g170941 = Data15_g170941.NormalWS;
				Out_ViewDirWS15_g170941 = Data15_g170941.ViewDirWS;
				Out_VertexData15_g170941 = Data15_g170941.VertexData;
				Out_BoundsData15_g170941 = Data15_g170941.BoundsData;
				half3 Model_PositionWO602_g170929 = Out_PositionWO15_g170941;
				float4 tex3DNode60_g170933 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170929 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170929 = lerp( 1.0 , tex3DNode60_g170933.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170929 = lerpResult673_g170929;
				half4 Model_VertexMasks752_g170929 = Out_VertexData15_g170941;
				float4 break755_g170929 = Model_VertexMasks752_g170929;
				float4 break33_g170931 = _cutout_vert_mode;
				float temp_output_30_0_g170931 = ( break755_g170929.x * break33_g170931.x );
				float temp_output_29_0_g170931 = ( break755_g170929.y * break33_g170931.y );
				float temp_output_31_0_g170931 = ( break755_g170929.z * break33_g170931.z );
				float temp_output_28_0_g170931 = ( temp_output_30_0_g170931 + temp_output_29_0_g170931 + temp_output_31_0_g170931 + ( break755_g170929.w * break33_g170931.w ) );
				float clampResult17_g170932 = clamp( temp_output_28_0_g170931 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170935 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170935 = ( _CutoutMeshRemap.y - temp_output_7_0_g170935 );
				float lerpResult820_g170929 = lerp( 1.0 , saturate( ( ( clampResult17_g170932 - temp_output_7_0_g170935 ) / ( temp_output_10_0_g170935 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170936 = lerpResult820_g170929;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170936 = ( temp_output_6_0_g170936 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170936 = temp_output_6_0_g170936;
				#endif
				float temp_output_801_0_g170929 = staticSwitch14_g170936;
				half Local_VertMask766_g170929 = temp_output_801_0_g170929;
				half Visual_MultiMask671_g170929 = temp_output_836_11_g170929;
				float lerpResult683_g170929 = lerp( 1.0 , Visual_MultiMask671_g170929 , _CutoutMultiValue);
				half Local_MultiMask685_g170929 = lerpResult683_g170929;
				float lerpResult728_g170929 = lerp( Visual_AlphaClip667_g170929 , min( Visual_AlphaClip667_g170929 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170929 ) - ( Local_AlphaMask814_g170929 * Local_NoiseMask678_g170929 * Local_VertMask766_g170929 ) ) ) ) , Local_MultiMask685_g170929);
				half Local_AlphaClip784_g170929 = lerpResult728_g170929;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170929 = Local_AlphaClip784_g170929;
				#else
				float staticSwitch577_g170929 = Visual_AlphaClip667_g170929;
				#endif
				half Final_AlphaClip795_g170929 = staticSwitch577_g170929;
				float In_AlphaClip3_g170930 = Final_AlphaClip795_g170929;
				float In_AlphaFade3_g170930 = Out_AlphaFade4_g170940;
				float3 In_Translucency3_g170930 = Out_Translucency4_g170940;
				float In_Transmission3_g170930 = Out_Transmission4_g170940;
				float In_Thickness3_g170930 = Out_Thickness4_g170940;
				float In_Diffusion3_g170930 = Out_Diffusion4_g170940;
				Data3_g170930.Dummy = In_Dummy3_g170930;
				Data3_g170930.Albedo = In_Albedo3_g170930;
				Data3_g170930.AlbedoRaw = In_AlbedoRaw3_g170930;
				Data3_g170930.NormalTS = In_NormalTS3_g170930;
				Data3_g170930.NormalWS = In_NormalWS3_g170930;
				Data3_g170930.Shader = In_Shader3_g170930;
				Data3_g170930.Emissive= In_Emissive3_g170930;
				Data3_g170930.MultiMask = In_MultiMask3_g170930;
				Data3_g170930.Grayscale = In_Grayscale3_g170930;
				Data3_g170930.Luminosity = In_Luminosity3_g170930;
				Data3_g170930.AlphaClip = In_AlphaClip3_g170930;
				Data3_g170930.AlphaFade = In_AlphaFade3_g170930;
				Data3_g170930.Translucency = In_Translucency3_g170930;
				Data3_g170930.Transmission = In_Transmission3_g170930;
				Data3_g170930.Thickness = In_Thickness3_g170930;
				Data3_g170930.Diffusion = In_Diffusion3_g170930;
				TVEVisualData Data4_g170944 = Data3_g170930;
				float Out_Dummy4_g170944 = 0;
				float3 Out_Albedo4_g170944 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170944 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170944 = float2( 0,0 );
				float3 Out_NormalWS4_g170944 = float3( 0,0,0 );
				float4 Out_Shader4_g170944 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170944 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170944 = 0;
				float Out_Grayscale4_g170944 = 0;
				float Out_Luminosity4_g170944 = 0;
				float Out_AlphaClip4_g170944 = 0;
				float Out_AlphaFade4_g170944 = 0;
				float3 Out_Translucency4_g170944 = float3( 0,0,0 );
				float Out_Transmission4_g170944 = 0;
				float Out_Thickness4_g170944 = 0;
				float Out_Diffusion4_g170944 = 0;
				Out_Dummy4_g170944 = Data4_g170944.Dummy;
				Out_Albedo4_g170944 = Data4_g170944.Albedo;
				Out_AlbedoRaw4_g170944 = Data4_g170944.AlbedoRaw;
				Out_NormalTS4_g170944 = Data4_g170944.NormalTS;
				Out_NormalWS4_g170944 = Data4_g170944.NormalWS;
				Out_Shader4_g170944 = Data4_g170944.Shader;
				Out_Emissive4_g170944= Data4_g170944.Emissive;
				Out_MultiMask4_g170944 = Data4_g170944.MultiMask;
				Out_Grayscale4_g170944 = Data4_g170944.Grayscale;
				Out_Luminosity4_g170944= Data4_g170944.Luminosity;
				Out_AlphaClip4_g170944 = Data4_g170944.AlphaClip;
				Out_AlphaFade4_g170944 = Data4_g170944.AlphaFade;
				Out_Translucency4_g170944 = Data4_g170944.Translucency;
				Out_Transmission4_g170944 = Data4_g170944.Transmission;
				Out_Thickness4_g170944 = Data4_g170944.Thickness;
				Out_Diffusion4_g170944 = Data4_g170944.Diffusion;
				float3 In_Albedo3_g170945 = Out_Albedo4_g170944;
				float3 In_AlbedoRaw3_g170945 = Out_AlbedoRaw4_g170944;
				float2 In_NormalTS3_g170945 = Out_NormalTS4_g170944;
				float3 In_NormalWS3_g170945 = Out_NormalWS4_g170944;
				float4 In_Shader3_g170945 = Out_Shader4_g170944;
				float4 In_Emissive3_g170945 = Out_Emissive4_g170944;
				float In_Grayscale3_g170945 = Out_Grayscale4_g170944;
				float In_Luminosity3_g170945 = Out_Luminosity4_g170944;
				float temp_output_821_11_g170942 = Out_MultiMask4_g170944;
				float In_MultiMask3_g170945 = temp_output_821_11_g170942;
				half Visual_AlphaClip754_g170942 = Out_AlphaClip4_g170944;
				half Dither_Constant768_g170942 = _DitherConstantValue;
				float temp_output_7_0_g170952 = _DitherProximityMaxValue;
				float temp_output_10_0_g170952 = ( _DitherProximityMinValue - temp_output_7_0_g170952 );
				half Dither_Proximity767_g170942 = ( saturate( ( ( distance( worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170952 ) / ( temp_output_10_0_g170952 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170951 = Data16_g170493;
				float Out_Dummy15_g170951 = 0;
				float3 Out_PositionWS15_g170951 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170951 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170951 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170951 = float3( 0,0,0 );
				float4 Out_VertexData15_g170951 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170951 = float4( 0,0,0,0 );
				Out_Dummy15_g170951 = Data15_g170951.Dummy;
				Out_PositionWS15_g170951 = Data15_g170951.PositionWS;
				Out_PositionWO15_g170951 = Data15_g170951.PositionWO;
				Out_PivotWS15_g170951 = Data15_g170951.PivotWS;
				Out_PivotWO15_g170951 = Data15_g170951.PivotWO;
				Out_NormalWS15_g170951 = Data15_g170951.NormalWS;
				Out_ViewDirWS15_g170951 = Data15_g170951.ViewDirWS;
				Out_VertexData15_g170951 = Data15_g170951.VertexData;
				Out_BoundsData15_g170951 = Data15_g170951.BoundsData;
				half3 Model_PositionWS776_g170942 = Out_PositionWS15_g170951;
				float temp_output_7_0_g170950 = _DitherDistanceMinValue;
				float temp_output_10_0_g170950 = ( _DitherDistanceMaxValue - temp_output_7_0_g170950 );
				half Dither_Distance856_g170942 = ( saturate( ( ( distance( Model_PositionWS776_g170942 , _WorldSpaceCameraPos ) - temp_output_7_0_g170950 ) / ( temp_output_10_0_g170950 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170942 = Out_ViewDirWS15_g170951;
				float3 normalizeResult792_g170942 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
				float dotResult778_g170942 = dot( Model_ViewDirWS845_g170942 , normalizeResult792_g170942 );
				half Dither_Glancing784_g170942 = ( saturate( ( ( 1.0 - abs( dotResult778_g170942 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170942 = max( max( max( Dither_Constant768_g170942 , Dither_Proximity767_g170942 ) , Dither_Distance856_g170942 ) , Dither_Glancing784_g170942 );
				half3 Model_PositionWO602_g170942 = Out_PositionWO15_g170951;
				float4 tex3DNode60_g170948 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170942 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170942 = tex3DNode60_g170948.r;
				half Local_MaskNoise678_g170942 = temp_output_809_0_g170942;
				half Visual_MultiMask671_g170942 = temp_output_821_11_g170942;
				float lerpResult683_g170942 = lerp( 1.0 , Visual_MultiMask671_g170942 , _DitherMultiValue);
				half Local_MaskMulti685_g170942 = lerpResult683_g170942;
				half Custom_Mask826_g170942 = 1.0;
				float lerpResult728_g170942 = lerp( Visual_AlphaClip754_g170942 , min( Visual_AlphaClip754_g170942 , ( -0.001 - ( Dither_Value429_g170942 - Local_MaskNoise678_g170942 ) ) ) , ( Local_MaskMulti685_g170942 * Custom_Mask826_g170942 ));
				half Local_AlphaClip834_g170942 = lerpResult728_g170942;
				#ifdef TVE_DITHER
				float staticSwitch577_g170942 = Local_AlphaClip834_g170942;
				#else
				float staticSwitch577_g170942 = Visual_AlphaClip754_g170942;
				#endif
				half Final_AlphaClip493_g170942 = staticSwitch577_g170942;
				float In_AlphaClip3_g170945 = Final_AlphaClip493_g170942;
				float In_AlphaFade3_g170945 = Out_AlphaFade4_g170944;
				float3 In_Translucency3_g170945 = Out_Translucency4_g170944;
				float In_Transmission3_g170945 = Out_Transmission4_g170944;
				float In_Thickness3_g170945 = Out_Thickness4_g170944;
				float In_Diffusion3_g170945 = Out_Diffusion4_g170944;
				Data3_g170945.Dummy = In_Dummy3_g170945;
				Data3_g170945.Albedo = In_Albedo3_g170945;
				Data3_g170945.AlbedoRaw = In_AlbedoRaw3_g170945;
				Data3_g170945.NormalTS = In_NormalTS3_g170945;
				Data3_g170945.NormalWS = In_NormalWS3_g170945;
				Data3_g170945.Shader = In_Shader3_g170945;
				Data3_g170945.Emissive= In_Emissive3_g170945;
				Data3_g170945.MultiMask = In_MultiMask3_g170945;
				Data3_g170945.Grayscale = In_Grayscale3_g170945;
				Data3_g170945.Luminosity = In_Luminosity3_g170945;
				Data3_g170945.AlphaClip = In_AlphaClip3_g170945;
				Data3_g170945.AlphaFade = In_AlphaFade3_g170945;
				Data3_g170945.Translucency = In_Translucency3_g170945;
				Data3_g170945.Transmission = In_Transmission3_g170945;
				Data3_g170945.Thickness = In_Thickness3_g170945;
				Data3_g170945.Diffusion = In_Diffusion3_g170945;
				TVEVisualData Data4_g170972 = Data3_g170945;
				float Out_Dummy4_g170972 = 0;
				float3 Out_Albedo4_g170972 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170972 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170972 = float2( 0,0 );
				float3 Out_NormalWS4_g170972 = float3( 0,0,0 );
				float4 Out_Shader4_g170972 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170972 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170972 = 0;
				float Out_Grayscale4_g170972 = 0;
				float Out_Luminosity4_g170972 = 0;
				float Out_AlphaClip4_g170972 = 0;
				float Out_AlphaFade4_g170972 = 0;
				float3 Out_Translucency4_g170972 = float3( 0,0,0 );
				float Out_Transmission4_g170972 = 0;
				float Out_Thickness4_g170972 = 0;
				float Out_Diffusion4_g170972 = 0;
				Out_Dummy4_g170972 = Data4_g170972.Dummy;
				Out_Albedo4_g170972 = Data4_g170972.Albedo;
				Out_AlbedoRaw4_g170972 = Data4_g170972.AlbedoRaw;
				Out_NormalTS4_g170972 = Data4_g170972.NormalTS;
				Out_NormalWS4_g170972 = Data4_g170972.NormalWS;
				Out_Shader4_g170972 = Data4_g170972.Shader;
				Out_Emissive4_g170972= Data4_g170972.Emissive;
				Out_MultiMask4_g170972 = Data4_g170972.MultiMask;
				Out_Grayscale4_g170972 = Data4_g170972.Grayscale;
				Out_Luminosity4_g170972= Data4_g170972.Luminosity;
				Out_AlphaClip4_g170972 = Data4_g170972.AlphaClip;
				Out_AlphaFade4_g170972 = Data4_g170972.AlphaFade;
				Out_Translucency4_g170972 = Data4_g170972.Translucency;
				Out_Transmission4_g170972 = Data4_g170972.Transmission;
				Out_Thickness4_g170972 = Data4_g170972.Thickness;
				Out_Diffusion4_g170972 = Data4_g170972.Diffusion;
				float3 temp_output_297_0_g170963 = Out_Albedo4_g170972;
				float3 In_Albedo3_g170973 = temp_output_297_0_g170963;
				float3 temp_output_297_23_g170963 = Out_AlbedoRaw4_g170972;
				float3 In_AlbedoRaw3_g170973 = temp_output_297_23_g170963;
				float2 In_NormalTS3_g170973 = Out_NormalTS4_g170972;
				float3 In_NormalWS3_g170973 = Out_NormalWS4_g170972;
				float4 In_Shader3_g170973 = Out_Shader4_g170972;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170963 = Out_Emissive4_g170972;
				TVEModelData Data15_g170976 = Data16_g170493;
				float Out_Dummy15_g170976 = 0;
				float3 Out_PositionWS15_g170976 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170976 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170976 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170976 = float3( 0,0,0 );
				float4 Out_VertexData15_g170976 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170976 = float4( 0,0,0,0 );
				Out_Dummy15_g170976 = Data15_g170976.Dummy;
				Out_PositionWS15_g170976 = Data15_g170976.PositionWS;
				Out_PositionWO15_g170976 = Data15_g170976.PositionWO;
				Out_PivotWS15_g170976 = Data15_g170976.PivotWS;
				Out_PivotWO15_g170976 = Data15_g170976.PivotWO;
				Out_NormalWS15_g170976 = Data15_g170976.NormalWS;
				Out_ViewDirWS15_g170976 = Data15_g170976.ViewDirWS;
				Out_VertexData15_g170976 = Data15_g170976.VertexData;
				Out_BoundsData15_g170976 = Data15_g170976.BoundsData;
				half4 Model_VertexMasks216_g170963 = Out_VertexData15_g170976;
				float4 break251_g170963 = Model_VertexMasks216_g170963;
				float4 break33_g170967 = _emissive_vert_mode;
				float temp_output_30_0_g170967 = ( break251_g170963.x * break33_g170967.x );
				float temp_output_29_0_g170967 = ( break251_g170963.y * break33_g170967.y );
				float temp_output_31_0_g170967 = ( break251_g170963.z * break33_g170967.z );
				float temp_output_28_0_g170967 = ( temp_output_30_0_g170967 + temp_output_29_0_g170967 + temp_output_31_0_g170967 + ( break251_g170963.w * break33_g170967.w ) );
				float clampResult17_g170966 = clamp( temp_output_28_0_g170967 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170970 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170970 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170970 );
				float lerpResult303_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170966 - temp_output_7_0_g170970 ) / ( temp_output_10_0_g170970 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170975 = lerpResult303_g170963;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170975 = ( temp_output_6_0_g170975 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170975 = temp_output_6_0_g170975;
				#endif
				float temp_output_263_0_g170963 = staticSwitch14_g170975;
				half Emissive_MeshMask221_g170963 = temp_output_263_0_g170963;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170965) = _EmissiveMaskTex;
				SamplerState Sampler276_g170965 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170971 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170971 = ( temp_output_6_0_g170971 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170971 = temp_output_6_0_g170971;
				#endif
				half4 Emissive_Coords167_g170963 = staticSwitch14_g170971;
				float4 temp_output_37_0_g170965 = Emissive_Coords167_g170963;
				half4 Coords276_g170965 = temp_output_37_0_g170965;
				half2 TexCoord276_g170965 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170965 = SampleMain( Texture276_g170965 , Sampler276_g170965 , Coords276_g170965 , TexCoord276_g170965 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170965) = _EmissiveMaskTex;
				SamplerState Sampler275_g170965 = sampler_Linear_Repeat;
				half4 Coords275_g170965 = temp_output_37_0_g170965;
				half2 TexCoord275_g170965 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170965 = SampleExtra( Texture275_g170965 , Sampler275_g170965 , Coords275_g170965 , TexCoord275_g170965 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170963 = localSampleExtra275_g170965;
				#else
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#endif
				half4 Emissive_MaskTex201_g170963 = staticSwitch176_g170963;
				float clampResult17_g170969 = clamp( (Emissive_MaskTex201_g170963).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170968 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170968 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170968 );
				float lerpResult302_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170969 - temp_output_7_0_g170968 ) / ( temp_output_10_0_g170968 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170963 = lerpResult302_g170963;
				float temp_output_279_0_g170963 = ( Emissive_MeshMask221_g170963 * Emissive_Mask103_g170963 );
				float3 appendResult293_g170963 = (float3(temp_output_279_0_g170963 , temp_output_279_0_g170963 , temp_output_279_0_g170963));
				half3 Local_EmissiveColor278_g170963 = appendResult293_g170963;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170964 = Data204_g170494;
				float Out_Dummy15_g170964 = 0;
				float4 Out_CoatParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170964 = float4( 0,0,0,0 );
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_CoatParams15_g170964 = Data15_g170964.CoatParams;
				Out_PaintParams15_g170964 = Data15_g170964.PaintParams;
				Out_GlowParams15_g170964 = Data15_g170964.GlowParams;
				Out_AtmoParams15_g170964= Data15_g170964.AtmoParams;
				Out_FadeParams15_g170964= Data15_g170964.FadeParams;
				Out_FormParams15_g170964 = Data15_g170964.FormParams;
				Out_LandParams15_g170964 = Data15_g170964.LandParams;
				Out_WindParams15_g170964 = Data15_g170964.WindParams;
				Out_PushParams15_g170964 = Data15_g170964.PushParams;
				half4 Global_GlowParams179_g170963 = Out_GlowParams15_g170964;
				float3 lerpResult299_g170963 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170963).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170963 = lerpResult299_g170963;
				#else
				float3 staticSwitch228_g170963 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170963 = staticSwitch228_g170963;
				half3 Visual_AlbedoRaw306_g170963 = temp_output_297_23_g170963;
				float3 lerpResult307_g170963 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170963 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170963 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170963 * lerpResult307_g170963 );
				half3 Emissive_Blend260_g170963 = ( ( (Visual_Emissive255_g170963).xyz * Local_EmissiveColor278_g170963 ) * Local_EmissiveValue88_g170963 );
				float3 temp_output_3_0_g170977 = Emissive_Blend260_g170963;
				float temp_output_15_0_g170977 = _emissive_power_value;
				float3 temp_output_23_0_g170977 = ( temp_output_3_0_g170977 * temp_output_15_0_g170977 );
				half Local_EmissiveMask294_g170963 = temp_output_279_0_g170963;
				float4 appendResult295_g170963 = (float4(temp_output_23_0_g170977 , Local_EmissiveMask294_g170963));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170963 = appendResult295_g170963;
				#else
				float4 staticSwitch129_g170963 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170963 = staticSwitch129_g170963;
				float4 In_Emissive3_g170973 = Final_Emissive184_g170963;
				float In_Grayscale3_g170973 = Out_Grayscale4_g170972;
				float In_Luminosity3_g170973 = Out_Luminosity4_g170972;
				float temp_output_297_11_g170963 = Out_MultiMask4_g170972;
				float In_MultiMask3_g170973 = temp_output_297_11_g170963;
				float In_AlphaClip3_g170973 = Out_AlphaClip4_g170972;
				float In_AlphaFade3_g170973 = Out_AlphaFade4_g170972;
				float3 In_Translucency3_g170973 = Out_Translucency4_g170972;
				float In_Transmission3_g170973 = Out_Transmission4_g170972;
				float In_Thickness3_g170973 = Out_Thickness4_g170972;
				float In_Diffusion3_g170973 = Out_Diffusion4_g170972;
				Data3_g170973.Dummy = In_Dummy3_g170973;
				Data3_g170973.Albedo = In_Albedo3_g170973;
				Data3_g170973.AlbedoRaw = In_AlbedoRaw3_g170973;
				Data3_g170973.NormalTS = In_NormalTS3_g170973;
				Data3_g170973.NormalWS = In_NormalWS3_g170973;
				Data3_g170973.Shader = In_Shader3_g170973;
				Data3_g170973.Emissive= In_Emissive3_g170973;
				Data3_g170973.MultiMask = In_MultiMask3_g170973;
				Data3_g170973.Grayscale = In_Grayscale3_g170973;
				Data3_g170973.Luminosity = In_Luminosity3_g170973;
				Data3_g170973.AlphaClip = In_AlphaClip3_g170973;
				Data3_g170973.AlphaFade = In_AlphaFade3_g170973;
				Data3_g170973.Translucency = In_Translucency3_g170973;
				Data3_g170973.Transmission = In_Transmission3_g170973;
				Data3_g170973.Thickness = In_Thickness3_g170973;
				Data3_g170973.Diffusion = In_Diffusion3_g170973;
				TVEVisualData Data4_g170995 = Data3_g170973;
				float Out_Dummy4_g170995 = 0;
				float3 Out_Albedo4_g170995 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170995 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170995 = float2( 0,0 );
				float3 Out_NormalWS4_g170995 = float3( 0,0,0 );
				float4 Out_Shader4_g170995 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170995 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170995 = 0;
				float Out_Grayscale4_g170995 = 0;
				float Out_Luminosity4_g170995 = 0;
				float Out_AlphaClip4_g170995 = 0;
				float Out_AlphaFade4_g170995 = 0;
				float3 Out_Translucency4_g170995 = float3( 0,0,0 );
				float Out_Transmission4_g170995 = 0;
				float Out_Thickness4_g170995 = 0;
				float Out_Diffusion4_g170995 = 0;
				Out_Dummy4_g170995 = Data4_g170995.Dummy;
				Out_Albedo4_g170995 = Data4_g170995.Albedo;
				Out_AlbedoRaw4_g170995 = Data4_g170995.AlbedoRaw;
				Out_NormalTS4_g170995 = Data4_g170995.NormalTS;
				Out_NormalWS4_g170995 = Data4_g170995.NormalWS;
				Out_Shader4_g170995 = Data4_g170995.Shader;
				Out_Emissive4_g170995= Data4_g170995.Emissive;
				Out_MultiMask4_g170995 = Data4_g170995.MultiMask;
				Out_Grayscale4_g170995 = Data4_g170995.Grayscale;
				Out_Luminosity4_g170995= Data4_g170995.Luminosity;
				Out_AlphaClip4_g170995 = Data4_g170995.AlphaClip;
				Out_AlphaFade4_g170995 = Data4_g170995.AlphaFade;
				Out_Translucency4_g170995 = Data4_g170995.Translucency;
				Out_Transmission4_g170995 = Data4_g170995.Transmission;
				Out_Thickness4_g170995 = Data4_g170995.Thickness;
				Out_Diffusion4_g170995 = Data4_g170995.Diffusion;
				half3 Visual_Albedo199_g170994 = Out_Albedo4_g170995;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170994 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170994 );
				half Visual_Transmission138_g170994 = Out_Transmission4_g170995;
				half Subsurface_Value268_g170994 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170997 = Data204_g170494;
				float Out_Dummy15_g170997 = 0;
				float4 Out_CoatParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170997 = float4( 0,0,0,0 );
				Out_Dummy15_g170997 = Data15_g170997.Dummy;
				Out_CoatParams15_g170997 = Data15_g170997.CoatParams;
				Out_PaintParams15_g170997 = Data15_g170997.PaintParams;
				Out_GlowParams15_g170997 = Data15_g170997.GlowParams;
				Out_AtmoParams15_g170997= Data15_g170997.AtmoParams;
				Out_FadeParams15_g170997= Data15_g170997.FadeParams;
				Out_FormParams15_g170997 = Data15_g170997.FormParams;
				Out_LandParams15_g170997 = Data15_g170997.LandParams;
				Out_WindParams15_g170997 = Data15_g170997.WindParams;
				Out_PushParams15_g170997 = Data15_g170997.PushParams;
				half4 Global_GlowParams373_g170994 = Out_GlowParams15_g170997;
				float lerpResult403_g170994 = lerp( 1.0 , saturate( (Global_GlowParams373_g170994).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170994 = lerpResult403_g170994;
				#else
				float staticSwitch367_g170994 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170994 = staticSwitch367_g170994;
				float temp_output_301_11_g170994 = Out_MultiMask4_g170995;
				half Visual_MultiMask292_g170994 = temp_output_301_11_g170994;
				float lerpResult293_g170994 = lerp( 1.0 , Visual_MultiMask292_g170994 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170994 = lerpResult293_g170994;
				half Custom_Mask363_g170994 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170994 = ( Visual_Transmission138_g170994 * Subsurface_Value268_g170994 * Subsurface_GlobalMask369_g170994 * Subsurface_MultiMask296_g170994 * Custom_Mask363_g170994 );
				#else
				float staticSwitch345_g170994 = 0.0;
				#endif
				half Final_Transmission269_g170994 = staticSwitch345_g170994;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170994 = ( Subsurface_Color264_g170994 * Final_Transmission269_g170994 * 10.0 );
				#else
				float3 staticSwitch348_g170994 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170994 = staticSwitch348_g170994;
				TVEModelData Data15_g171000 = Data16_g170493;
				float Out_Dummy15_g171000 = 0;
				float3 Out_PositionWS15_g171000 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171000 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171000 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171000 = float3( 0,0,0 );
				float4 Out_VertexData15_g171000 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171000 = float4( 0,0,0,0 );
				Out_Dummy15_g171000 = Data15_g171000.Dummy;
				Out_PositionWS15_g171000 = Data15_g171000.PositionWS;
				Out_PositionWO15_g171000 = Data15_g171000.PositionWO;
				Out_PivotWS15_g171000 = Data15_g171000.PivotWS;
				Out_PivotWO15_g171000 = Data15_g171000.PivotWO;
				Out_NormalWS15_g171000 = Data15_g171000.NormalWS;
				Out_ViewDirWS15_g171000 = Data15_g171000.ViewDirWS;
				Out_VertexData15_g171000 = Data15_g171000.VertexData;
				Out_BoundsData15_g171000 = Data15_g171000.BoundsData;
				half3 Model_ViewDirWS392_g170994 = Out_ViewDirWS15_g171000;
				float dotResult324_g170994 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170994 );
				float saferPower323_g170994 = abs( saturate( dotResult324_g170994 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170994 = 0.0;
				#else
				float staticSwitch330_g170994 = ( pow( saferPower323_g170994 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170994 = staticSwitch330_g170994;
				float3 temp_output_6_0_g170998 = ( Final_Translucency254_g170994 * Mask_Subsurface_View320_g170994 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170998 = ( temp_output_6_0_g170998 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170998 = temp_output_6_0_g170998;
				#endif
				half3 Subsurface_Approximation333_g170994 = staticSwitch14_g170998;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170994 = ( Visual_Albedo199_g170994 + Subsurface_Approximation333_g170994 );
				#else
				float3 staticSwitch353_g170994 = Visual_Albedo199_g170994;
				#endif
				half3 Final_Albedo312_g170994 = staticSwitch353_g170994;
				float3 In_Albedo3_g170996 = Final_Albedo312_g170994;
				float3 In_AlbedoRaw3_g170996 = Out_AlbedoRaw4_g170995;
				float2 In_NormalTS3_g170996 = Out_NormalTS4_g170995;
				float3 In_NormalWS3_g170996 = Out_NormalWS4_g170995;
				float4 In_Shader3_g170996 = Out_Shader4_g170995;
				float4 In_Emissive3_g170996 = Out_Emissive4_g170995;
				float In_Grayscale3_g170996 = Out_Grayscale4_g170995;
				float In_Luminosity3_g170996 = Out_Luminosity4_g170995;
				float In_MultiMask3_g170996 = temp_output_301_11_g170994;
				float In_AlphaClip3_g170996 = Out_AlphaClip4_g170995;
				float In_AlphaFade3_g170996 = Out_AlphaFade4_g170995;
				float3 In_Translucency3_g170996 = Final_Translucency254_g170994;
				float In_Transmission3_g170996 = Final_Transmission269_g170994;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170994 = 0.0;
				#else
				float staticSwitch351_g170994 = 1.0;
				#endif
				half Final_Thickness275_g170994 = staticSwitch351_g170994;
				float In_Thickness3_g170996 = Final_Thickness275_g170994;
				float Final_Diffusion340_g170994 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170996 = Final_Diffusion340_g170994;
				Data3_g170996.Dummy = In_Dummy3_g170996;
				Data3_g170996.Albedo = In_Albedo3_g170996;
				Data3_g170996.AlbedoRaw = In_AlbedoRaw3_g170996;
				Data3_g170996.NormalTS = In_NormalTS3_g170996;
				Data3_g170996.NormalWS = In_NormalWS3_g170996;
				Data3_g170996.Shader = In_Shader3_g170996;
				Data3_g170996.Emissive= In_Emissive3_g170996;
				Data3_g170996.MultiMask = In_MultiMask3_g170996;
				Data3_g170996.Grayscale = In_Grayscale3_g170996;
				Data3_g170996.Luminosity = In_Luminosity3_g170996;
				Data3_g170996.AlphaClip = In_AlphaClip3_g170996;
				Data3_g170996.AlphaFade = In_AlphaFade3_g170996;
				Data3_g170996.Translucency = In_Translucency3_g170996;
				Data3_g170996.Transmission = In_Transmission3_g170996;
				Data3_g170996.Thickness = In_Thickness3_g170996;
				Data3_g170996.Diffusion = In_Diffusion3_g170996;
				TVEVisualData Data4_g171011 = Data3_g170996;
				float Out_Dummy4_g171011 = 0;
				float3 Out_Albedo4_g171011 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171011 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171011 = float2( 0,0 );
				float3 Out_NormalWS4_g171011 = float3( 0,0,0 );
				float4 Out_Shader4_g171011 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171011 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171011 = 0;
				float Out_Grayscale4_g171011 = 0;
				float Out_Luminosity4_g171011 = 0;
				float Out_AlphaClip4_g171011 = 0;
				float Out_AlphaFade4_g171011 = 0;
				float3 Out_Translucency4_g171011 = float3( 0,0,0 );
				float Out_Transmission4_g171011 = 0;
				float Out_Thickness4_g171011 = 0;
				float Out_Diffusion4_g171011 = 0;
				Out_Dummy4_g171011 = Data4_g171011.Dummy;
				Out_Albedo4_g171011 = Data4_g171011.Albedo;
				Out_AlbedoRaw4_g171011 = Data4_g171011.AlbedoRaw;
				Out_NormalTS4_g171011 = Data4_g171011.NormalTS;
				Out_NormalWS4_g171011 = Data4_g171011.NormalWS;
				Out_Shader4_g171011 = Data4_g171011.Shader;
				Out_Emissive4_g171011= Data4_g171011.Emissive;
				Out_MultiMask4_g171011 = Data4_g171011.MultiMask;
				Out_Grayscale4_g171011 = Data4_g171011.Grayscale;
				Out_Luminosity4_g171011= Data4_g171011.Luminosity;
				Out_AlphaClip4_g171011 = Data4_g171011.AlphaClip;
				Out_AlphaFade4_g171011 = Data4_g171011.AlphaFade;
				Out_Translucency4_g171011 = Data4_g171011.Translucency;
				Out_Transmission4_g171011 = Data4_g171011.Transmission;
				Out_Thickness4_g171011 = Data4_g171011.Thickness;
				Out_Diffusion4_g171011 = Data4_g171011.Diffusion;
				half3 Input_Albedo24_g171010 = Out_Albedo4_g171011;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g171010 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g171010 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g171010 = staticSwitch22_g171010;
				float4 break24_g171005 = Out_Shader4_g171011;
				half Metallic95_g171005 = break24_g171005.x;
				half Input_Metallic25_g171010 = Metallic95_g171005;
				half OneMinusReflectivity31_g171010 = ( (ColorSpaceDielectricSpec23_g171010).w - ( (ColorSpaceDielectricSpec23_g171010).w * Input_Metallic25_g171010 ) );
				
				float3 appendResult23_g171005 = (float3(Out_NormalTS4_g171011 , 1.0));
				float3 temp_output_13_0_g171009 = appendResult23_g171005;
				float3 temp_output_33_0_g171009 = ( temp_output_13_0_g171009 * _render_normal );
				float3 switchResult12_g171009 = (((ase_vface>0)?(temp_output_13_0_g171009):(temp_output_33_0_g171009)));
				
				half Smoothness105_g171005 = break24_g171005.w;
				half Input_Smoothness43_g171014 = Smoothness105_g171005;
				half Input_True57_g171016 = Input_Smoothness43_g171014;
				half True33_g171016 = Input_True57_g171016;
				half RenderSpec102_g171005 = _RenderSpecular;
				half Input_RenderSpec58_g171014 = RenderSpec102_g171005;
				float temp_output_46_0_g171014 = max( ( Input_Smoothness43_g171014 * Input_RenderSpec58_g171014 ) , 0.001 );
				float temp_output_6_0_g171015 = temp_output_46_0_g171014;
				#ifdef TVE_REGISTER
				float staticSwitch14_g171015 = ( temp_output_6_0_g171015 + ( _SpecColor.r * 0.0 ) );
				#else
				float staticSwitch14_g171015 = temp_output_6_0_g171015;
				#endif
				float temp_output_61_0_g171014 = staticSwitch14_g171015;
				half Input_False58_g171016 = temp_output_61_0_g171014;
				half False33_g171016 = Input_False58_g171016;
				half localShadowPassCheck33_g171016 = ShadowPassCheck33_g171016( True33_g171016 , False33_g171016 );
				
				half Input_True57_g171017 = 0.04;
				half True33_g171017 = Input_True57_g171017;
				half Input_False58_g171017 = temp_output_46_0_g171014;
				half False33_g171017 = Input_False58_g171017;
				half localShadowPassCheck33_g171017 = ShadowPassCheck33_g171017( True33_g171017 , False33_g171017 );
				
				float localCustomAlphaClip19_g171012 = ( 0.0 );
				float temp_output_3_0_g171012 = Out_AlphaClip4_g171011;
				float Alpha19_g171012 = temp_output_3_0_g171012;
				float temp_output_15_0_g171012 = 0.0;
				float Treshold19_g171012 = temp_output_15_0_g171012;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#else
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#endif
				
				o.Albedo = ( Input_Albedo24_g171010 * OneMinusReflectivity31_g171010 );
				o.Normal = switchResult12_g171009;
				o.Emission = (Out_Emissive4_g171011).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = localShadowPassCheck33_g171016;
					o.Gloss = localShadowPassCheck33_g171017;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = fixed3( 0, 0, 0 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = 1;
					o.Smoothness = 0;
				#endif

				o.Alpha = saturate( ( Alpha19_g171012 * Out_AlphaFade4_g171011 ) );
				float AlphaClipThreshold = 0.5;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;
				gi.light.color *= atten;

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard( o, worldViewDir, gi );
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma shader_feature EDITOR_VISUALIZATION
			#ifndef UNITY_PASS_META
				#define UNITY_PASS_META
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "UnityMetaPass.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
           //Nature Renderer (Instanced Indirect)
           #include "Assets/Visual Design Cafe/Nature Renderer/Shader Includes/Nature Renderer.templatex"
           #pragma instancing_options procedural:SetupNatureRenderer forwardadd
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float2 vizUV : TEXCOORD1;
					float4 lightCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindMode;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _MotionWindOffInfo;
			uniform half _MotionWindOptimizedInfo;
			uniform half _MotionWindAdvancedInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTexRT);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half _MotionIntensityValue;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBaseTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBaseNoiseValue;
			uniform half _global_wind_layer_value;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseDelayValue;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171003 = (TVEModelData)0;
				float In_Dummy16_g171003 = 0.0;
				TVEModelData Data16_g170980 = (TVEModelData)0;
				half Dummy1575_g170978 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170980 = Dummy1575_g170978;
				TVEModelData Data16_g170957 = (TVEModelData)0;
				float In_Dummy16_g170957 = 0.0;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				half Dummy181_g170707 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170721 = Dummy181_g170707;
				TVEModelData Data16_g170671 = (TVEModelData)0;
				half Dummy181_g170668 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170671 = Dummy181_g170668;
				TVEModelData Data16_g170583 = (TVEModelData)0;
				half Dummy181_g170580 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170583 = Dummy181_g170580;
				TVEModelData Data16_g170578 = (TVEModelData)0;
				float In_Dummy16_g170578 = 0.0;
				TVEModelData Data16_g170492 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170492 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170492 = PositionOS131_g170478;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_worldPos;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170492 = PositionWS122_g170478;
				float4x4 break19_g170480 = unity_ObjectToWorld;
				float3 appendResult20_g170480 = (float3(break19_g170480[ 0 ][ 3 ] , break19_g170480[ 1 ][ 3 ] , break19_g170480[ 2 ][ 3 ]));
				half3 ObjectData20_g170482 = appendResult20_g170480;
				half3 WorldData19_g170482 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170482 = WorldData19_g170482;
				#else
				float3 staticSwitch14_g170482 = ObjectData20_g170482;
				#endif
				float3 temp_output_124_0_g170480 = staticSwitch14_g170482;
				float3 temp_output_239_7_g170478 = temp_output_124_0_g170480;
				float4x4 break19_g170484 = unity_ObjectToWorld;
				float3 appendResult20_g170484 = (float3(break19_g170484[ 0 ][ 3 ] , break19_g170484[ 1 ][ 3 ] , break19_g170484[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170488 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170488;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170484 = PivotOS149_g170478;
				float3 PivotsOnly105_g170484 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170484 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170486 = ( appendResult20_g170484 + PivotsOnly105_g170484 );
				half3 WorldData19_g170486 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170486 = WorldData19_g170486;
				#else
				float3 staticSwitch14_g170486 = ObjectData20_g170486;
				#endif
				float3 temp_output_124_0_g170484 = staticSwitch14_g170486;
				float3 temp_output_237_7_g170478 = temp_output_124_0_g170484;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170492 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170492 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170492 = float3( 0,0,0 );
				float3 In_PivotOS16_g170492 = PivotOS149_g170478;
				float3 In_PivotWS16_g170492 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170492 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170492 = NormalOS134_g170478;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170492 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170492 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170492 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170492 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170492 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170492 = VertexMasks171_g170478;
				float4 break33_g170491 = _object_phase_mode;
				float temp_output_30_0_g170491 = ( v.ase_color.r * break33_g170491.x );
				float temp_output_29_0_g170491 = ( v.ase_color.g * break33_g170491.y );
				float temp_output_31_0_g170491 = ( v.ase_color.b * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( v.ase_color.a * break33_g170491.w ) );
				float3 break243_g170478 = PivotWO133_g170478;
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170491 + ( break243_g170478.x + break243_g170478.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(1.0 , 1.0 , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_MotionData16_g170492 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170492 = BoundsData254_g170478;
				float4 In_RotationData16_g170492 = float4( 0,0,0,0 );
				Data16_g170492.Dummy = In_Dummy16_g170492;
				Data16_g170492.PositionOS = In_PositionOS16_g170492;
				Data16_g170492.PositionWS = In_PositionWS16_g170492;
				Data16_g170492.PositionWO = In_PositionWO16_g170492;
				Data16_g170492.PositionRawOS = In_PositionRawOS16_g170492;
				Data16_g170492.PositionAddOS = In_PositionAddOS16_g170492;
				Data16_g170492.PivotOS = In_PivotOS16_g170492;
				Data16_g170492.PivotWS = In_PivotWS16_g170492;
				Data16_g170492.PivotWO = In_PivotWO16_g170492;
				Data16_g170492.NormalOS = In_NormalOS16_g170492;
				Data16_g170492.NormalWS = In_NormalWS16_g170492;
				Data16_g170492.NormalRawOS = In_NormalRawOS16_g170492;
				Data16_g170492.NormalRawWS = In_NormalRawWS16_g170492;
				Data16_g170492.TangentOS = In_TangentOS16_g170492;
				Data16_g170492.ViewDirWS = In_ViewDirWS16_g170492;
				Data16_g170492.VertexData = In_VertexData16_g170492;
				Data16_g170492.MotionData = In_MotionData16_g170492;
				Data16_g170492.BoundsData = In_BoundsData16_g170492;
				Data16_g170492.RotationData = In_RotationData16_g170492;
				TVEModelData Data15_g170579 = Data16_g170492;
				float Out_Dummy15_g170579 = 0;
				float3 Out_PositionOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170579 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170579 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170579 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170579 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170579 = float3( 0,0,0 );
				float4 Out_VertexData15_g170579 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170579 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170579 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170579 = float4( 0,0,0,0 );
				Out_Dummy15_g170579 = Data15_g170579.Dummy;
				Out_PositionOS15_g170579 = Data15_g170579.PositionOS;
				Out_PositionWS15_g170579 = Data15_g170579.PositionWS;
				Out_PositionWO15_g170579 = Data15_g170579.PositionWO;
				Out_PositionRawOS15_g170579 = Data15_g170579.PositionRawOS;
				Out_PositionAddOS15_g170579 = Data15_g170579.PositionAddOS;
				Out_PivotOS15_g170579 = Data15_g170579.PivotOS;
				Out_PivotWS15_g170579 = Data15_g170579.PivotWS;
				Out_PivotWO15_g170579 = Data15_g170579.PivotWO;
				Out_NormalOS15_g170579 = Data15_g170579.NormalOS;
				Out_NormalWS15_g170579 = Data15_g170579.NormalWS;
				Out_NormalRawOS15_g170579 = Data15_g170579.NormalRawOS;
				Out_NormalRawWS15_g170579 = Data15_g170579.NormalRawWS;
				Out_TangentOS15_g170579 = Data15_g170579.TangentOS;
				Out_ViewDirWS15_g170579 = Data15_g170579.ViewDirWS;
				Out_VertexData15_g170579 = Data15_g170579.VertexData;
				Out_MotionData15_g170579 = Data15_g170579.MotionData;
				Out_BoundsData15_g170579 = Data15_g170579.BoundsData;
				Out_RotationData15_g170579 = Data15_g170579.RotationData;
				float3 temp_output_218_24_g170577 = Out_PivotOS15_g170579;
				float3 In_PositionOS16_g170578 = ( Out_PositionOS15_g170579 - temp_output_218_24_g170577 );
				float3 In_PositionWS16_g170578 = Out_PositionWS15_g170579;
				float3 In_PositionWO16_g170578 = Out_PositionWO15_g170579;
				float3 In_PositionRawOS16_g170578 = Out_PositionRawOS15_g170579;
				float3 In_PositionAddOS16_g170578 = Out_PositionAddOS15_g170579;
				float3 In_PivotOS16_g170578 = temp_output_218_24_g170577;
				float3 In_PivotWS16_g170578 = Out_PivotWS15_g170579;
				float3 In_PivotWO16_g170578 = Out_PivotWO15_g170579;
				float3 In_NormalOS16_g170578 = Out_NormalOS15_g170579;
				float3 In_NormalWS16_g170578 = Out_NormalWS15_g170579;
				float3 In_NormalRawOS16_g170578 = Out_NormalRawOS15_g170579;
				float3 In_NormalRawWS16_g170578 = Out_NormalRawWS15_g170579;
				float4 In_TangentOS16_g170578 = Out_TangentOS15_g170579;
				float3 In_ViewDirWS16_g170578 = Out_ViewDirWS15_g170579;
				float4 In_VertexData16_g170578 = Out_VertexData15_g170579;
				float4 In_MotionData16_g170578 = Out_MotionData15_g170579;
				float4 In_BoundsData16_g170578 = Out_BoundsData15_g170579;
				float4 In_RotationData16_g170578 = Out_RotationData15_g170579;
				Data16_g170578.Dummy = In_Dummy16_g170578;
				Data16_g170578.PositionOS = In_PositionOS16_g170578;
				Data16_g170578.PositionWS = In_PositionWS16_g170578;
				Data16_g170578.PositionWO = In_PositionWO16_g170578;
				Data16_g170578.PositionRawOS = In_PositionRawOS16_g170578;
				Data16_g170578.PositionAddOS = In_PositionAddOS16_g170578;
				Data16_g170578.PivotOS = In_PivotOS16_g170578;
				Data16_g170578.PivotWS = In_PivotWS16_g170578;
				Data16_g170578.PivotWO = In_PivotWO16_g170578;
				Data16_g170578.NormalOS = In_NormalOS16_g170578;
				Data16_g170578.NormalWS = In_NormalWS16_g170578;
				Data16_g170578.NormalRawOS = In_NormalRawOS16_g170578;
				Data16_g170578.NormalRawWS = In_NormalRawWS16_g170578;
				Data16_g170578.TangentOS = In_TangentOS16_g170578;
				Data16_g170578.ViewDirWS = In_ViewDirWS16_g170578;
				Data16_g170578.VertexData = In_VertexData16_g170578;
				Data16_g170578.MotionData = In_MotionData16_g170578;
				Data16_g170578.BoundsData = In_BoundsData16_g170578;
				Data16_g170578.RotationData = In_RotationData16_g170578;
				TVEModelData Data15_g170581 = Data16_g170578;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_MotionData15_g170581 = Data15_g170581.MotionData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				half3 Model_PositionOS147_g170580 = Out_PositionOS15_g170581;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170582 = unity_CameraToWorld;
				float3 appendResult118_g170582 = (float3(break117_g170582[ 0 ][ 2 ] , break117_g170582[ 1 ][ 2 ] , break117_g170582[ 2 ][ 2 ]));
				float3 lerpResult209_g170580 = lerp( ase_worldViewDir , -appendResult118_g170582 , unity_OrthoParams.w);
				float3 break201_g170580 = cross( lerpResult209_g170580 , half3(0,1,0) );
				float3 appendResult196_g170580 = (float3(-break201_g170580.z , 0.0 , break201_g170580.x));
				float dotResult189_g170580 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170580 = abs( dotResult189_g170580 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170580 = ( Model_PositionOS147_g170580 + ( mul( unity_WorldToObject, float4( appendResult196_g170580 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170580 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170580).y ) ) );
				#else
				float3 staticSwitch211_g170580 = Model_PositionOS147_g170580;
				#endif
				half3 Final_Position178_g170580 = staticSwitch211_g170580;
				float3 In_PositionOS16_g170583 = Final_Position178_g170580;
				float3 In_PositionWS16_g170583 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170583 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170583 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170583 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170583 = Out_PivotOS15_g170581;
				float3 In_PivotWS16_g170583 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170583 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170583 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170583 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170583 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170583 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170583 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170583 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170583 = Out_VertexData15_g170581;
				float4 In_MotionData16_g170583 = Out_MotionData15_g170581;
				float4 In_BoundsData16_g170583 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170583 = Out_RotationData15_g170581;
				Data16_g170583.Dummy = In_Dummy16_g170583;
				Data16_g170583.PositionOS = In_PositionOS16_g170583;
				Data16_g170583.PositionWS = In_PositionWS16_g170583;
				Data16_g170583.PositionWO = In_PositionWO16_g170583;
				Data16_g170583.PositionRawOS = In_PositionRawOS16_g170583;
				Data16_g170583.PositionAddOS = In_PositionAddOS16_g170583;
				Data16_g170583.PivotOS = In_PivotOS16_g170583;
				Data16_g170583.PivotWS = In_PivotWS16_g170583;
				Data16_g170583.PivotWO = In_PivotWO16_g170583;
				Data16_g170583.NormalOS = In_NormalOS16_g170583;
				Data16_g170583.NormalWS = In_NormalWS16_g170583;
				Data16_g170583.NormalRawOS = In_NormalRawOS16_g170583;
				Data16_g170583.NormalRawWS = In_NormalRawWS16_g170583;
				Data16_g170583.TangentOS = In_TangentOS16_g170583;
				Data16_g170583.ViewDirWS = In_ViewDirWS16_g170583;
				Data16_g170583.VertexData = In_VertexData16_g170583;
				Data16_g170583.MotionData = In_MotionData16_g170583;
				Data16_g170583.BoundsData = In_BoundsData16_g170583;
				Data16_g170583.RotationData = In_RotationData16_g170583;
				TVEModelData Data15_g170670 = Data16_g170583;
				float Out_Dummy15_g170670 = 0;
				float3 Out_PositionOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170670 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170670 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170670 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170670 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170670 = float3( 0,0,0 );
				float4 Out_VertexData15_g170670 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170670 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170670 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170670 = float4( 0,0,0,0 );
				Out_Dummy15_g170670 = Data15_g170670.Dummy;
				Out_PositionOS15_g170670 = Data15_g170670.PositionOS;
				Out_PositionWS15_g170670 = Data15_g170670.PositionWS;
				Out_PositionWO15_g170670 = Data15_g170670.PositionWO;
				Out_PositionRawOS15_g170670 = Data15_g170670.PositionRawOS;
				Out_PositionAddOS15_g170670 = Data15_g170670.PositionAddOS;
				Out_PivotOS15_g170670 = Data15_g170670.PivotOS;
				Out_PivotWS15_g170670 = Data15_g170670.PivotWS;
				Out_PivotWO15_g170670 = Data15_g170670.PivotWO;
				Out_NormalOS15_g170670 = Data15_g170670.NormalOS;
				Out_NormalWS15_g170670 = Data15_g170670.NormalWS;
				Out_NormalRawOS15_g170670 = Data15_g170670.NormalRawOS;
				Out_NormalRawWS15_g170670 = Data15_g170670.NormalRawWS;
				Out_TangentOS15_g170670 = Data15_g170670.TangentOS;
				Out_ViewDirWS15_g170670 = Data15_g170670.ViewDirWS;
				Out_VertexData15_g170670 = Data15_g170670.VertexData;
				Out_MotionData15_g170670 = Data15_g170670.MotionData;
				Out_BoundsData15_g170670 = Data15_g170670.BoundsData;
				Out_RotationData15_g170670 = Data15_g170670.RotationData;
				half3 Model_PositionOS147_g170668 = Out_PositionOS15_g170670;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170668 = Out_PivotWO15_g170670;
				half3 Model_PivotWO162_g170668 = temp_output_210_19_g170668;
				float temp_output_7_0_g170669 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170669 = ( _SizeFadeDistMinValue - temp_output_7_0_g170669 );
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170672 = Data204_g170494;
				float Out_Dummy15_g170672 = 0;
				float4 Out_CoatParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170672 = float4( 0,0,0,0 );
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_CoatParams15_g170672 = Data15_g170672.CoatParams;
				Out_PaintParams15_g170672 = Data15_g170672.PaintParams;
				Out_GlowParams15_g170672 = Data15_g170672.GlowParams;
				Out_AtmoParams15_g170672= Data15_g170672.AtmoParams;
				Out_FadeParams15_g170672= Data15_g170672.FadeParams;
				Out_FormParams15_g170672 = Data15_g170672.FormParams;
				Out_LandParams15_g170672 = Data15_g170672.LandParams;
				Out_WindParams15_g170672 = Data15_g170672.WindParams;
				Out_PushParams15_g170672 = Data15_g170672.PushParams;
				half4 Input_FormParams188_g170668 = Out_FormParams15_g170672;
				float lerpResult213_g170668 = lerp( 1.0 , (Input_FormParams188_g170668).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170668 = lerpResult213_g170668;
				#else
				float staticSwitch194_g170668 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170668 = staticSwitch194_g170668;
				float temp_output_189_0_g170668 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170668 ) - temp_output_7_0_g170669 ) / ( temp_output_10_0_g170669 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170668 );
				float3 appendResult200_g170668 = (float3(temp_output_189_0_g170668 , temp_output_189_0_g170668 , temp_output_189_0_g170668));
				float3 appendResult201_g170668 = (float3(1.0 , temp_output_189_0_g170668 , 1.0));
				float3 lerpResult202_g170668 = lerp( appendResult200_g170668 , appendResult201_g170668 , _SizeFadeScaleMode);
				float3 lerpResult184_g170668 = lerp( temp_cast_5 , lerpResult202_g170668 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170668 = ( lerpResult184_g170668 * Model_PositionOS147_g170668 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170668 = temp_output_167_0_g170668;
				#else
				float3 staticSwitch199_g170668 = Model_PositionOS147_g170668;
				#endif
				half3 Final_Position178_g170668 = staticSwitch199_g170668;
				float3 In_PositionOS16_g170671 = Final_Position178_g170668;
				float3 In_PositionWS16_g170671 = Out_PositionWS15_g170670;
				float3 In_PositionWO16_g170671 = Out_PositionWO15_g170670;
				float3 In_PositionRawOS16_g170671 = Out_PositionRawOS15_g170670;
				float3 In_PositionAddOS16_g170671 = Out_PositionAddOS15_g170670;
				float3 temp_output_210_24_g170668 = Out_PivotOS15_g170670;
				float3 In_PivotOS16_g170671 = temp_output_210_24_g170668;
				float3 In_PivotWS16_g170671 = Out_PivotWS15_g170670;
				float3 In_PivotWO16_g170671 = temp_output_210_19_g170668;
				float3 In_NormalOS16_g170671 = Out_NormalOS15_g170670;
				float3 In_NormalWS16_g170671 = Out_NormalWS15_g170670;
				float3 In_NormalRawOS16_g170671 = Out_NormalRawOS15_g170670;
				float3 In_NormalRawWS16_g170671 = Out_NormalRawWS15_g170670;
				float4 In_TangentOS16_g170671 = Out_TangentOS15_g170670;
				float3 In_ViewDirWS16_g170671 = Out_ViewDirWS15_g170670;
				float4 In_VertexData16_g170671 = Out_VertexData15_g170670;
				float4 In_MotionData16_g170671 = Out_MotionData15_g170670;
				float4 In_BoundsData16_g170671 = Out_BoundsData15_g170670;
				float4 In_RotationData16_g170671 = Out_RotationData15_g170670;
				Data16_g170671.Dummy = In_Dummy16_g170671;
				Data16_g170671.PositionOS = In_PositionOS16_g170671;
				Data16_g170671.PositionWS = In_PositionWS16_g170671;
				Data16_g170671.PositionWO = In_PositionWO16_g170671;
				Data16_g170671.PositionRawOS = In_PositionRawOS16_g170671;
				Data16_g170671.PositionAddOS = In_PositionAddOS16_g170671;
				Data16_g170671.PivotOS = In_PivotOS16_g170671;
				Data16_g170671.PivotWS = In_PivotWS16_g170671;
				Data16_g170671.PivotWO = In_PivotWO16_g170671;
				Data16_g170671.NormalOS = In_NormalOS16_g170671;
				Data16_g170671.NormalWS = In_NormalWS16_g170671;
				Data16_g170671.NormalRawOS = In_NormalRawOS16_g170671;
				Data16_g170671.NormalRawWS = In_NormalRawWS16_g170671;
				Data16_g170671.TangentOS = In_TangentOS16_g170671;
				Data16_g170671.ViewDirWS = In_ViewDirWS16_g170671;
				Data16_g170671.VertexData = In_VertexData16_g170671;
				Data16_g170671.MotionData = In_MotionData16_g170671;
				Data16_g170671.BoundsData = In_BoundsData16_g170671;
				Data16_g170671.RotationData = In_RotationData16_g170671;
				TVEModelData Data15_g170717 = Data16_g170671;
				float Out_Dummy15_g170717 = 0;
				float3 Out_PositionOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170717 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170717 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170717 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170717 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170717 = float3( 0,0,0 );
				float4 Out_VertexData15_g170717 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170717 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170717 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170717 = float4( 0,0,0,0 );
				Out_Dummy15_g170717 = Data15_g170717.Dummy;
				Out_PositionOS15_g170717 = Data15_g170717.PositionOS;
				Out_PositionWS15_g170717 = Data15_g170717.PositionWS;
				Out_PositionWO15_g170717 = Data15_g170717.PositionWO;
				Out_PositionRawOS15_g170717 = Data15_g170717.PositionRawOS;
				Out_PositionAddOS15_g170717 = Data15_g170717.PositionAddOS;
				Out_PivotOS15_g170717 = Data15_g170717.PivotOS;
				Out_PivotWS15_g170717 = Data15_g170717.PivotWS;
				Out_PivotWO15_g170717 = Data15_g170717.PivotWO;
				Out_NormalOS15_g170717 = Data15_g170717.NormalOS;
				Out_NormalWS15_g170717 = Data15_g170717.NormalWS;
				Out_NormalRawOS15_g170717 = Data15_g170717.NormalRawOS;
				Out_NormalRawWS15_g170717 = Data15_g170717.NormalRawWS;
				Out_TangentOS15_g170717 = Data15_g170717.TangentOS;
				Out_ViewDirWS15_g170717 = Data15_g170717.ViewDirWS;
				Out_VertexData15_g170717 = Data15_g170717.VertexData;
				Out_MotionData15_g170717 = Data15_g170717.MotionData;
				Out_BoundsData15_g170717 = Data15_g170717.BoundsData;
				Out_RotationData15_g170717 = Data15_g170717.RotationData;
				float3 temp_output_1567_0_g170707 = Out_PositionOS15_g170717;
				float3 In_PositionOS16_g170721 = temp_output_1567_0_g170707;
				float3 temp_output_1567_16_g170707 = Out_PositionWS15_g170717;
				float3 In_PositionWS16_g170721 = temp_output_1567_16_g170707;
				float3 temp_output_1567_17_g170707 = Out_PositionWO15_g170717;
				float3 In_PositionWO16_g170721 = temp_output_1567_17_g170707;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170717;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170707 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170707 = Out_VertexData15_g170717;
				half4 Model_VertexMasks518_g170707 = temp_output_1567_29_g170707;
				float4 break1689_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170719 = _motion_small_vert_mode;
				float temp_output_30_0_g170719 = ( break1689_g170707.x * break33_g170719.x );
				float temp_output_29_0_g170719 = ( break1689_g170707.y * break33_g170719.y );
				float temp_output_31_0_g170719 = ( break1689_g170707.z * break33_g170719.z );
				float temp_output_28_0_g170719 = ( temp_output_30_0_g170719 + temp_output_29_0_g170719 + temp_output_31_0_g170719 + ( break1689_g170707.w * break33_g170719.w ) );
				float temp_output_1727_0_g170707 = temp_output_28_0_g170719;
				float4 temp_output_1567_30_g170707 = Out_BoundsData15_g170717;
				half4 Model_BoundsData1322_g170707 = temp_output_1567_30_g170707;
				float4 break33_g170722 = _motion_small_proc_mode;
				float temp_output_30_0_g170722 = ( (Model_BoundsData1322_g170707).z * break33_g170722.x );
				float temp_output_29_0_g170722 = ( (Model_BoundsData1322_g170707).w * break33_g170722.y );
				float temp_output_1734_0_g170707 = ( temp_output_30_0_g170722 + temp_output_29_0_g170722 );
				float lerpResult1906_g170707 = lerp( temp_output_1727_0_g170707 , temp_output_1734_0_g170707 , _motion_small_mask_mode);
				float enc1805_g170707 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170707 = DecodeFloatToVector2( enc1805_g170707 );
				float2 break1804_g170707 = localDecodeFloatToVector21805_g170707;
				half Small_Mask_Legacy1806_g170707 = break1804_g170707.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170707 = Small_Mask_Legacy1806_g170707;
				#else
				float staticSwitch1800_g170707 = lerpResult1906_g170707;
				#endif
				float clampResult17_g170724 = clamp( staticSwitch1800_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170725 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170725 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170725 );
				float temp_output_6_0_g170743 = saturate( ( ( clampResult17_g170724 - temp_output_7_0_g170725 ) / ( temp_output_10_0_g170725 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170743 = ( temp_output_6_0_g170743 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				half Small_Mask640_g170707 = staticSwitch14_g170743;
				half3 Model_PositionOS147_g170707 = temp_output_1567_0_g170707;
				float3 normalizeResult1832_g170707 = normalize( Model_PositionOS147_g170707 );
				half3 Model_PositionWO162_g170707 = temp_output_1567_17_g170707;
				float3 temp_output_1567_19_g170707 = Out_PivotWO15_g170717;
				half3 Model_PivotWO402_g170707 = temp_output_1567_19_g170707;
				float3 lerpResult829_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170707 = Out_MotionData15_g170717;
				half4 Model_MotionMasks489_g170707 = temp_output_1567_27_g170707;
				half3 Base_Position1394_g170707 = ( lerpResult829_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170750 = Base_Position1394_g170707;
				half Flow_TilllingRT1397_g170707 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170750 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTillingRT670_g170750 * 0.005 );
				half4 Noise_ParamsRT535_g170750 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170750, 0.0 );
				half Flow_Value1855_g170707 = _MotionIntensityValue;
				half Input_MotionValue629_g170750 = Flow_Value1855_g170707;
				float2 lerpResult709_g170750 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult712_g170750 = (float3(lerpResult709_g170750 , ( (Noise_ParamsRT535_g170750).b * Input_MotionValue629_g170750 )));
				float4 lerpResult627_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170750 = (lerpResult627_g170750).xy;
				half Input_MotionTilling321_g170750 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTilling321_g170750 * 0.005 );
				float2 temp_output_3_0_g170751 = Noise_Coord515_g170750;
				float2 temp_output_21_0_g170751 = (Global_WindDirection593_g170750*2.0 + -1.0);
				float lerpResult128_g170756 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170750 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170750 = ( ( lerpResult128_g170756 * Input_MotionSpeed62_g170750 ) * 0.02 );
				float temp_output_15_0_g170751 = Noise_Speed516_g170750;
				float temp_output_23_0_g170751 = frac( temp_output_15_0_g170751 );
				float4 lerpResult39_g170751 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * temp_output_23_0_g170751 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * frac( ( temp_output_15_0_g170751 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170751 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170750 = lerpResult39_g170751;
				half Input_MotionNoise552_g170750 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170750 = (lerpResult627_g170750).z;
				half Motion_Intensity720_g170750 = ( Global_WindIntensity576_g170750 * Input_MotionValue629_g170750 );
				float lerpResult701_g170750 = lerp( 1.0 , Input_MotionNoise552_g170750 , Motion_Intensity720_g170750);
				float2 lerpResult646_g170750 = lerp( Global_WindDirection593_g170750 , (Noise_Params685_g170750).rg , lerpResult701_g170750);
				float2 lerpResult724_g170750 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170750 , Motion_Intensity720_g170750);
				float3 appendResult708_g170750 = (float3(lerpResult724_g170750 , ( (Noise_Params685_g170750).a * Motion_Intensity720_g170750 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170750 = appendResult712_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170750 = appendResult708_g170750;
				#else
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170750 = staticSwitch673_g170750;
				float temp_output_136_0_g170757 = _global_wind_layer_value;
				float temp_output_19_0_g170759 = TVE_WindLayers[(int)temp_output_136_0_g170757];
				half3 Input_Position180_g170760 = Input_PositionWO419_g170750;
				float2 temp_output_75_0_g170760 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_82_0_g170760 = temp_output_136_0_g170757;
				float2 temp_output_119_0_g170760 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_7_0_g170765 = 1.0;
				float temp_output_10_0_g170765 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170765 );
				float4 lerpResult131_g170760 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170760,temp_output_82_0_g170760), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170760,temp_output_82_0_g170760), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170760 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170765 ) / temp_output_10_0_g170765 ) ));
				float4 temp_output_17_0_g170759 = lerpResult131_g170760;
				float4 temp_output_3_0_g170759 = TVE_WindParams;
				float4 ifLocalVar18_g170759 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170759 >= 0.5 )
				ifLocalVar18_g170759 = temp_output_17_0_g170759;
				else
				ifLocalVar18_g170759 = temp_output_3_0_g170759;
				float4 lerpResult22_g170759 = lerp( temp_output_3_0_g170759 , temp_output_17_0_g170759 , temp_output_19_0_g170759);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170759 = lerpResult22_g170759;
				#else
				float4 staticSwitch24_g170759 = ifLocalVar18_g170759;
				#endif
				float4 temp_output_610_0_g170750 = staticSwitch24_g170759;
				float2 lerpResult699_g170750 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult643_g170750 = (float3(lerpResult699_g170750 , ( (temp_output_610_0_g170750).b * Input_MotionValue629_g170750 )));
				float3 lerpResult623_g170750 = lerp( Motion_Local694_g170750 , appendResult643_g170750 , (temp_output_610_0_g170750).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#else
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170750 = staticSwitch693_g170750;
				#else
				float3 staticSwitch612_g170750 = Motion_Local694_g170750;
				#endif
				float3 temp_output_2275_567_g170707 = staticSwitch612_g170750;
				float2 break83_g170739 = ((temp_output_2275_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170739 = (float3(break83_g170739.x , 0.0 , break83_g170739.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170739 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170707 = ( lerpResult1411_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170767 = Small_Position1421_g170707;
				half Input_MotionTillingRT670_g170767 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTillingRT670_g170767 * 0.005 );
				half4 Noise_ParamsRT535_g170767 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170767, 0.0 );
				half Input_MotionValue629_g170767 = Flow_Value1855_g170707;
				float2 lerpResult709_g170767 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult712_g170767 = (float3(lerpResult709_g170767 , ( (Noise_ParamsRT535_g170767).b * Input_MotionValue629_g170767 )));
				float4 lerpResult627_g170767 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170767 = (lerpResult627_g170767).xy;
				half Input_MotionTilling321_g170767 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTilling321_g170767 * 0.005 );
				float2 temp_output_3_0_g170768 = Noise_Coord515_g170767;
				float2 temp_output_21_0_g170768 = (Global_WindDirection593_g170767*2.0 + -1.0);
				float lerpResult128_g170773 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170767 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170767 = ( ( lerpResult128_g170773 * Input_MotionSpeed62_g170767 ) * 0.02 );
				float temp_output_15_0_g170768 = Noise_Speed516_g170767;
				float temp_output_23_0_g170768 = frac( temp_output_15_0_g170768 );
				float4 lerpResult39_g170768 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * temp_output_23_0_g170768 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * frac( ( temp_output_15_0_g170768 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170768 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170767 = lerpResult39_g170768;
				half Input_MotionNoise552_g170767 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170767 = (lerpResult627_g170767).z;
				half Motion_Intensity720_g170767 = ( Global_WindIntensity576_g170767 * Input_MotionValue629_g170767 );
				float lerpResult701_g170767 = lerp( 1.0 , Input_MotionNoise552_g170767 , Motion_Intensity720_g170767);
				float2 lerpResult646_g170767 = lerp( Global_WindDirection593_g170767 , (Noise_Params685_g170767).rg , lerpResult701_g170767);
				float2 lerpResult724_g170767 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170767 , Motion_Intensity720_g170767);
				float3 appendResult708_g170767 = (float3(lerpResult724_g170767 , ( (Noise_Params685_g170767).a * Motion_Intensity720_g170767 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170767 = appendResult712_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170767 = appendResult708_g170767;
				#else
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170767 = staticSwitch673_g170767;
				float temp_output_136_0_g170774 = _global_wind_layer_value;
				float temp_output_19_0_g170776 = TVE_WindLayers[(int)temp_output_136_0_g170774];
				half3 Input_Position180_g170777 = Input_PositionWO419_g170767;
				float2 temp_output_75_0_g170777 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_82_0_g170777 = temp_output_136_0_g170774;
				float2 temp_output_119_0_g170777 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_7_0_g170782 = 1.0;
				float temp_output_10_0_g170782 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170782 );
				float4 lerpResult131_g170777 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170777,temp_output_82_0_g170777), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170777,temp_output_82_0_g170777), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170777 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170782 ) / temp_output_10_0_g170782 ) ));
				float4 temp_output_17_0_g170776 = lerpResult131_g170777;
				float4 temp_output_3_0_g170776 = TVE_WindParams;
				float4 ifLocalVar18_g170776 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170776 >= 0.5 )
				ifLocalVar18_g170776 = temp_output_17_0_g170776;
				else
				ifLocalVar18_g170776 = temp_output_3_0_g170776;
				float4 lerpResult22_g170776 = lerp( temp_output_3_0_g170776 , temp_output_17_0_g170776 , temp_output_19_0_g170776);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170776 = lerpResult22_g170776;
				#else
				float4 staticSwitch24_g170776 = ifLocalVar18_g170776;
				#endif
				float4 temp_output_610_0_g170767 = staticSwitch24_g170776;
				float2 lerpResult699_g170767 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult643_g170767 = (float3(lerpResult699_g170767 , ( (temp_output_610_0_g170767).b * Input_MotionValue629_g170767 )));
				float3 lerpResult623_g170767 = lerp( Motion_Local694_g170767 , appendResult643_g170767 , (temp_output_610_0_g170767).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#else
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170767 = staticSwitch693_g170767;
				#else
				float3 staticSwitch612_g170767 = Motion_Local694_g170767;
				#endif
				float3 temp_output_2276_567_g170707 = staticSwitch612_g170767;
				float2 break83_g170738 = ((temp_output_2276_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170738 = (float3(break83_g170738.x , 0.0 , break83_g170738.y));
				half2 Small_Direction1489_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170738 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170707 = Small_Direction1489_g170707;
				#else
				float2 staticSwitch1485_g170707 = Base_Direction893_g170707;
				#endif
				half2 Wave_Direction1486_g170707 = staticSwitch1485_g170707;
				float2 break1828_g170707 = -Wave_Direction1486_g170707;
				float3 appendResult1830_g170707 = (float3(break1828_g170707.x , 0.0 , break1828_g170707.y));
				float dotResult1831_g170707 = dot( normalizeResult1832_g170707 , appendResult1830_g170707 );
				float lerpResult1826_g170707 = lerp( 1.0 , (dotResult1831_g170707*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170707 = lerpResult1826_g170707;
				float2 break1939_g170707 = Small_Direction1489_g170707;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170767 = Input_MotionSpeed62_g170767;
				#else
				float staticSwitch734_g170767 = 4.0;
				#endif
				float mulTime113_g170783 = _Time.y * staticSwitch734_g170767;
				float lerpResult128_g170783 = lerp( mulTime113_g170783 , ( ( mulTime113_g170783 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170767 = Input_PositionWO419_g170767;
				half Small_Vertical2215_g170707 = ( sin( ( lerpResult128_g170783 + ( ( break726_g170767.x + break726_g170767.y + break726_g170767.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170707 = length( Small_Direction1489_g170707 );
				float3 appendResult2056_g170707 = (float3(break1939_g170707.x , ( Small_Vertical2215_g170707 * Small_Intensity2047_g170707 ) , break1939_g170707.y));
				float lerpResult2098_g170707 = lerp( 1.0 , ( Small_Intensity2047_g170707 * Small_Intensity2047_g170707 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170707 = (float3(lerpResult2098_g170707 , 1.0 , lerpResult2098_g170707));
				half3 Small_Squash789_g170707 = ( Small_Value2180_g170707 * Small_Mask640_g170707 * Motion_FrontMask1142_g170707 * appendResult2056_g170707 * appendResult2101_g170707 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170707 = Small_Squash789_g170707;
				#else
				float3 staticSwitch495_g170707 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170720 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170720 = ( break1710_g170707.x * break33_g170720.x );
				float temp_output_29_0_g170720 = ( break1710_g170707.y * break33_g170720.y );
				float temp_output_31_0_g170720 = ( break1710_g170707.z * break33_g170720.z );
				float temp_output_28_0_g170720 = ( temp_output_30_0_g170720 + temp_output_29_0_g170720 + temp_output_31_0_g170720 + ( break1710_g170707.w * break33_g170720.w ) );
				float temp_output_1729_0_g170707 = temp_output_28_0_g170720;
				float4 break33_g170723 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170723 = ( (Model_BoundsData1322_g170707).z * break33_g170723.x );
				float temp_output_29_0_g170723 = ( (Model_BoundsData1322_g170707).w * break33_g170723.y );
				float temp_output_1735_0_g170707 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 );
				float lerpResult1908_g170707 = lerp( temp_output_1729_0_g170707 , temp_output_1735_0_g170707 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170707 = break1804_g170707.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170707 = Tiny_Mask_Legacy1807_g170707;
				#else
				float staticSwitch1810_g170707 = lerpResult1908_g170707;
				#endif
				float clampResult17_g170726 = clamp( staticSwitch1810_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170727 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170727 );
				float temp_output_6_0_g170728 = saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170727 ) / ( temp_output_10_0_g170727 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				half Tiny_Mask218_g170707 = staticSwitch14_g170728;
				half3 Input_Position500_g170744 = Model_PositionWO162_g170707;
				half Input_MotionTilling321_g170744 = _MotionTinyTillingValue;
				float lerpResult128_g170748 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170744 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170744 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170744).xz * Input_MotionTilling321_g170744 * 0.03 ) + ( lerpResult128_g170748 * Input_MotionSpeed62_g170744 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170707 = temp_output_519_0_g170744;
				half3 Model_PositionWS1819_g170707 = temp_output_1567_16_g170707;
				half Motion_FadeMask1820_g170707 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170707 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170707 = abs( (temp_output_2275_567_g170707).z );
				half Small_Noise1427_g170707 = (temp_output_2276_567_g170707).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170707 = Small_Noise1427_g170707;
				#else
				float staticSwitch2013_g170707 = Base_Noise1159_g170707;
				#endif
				float temp_output_136_0_g170708 = _global_push_layer_value;
				float temp_output_19_0_g170709 = TVE_PushLayers[(int)temp_output_136_0_g170708];
				float3 lerpResult1547_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionPushPivotValue);
				half3 Push_Position1549_g170707 = ( lerpResult1547_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170710 = Push_Position1549_g170707;
				float2 temp_output_75_0_g170710 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_82_0_g170710 = temp_output_136_0_g170708;
				float2 temp_output_119_0_g170710 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_7_0_g170715 = 1.0;
				float temp_output_10_0_g170715 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170715 );
				float4 lerpResult131_g170710 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170710,temp_output_82_0_g170710), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170710,temp_output_82_0_g170710), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170710 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170715 ) / temp_output_10_0_g170715 ) ));
				float4 temp_output_17_0_g170709 = lerpResult131_g170710;
				float4 temp_output_3_0_g170709 = TVE_PushParams;
				float4 ifLocalVar18_g170709 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170709 >= 0.5 )
				ifLocalVar18_g170709 = temp_output_17_0_g170709;
				else
				ifLocalVar18_g170709 = temp_output_3_0_g170709;
				float4 lerpResult22_g170709 = lerp( temp_output_3_0_g170709 , temp_output_17_0_g170709 , temp_output_19_0_g170709);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170709 = lerpResult22_g170709;
				#else
				float4 staticSwitch24_g170709 = ifLocalVar18_g170709;
				#endif
				half4 Global_PushParams214_g170707 = staticSwitch24_g170709;
				half Push_Noise1977_g170707 = (Global_PushParams214_g170707).b;
				half Push_Value1501_g170707 = _MotionPushIntensityValue;
				half Push_Influence1504_g170707 = saturate( ( (Global_PushParams214_g170707).a * Push_Value1501_g170707 ) );
				float lerpResult2016_g170707 = lerp( staticSwitch2013_g170707 , Push_Noise1977_g170707 , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170707 = lerpResult2016_g170707;
				#else
				float staticSwitch2012_g170707 = staticSwitch2013_g170707;
				#endif
				half Wave_Noise1475_g170707 = staticSwitch2012_g170707;
				half3 Tiny_Flutter1451_g170707 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170707 * Tiny_Direction859_g170707 * Motion_FadeMask1820_g170707 * Flow_Value1855_g170707 * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170707 = Tiny_Flutter1451_g170707;
				#else
				float3 staticSwitch414_g170707 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170707 = ( staticSwitch495_g170707 + staticSwitch414_g170707 );
				float3 In_PositionAddOS16_g170721 = Final_PositionADD1569_g170707;
				float3 temp_output_1567_24_g170707 = Out_PivotOS15_g170717;
				float3 In_PivotOS16_g170721 = temp_output_1567_24_g170707;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170717;
				float3 In_PivotWO16_g170721 = temp_output_1567_19_g170707;
				float3 temp_output_1567_20_g170707 = Out_NormalOS15_g170717;
				float3 In_NormalOS16_g170721 = temp_output_1567_20_g170707;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170717;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170717;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170717;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170717;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170717;
				float4 In_VertexData16_g170721 = temp_output_1567_29_g170707;
				float4 In_MotionData16_g170721 = temp_output_1567_27_g170707;
				float4 In_BoundsData16_g170721 = temp_output_1567_30_g170707;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170707 = _MotionBaseIntensityValue;
				float4 break748_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170731 = _motion_base_vert_mode;
				float temp_output_30_0_g170731 = ( break748_g170707.x * break33_g170731.x );
				float temp_output_29_0_g170731 = ( break748_g170707.y * break33_g170731.y );
				float temp_output_31_0_g170731 = ( break748_g170707.z * break33_g170731.z );
				float temp_output_28_0_g170731 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 + temp_output_31_0_g170731 + ( break748_g170707.w * break33_g170731.w ) );
				float temp_output_1731_0_g170707 = temp_output_28_0_g170731;
				float4 break33_g170732 = _motion_base_proc_mode;
				float temp_output_30_0_g170732 = ( (Model_BoundsData1322_g170707).z * break33_g170732.x );
				float temp_output_29_0_g170732 = ( (Model_BoundsData1322_g170707).w * break33_g170732.y );
				float temp_output_1733_0_g170707 = ( temp_output_30_0_g170732 + temp_output_29_0_g170732 );
				float lerpResult1904_g170707 = lerp( temp_output_1731_0_g170707 , temp_output_1733_0_g170707 , _motion_base_mask_mode);
				float clampResult17_g170729 = clamp( lerpResult1904_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170730 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170730 );
				float temp_output_6_0_g170742 = saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170742 = ( temp_output_6_0_g170742 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170742 = temp_output_6_0_g170742;
				#endif
				half Base_Mask217_g170707 = staticSwitch14_g170742;
				half Base_Intensity2041_g170707 = length( Base_Direction893_g170707 );
				float lerpResult2090_g170707 = lerp( 1.0 , ( Base_Intensity2041_g170707 * Base_Intensity2041_g170707 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170707 = ( Base_Value2242_g170707 * Base_Mask217_g170707 * Base_Direction893_g170707 * lerpResult2090_g170707 );
				#else
				float2 staticSwitch1573_g170707 = temp_cast_54;
				#endif
				float4 break1864_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170735 = _motion_push_vert_mode;
				float temp_output_30_0_g170735 = ( break1864_g170707.x * break33_g170735.x );
				float temp_output_29_0_g170735 = ( break1864_g170707.y * break33_g170735.y );
				float temp_output_31_0_g170735 = ( break1864_g170707.z * break33_g170735.z );
				float temp_output_28_0_g170735 = ( temp_output_30_0_g170735 + temp_output_29_0_g170735 + temp_output_31_0_g170735 + ( break1864_g170707.w * break33_g170735.w ) );
				float temp_output_1867_0_g170707 = temp_output_28_0_g170735;
				float4 break33_g170736 = _motion_push_proc_mode;
				float temp_output_30_0_g170736 = ( (Model_BoundsData1322_g170707).z * break33_g170736.x );
				float temp_output_29_0_g170736 = ( (Model_BoundsData1322_g170707).w * break33_g170736.y );
				float temp_output_1868_0_g170707 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 );
				float lerpResult1910_g170707 = lerp( temp_output_1867_0_g170707 , temp_output_1868_0_g170707 , _motion_push_mask_mode);
				float clampResult17_g170733 = clamp( lerpResult1910_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170734 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170734 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170734 );
				float temp_output_6_0_g170737 = saturate( ( ( clampResult17_g170733 - temp_output_7_0_g170734 ) / ( temp_output_10_0_g170734 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Push_Mask1877_g170707 = staticSwitch14_g170737;
				float2 break83_g170740 = ((Global_PushParams214_g170707).rg*2.0 + -1.0);
				float3 appendResult79_g170740 = (float3(break83_g170740.x , 0.0 , break83_g170740.y));
				half2 Push_Direction1972_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170740 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170707 = lerp( staticSwitch1573_g170707 , ( Push_Mask1877_g170707 * Push_Value1501_g170707 * Push_Direction1972_g170707 ) , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170707 = lerpResult1496_g170707;
				#else
				float2 staticSwitch1506_g170707 = staticSwitch1573_g170707;
				#endif
				half2 Base_Bending1440_g170707 = staticSwitch1506_g170707;
				float4 appendResult2023_g170707 = (float4(Base_Bending1440_g170707 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170707 = appendResult2023_g170707;
				float4 In_RotationData16_g170721 = Final_RotationData1570_g170707;
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.MotionData = In_MotionData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				TVEModelData Data15_g170956 = Data16_g170721;
				float Out_Dummy15_g170956 = 0;
				float3 Out_PositionOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170956 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170956 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170956 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170956 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170956 = float3( 0,0,0 );
				float4 Out_VertexData15_g170956 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170956 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170956 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170956 = float4( 0,0,0,0 );
				Out_Dummy15_g170956 = Data15_g170956.Dummy;
				Out_PositionOS15_g170956 = Data15_g170956.PositionOS;
				Out_PositionWS15_g170956 = Data15_g170956.PositionWS;
				Out_PositionWO15_g170956 = Data15_g170956.PositionWO;
				Out_PositionRawOS15_g170956 = Data15_g170956.PositionRawOS;
				Out_PositionAddOS15_g170956 = Data15_g170956.PositionAddOS;
				Out_PivotOS15_g170956 = Data15_g170956.PivotOS;
				Out_PivotWS15_g170956 = Data15_g170956.PivotWS;
				Out_PivotWO15_g170956 = Data15_g170956.PivotWO;
				Out_NormalOS15_g170956 = Data15_g170956.NormalOS;
				Out_NormalWS15_g170956 = Data15_g170956.NormalWS;
				Out_NormalRawOS15_g170956 = Data15_g170956.NormalRawOS;
				Out_NormalRawWS15_g170956 = Data15_g170956.NormalRawWS;
				Out_TangentOS15_g170956 = Data15_g170956.TangentOS;
				Out_ViewDirWS15_g170956 = Data15_g170956.ViewDirWS;
				Out_VertexData15_g170956 = Data15_g170956.VertexData;
				Out_MotionData15_g170956 = Data15_g170956.MotionData;
				Out_BoundsData15_g170956 = Data15_g170956.BoundsData;
				Out_RotationData15_g170956 = Data15_g170956.RotationData;
				half3 Model_PositionOS147_g170955 = Out_PositionOS15_g170956;
				half3 Input_False58_g170958 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170959 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170960 = VertexPos40_g170959;
				float3 appendResult74_g170960 = (float3(VertexPos40_g170960.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170960 = appendResult74_g170960;
				float3 break84_g170960 = VertexPos40_g170960;
				float3 appendResult81_g170960 = (float3(0.0 , break84_g170960.y , break84_g170960.z));
				half3 VertexPosOtherAxis82_g170960 = appendResult81_g170960;
				float4 temp_output_1567_33_g170955 = Out_RotationData15_g170956;
				half4 Model_VertexBend1569_g170955 = temp_output_1567_33_g170955;
				half2 Angle44_g170959 = (Model_VertexBend1569_g170955).xy;
				half Angle44_g170960 = (Angle44_g170959).y;
				half3 VertexPos40_g170961 = ( VertexPosRotationAxis50_g170960 + ( VertexPosOtherAxis82_g170960 * cos( Angle44_g170960 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170960 ) * sin( Angle44_g170960 ) ) );
				float3 appendResult74_g170961 = (float3(0.0 , 0.0 , VertexPos40_g170961.z));
				half3 VertexPosRotationAxis50_g170961 = appendResult74_g170961;
				float3 break84_g170961 = VertexPos40_g170961;
				float3 appendResult81_g170961 = (float3(break84_g170961.x , break84_g170961.y , 0.0));
				half3 VertexPosOtherAxis82_g170961 = appendResult81_g170961;
				half Angle44_g170961 = -(Angle44_g170959).x;
				half3 Input_True57_g170958 = ( VertexPosRotationAxis50_g170961 + ( VertexPosOtherAxis82_g170961 * cos( Angle44_g170961 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170961 ) * sin( Angle44_g170961 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch65_g170958 = Input_False58_g170958;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch67_g170958 = staticSwitch65_g170958;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch69_g170958 = staticSwitch67_g170958;
				#endif
				float3 temp_output_1578_0_g170955 = staticSwitch69_g170958;
				float3 temp_output_1567_31_g170955 = Out_PositionAddOS15_g170956;
				half3 Model_PositionADD1568_g170955 = temp_output_1567_31_g170955;
				half3 Final_PositionOS178_g170955 = ( temp_output_1578_0_g170955 + Model_PositionADD1568_g170955 );
				float3 In_PositionOS16_g170957 = Final_PositionOS178_g170955;
				float3 In_PositionWS16_g170957 = Out_PositionWS15_g170956;
				float3 In_PositionWO16_g170957 = Out_PositionWO15_g170956;
				float3 In_PositionRawOS16_g170957 = Out_PositionRawOS15_g170956;
				float3 In_PositionAddOS16_g170957 = temp_output_1567_31_g170955;
				float3 In_PivotOS16_g170957 = Out_PivotOS15_g170956;
				float3 In_PivotWS16_g170957 = Out_PivotWS15_g170956;
				float3 In_PivotWO16_g170957 = Out_PivotWO15_g170956;
				float3 In_NormalOS16_g170957 = Out_NormalOS15_g170956;
				float3 In_NormalWS16_g170957 = Out_NormalWS15_g170956;
				float3 In_NormalRawOS16_g170957 = Out_NormalRawOS15_g170956;
				float3 In_NormalRawWS16_g170957 = Out_NormalRawWS15_g170956;
				float4 In_TangentOS16_g170957 = Out_TangentOS15_g170956;
				float3 In_ViewDirWS16_g170957 = Out_ViewDirWS15_g170956;
				float4 In_VertexData16_g170957 = Out_VertexData15_g170956;
				float4 In_MotionData16_g170957 = Out_MotionData15_g170956;
				float4 In_BoundsData16_g170957 = Out_BoundsData15_g170956;
				float4 In_RotationData16_g170957 = temp_output_1567_33_g170955;
				Data16_g170957.Dummy = In_Dummy16_g170957;
				Data16_g170957.PositionOS = In_PositionOS16_g170957;
				Data16_g170957.PositionWS = In_PositionWS16_g170957;
				Data16_g170957.PositionWO = In_PositionWO16_g170957;
				Data16_g170957.PositionRawOS = In_PositionRawOS16_g170957;
				Data16_g170957.PositionAddOS = In_PositionAddOS16_g170957;
				Data16_g170957.PivotOS = In_PivotOS16_g170957;
				Data16_g170957.PivotWS = In_PivotWS16_g170957;
				Data16_g170957.PivotWO = In_PivotWO16_g170957;
				Data16_g170957.NormalOS = In_NormalOS16_g170957;
				Data16_g170957.NormalWS = In_NormalWS16_g170957;
				Data16_g170957.NormalRawOS = In_NormalRawOS16_g170957;
				Data16_g170957.NormalRawWS = In_NormalRawWS16_g170957;
				Data16_g170957.TangentOS = In_TangentOS16_g170957;
				Data16_g170957.ViewDirWS = In_ViewDirWS16_g170957;
				Data16_g170957.VertexData = In_VertexData16_g170957;
				Data16_g170957.MotionData = In_MotionData16_g170957;
				Data16_g170957.BoundsData = In_BoundsData16_g170957;
				Data16_g170957.RotationData = In_RotationData16_g170957;
				TVEModelData Data15_g170979 = Data16_g170957;
				float Out_Dummy15_g170979 = 0;
				float3 Out_PositionOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170979 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170979 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170979 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170979 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170979 = float3( 0,0,0 );
				float4 Out_VertexData15_g170979 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170979 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170979 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170979 = float4( 0,0,0,0 );
				Out_Dummy15_g170979 = Data15_g170979.Dummy;
				Out_PositionOS15_g170979 = Data15_g170979.PositionOS;
				Out_PositionWS15_g170979 = Data15_g170979.PositionWS;
				Out_PositionWO15_g170979 = Data15_g170979.PositionWO;
				Out_PositionRawOS15_g170979 = Data15_g170979.PositionRawOS;
				Out_PositionAddOS15_g170979 = Data15_g170979.PositionAddOS;
				Out_PivotOS15_g170979 = Data15_g170979.PivotOS;
				Out_PivotWS15_g170979 = Data15_g170979.PivotWS;
				Out_PivotWO15_g170979 = Data15_g170979.PivotWO;
				Out_NormalOS15_g170979 = Data15_g170979.NormalOS;
				Out_NormalWS15_g170979 = Data15_g170979.NormalWS;
				Out_NormalRawOS15_g170979 = Data15_g170979.NormalRawOS;
				Out_NormalRawWS15_g170979 = Data15_g170979.NormalRawWS;
				Out_TangentOS15_g170979 = Data15_g170979.TangentOS;
				Out_ViewDirWS15_g170979 = Data15_g170979.ViewDirWS;
				Out_VertexData15_g170979 = Data15_g170979.VertexData;
				Out_MotionData15_g170979 = Data15_g170979.MotionData;
				Out_BoundsData15_g170979 = Data15_g170979.BoundsData;
				Out_RotationData15_g170979 = Data15_g170979.RotationData;
				float3 In_PositionOS16_g170980 = Out_PositionOS15_g170979;
				float3 In_PositionWS16_g170980 = Out_PositionWS15_g170979;
				float3 temp_output_1567_17_g170978 = Out_PositionWO15_g170979;
				float3 In_PositionWO16_g170980 = temp_output_1567_17_g170978;
				float3 temp_output_1567_26_g170978 = Out_PositionRawOS15_g170979;
				float3 In_PositionRawOS16_g170980 = temp_output_1567_26_g170978;
				float3 In_PositionAddOS16_g170980 = Out_PositionAddOS15_g170979;
				float3 In_PivotOS16_g170980 = Out_PivotOS15_g170979;
				float3 In_PivotWS16_g170980 = Out_PivotWS15_g170979;
				float3 In_PivotWO16_g170980 = Out_PivotWO15_g170979;
				half3 Model_NormalOS1568_g170978 = Out_NormalOS15_g170979;
				float3 lerpResult1589_g170978 = lerp( Model_NormalOS1568_g170978 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170978 = temp_output_1567_26_g170978;
				float3 normalizeResult1594_g170978 = ASESafeNormalize( ( Model_PositionRAW1592_g170978 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170978 = lerp( lerpResult1589_g170978 , normalizeResult1594_g170978 , _NormalSphereValue);
				half3 Input_False58_g170993 = lerpResult1585_g170978;
				half3 VertexPos40_g170982 = lerpResult1585_g170978;
				half3 VertexPos40_g170983 = VertexPos40_g170982;
				float3 appendResult74_g170983 = (float3(VertexPos40_g170983.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170983 = appendResult74_g170983;
				float3 break84_g170983 = VertexPos40_g170983;
				float3 appendResult81_g170983 = (float3(0.0 , break84_g170983.y , break84_g170983.z));
				half3 VertexPosOtherAxis82_g170983 = appendResult81_g170983;
				float4 temp_output_1567_33_g170978 = Out_RotationData15_g170979;
				half4 Model_RotationData1583_g170978 = temp_output_1567_33_g170978;
				half2 Angle44_g170982 = Model_RotationData1583_g170978.xy;
				half Angle44_g170983 = (Angle44_g170982).y;
				half3 VertexPos40_g170984 = ( VertexPosRotationAxis50_g170983 + ( VertexPosOtherAxis82_g170983 * cos( Angle44_g170983 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170983 ) * sin( Angle44_g170983 ) ) );
				float3 appendResult74_g170984 = (float3(0.0 , 0.0 , VertexPos40_g170984.z));
				half3 VertexPosRotationAxis50_g170984 = appendResult74_g170984;
				float3 break84_g170984 = VertexPos40_g170984;
				float3 appendResult81_g170984 = (float3(break84_g170984.x , break84_g170984.y , 0.0));
				half3 VertexPosOtherAxis82_g170984 = appendResult81_g170984;
				half Angle44_g170984 = -(Angle44_g170982).x;
				float3 lerpResult1591_g170978 = lerp( lerpResult1585_g170978 , ( VertexPosRotationAxis50_g170984 + ( VertexPosOtherAxis82_g170984 * cos( Angle44_g170984 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170984 ) * sin( Angle44_g170984 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170993 = lerpResult1591_g170978;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch65_g170993 = Input_False58_g170993;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch67_g170993 = staticSwitch65_g170993;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch69_g170993 = staticSwitch67_g170993;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170978 = staticSwitch69_g170993;
				#else
				float3 staticSwitch1595_g170978 = lerpResult1585_g170978;
				#endif
				float4 temp_output_1567_29_g170978 = Out_VertexData15_g170979;
				half4 Model_VertexData1608_g170978 = temp_output_1567_29_g170978;
				float4 break1683_g170978 = Model_VertexData1608_g170978;
				float4 break33_g170986 = _normal_vert_mode;
				float temp_output_30_0_g170986 = ( break1683_g170978.x * break33_g170986.x );
				float temp_output_29_0_g170986 = ( break1683_g170978.y * break33_g170986.y );
				float temp_output_31_0_g170986 = ( break1683_g170978.z * break33_g170986.z );
				float temp_output_28_0_g170986 = ( temp_output_30_0_g170986 + temp_output_29_0_g170986 + temp_output_31_0_g170986 + ( break1683_g170978.w * break33_g170986.w ) );
				float clampResult17_g170988 = clamp( temp_output_28_0_g170986 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170987 = _NormalMeshRemap.x;
				float temp_output_10_0_g170987 = ( _NormalMeshRemap.y - temp_output_7_0_g170987 );
				float lerpResult1695_g170978 = lerp( 1.0 , saturate( ( ( clampResult17_g170988 - temp_output_7_0_g170987 ) / ( temp_output_10_0_g170987 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170989 = lerpResult1695_g170978;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170989 = ( temp_output_6_0_g170989 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170989 = temp_output_6_0_g170989;
				#endif
				float temp_output_1690_0_g170978 = staticSwitch14_g170989;
				half Normal_MeskMask1691_g170978 = temp_output_1690_0_g170978;
				half Normal_Proj_Mask1647_g170978 = 1.0;
				float temp_output_1699_0_g170978 = ( Normal_MeskMask1691_g170978 * Normal_Proj_Mask1647_g170978 );
				float3 lerpResult1670_g170978 = lerp( Model_NormalOS1568_g170978 , staticSwitch1595_g170978 , temp_output_1699_0_g170978);
				half3 Final_NormalOS178_g170978 = lerpResult1670_g170978;
				float3 In_NormalOS16_g170980 = Final_NormalOS178_g170978;
				float3 temp_output_1567_21_g170978 = Out_NormalWS15_g170979;
				float3 In_NormalWS16_g170980 = temp_output_1567_21_g170978;
				float3 In_NormalRawOS16_g170980 = Out_NormalRawOS15_g170979;
				float3 In_NormalRawWS16_g170980 = Out_NormalRawWS15_g170979;
				float4 In_TangentOS16_g170980 = Out_TangentOS15_g170979;
				float3 In_ViewDirWS16_g170980 = Out_ViewDirWS15_g170979;
				float4 In_VertexData16_g170980 = temp_output_1567_29_g170978;
				float4 In_MotionData16_g170980 = Out_MotionData15_g170979;
				float4 In_BoundsData16_g170980 = Out_BoundsData15_g170979;
				float4 In_RotationData16_g170980 = temp_output_1567_33_g170978;
				Data16_g170980.Dummy = In_Dummy16_g170980;
				Data16_g170980.PositionOS = In_PositionOS16_g170980;
				Data16_g170980.PositionWS = In_PositionWS16_g170980;
				Data16_g170980.PositionWO = In_PositionWO16_g170980;
				Data16_g170980.PositionRawOS = In_PositionRawOS16_g170980;
				Data16_g170980.PositionAddOS = In_PositionAddOS16_g170980;
				Data16_g170980.PivotOS = In_PivotOS16_g170980;
				Data16_g170980.PivotWS = In_PivotWS16_g170980;
				Data16_g170980.PivotWO = In_PivotWO16_g170980;
				Data16_g170980.NormalOS = In_NormalOS16_g170980;
				Data16_g170980.NormalWS = In_NormalWS16_g170980;
				Data16_g170980.NormalRawOS = In_NormalRawOS16_g170980;
				Data16_g170980.NormalRawWS = In_NormalRawWS16_g170980;
				Data16_g170980.TangentOS = In_TangentOS16_g170980;
				Data16_g170980.ViewDirWS = In_ViewDirWS16_g170980;
				Data16_g170980.VertexData = In_VertexData16_g170980;
				Data16_g170980.MotionData = In_MotionData16_g170980;
				Data16_g170980.BoundsData = In_BoundsData16_g170980;
				Data16_g170980.RotationData = In_RotationData16_g170980;
				TVEModelData Data15_g171002 = Data16_g170980;
				float Out_Dummy15_g171002 = 0;
				float3 Out_PositionOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171002 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171002 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171002 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171002 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171002 = float3( 0,0,0 );
				float4 Out_VertexData15_g171002 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171002 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171002 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171002 = float4( 0,0,0,0 );
				Out_Dummy15_g171002 = Data15_g171002.Dummy;
				Out_PositionOS15_g171002 = Data15_g171002.PositionOS;
				Out_PositionWS15_g171002 = Data15_g171002.PositionWS;
				Out_PositionWO15_g171002 = Data15_g171002.PositionWO;
				Out_PositionRawOS15_g171002 = Data15_g171002.PositionRawOS;
				Out_PositionAddOS15_g171002 = Data15_g171002.PositionAddOS;
				Out_PivotOS15_g171002 = Data15_g171002.PivotOS;
				Out_PivotWS15_g171002 = Data15_g171002.PivotWS;
				Out_PivotWO15_g171002 = Data15_g171002.PivotWO;
				Out_NormalOS15_g171002 = Data15_g171002.NormalOS;
				Out_NormalWS15_g171002 = Data15_g171002.NormalWS;
				Out_NormalRawOS15_g171002 = Data15_g171002.NormalRawOS;
				Out_NormalRawWS15_g171002 = Data15_g171002.NormalRawWS;
				Out_TangentOS15_g171002 = Data15_g171002.TangentOS;
				Out_ViewDirWS15_g171002 = Data15_g171002.ViewDirWS;
				Out_VertexData15_g171002 = Data15_g171002.VertexData;
				Out_MotionData15_g171002 = Data15_g171002.MotionData;
				Out_BoundsData15_g171002 = Data15_g171002.BoundsData;
				Out_RotationData15_g171002 = Data15_g171002.RotationData;
				float3 temp_output_217_24_g171001 = Out_PivotOS15_g171002;
				float3 In_PositionOS16_g171003 = ( Out_PositionOS15_g171002 + temp_output_217_24_g171001 );
				float3 In_PositionWS16_g171003 = Out_PositionWS15_g171002;
				float3 In_PositionWO16_g171003 = Out_PositionWO15_g171002;
				float3 In_PositionRawOS16_g171003 = Out_PositionRawOS15_g171002;
				float3 In_PositionAddOS16_g171003 = Out_PositionAddOS15_g171002;
				float3 In_PivotOS16_g171003 = temp_output_217_24_g171001;
				float3 In_PivotWS16_g171003 = Out_PivotWS15_g171002;
				float3 In_PivotWO16_g171003 = Out_PivotWO15_g171002;
				float3 In_NormalOS16_g171003 = Out_NormalOS15_g171002;
				float3 In_NormalWS16_g171003 = Out_NormalWS15_g171002;
				float3 In_NormalRawOS16_g171003 = Out_NormalRawOS15_g171002;
				float3 In_NormalRawWS16_g171003 = Out_NormalRawWS15_g171002;
				float4 In_TangentOS16_g171003 = Out_TangentOS15_g171002;
				float3 In_ViewDirWS16_g171003 = Out_ViewDirWS15_g171002;
				float4 In_VertexData16_g171003 = Out_VertexData15_g171002;
				float4 In_MotionData16_g171003 = Out_MotionData15_g171002;
				float4 In_BoundsData16_g171003 = Out_BoundsData15_g171002;
				float4 In_RotationData16_g171003 = Out_RotationData15_g171002;
				Data16_g171003.Dummy = In_Dummy16_g171003;
				Data16_g171003.PositionOS = In_PositionOS16_g171003;
				Data16_g171003.PositionWS = In_PositionWS16_g171003;
				Data16_g171003.PositionWO = In_PositionWO16_g171003;
				Data16_g171003.PositionRawOS = In_PositionRawOS16_g171003;
				Data16_g171003.PositionAddOS = In_PositionAddOS16_g171003;
				Data16_g171003.PivotOS = In_PivotOS16_g171003;
				Data16_g171003.PivotWS = In_PivotWS16_g171003;
				Data16_g171003.PivotWO = In_PivotWO16_g171003;
				Data16_g171003.NormalOS = In_NormalOS16_g171003;
				Data16_g171003.NormalWS = In_NormalWS16_g171003;
				Data16_g171003.NormalRawOS = In_NormalRawOS16_g171003;
				Data16_g171003.NormalRawWS = In_NormalRawWS16_g171003;
				Data16_g171003.TangentOS = In_TangentOS16_g171003;
				Data16_g171003.ViewDirWS = In_ViewDirWS16_g171003;
				Data16_g171003.VertexData = In_VertexData16_g171003;
				Data16_g171003.MotionData = In_MotionData16_g171003;
				Data16_g171003.BoundsData = In_BoundsData16_g171003;
				Data16_g171003.RotationData = In_RotationData16_g171003;
				TVEModelData Data15_g171008 = Data16_g171003;
				float Out_Dummy15_g171008 = 0;
				float3 Out_PositionOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171008 = float3( 0,0,0 );
				float4 Out_VertexData15_g171008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171008 = float4( 0,0,0,0 );
				Out_Dummy15_g171008 = Data15_g171008.Dummy;
				Out_PositionOS15_g171008 = Data15_g171008.PositionOS;
				Out_PositionWS15_g171008 = Data15_g171008.PositionWS;
				Out_PositionWO15_g171008 = Data15_g171008.PositionWO;
				Out_PositionRawOS15_g171008 = Data15_g171008.PositionRawOS;
				Out_PositionAddOS15_g171008 = Data15_g171008.PositionAddOS;
				Out_PivotOS15_g171008 = Data15_g171008.PivotOS;
				Out_PivotWS15_g171008 = Data15_g171008.PivotWS;
				Out_PivotWO15_g171008 = Data15_g171008.PivotWO;
				Out_NormalOS15_g171008 = Data15_g171008.NormalOS;
				Out_NormalWS15_g171008 = Data15_g171008.NormalWS;
				Out_NormalRawOS15_g171008 = Data15_g171008.NormalRawOS;
				Out_NormalRawWS15_g171008 = Data15_g171008.NormalRawWS;
				Out_TangentOS15_g171008 = Data15_g171008.TangentOS;
				Out_ViewDirWS15_g171008 = Data15_g171008.ViewDirWS;
				Out_VertexData15_g171008 = Data15_g171008.VertexData;
				Out_MotionData15_g171008 = Data15_g171008.MotionData;
				Out_BoundsData15_g171008 = Data15_g171008.BoundsData;
				Out_RotationData15_g171008 = Data15_g171008.RotationData;
				float3 temp_output_31_0_g171005 = Out_PositionOS15_g171008;
				
				o.ase_texcoord5.xyz = vertexToFrag73_g170478;
				o.ase_texcoord6.xyz = vertexToFrag76_g170478;
				o.ase_texcoord7.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord8.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord9.xyz = ase_worldBitangent;
				float temp_output_6_0_g170741 = ( _MotionHighlightValue * Motion_FadeMask1820_g170707 * ( Base_Mask217_g170707 * Base_Mask217_g170707 ) * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170741 = ( temp_output_6_0_g170741 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170741 = temp_output_6_0_g170741;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170741;
				float4 appendResult23_g170813 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170813 = appendResult23_g170813;
				o.ase_texcoord10 = vertexToFrag24_g170813;
				o.ase_texcoord11.xyz = ase_worldPos;
				
				o.ase_texcoord3 = v.ase_texcoord;
				o.ase_texcoord4.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord4.zw = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord9.w = 0;
				o.ase_texcoord11.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g171005 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171008;
				v.tangent = Out_TangentOS15_g171008;

				#ifdef EDITOR_VISUALIZATION
					o.vizUV = 0;
					o.lightCoord = 0;
					if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
						o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
					else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
					{
						o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
						o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
					}
				#endif

				o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localBreakData4_g171011 = ( 0.0 );
				float localCompData3_g170996 = ( 0.0 );
				TVEVisualData Data3_g170996 = (TVEVisualData)0;
				half Dummy145_g170994 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170996 = Dummy145_g170994;
				float localBreakData4_g170995 = ( 0.0 );
				float localCompData3_g170973 = ( 0.0 );
				TVEVisualData Data3_g170973 = (TVEVisualData)0;
				half Dummy145_g170963 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170973 = Dummy145_g170963;
				float localBreakData4_g170972 = ( 0.0 );
				float localCompData3_g170945 = ( 0.0 );
				TVEVisualData Data3_g170945 = (TVEVisualData)0;
				half Dummy594_g170942 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170945 = Dummy594_g170942;
				float localBreakData4_g170944 = ( 0.0 );
				float localCompData3_g170930 = ( 0.0 );
				TVEVisualData Data3_g170930 = (TVEVisualData)0;
				half Dummy594_g170929 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170930 = Dummy594_g170929;
				float localBreakData4_g170940 = ( 0.0 );
				float localCompData3_g170902 = ( 0.0 );
				TVEVisualData Data3_g170902 = (TVEVisualData)0;
				half Dummy594_g170900 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170902 = Dummy594_g170900;
				float localBreakData4_g170901 = ( 0.0 );
				float localCompData3_g170867 = ( 0.0 );
				TVEVisualData Data3_g170867 = (TVEVisualData)0;
				half Dummy594_g170864 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170867 = Dummy594_g170864;
				float localBreakData4_g170865 = ( 0.0 );
				float localCompData3_g170863 = ( 0.0 );
				TVEVisualData Data3_g170863 = (TVEVisualData)0;
				float In_Dummy3_g170863 = 0.0;
				float localBreakData4_g170862 = ( 0.0 );
				float localCompData3_g170841 = ( 0.0 );
				TVEVisualData Data3_g170841 = (TVEVisualData)0;
				half Dummy205_g170838 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170841 = Dummy205_g170838;
				float localBreakData4_g170840 = ( 0.0 );
				float localCompData3_g170835 = ( 0.0 );
				TVEVisualData Data3_g170835 = (TVEVisualData)0;
				half Dummy205_g170814 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170835 = Dummy205_g170814;
				float localBreakData4_g170836 = ( 0.0 );
				float localCompData3_g170807 = ( 0.0 );
				TVEVisualData Data3_g170807 = (TVEVisualData)0;
				half Dummy220_g170804 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170807 = Dummy220_g170804;
				float localBreakData4_g170806 = ( 0.0 );
				float localCompData3_g170797 = ( 0.0 );
				TVEVisualData Data3_g170797 = (TVEVisualData)0;
				half Dummy220_g170794 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170797 = Dummy220_g170794;
				float localBreakData4_g170796 = ( 0.0 );
				float localCompData3_g170786 = ( 0.0 );
				TVEVisualData Data3_g170786 = (TVEVisualData)0;
				half Dummy202_g170784 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170786 = Dummy202_g170784;
				float localBreakData4_g170785 = ( 0.0 );
				float localCompData3_g170691 = ( 0.0 );
				TVEVisualData Data3_g170691 = (TVEVisualData)0;
				half4 Dummy944_g170674 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170691 = Dummy944_g170674.x;
				float localBreakData4_g170690 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170667 = Dummy946_g170634.x;
				float localBreakData4_g170646 = ( 0.0 );
				float localCompData3_g170633 = ( 0.0 );
				TVEVisualData Data3_g170633 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170633 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainAlbedoTex;
				float localFilterTexture19_g170629 = ( 0.0 );
				SamplerState SamplerDefault19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170629 = SamplerDefault19_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170629 = SamplerDefault19_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170629 = SamplerPoint19_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170629 = SamplerLow19_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170629 = SamplerMedium19_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170629 = SamplerHigh19_g170629;
				#endif
				SamplerState Sampler276_g170626 = SS19_g170629;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainAlbedoTex;
				SamplerState Sampler275_g170626 = SS19_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainAlbedoTex;
				SamplerState Sampler238_g170626 = SS19_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord5.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord6.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 ase_worldNormal = IN.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170632 = Data16_g170493;
				float Out_Dummy15_g170632 = 0;
				float3 Out_PositionWS15_g170632 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170632 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170632 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170632 = float3( 0,0,0 );
				float4 Out_VertexData15_g170632 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170632 = float4( 0,0,0,0 );
				Out_Dummy15_g170632 = Data15_g170632.Dummy;
				Out_PositionWS15_g170632 = Data15_g170632.PositionWS;
				Out_PositionWO15_g170632 = Data15_g170632.PositionWO;
				Out_PivotWS15_g170632 = Data15_g170632.PivotWS;
				Out_PivotWO15_g170632 = Data15_g170632.PivotWO;
				Out_NormalWS15_g170632 = Data15_g170632.NormalWS;
				Out_ViewDirWS15_g170632 = Data15_g170632.ViewDirWS;
				Out_VertexData15_g170632 = Data15_g170632.VertexData;
				Out_BoundsData15_g170632 = Data15_g170632.BoundsData;
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170632;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainAlbedoTex;
				SamplerState Sampler246_g170626 = SS19_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170632;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainAlbedoTex;
				SamplerState Sampler234_g170626 = SS19_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainAlbedoTex;
				SamplerState Sampler263_g170626 = SS19_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170628) = _MainShaderTex;
				float localFilterTexture30_g170631 = ( 0.0 );
				SamplerState SamplerDefault30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170631 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170631 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170631 = SamplerDefault30_g170631;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170631 = SamplerDefault30_g170631;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170631 = SamplerPoint30_g170631;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170631 = SamplerLow30_g170631;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170631 = SamplerMedium30_g170631;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170631 = SamplerHigh30_g170631;
				#endif
				SamplerState Sampler276_g170628 = SS30_g170631;
				float4 temp_output_37_0_g170628 = Local_Coords180_g170617;
				half4 Coords276_g170628 = temp_output_37_0_g170628;
				half2 TexCoord276_g170628 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170628 = SampleMain( Texture276_g170628 , Sampler276_g170628 , Coords276_g170628 , TexCoord276_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170628) = _MainShaderTex;
				SamplerState Sampler275_g170628 = SS30_g170631;
				half4 Coords275_g170628 = temp_output_37_0_g170628;
				half2 TexCoord275_g170628 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170628 = SampleExtra( Texture275_g170628 , Sampler275_g170628 , Coords275_g170628 , TexCoord275_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170628) = _MainShaderTex;
				SamplerState Sampler238_g170628 = SS30_g170631;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				float3 temp_output_279_0_g170628 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170628) = _MainShaderTex;
				SamplerState Sampler246_g170628 = SS30_g170631;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				float3 temp_output_280_0_g170628 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170628) = _MainShaderTex;
				SamplerState Sampler234_g170628 = SS30_g170631;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170628) = _MainShaderTex;
				SamplerState Sampler263_g170628 = SS30_g170631;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170623 = _MainMultiRemap.x;
				float temp_output_10_0_g170623 = ( _MainMultiRemap.y - temp_output_7_0_g170623 );
				half Local_MultiMask78_g170617 = saturate( ( ( clampResult17_g170622 - temp_output_7_0_g170623 ) / ( temp_output_10_0_g170623 + 0.0001 ) ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170633 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170633 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainNormalTex;
				float localFilterTexture29_g170630 = ( 0.0 );
				SamplerState SamplerDefault29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170630 = SamplerDefault29_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170630 = SamplerDefault29_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170630 = SamplerPoint29_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170630 = SamplerLow29_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170630 = SamplerMedium29_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170630 = SamplerHigh29_g170630;
				#endif
				SamplerState Sampler276_g170627 = SS29_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainNormalTex;
				SamplerState Sampler275_g170627 = SS29_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainNormalTex;
				SamplerState Sampler238_g170627 = SS29_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainNormalTex;
				SamplerState Sampler246_g170627 = SS29_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainNormalTex;
				SamplerState Sampler234_g170627 = SS29_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainNormalTex;
				SamplerState Sampler263_g170627 = SS29_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord8.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170633 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170633 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170633 = Local_Masks109_g170617;
				float4 In_Emissive3_g170633 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170633 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170633 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170633 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170633 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170633 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170633 = temp_cast_4;
				float In_Transmission3_g170633 = 1.0;
				float In_Thickness3_g170633 = 0.0;
				float In_Diffusion3_g170633 = 0.0;
				Data3_g170633.Dummy = In_Dummy3_g170633;
				Data3_g170633.Albedo = In_Albedo3_g170633;
				Data3_g170633.AlbedoRaw = In_AlbedoRaw3_g170633;
				Data3_g170633.NormalTS = In_NormalTS3_g170633;
				Data3_g170633.NormalWS = In_NormalWS3_g170633;
				Data3_g170633.Shader = In_Shader3_g170633;
				Data3_g170633.Emissive= In_Emissive3_g170633;
				Data3_g170633.MultiMask = In_MultiMask3_g170633;
				Data3_g170633.Grayscale = In_Grayscale3_g170633;
				Data3_g170633.Luminosity = In_Luminosity3_g170633;
				Data3_g170633.AlphaClip = In_AlphaClip3_g170633;
				Data3_g170633.AlphaFade = In_AlphaFade3_g170633;
				Data3_g170633.Translucency = In_Translucency3_g170633;
				Data3_g170633.Transmission = In_Transmission3_g170633;
				Data3_g170633.Thickness = In_Thickness3_g170633;
				Data3_g170633.Diffusion = In_Diffusion3_g170633;
				TVEVisualData Data4_g170646 = Data3_g170633;
				float Out_Dummy4_g170646 = 0;
				float3 Out_Albedo4_g170646 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170646 = float2( 0,0 );
				float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
				float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170646 = 0;
				float Out_Grayscale4_g170646 = 0;
				float Out_Luminosity4_g170646 = 0;
				float Out_AlphaClip4_g170646 = 0;
				float Out_AlphaFade4_g170646 = 0;
				float3 Out_Translucency4_g170646 = float3( 0,0,0 );
				float Out_Transmission4_g170646 = 0;
				float Out_Thickness4_g170646 = 0;
				float Out_Diffusion4_g170646 = 0;
				Out_Dummy4_g170646 = Data4_g170646.Dummy;
				Out_Albedo4_g170646 = Data4_g170646.Albedo;
				Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
				Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
				Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
				Out_Shader4_g170646 = Data4_g170646.Shader;
				Out_Emissive4_g170646= Data4_g170646.Emissive;
				Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
				Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
				Out_Luminosity4_g170646= Data4_g170646.Luminosity;
				Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
				Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
				Out_Translucency4_g170646 = Data4_g170646.Translucency;
				Out_Transmission4_g170646 = Data4_g170646.Transmission;
				Out_Thickness4_g170646 = Data4_g170646.Thickness;
				Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170646;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170663 = ( 0.0 );
				SamplerState SamplerDefault19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170663 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170663 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170663 = SamplerDefault19_g170663;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170663 = SamplerDefault19_g170663;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170663 = SamplerPoint19_g170663;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170663 = SamplerLow19_g170663;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170663 = SamplerMedium19_g170663;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170663 = SamplerHigh19_g170663;
				#endif
				SamplerState Sampler276_g170635 = SS19_g170663;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170663;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170663;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170666 = Data16_g170493;
				float Out_Dummy15_g170666 = 0;
				float3 Out_PositionWS15_g170666 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170666 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170666 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170666 = float3( 0,0,0 );
				float4 Out_VertexData15_g170666 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_PositionWS15_g170666 = Data15_g170666.PositionWS;
				Out_PositionWO15_g170666 = Data15_g170666.PositionWO;
				Out_PivotWS15_g170666 = Data15_g170666.PivotWS;
				Out_PivotWO15_g170666 = Data15_g170666.PivotWO;
				Out_NormalWS15_g170666 = Data15_g170666.NormalWS;
				Out_ViewDirWS15_g170666 = Data15_g170666.ViewDirWS;
				Out_VertexData15_g170666 = Data15_g170666.VertexData;
				Out_BoundsData15_g170666 = Data15_g170666.BoundsData;
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170666;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170663;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170666;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170663;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170663;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170665 = ( 0.0 );
				SamplerState SamplerDefault30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170665 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170665 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170665 = SamplerDefault30_g170665;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170665 = SamplerDefault30_g170665;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170665 = SamplerPoint30_g170665;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170665 = SamplerLow30_g170665;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170665 = SamplerMedium30_g170665;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170665 = SamplerHigh30_g170665;
				#endif
				SamplerState Sampler276_g170637 = SS30_g170665;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170665;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170665;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170665;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170665;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170665;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170642 = _SecondMultiRemap.x;
				float temp_output_10_0_g170642 = ( _SecondMultiRemap.y - temp_output_7_0_g170642 );
				float temp_output_765_0_g170634 = saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170642 ) / ( temp_output_10_0_g170642 + 0.0001 ) ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170659 = 2.0;
				#else
				float staticSwitch1_g170659 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170659 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170650 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170649 = _SecondMaskRemap.x;
				float temp_output_10_0_g170649 = ( _SecondMaskRemap.y - temp_output_7_0_g170649 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170650 - temp_output_7_0_g170649 ) / ( temp_output_10_0_g170649 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170646;
				float clampResult17_g170651 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _SecondProjRemap.x;
				float temp_output_10_0_g170652 = ( _SecondProjRemap.y - temp_output_7_0_g170652 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170666;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170653 = _second_vert_mode;
				float temp_output_30_0_g170653 = ( break965_g170634.x * break33_g170653.x );
				float temp_output_29_0_g170653 = ( break965_g170634.y * break33_g170653.y );
				float temp_output_31_0_g170653 = ( break965_g170634.z * break33_g170653.z );
				float temp_output_28_0_g170653 = ( temp_output_30_0_g170653 + temp_output_29_0_g170653 + temp_output_31_0_g170653 + ( break965_g170634.w * break33_g170653.w ) );
				float clampResult17_g170647 = clamp( temp_output_28_0_g170653 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170648 = _SecondMeshRemap.x;
				float temp_output_10_0_g170648 = ( _SecondMeshRemap.y - temp_output_7_0_g170648 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170648 ) / ( temp_output_10_0_g170648 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170661 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170661 = ( temp_output_6_0_g170661 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170661 = temp_output_6_0_g170661;
				#endif
				float temp_output_987_0_g170634 = staticSwitch14_g170661;
				half Blend_VertMask918_g170634 = temp_output_987_0_g170634;
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170645 = Data204_g170494;
				float Out_Dummy15_g170645 = 0;
				float4 Out_CoatParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170645 = float4( 0,0,0,0 );
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_CoatParams15_g170645 = Data15_g170645.CoatParams;
				Out_PaintParams15_g170645 = Data15_g170645.PaintParams;
				Out_GlowParams15_g170645 = Data15_g170645.GlowParams;
				Out_AtmoParams15_g170645= Data15_g170645.AtmoParams;
				Out_FadeParams15_g170645= Data15_g170645.FadeParams;
				Out_FormParams15_g170645 = Data15_g170645.FormParams;
				Out_LandParams15_g170645 = Data15_g170645.LandParams;
				Out_WindParams15_g170645 = Data15_g170645.WindParams;
				Out_PushParams15_g170645 = Data15_g170645.PushParams;
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170645;
				float lerpResult1013_g170634 = lerp( 1.0 , (Global_CoatParams975_g170634).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = lerpResult1013_g170634;
				#else
				float staticSwitch971_g170634 = 1.0;
				#endif
				half Blend_GlobalMask972_g170634 = staticSwitch971_g170634;
				float temp_output_432_0_g170634 = ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 );
				float clampResult17_g170655 = clamp( temp_output_432_0_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _SecondBlendRemap.x;
				float temp_output_10_0_g170654 = ( _SecondBlendRemap.y - temp_output_7_0_g170654 );
				half Blend_Mask412_g170634 = ( saturate( ( ( clampResult17_g170655 - temp_output_7_0_g170654 ) / ( temp_output_10_0_g170654 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170667 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170667 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170646;
				float2 lerpResult40_g170657 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170664 = ( 0.0 );
				SamplerState SamplerDefault29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170664 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170664 = SamplerDefault29_g170664;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170664 = SamplerDefault29_g170664;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170664 = SamplerPoint29_g170664;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170664 = SamplerLow29_g170664;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170664 = SamplerMedium29_g170664;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170664 = SamplerHigh29_g170664;
				#endif
				SamplerState Sampler276_g170636 = SS29_g170664;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170664;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170664;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170664;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170664;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170664;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170657 = ( lerpResult40_g170657 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170657 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170667 = Final_NormalTS612_g170634;
				float3 appendResult68_g170658 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170658 = appendResult68_g170658;
				float3 worldNormal74_g170658 = normalize( float3(dot(tanToWorld0,tanNormal74_g170658), dot(tanToWorld1,tanNormal74_g170658), dot(tanToWorld2,tanNormal74_g170658)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170658;
				float3 In_NormalWS3_g170667 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170646;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170667 = Final_Masks613_g170634;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170646;
				float3 temp_output_3_0_g170660 = Final_Albedo601_g170634;
				float dotResult20_g170660 = dot( temp_output_3_0_g170660 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170660;
				float In_Grayscale3_g170667 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170667 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170646;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170667 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170646;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170667 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170646;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170667 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170646;
				float In_Transmission3_g170667 = Out_Transmission4_g170646;
				float In_Thickness3_g170667 = Out_Thickness4_g170646;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170646;
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				TVEVisualData Data4_g170690 = Data3_g170667;
				float Out_Dummy4_g170690 = 0;
				float3 Out_Albedo4_g170690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170690 = float2( 0,0 );
				float3 Out_NormalWS4_g170690 = float3( 0,0,0 );
				float4 Out_Shader4_g170690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170690 = 0;
				float Out_Grayscale4_g170690 = 0;
				float Out_Luminosity4_g170690 = 0;
				float Out_AlphaClip4_g170690 = 0;
				float Out_AlphaFade4_g170690 = 0;
				float3 Out_Translucency4_g170690 = float3( 0,0,0 );
				float Out_Transmission4_g170690 = 0;
				float Out_Thickness4_g170690 = 0;
				float Out_Diffusion4_g170690 = 0;
				Out_Dummy4_g170690 = Data4_g170690.Dummy;
				Out_Albedo4_g170690 = Data4_g170690.Albedo;
				Out_AlbedoRaw4_g170690 = Data4_g170690.AlbedoRaw;
				Out_NormalTS4_g170690 = Data4_g170690.NormalTS;
				Out_NormalWS4_g170690 = Data4_g170690.NormalWS;
				Out_Shader4_g170690 = Data4_g170690.Shader;
				Out_Emissive4_g170690= Data4_g170690.Emissive;
				Out_MultiMask4_g170690 = Data4_g170690.MultiMask;
				Out_Grayscale4_g170690 = Data4_g170690.Grayscale;
				Out_Luminosity4_g170690= Data4_g170690.Luminosity;
				Out_AlphaClip4_g170690 = Data4_g170690.AlphaClip;
				Out_AlphaFade4_g170690 = Data4_g170690.AlphaFade;
				Out_Translucency4_g170690 = Data4_g170690.Translucency;
				Out_Transmission4_g170690 = Data4_g170690.Transmission;
				Out_Thickness4_g170690 = Data4_g170690.Thickness;
				Out_Diffusion4_g170690 = Data4_g170690.Diffusion;
				half3 Visual_Albedo527_g170674 = Out_Albedo4_g170690;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170675) = _ThirdAlbedoTex;
				float localFilterTexture19_g170703 = ( 0.0 );
				SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170703 = SamplerDefault19_g170703;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170703 = SamplerDefault19_g170703;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170703 = SamplerPoint19_g170703;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170703 = SamplerLow19_g170703;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170703 = SamplerMedium19_g170703;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170703 = SamplerHigh19_g170703;
				#endif
				SamplerState Sampler276_g170675 = SS19_g170703;
				half4 Local_LayerCoords790_g170674 = _third_coord_value;
				float4 temp_output_37_0_g170675 = Local_LayerCoords790_g170674;
				half4 Coords276_g170675 = temp_output_37_0_g170675;
				half2 TexCoord276_g170675 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170675 = SampleMain( Texture276_g170675 , Sampler276_g170675 , Coords276_g170675 , TexCoord276_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170675 = SS19_g170703;
				half4 Coords275_g170675 = temp_output_37_0_g170675;
				half2 TexCoord275_g170675 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170675 = SampleExtra( Texture275_g170675 , Sampler275_g170675 , Coords275_g170675 , TexCoord275_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170675 = SS19_g170703;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				TVEModelData Data15_g170706 = Data16_g170493;
				float Out_Dummy15_g170706 = 0;
				float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
				float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
				Out_Dummy15_g170706 = Data15_g170706.Dummy;
				Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
				Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
				Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
				Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
				Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
				Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
				Out_VertexData15_g170706 = Data15_g170706.VertexData;
				Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
				half3 Model_PositionWO636_g170674 = Out_PositionWO15_g170706;
				float3 temp_output_279_0_g170675 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170675 = SS19_g170703;
				half4 Coords246_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition246_g170675 = temp_output_279_0_g170675;
				half3 Model_NormalWS869_g170674 = Out_NormalWS15_g170706;
				float3 temp_output_280_0_g170675 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170675 = temp_output_280_0_g170675;
				half4 localSamplePlanar3D246_g170675 = SamplePlanar3D( Texture246_g170675 , Sampler246_g170675 , Coords246_g170675 , WorldPosition246_g170675 , WorldNormal246_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170675 = SS19_g170703;
				float4 Coords234_g170675 = temp_output_37_0_g170675;
				float3 WorldPosition234_g170675 = temp_output_279_0_g170675;
				float4 localSampleStochastic2D234_g170675 = SampleStochastic2D( Texture234_g170675 , Sampler234_g170675 , Coords234_g170675 , WorldPosition234_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170675 = SS19_g170703;
				half4 Coords263_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition263_g170675 = temp_output_279_0_g170675;
				half3 WorldNormal263_g170675 = temp_output_280_0_g170675;
				half4 localSampleStochastic3D263_g170675 = SampleStochastic3D( Texture263_g170675 , Sampler263_g170675 , Coords263_g170675 , WorldPosition263_g170675 , WorldNormal263_g170675 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170674 = localSampleExtra275_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170674 = localSamplePlanar2D238_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170674 = localSamplePlanar3D246_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170674 = localSampleStochastic2D234_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170674 = localSampleStochastic3D263_g170675;
				#else
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#endif
				half4 Local_AlbedoTex777_g170674 = staticSwitch693_g170674;
				float3 lerpResult716_g170674 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170674).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170674 = lerpResult716_g170674;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170677) = _ThirdShaderTex;
				float localFilterTexture30_g170705 = ( 0.0 );
				SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170705 = SamplerDefault30_g170705;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170705 = SamplerDefault30_g170705;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170705 = SamplerPoint30_g170705;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170705 = SamplerLow30_g170705;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170705 = SamplerMedium30_g170705;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170705 = SamplerHigh30_g170705;
				#endif
				SamplerState Sampler276_g170677 = SS30_g170705;
				float4 temp_output_37_0_g170677 = Local_LayerCoords790_g170674;
				half4 Coords276_g170677 = temp_output_37_0_g170677;
				half2 TexCoord276_g170677 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170677 = SampleMain( Texture276_g170677 , Sampler276_g170677 , Coords276_g170677 , TexCoord276_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170677) = _ThirdShaderTex;
				SamplerState Sampler275_g170677 = SS30_g170705;
				half4 Coords275_g170677 = temp_output_37_0_g170677;
				half2 TexCoord275_g170677 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170677 = SampleExtra( Texture275_g170677 , Sampler275_g170677 , Coords275_g170677 , TexCoord275_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170677) = _ThirdShaderTex;
				SamplerState Sampler238_g170677 = SS30_g170705;
				half4 Coords238_g170677 = temp_output_37_0_g170677;
				float3 temp_output_279_0_g170677 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170677 = temp_output_279_0_g170677;
				half4 localSamplePlanar2D238_g170677 = SamplePlanar2D( Texture238_g170677 , Sampler238_g170677 , Coords238_g170677 , WorldPosition238_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170677) = _ThirdShaderTex;
				SamplerState Sampler246_g170677 = SS30_g170705;
				half4 Coords246_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition246_g170677 = temp_output_279_0_g170677;
				float3 temp_output_280_0_g170677 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170677 = temp_output_280_0_g170677;
				half4 localSamplePlanar3D246_g170677 = SamplePlanar3D( Texture246_g170677 , Sampler246_g170677 , Coords246_g170677 , WorldPosition246_g170677 , WorldNormal246_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170677) = _ThirdShaderTex;
				SamplerState Sampler234_g170677 = SS30_g170705;
				float4 Coords234_g170677 = temp_output_37_0_g170677;
				float3 WorldPosition234_g170677 = temp_output_279_0_g170677;
				float4 localSampleStochastic2D234_g170677 = SampleStochastic2D( Texture234_g170677 , Sampler234_g170677 , Coords234_g170677 , WorldPosition234_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170677) = _ThirdShaderTex;
				SamplerState Sampler263_g170677 = SS30_g170705;
				half4 Coords263_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition263_g170677 = temp_output_279_0_g170677;
				half3 WorldNormal263_g170677 = temp_output_280_0_g170677;
				half4 localSampleStochastic3D263_g170677 = SampleStochastic3D( Texture263_g170677 , Sampler263_g170677 , Coords263_g170677 , WorldPosition263_g170677 , WorldNormal263_g170677 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170674 = localSampleExtra275_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170674 = localSamplePlanar2D238_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170674 = localSamplePlanar3D246_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170674 = localSampleStochastic2D234_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170674 = localSampleStochastic3D263_g170677;
				#else
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#endif
				half4 Local_ShaderTex775_g170674 = staticSwitch722_g170674;
				float lerpResult739_g170674 = lerp( 1.0 , (Local_ShaderTex775_g170674).y , _ThirdOcclusionValue);
				float4 appendResult749_g170674 = (float4(( (Local_ShaderTex775_g170674).x * _ThirdMetallicValue ) , lerpResult739_g170674 , (Local_ShaderTex775_g170674).z , ( (Local_ShaderTex775_g170674).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170674 = appendResult749_g170674;
				float clampResult17_g170680 = clamp( (Local_Masks750_g170674).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170681 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170681 = ( _ThirdMultiRemap.y - temp_output_7_0_g170681 );
				float temp_output_765_0_g170674 = saturate( ( ( clampResult17_g170680 - temp_output_7_0_g170681 ) / ( temp_output_10_0_g170681 + 0.0001 ) ) );
				half Local_MultiMask767_g170674 = temp_output_765_0_g170674;
				float lerpResult705_g170674 = lerp( 1.0 , Local_MultiMask767_g170674 , _ThirdColorMode);
				float4 lerpResult706_g170674 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170674);
				half3 Local_ColorRGB774_g170674 = (lerpResult706_g170674).rgb;
				half3 Local_Albedo768_g170674 = ( Local_AlbedoRGB771_g170674 * Local_ColorRGB774_g170674 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170698 = 2.0;
				#else
				float staticSwitch1_g170698 = 4.594794;
				#endif
				float3 lerpResult985_g170674 = lerp( Local_Albedo768_g170674 , ( Visual_Albedo527_g170674 * Local_Albedo768_g170674 * staticSwitch1_g170698 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
				SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170674 = _third_mask_coord_value;
				float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170674;
				half4 Coords276_g170701 = temp_output_37_0_g170701;
				half2 TexCoord276_g170701 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
				SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
				half4 Coords275_g170701 = temp_output_37_0_g170701;
				half2 TexCoord275_g170701 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
				SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
				half4 Coords238_g170701 = temp_output_37_0_g170701;
				float3 temp_output_279_0_g170701 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
				half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
				SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
				half4 Coords246_g170701 = temp_output_37_0_g170701;
				half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
				float3 temp_output_280_0_g170701 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
				half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170674 = localSampleExtra275_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170674 = localSamplePlanar2D238_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170674 = localSamplePlanar3D246_g170701;
				#else
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#endif
				half4 Local_MaskTex861_g170674 = staticSwitch817_g170674;
				float clampResult17_g170685 = clamp( (Local_MaskTex861_g170674).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170686 = ( _ThirdMaskRemap.y - temp_output_7_0_g170686 );
				float lerpResult1028_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170674 = lerpResult1028_g170674;
				half4 Model_VertexMasks960_g170674 = Out_VertexData15_g170706;
				float4 break961_g170674 = Model_VertexMasks960_g170674;
				float4 break33_g170689 = _third_vert_mode;
				float temp_output_30_0_g170689 = ( break961_g170674.x * break33_g170689.x );
				float temp_output_29_0_g170689 = ( break961_g170674.y * break33_g170689.y );
				float temp_output_31_0_g170689 = ( break961_g170674.z * break33_g170689.z );
				float temp_output_28_0_g170689 = ( temp_output_30_0_g170689 + temp_output_29_0_g170689 + temp_output_31_0_g170689 + ( break961_g170674.w * break33_g170689.w ) );
				float clampResult17_g170683 = clamp( temp_output_28_0_g170689 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170684 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170684 = ( _ThirdMeshRemap.y - temp_output_7_0_g170684 );
				float lerpResult1026_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170683 - temp_output_7_0_g170684 ) / ( temp_output_10_0_g170684 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170700 = lerpResult1026_g170674;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_992_0_g170674 = staticSwitch14_g170700;
				half Blend_VertMask913_g170674 = temp_output_992_0_g170674;
				half3 Visual_NormalWS953_g170674 = Out_NormalWS4_g170690;
				float clampResult17_g170687 = clamp( saturate( (Visual_NormalWS953_g170674).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _ThirdProjRemap.x;
				float temp_output_10_0_g170688 = ( _ThirdProjRemap.y - temp_output_7_0_g170688 );
				float lerpResult1004_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170687 - temp_output_7_0_g170688 ) / ( temp_output_10_0_g170688 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170674 = lerpResult1004_g170674;
				TVEGlobalData Data15_g170692 = Data204_g170494;
				float Out_Dummy15_g170692 = 0;
				float4 Out_CoatParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170692 = float4( 0,0,0,0 );
				Out_Dummy15_g170692 = Data15_g170692.Dummy;
				Out_CoatParams15_g170692 = Data15_g170692.CoatParams;
				Out_PaintParams15_g170692 = Data15_g170692.PaintParams;
				Out_GlowParams15_g170692 = Data15_g170692.GlowParams;
				Out_AtmoParams15_g170692= Data15_g170692.AtmoParams;
				Out_FadeParams15_g170692= Data15_g170692.FadeParams;
				Out_FormParams15_g170692 = Data15_g170692.FormParams;
				Out_LandParams15_g170692 = Data15_g170692.LandParams;
				Out_WindParams15_g170692 = Data15_g170692.WindParams;
				Out_PushParams15_g170692 = Data15_g170692.PushParams;
				half4 Global_CoatParams972_g170674 = Out_CoatParams15_g170692;
				float lerpResult1023_g170674 = lerp( 1.0 , (Global_CoatParams972_g170674).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170674 = lerpResult1023_g170674;
				#else
				float staticSwitch965_g170674 = 1.0;
				#endif
				half Blend_GlobalMask968_g170674 = staticSwitch965_g170674;
				float temp_output_432_0_g170674 = ( _ThirdIntensityValue * Detail_TexMask429_g170674 * Blend_VertMask913_g170674 * Blend_ProjMask912_g170674 * Blend_GlobalMask968_g170674 );
				float clampResult17_g170694 = clamp( temp_output_432_0_g170674 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170693 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170693 = ( _ThirdBlendRemap.y - temp_output_7_0_g170693 );
				half Detail_Mask412_g170674 = ( saturate( ( ( clampResult17_g170694 - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170674 = lerp( Visual_Albedo527_g170674 , lerpResult985_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170674 = lerpResult989_g170674;
				#else
				float3 staticSwitch415_g170674 = Visual_Albedo527_g170674;
				#endif
				half3 Final_Albedo601_g170674 = staticSwitch415_g170674;
				float3 In_Albedo3_g170691 = Final_Albedo601_g170674;
				float3 In_AlbedoRaw3_g170691 = Final_Albedo601_g170674;
				half2 Visual_NormalTS529_g170674 = Out_NormalTS4_g170690;
				float2 lerpResult40_g170696 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170674 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170676) = _ThirdNormalTex;
				float localFilterTexture29_g170704 = ( 0.0 );
				SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170704 = SamplerDefault29_g170704;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170704 = SamplerDefault29_g170704;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170704 = SamplerPoint29_g170704;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170704 = SamplerLow29_g170704;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170704 = SamplerMedium29_g170704;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170704 = SamplerHigh29_g170704;
				#endif
				SamplerState Sampler276_g170676 = SS29_g170704;
				float4 temp_output_37_0_g170676 = Local_LayerCoords790_g170674;
				half4 Coords276_g170676 = temp_output_37_0_g170676;
				half2 TexCoord276_g170676 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170676 = SampleMain( Texture276_g170676 , Sampler276_g170676 , Coords276_g170676 , TexCoord276_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170676) = _ThirdNormalTex;
				SamplerState Sampler275_g170676 = SS29_g170704;
				half4 Coords275_g170676 = temp_output_37_0_g170676;
				half2 TexCoord275_g170676 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170676 = SampleExtra( Texture275_g170676 , Sampler275_g170676 , Coords275_g170676 , TexCoord275_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170676) = _ThirdNormalTex;
				SamplerState Sampler238_g170676 = SS29_g170704;
				half4 Coords238_g170676 = temp_output_37_0_g170676;
				float3 temp_output_279_0_g170676 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170676 = temp_output_279_0_g170676;
				half4 localSamplePlanar2D238_g170676 = SamplePlanar2D( Texture238_g170676 , Sampler238_g170676 , Coords238_g170676 , WorldPosition238_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170676) = _ThirdNormalTex;
				SamplerState Sampler246_g170676 = SS29_g170704;
				half4 Coords246_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition246_g170676 = temp_output_279_0_g170676;
				float3 temp_output_280_0_g170676 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170676 = temp_output_280_0_g170676;
				half4 localSamplePlanar3D246_g170676 = SamplePlanar3D( Texture246_g170676 , Sampler246_g170676 , Coords246_g170676 , WorldPosition246_g170676 , WorldNormal246_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170676) = _ThirdNormalTex;
				SamplerState Sampler234_g170676 = SS29_g170704;
				float4 Coords234_g170676 = temp_output_37_0_g170676;
				float3 WorldPosition234_g170676 = temp_output_279_0_g170676;
				float4 localSampleStochastic2D234_g170676 = SampleStochastic2D( Texture234_g170676 , Sampler234_g170676 , Coords234_g170676 , WorldPosition234_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170676) = _ThirdNormalTex;
				SamplerState Sampler263_g170676 = SS29_g170704;
				half4 Coords263_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition263_g170676 = temp_output_279_0_g170676;
				half3 WorldNormal263_g170676 = temp_output_280_0_g170676;
				half4 localSampleStochastic3D263_g170676 = SampleStochastic3D( Texture263_g170676 , Sampler263_g170676 , Coords263_g170676 , WorldPosition263_g170676 , WorldNormal263_g170676 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170674 = localSampleExtra275_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170674 = localSamplePlanar2D238_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170674 = localSamplePlanar3D246_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170674 = localSampleStochastic2D234_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170674 = localSampleStochastic3D263_g170676;
				#else
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#endif
				half4 Local_NormalTex776_g170674 = staticSwitch698_g170674;
				half4 Normal_Packed45_g170678 = Local_NormalTex776_g170674;
				float2 appendResult58_g170678 = (float2(( (Normal_Packed45_g170678).x * (Normal_Packed45_g170678).w ) , (Normal_Packed45_g170678).y));
				half2 Normal_Default50_g170678 = appendResult58_g170678;
				half2 Normal_ASTC41_g170678 = (Normal_Packed45_g170678).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170678 = Normal_ASTC41_g170678;
				#else
				float2 staticSwitch38_g170678 = Normal_Default50_g170678;
				#endif
				half2 Normal_NO_DTX544_g170678 = (Normal_Packed45_g170678).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170678 = Normal_NO_DTX544_g170678;
				#else
				float2 staticSwitch37_g170678 = staticSwitch38_g170678;
				#endif
				float2 temp_output_724_0_g170674 = ( (staticSwitch37_g170678*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170679 = temp_output_724_0_g170674;
				float2 break71_g170679 = Normal_Planar45_g170679;
				float3 appendResult72_g170679 = (float3(break71_g170679.x , 0.0 , break71_g170679.y));
				float2 temp_output_858_0_g170674 = (mul( ase_worldToTangent, appendResult72_g170679 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#else
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#endif
				half2 Local_NormalTS729_g170674 = staticSwitch727_g170674;
				float2 temp_output_36_0_g170696 = ( lerpResult40_g170696 + Local_NormalTS729_g170674 );
				float2 lerpResult405_g170674 = lerp( Visual_NormalTS529_g170674 , temp_output_36_0_g170696 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170674 = lerpResult405_g170674;
				#else
				float2 staticSwitch418_g170674 = Visual_NormalTS529_g170674;
				#endif
				half2 Final_NormalTS612_g170674 = staticSwitch418_g170674;
				float2 In_NormalTS3_g170691 = Final_NormalTS612_g170674;
				float3 appendResult68_g170697 = (float3(Final_NormalTS612_g170674 , 1.0));
				float3 tanNormal74_g170697 = appendResult68_g170697;
				float3 worldNormal74_g170697 = normalize( float3(dot(tanToWorld0,tanNormal74_g170697), dot(tanToWorld1,tanNormal74_g170697), dot(tanToWorld2,tanNormal74_g170697)) );
				half3 Final_NormalWS956_g170674 = worldNormal74_g170697;
				float3 In_NormalWS3_g170691 = Final_NormalWS956_g170674;
				half4 Visual_Shader531_g170674 = Out_Shader4_g170690;
				float4 lerpResult1000_g170674 = lerp( Local_Masks750_g170674 , ( Visual_Shader531_g170674 * Local_Masks750_g170674 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170674 = lerp( Visual_Shader531_g170674 , lerpResult1000_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170674 = lerpResult998_g170674;
				#else
				float4 staticSwitch451_g170674 = Visual_Shader531_g170674;
				#endif
				half4 Final_Masks613_g170674 = staticSwitch451_g170674;
				float4 In_Shader3_g170691 = Final_Masks613_g170674;
				float4 In_Emissive3_g170691 = Out_Emissive4_g170690;
				float3 temp_output_3_0_g170699 = Final_Albedo601_g170674;
				float dotResult20_g170699 = dot( temp_output_3_0_g170699 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170674 = dotResult20_g170699;
				float In_Grayscale3_g170691 = Final_Grayscale615_g170674;
				float clampResult651_g170674 = clamp( saturate( ( Final_Grayscale615_g170674 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170674 = clampResult651_g170674;
				float In_Luminosity3_g170691 = Final_Luminosity652_g170674;
				half Visual_MultiMask547_g170674 = Out_MultiMask4_g170690;
				float lerpResult477_g170674 = lerp( Visual_MultiMask547_g170674 , Local_MultiMask767_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch482_g170674 = lerpResult477_g170674;
				#else
				float staticSwitch482_g170674 = Visual_MultiMask547_g170674;
				#endif
				half Final_MultiMask572_g170674 = staticSwitch482_g170674;
				float In_MultiMask3_g170691 = Final_MultiMask572_g170674;
				half Visual_AlphaClip559_g170674 = Out_AlphaClip4_g170690;
				float temp_output_718_0_g170674 = (Local_AlbedoTex777_g170674).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170674 = ( temp_output_718_0_g170674 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170674 = temp_output_718_0_g170674;
				#endif
				half Local_AlphaClip772_g170674 = staticSwitch924_g170674;
				float lerpResult448_g170674 = lerp( Visual_AlphaClip559_g170674 , Local_AlphaClip772_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch564_g170674 = lerpResult448_g170674;
				#else
				float staticSwitch564_g170674 = Visual_AlphaClip559_g170674;
				#endif
				half Final_AlphaClip602_g170674 = staticSwitch564_g170674;
				float In_AlphaClip3_g170691 = Final_AlphaClip602_g170674;
				half Visual_AlphaFade588_g170674 = Out_AlphaFade4_g170690;
				half Local_AlphaFade773_g170674 = (lerpResult706_g170674).a;
				float lerpResult604_g170674 = lerp( Visual_AlphaFade588_g170674 , Local_AlphaFade773_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch608_g170674 = lerpResult604_g170674;
				#else
				float staticSwitch608_g170674 = Visual_AlphaFade588_g170674;
				#endif
				half Final_AlphaFade611_g170674 = staticSwitch608_g170674;
				float In_AlphaFade3_g170691 = Final_AlphaFade611_g170674;
				float3 In_Translucency3_g170691 = Out_Translucency4_g170690;
				float In_Transmission3_g170691 = Out_Transmission4_g170690;
				float In_Thickness3_g170691 = Out_Thickness4_g170690;
				float In_Diffusion3_g170691 = Out_Diffusion4_g170690;
				Data3_g170691.Dummy = In_Dummy3_g170691;
				Data3_g170691.Albedo = In_Albedo3_g170691;
				Data3_g170691.AlbedoRaw = In_AlbedoRaw3_g170691;
				Data3_g170691.NormalTS = In_NormalTS3_g170691;
				Data3_g170691.NormalWS = In_NormalWS3_g170691;
				Data3_g170691.Shader = In_Shader3_g170691;
				Data3_g170691.Emissive= In_Emissive3_g170691;
				Data3_g170691.MultiMask = In_MultiMask3_g170691;
				Data3_g170691.Grayscale = In_Grayscale3_g170691;
				Data3_g170691.Luminosity = In_Luminosity3_g170691;
				Data3_g170691.AlphaClip = In_AlphaClip3_g170691;
				Data3_g170691.AlphaFade = In_AlphaFade3_g170691;
				Data3_g170691.Translucency = In_Translucency3_g170691;
				Data3_g170691.Transmission = In_Transmission3_g170691;
				Data3_g170691.Thickness = In_Thickness3_g170691;
				Data3_g170691.Diffusion = In_Diffusion3_g170691;
				TVEVisualData Data4_g170785 = Data3_g170691;
				float Out_Dummy4_g170785 = 0;
				float3 Out_Albedo4_g170785 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170785 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170785 = float2( 0,0 );
				float3 Out_NormalWS4_g170785 = float3( 0,0,0 );
				float4 Out_Shader4_g170785 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170785 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170785 = 0;
				float Out_Grayscale4_g170785 = 0;
				float Out_Luminosity4_g170785 = 0;
				float Out_AlphaClip4_g170785 = 0;
				float Out_AlphaFade4_g170785 = 0;
				float3 Out_Translucency4_g170785 = float3( 0,0,0 );
				float Out_Transmission4_g170785 = 0;
				float Out_Thickness4_g170785 = 0;
				float Out_Diffusion4_g170785 = 0;
				Out_Dummy4_g170785 = Data4_g170785.Dummy;
				Out_Albedo4_g170785 = Data4_g170785.Albedo;
				Out_AlbedoRaw4_g170785 = Data4_g170785.AlbedoRaw;
				Out_NormalTS4_g170785 = Data4_g170785.NormalTS;
				Out_NormalWS4_g170785 = Data4_g170785.NormalWS;
				Out_Shader4_g170785 = Data4_g170785.Shader;
				Out_Emissive4_g170785= Data4_g170785.Emissive;
				Out_MultiMask4_g170785 = Data4_g170785.MultiMask;
				Out_Grayscale4_g170785 = Data4_g170785.Grayscale;
				Out_Luminosity4_g170785= Data4_g170785.Luminosity;
				Out_AlphaClip4_g170785 = Data4_g170785.AlphaClip;
				Out_AlphaFade4_g170785 = Data4_g170785.AlphaFade;
				Out_Translucency4_g170785 = Data4_g170785.Translucency;
				Out_Transmission4_g170785 = Data4_g170785.Transmission;
				Out_Thickness4_g170785 = Data4_g170785.Thickness;
				Out_Diffusion4_g170785 = Data4_g170785.Diffusion;
				half3 Visual_Albedo127_g170784 = Out_Albedo4_g170785;
				TVEModelData Data15_g170793 = Data16_g170493;
				float Out_Dummy15_g170793 = 0;
				float3 Out_PositionWS15_g170793 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170793 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170793 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170793 = float3( 0,0,0 );
				float4 Out_VertexData15_g170793 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170793 = float4( 0,0,0,0 );
				Out_Dummy15_g170793 = Data15_g170793.Dummy;
				Out_PositionWS15_g170793 = Data15_g170793.PositionWS;
				Out_PositionWO15_g170793 = Data15_g170793.PositionWO;
				Out_PivotWS15_g170793 = Data15_g170793.PivotWS;
				Out_PivotWO15_g170793 = Data15_g170793.PivotWO;
				Out_NormalWS15_g170793 = Data15_g170793.NormalWS;
				Out_ViewDirWS15_g170793 = Data15_g170793.ViewDirWS;
				Out_VertexData15_g170793 = Data15_g170793.VertexData;
				Out_BoundsData15_g170793 = Data15_g170793.BoundsData;
				half4 Model_VertexData206_g170784 = Out_VertexData15_g170793;
				float4 break208_g170784 = Model_VertexData206_g170784;
				float4 break33_g170791 = _occlusion_vert_mode;
				float temp_output_30_0_g170791 = ( break208_g170784.x * break33_g170791.x );
				float temp_output_29_0_g170791 = ( break208_g170784.y * break33_g170791.y );
				float temp_output_31_0_g170791 = ( break208_g170784.z * break33_g170791.z );
				float temp_output_28_0_g170791 = ( temp_output_30_0_g170791 + temp_output_29_0_g170791 + temp_output_31_0_g170791 + ( break208_g170784.w * break33_g170791.w ) );
				float temp_output_194_0_g170784 = temp_output_28_0_g170791;
				float clampResult17_g170789 = clamp( temp_output_194_0_g170784 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170788 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170788 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170788 );
				float temp_output_6_0_g170790 = saturate( ( ( clampResult17_g170789 - temp_output_7_0_g170788 ) / ( temp_output_10_0_g170788 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170790 = ( temp_output_6_0_g170790 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170790 = temp_output_6_0_g170790;
				#endif
				half Occlusion_Mask82_g170784 = staticSwitch14_g170790;
				float3 lerpResult75_g170784 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170784);
				float3 lerpResult186_g170784 = lerp( Visual_Albedo127_g170784 , ( Visual_Albedo127_g170784 * lerpResult75_g170784 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170784 = lerpResult186_g170784;
				#else
				float3 staticSwitch171_g170784 = Visual_Albedo127_g170784;
				#endif
				half3 Final_Albedo160_g170784 = staticSwitch171_g170784;
				float3 In_Albedo3_g170786 = Final_Albedo160_g170784;
				float3 In_AlbedoRaw3_g170786 = Final_Albedo160_g170784;
				float2 In_NormalTS3_g170786 = Out_NormalTS4_g170785;
				float3 In_NormalWS3_g170786 = Out_NormalWS4_g170785;
				float4 In_Shader3_g170786 = Out_Shader4_g170785;
				float4 In_Emissive3_g170786 = Out_Emissive4_g170785;
				float3 temp_output_3_0_g170787 = Final_Albedo160_g170784;
				float dotResult20_g170787 = dot( temp_output_3_0_g170787 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170784 = dotResult20_g170787;
				float In_Grayscale3_g170786 = Final_Grayscale164_g170784;
				float clampResult180_g170784 = clamp( saturate( ( Final_Grayscale164_g170784 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170784 = clampResult180_g170784;
				float In_Luminosity3_g170786 = Final_Shading181_g170784;
				float In_MultiMask3_g170786 = Out_MultiMask4_g170785;
				float In_AlphaClip3_g170786 = Out_AlphaClip4_g170785;
				float In_AlphaFade3_g170786 = Out_AlphaFade4_g170785;
				float3 In_Translucency3_g170786 = Out_Translucency4_g170785;
				float In_Transmission3_g170786 = Out_Transmission4_g170785;
				float In_Thickness3_g170786 = Out_Thickness4_g170785;
				float In_Diffusion3_g170786 = Out_Diffusion4_g170785;
				Data3_g170786.Dummy = In_Dummy3_g170786;
				Data3_g170786.Albedo = In_Albedo3_g170786;
				Data3_g170786.AlbedoRaw = In_AlbedoRaw3_g170786;
				Data3_g170786.NormalTS = In_NormalTS3_g170786;
				Data3_g170786.NormalWS = In_NormalWS3_g170786;
				Data3_g170786.Shader = In_Shader3_g170786;
				Data3_g170786.Emissive= In_Emissive3_g170786;
				Data3_g170786.MultiMask = In_MultiMask3_g170786;
				Data3_g170786.Grayscale = In_Grayscale3_g170786;
				Data3_g170786.Luminosity = In_Luminosity3_g170786;
				Data3_g170786.AlphaClip = In_AlphaClip3_g170786;
				Data3_g170786.AlphaFade = In_AlphaFade3_g170786;
				Data3_g170786.Translucency = In_Translucency3_g170786;
				Data3_g170786.Transmission = In_Transmission3_g170786;
				Data3_g170786.Thickness = In_Thickness3_g170786;
				Data3_g170786.Diffusion = In_Diffusion3_g170786;
				TVEVisualData Data4_g170796 = Data3_g170786;
				float Out_Dummy4_g170796 = 0;
				float3 Out_Albedo4_g170796 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170796 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170796 = float2( 0,0 );
				float3 Out_NormalWS4_g170796 = float3( 0,0,0 );
				float4 Out_Shader4_g170796 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170796 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170796 = 0;
				float Out_Grayscale4_g170796 = 0;
				float Out_Luminosity4_g170796 = 0;
				float Out_AlphaClip4_g170796 = 0;
				float Out_AlphaFade4_g170796 = 0;
				float3 Out_Translucency4_g170796 = float3( 0,0,0 );
				float Out_Transmission4_g170796 = 0;
				float Out_Thickness4_g170796 = 0;
				float Out_Diffusion4_g170796 = 0;
				Out_Dummy4_g170796 = Data4_g170796.Dummy;
				Out_Albedo4_g170796 = Data4_g170796.Albedo;
				Out_AlbedoRaw4_g170796 = Data4_g170796.AlbedoRaw;
				Out_NormalTS4_g170796 = Data4_g170796.NormalTS;
				Out_NormalWS4_g170796 = Data4_g170796.NormalWS;
				Out_Shader4_g170796 = Data4_g170796.Shader;
				Out_Emissive4_g170796= Data4_g170796.Emissive;
				Out_MultiMask4_g170796 = Data4_g170796.MultiMask;
				Out_Grayscale4_g170796 = Data4_g170796.Grayscale;
				Out_Luminosity4_g170796= Data4_g170796.Luminosity;
				Out_AlphaClip4_g170796 = Data4_g170796.AlphaClip;
				Out_AlphaFade4_g170796 = Data4_g170796.AlphaFade;
				Out_Translucency4_g170796 = Data4_g170796.Translucency;
				Out_Transmission4_g170796 = Data4_g170796.Transmission;
				Out_Thickness4_g170796 = Data4_g170796.Thickness;
				Out_Diffusion4_g170796 = Data4_g170796.Diffusion;
				half3 Visual_Albedo127_g170794 = Out_Albedo4_g170796;
				TVEModelData Data15_g170803 = Data16_g170493;
				float Out_Dummy15_g170803 = 0;
				float3 Out_PositionWS15_g170803 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170803 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170803 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170803 = float3( 0,0,0 );
				float4 Out_VertexData15_g170803 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170803 = float4( 0,0,0,0 );
				Out_Dummy15_g170803 = Data15_g170803.Dummy;
				Out_PositionWS15_g170803 = Data15_g170803.PositionWS;
				Out_PositionWO15_g170803 = Data15_g170803.PositionWO;
				Out_PivotWS15_g170803 = Data15_g170803.PivotWS;
				Out_PivotWO15_g170803 = Data15_g170803.PivotWO;
				Out_NormalWS15_g170803 = Data15_g170803.NormalWS;
				Out_ViewDirWS15_g170803 = Data15_g170803.ViewDirWS;
				Out_VertexData15_g170803 = Data15_g170803.VertexData;
				Out_BoundsData15_g170803 = Data15_g170803.BoundsData;
				half4 Model_VertexData224_g170794 = Out_VertexData15_g170803;
				float4 break226_g170794 = Model_VertexData224_g170794;
				float4 break33_g170795 = _gradient_vert_mode;
				float temp_output_30_0_g170795 = ( break226_g170794.x * break33_g170795.x );
				float temp_output_29_0_g170795 = ( break226_g170794.y * break33_g170795.y );
				float temp_output_31_0_g170795 = ( break226_g170794.z * break33_g170795.z );
				float temp_output_28_0_g170795 = ( temp_output_30_0_g170795 + temp_output_29_0_g170795 + temp_output_31_0_g170795 + ( break226_g170794.w * break33_g170795.w ) );
				float temp_output_211_0_g170794 = temp_output_28_0_g170795;
				float clampResult17_g170800 = clamp( temp_output_211_0_g170794 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170801 = _GradientMeshRemap.x;
				float temp_output_10_0_g170801 = ( _GradientMeshRemap.y - temp_output_7_0_g170801 );
				float temp_output_6_0_g170802 = saturate( ( ( clampResult17_g170800 - temp_output_7_0_g170801 ) / ( temp_output_10_0_g170801 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170802 = ( temp_output_6_0_g170802 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170802 = temp_output_6_0_g170802;
				#endif
				half Gradient_VertMask82_g170794 = staticSwitch14_g170802;
				half Gradient_Mask200_g170794 = Gradient_VertMask82_g170794;
				float3 lerpResult75_g170794 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170794);
				float temp_output_162_11_g170794 = Out_MultiMask4_g170796;
				half Visual_MultiMask196_g170794 = temp_output_162_11_g170794;
				float lerpResult190_g170794 = lerp( 1.0 , Visual_MultiMask196_g170794 , _GradientMultiValue);
				half Gradient_MultiMask194_g170794 = lerpResult190_g170794;
				float3 lerpResult186_g170794 = lerp( Visual_Albedo127_g170794 , ( Visual_Albedo127_g170794 * lerpResult75_g170794 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170794 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170794 = lerpResult186_g170794;
				#else
				float3 staticSwitch171_g170794 = Visual_Albedo127_g170794;
				#endif
				half3 Final_Albedo160_g170794 = staticSwitch171_g170794;
				float3 In_Albedo3_g170797 = Final_Albedo160_g170794;
				float3 In_AlbedoRaw3_g170797 = Final_Albedo160_g170794;
				float2 In_NormalTS3_g170797 = Out_NormalTS4_g170796;
				float3 In_NormalWS3_g170797 = Out_NormalWS4_g170796;
				float4 In_Shader3_g170797 = Out_Shader4_g170796;
				float4 In_Emissive3_g170797 = Out_Emissive4_g170796;
				float3 temp_output_3_0_g170798 = Final_Albedo160_g170794;
				float dotResult20_g170798 = dot( temp_output_3_0_g170798 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170794 = dotResult20_g170798;
				float In_Grayscale3_g170797 = Final_Grayscale164_g170794;
				float clampResult180_g170794 = clamp( saturate( ( Final_Grayscale164_g170794 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170794 = clampResult180_g170794;
				float In_Luminosity3_g170797 = Final_Luminosity181_g170794;
				float In_MultiMask3_g170797 = temp_output_162_11_g170794;
				float In_AlphaClip3_g170797 = Out_AlphaClip4_g170796;
				float In_AlphaFade3_g170797 = Out_AlphaFade4_g170796;
				float3 In_Translucency3_g170797 = Out_Translucency4_g170796;
				float In_Transmission3_g170797 = Out_Transmission4_g170796;
				float In_Thickness3_g170797 = Out_Thickness4_g170796;
				float In_Diffusion3_g170797 = Out_Diffusion4_g170796;
				Data3_g170797.Dummy = In_Dummy3_g170797;
				Data3_g170797.Albedo = In_Albedo3_g170797;
				Data3_g170797.AlbedoRaw = In_AlbedoRaw3_g170797;
				Data3_g170797.NormalTS = In_NormalTS3_g170797;
				Data3_g170797.NormalWS = In_NormalWS3_g170797;
				Data3_g170797.Shader = In_Shader3_g170797;
				Data3_g170797.Emissive= In_Emissive3_g170797;
				Data3_g170797.MultiMask = In_MultiMask3_g170797;
				Data3_g170797.Grayscale = In_Grayscale3_g170797;
				Data3_g170797.Luminosity = In_Luminosity3_g170797;
				Data3_g170797.AlphaClip = In_AlphaClip3_g170797;
				Data3_g170797.AlphaFade = In_AlphaFade3_g170797;
				Data3_g170797.Translucency = In_Translucency3_g170797;
				Data3_g170797.Transmission = In_Transmission3_g170797;
				Data3_g170797.Thickness = In_Thickness3_g170797;
				Data3_g170797.Diffusion = In_Diffusion3_g170797;
				TVEVisualData Data4_g170806 = Data3_g170797;
				float Out_Dummy4_g170806 = 0;
				float3 Out_Albedo4_g170806 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170806 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170806 = float2( 0,0 );
				float3 Out_NormalWS4_g170806 = float3( 0,0,0 );
				float4 Out_Shader4_g170806 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170806 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170806 = 0;
				float Out_Grayscale4_g170806 = 0;
				float Out_Luminosity4_g170806 = 0;
				float Out_AlphaClip4_g170806 = 0;
				float Out_AlphaFade4_g170806 = 0;
				float3 Out_Translucency4_g170806 = float3( 0,0,0 );
				float Out_Transmission4_g170806 = 0;
				float Out_Thickness4_g170806 = 0;
				float Out_Diffusion4_g170806 = 0;
				Out_Dummy4_g170806 = Data4_g170806.Dummy;
				Out_Albedo4_g170806 = Data4_g170806.Albedo;
				Out_AlbedoRaw4_g170806 = Data4_g170806.AlbedoRaw;
				Out_NormalTS4_g170806 = Data4_g170806.NormalTS;
				Out_NormalWS4_g170806 = Data4_g170806.NormalWS;
				Out_Shader4_g170806 = Data4_g170806.Shader;
				Out_Emissive4_g170806= Data4_g170806.Emissive;
				Out_MultiMask4_g170806 = Data4_g170806.MultiMask;
				Out_Grayscale4_g170806 = Data4_g170806.Grayscale;
				Out_Luminosity4_g170806= Data4_g170806.Luminosity;
				Out_AlphaClip4_g170806 = Data4_g170806.AlphaClip;
				Out_AlphaFade4_g170806 = Data4_g170806.AlphaFade;
				Out_Translucency4_g170806 = Data4_g170806.Translucency;
				Out_Transmission4_g170806 = Data4_g170806.Transmission;
				Out_Thickness4_g170806 = Data4_g170806.Thickness;
				Out_Diffusion4_g170806 = Data4_g170806.Diffusion;
				half3 Visual_Albedo127_g170804 = Out_Albedo4_g170806;
				TVEModelData Data15_g170812 = Data16_g170493;
				float Out_Dummy15_g170812 = 0;
				float3 Out_PositionWS15_g170812 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170812 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170812 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170812 = float3( 0,0,0 );
				float4 Out_VertexData15_g170812 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170812 = float4( 0,0,0,0 );
				Out_Dummy15_g170812 = Data15_g170812.Dummy;
				Out_PositionWS15_g170812 = Data15_g170812.PositionWS;
				Out_PositionWO15_g170812 = Data15_g170812.PositionWO;
				Out_PivotWS15_g170812 = Data15_g170812.PivotWS;
				Out_PivotWO15_g170812 = Data15_g170812.PivotWO;
				Out_NormalWS15_g170812 = Data15_g170812.NormalWS;
				Out_ViewDirWS15_g170812 = Data15_g170812.ViewDirWS;
				Out_VertexData15_g170812 = Data15_g170812.VertexData;
				Out_BoundsData15_g170812 = Data15_g170812.BoundsData;
				half3 Model_PositionWO224_g170804 = Out_PositionWO15_g170812;
				half3 Model_PivotWO239_g170804 = Out_PivotWO15_g170812;
				float3 lerpResult242_g170804 = lerp( Model_PositionWO224_g170804 , Model_PivotWO239_g170804 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170808 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170804 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170810 = clamp( tex3DNode60_g170808.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170811 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170811 = ( _VariationNoiseRemap.y - temp_output_7_0_g170811 );
				float temp_output_238_0_g170804 = saturate( ( ( clampResult17_g170810 - temp_output_7_0_g170811 ) / ( temp_output_10_0_g170811 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170804 = temp_output_238_0_g170804;
				half Variaton_Mask200_g170804 = Variaton_NoiseMask82_g170804;
				float3 lerpResult75_g170804 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170804);
				float temp_output_162_11_g170804 = Out_MultiMask4_g170806;
				half Visual_MultiMask196_g170804 = temp_output_162_11_g170804;
				float lerpResult190_g170804 = lerp( 1.0 , Visual_MultiMask196_g170804 , _VariationMultiValue);
				half Variaton_MultiMask194_g170804 = lerpResult190_g170804;
				float3 lerpResult186_g170804 = lerp( Visual_Albedo127_g170804 , ( Visual_Albedo127_g170804 * lerpResult75_g170804 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170804 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170804 = lerpResult186_g170804;
				#else
				float3 staticSwitch171_g170804 = Visual_Albedo127_g170804;
				#endif
				half3 Final_Albedo160_g170804 = staticSwitch171_g170804;
				float3 In_Albedo3_g170807 = Final_Albedo160_g170804;
				float3 In_AlbedoRaw3_g170807 = Final_Albedo160_g170804;
				float2 In_NormalTS3_g170807 = Out_NormalTS4_g170806;
				float3 In_NormalWS3_g170807 = Out_NormalWS4_g170806;
				float4 In_Shader3_g170807 = Out_Shader4_g170806;
				float4 In_Emissive3_g170807 = Out_Emissive4_g170806;
				float3 temp_output_3_0_g170805 = Final_Albedo160_g170804;
				float dotResult20_g170805 = dot( temp_output_3_0_g170805 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170804 = dotResult20_g170805;
				float In_Grayscale3_g170807 = Final_Grayscale164_g170804;
				float clampResult180_g170804 = clamp( saturate( ( Final_Grayscale164_g170804 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170804 = clampResult180_g170804;
				float In_Luminosity3_g170807 = Final_Luminosity181_g170804;
				float In_MultiMask3_g170807 = temp_output_162_11_g170804;
				float In_AlphaClip3_g170807 = Out_AlphaClip4_g170806;
				float In_AlphaFade3_g170807 = Out_AlphaFade4_g170806;
				float3 In_Translucency3_g170807 = Out_Translucency4_g170806;
				float In_Transmission3_g170807 = Out_Transmission4_g170806;
				float In_Thickness3_g170807 = Out_Thickness4_g170806;
				float In_Diffusion3_g170807 = Out_Diffusion4_g170806;
				Data3_g170807.Dummy = In_Dummy3_g170807;
				Data3_g170807.Albedo = In_Albedo3_g170807;
				Data3_g170807.AlbedoRaw = In_AlbedoRaw3_g170807;
				Data3_g170807.NormalTS = In_NormalTS3_g170807;
				Data3_g170807.NormalWS = In_NormalWS3_g170807;
				Data3_g170807.Shader = In_Shader3_g170807;
				Data3_g170807.Emissive= In_Emissive3_g170807;
				Data3_g170807.MultiMask = In_MultiMask3_g170807;
				Data3_g170807.Grayscale = In_Grayscale3_g170807;
				Data3_g170807.Luminosity = In_Luminosity3_g170807;
				Data3_g170807.AlphaClip = In_AlphaClip3_g170807;
				Data3_g170807.AlphaFade = In_AlphaFade3_g170807;
				Data3_g170807.Translucency = In_Translucency3_g170807;
				Data3_g170807.Transmission = In_Transmission3_g170807;
				Data3_g170807.Thickness = In_Thickness3_g170807;
				Data3_g170807.Diffusion = In_Diffusion3_g170807;
				TVEVisualData Data4_g170836 = Data3_g170807;
				float Out_Dummy4_g170836 = 0;
				float3 Out_Albedo4_g170836 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170836 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170836 = float2( 0,0 );
				float3 Out_NormalWS4_g170836 = float3( 0,0,0 );
				float4 Out_Shader4_g170836 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170836 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170836 = 0;
				float Out_Grayscale4_g170836 = 0;
				float Out_Luminosity4_g170836 = 0;
				float Out_AlphaClip4_g170836 = 0;
				float Out_AlphaFade4_g170836 = 0;
				float3 Out_Translucency4_g170836 = float3( 0,0,0 );
				float Out_Transmission4_g170836 = 0;
				float Out_Thickness4_g170836 = 0;
				float Out_Diffusion4_g170836 = 0;
				Out_Dummy4_g170836 = Data4_g170836.Dummy;
				Out_Albedo4_g170836 = Data4_g170836.Albedo;
				Out_AlbedoRaw4_g170836 = Data4_g170836.AlbedoRaw;
				Out_NormalTS4_g170836 = Data4_g170836.NormalTS;
				Out_NormalWS4_g170836 = Data4_g170836.NormalWS;
				Out_Shader4_g170836 = Data4_g170836.Shader;
				Out_Emissive4_g170836= Data4_g170836.Emissive;
				Out_MultiMask4_g170836 = Data4_g170836.MultiMask;
				Out_Grayscale4_g170836 = Data4_g170836.Grayscale;
				Out_Luminosity4_g170836= Data4_g170836.Luminosity;
				Out_AlphaClip4_g170836 = Data4_g170836.AlphaClip;
				Out_AlphaFade4_g170836 = Data4_g170836.AlphaFade;
				Out_Translucency4_g170836 = Data4_g170836.Translucency;
				Out_Transmission4_g170836 = Data4_g170836.Transmission;
				Out_Thickness4_g170836 = Data4_g170836.Thickness;
				Out_Diffusion4_g170836 = Data4_g170836.Diffusion;
				half3 Visual_Albedo139_g170814 = Out_Albedo4_g170836;
				float temp_output_200_12_g170814 = Out_Grayscale4_g170836;
				half Visual_Grayscale150_g170814 = temp_output_200_12_g170814;
				float3 temp_cast_37 = (Visual_Grayscale150_g170814).xxx;
				TVEGlobalData Data15_g170815 = Data204_g170494;
				float Out_Dummy15_g170815 = 0;
				float4 Out_CoatParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170815 = float4( 0,0,0,0 );
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_CoatParams15_g170815 = Data15_g170815.CoatParams;
				Out_PaintParams15_g170815 = Data15_g170815.PaintParams;
				Out_GlowParams15_g170815 = Data15_g170815.GlowParams;
				Out_AtmoParams15_g170815= Data15_g170815.AtmoParams;
				Out_FadeParams15_g170815= Data15_g170815.FadeParams;
				Out_FormParams15_g170815 = Data15_g170815.FormParams;
				Out_LandParams15_g170815 = Data15_g170815.LandParams;
				Out_WindParams15_g170815 = Data15_g170815.WindParams;
				Out_PushParams15_g170815 = Data15_g170815.PushParams;
				half4 Global_PaintParams209_g170814 = Out_PaintParams15_g170815;
				float temp_output_6_0_g170816 = ( saturate( (Global_PaintParams209_g170814).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170816 = ( temp_output_6_0_g170816 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170816 = temp_output_6_0_g170816;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170814 = staticSwitch14_g170816;
				#else
				float staticSwitch283_g170814 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170814 = staticSwitch283_g170814;
				float3 lerpResult368_g170814 = lerp( Visual_Albedo139_g170814 , temp_cast_37 , ( Tinting_GlobalValue285_g170814 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170834 = 2.0;
				#else
				float staticSwitch1_g170834 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170814 = (Global_PaintParams209_g170814).xyz;
				#else
				float3 staticSwitch288_g170814 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170814 = staticSwitch288_g170814;
				float temp_output_200_11_g170814 = Out_MultiMask4_g170836;
				half Visual_MultiMask181_g170814 = temp_output_200_11_g170814;
				float lerpResult147_g170814 = lerp( 1.0 , Visual_MultiMask181_g170814 , _TintingMultiValue);
				half Tinting_MutiMask121_g170814 = lerpResult147_g170814;
				half Tinting_TexMask385_g170814 = 1.0;
				float temp_output_200_15_g170814 = Out_Luminosity4_g170836;
				half Visual_Luminosity257_g170814 = temp_output_200_15_g170814;
				float clampResult17_g170828 = clamp( Visual_Luminosity257_g170814 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170827 = _TintingLumaRemap.x;
				float temp_output_10_0_g170827 = ( _TintingLumaRemap.y - temp_output_7_0_g170827 );
				float lerpResult228_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170828 - temp_output_7_0_g170827 ) / ( temp_output_10_0_g170827 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170814 = lerpResult228_g170814;
				TVEModelData Data15_g170837 = Data16_g170493;
				float Out_Dummy15_g170837 = 0;
				float3 Out_PositionWS15_g170837 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170837 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170837 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170837 = float3( 0,0,0 );
				float4 Out_VertexData15_g170837 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170837 = float4( 0,0,0,0 );
				Out_Dummy15_g170837 = Data15_g170837.Dummy;
				Out_PositionWS15_g170837 = Data15_g170837.PositionWS;
				Out_PositionWO15_g170837 = Data15_g170837.PositionWO;
				Out_PivotWS15_g170837 = Data15_g170837.PivotWS;
				Out_PivotWO15_g170837 = Data15_g170837.PivotWO;
				Out_NormalWS15_g170837 = Data15_g170837.NormalWS;
				Out_ViewDirWS15_g170837 = Data15_g170837.ViewDirWS;
				Out_VertexData15_g170837 = Data15_g170837.VertexData;
				Out_BoundsData15_g170837 = Data15_g170837.BoundsData;
				half4 Model_VertexMasks307_g170814 = Out_VertexData15_g170837;
				float4 break311_g170814 = Model_VertexMasks307_g170814;
				float4 break33_g170820 = _tinting_vert_mode;
				float temp_output_30_0_g170820 = ( break311_g170814.x * break33_g170820.x );
				float temp_output_29_0_g170820 = ( break311_g170814.y * break33_g170820.y );
				float temp_output_31_0_g170820 = ( break311_g170814.z * break33_g170820.z );
				float temp_output_28_0_g170820 = ( temp_output_30_0_g170820 + temp_output_29_0_g170820 + temp_output_31_0_g170820 + ( break311_g170814.w * break33_g170820.w ) );
				float clampResult17_g170826 = clamp( temp_output_28_0_g170820 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170825 = _TintingMeshRemap.x;
				float temp_output_10_0_g170825 = ( _TintingMeshRemap.y - temp_output_7_0_g170825 );
				float lerpResult370_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170826 - temp_output_7_0_g170825 ) / ( temp_output_10_0_g170825 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170829 = lerpResult370_g170814;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170829 = ( temp_output_6_0_g170829 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170829 = temp_output_6_0_g170829;
				#endif
				float temp_output_333_0_g170814 = staticSwitch14_g170829;
				half Tinting_VertMask309_g170814 = temp_output_333_0_g170814;
				half Tinting_NoiseMask213_g170814 = 1.0;
				half Custom_Mask345_g170814 = 1.0;
				float temp_output_7_0_g170823 = _TintingBlendRemap.x;
				float temp_output_10_0_g170823 = ( _TintingBlendRemap.y - temp_output_7_0_g170823 );
				half Tinting_Mask242_g170814 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170814 * Tinting_TexMask385_g170814 * Tinting_LumaMask153_g170814 * Tinting_VertMask309_g170814 * Tinting_NoiseMask213_g170814 * Tinting_GlobalValue285_g170814 * Custom_Mask345_g170814 ) - temp_output_7_0_g170823 ) / ( temp_output_10_0_g170823 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170814 = lerp( Visual_Albedo139_g170814 , ( lerpResult368_g170814 * staticSwitch1_g170834 * Tinting_ColorGlobal290_g170814 * (_TintingColor).rgb ) , Tinting_Mask242_g170814);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170814 = lerpResult90_g170814;
				#else
				float3 staticSwitch286_g170814 = Visual_Albedo139_g170814;
				#endif
				half3 Final_Albedo97_g170814 = staticSwitch286_g170814;
				float3 In_Albedo3_g170835 = Final_Albedo97_g170814;
				float3 In_AlbedoRaw3_g170835 = Out_AlbedoRaw4_g170836;
				float2 In_NormalTS3_g170835 = Out_NormalTS4_g170836;
				float3 In_NormalWS3_g170835 = Out_NormalWS4_g170836;
				float4 In_Shader3_g170835 = Out_Shader4_g170836;
				float4 In_Emissive3_g170835 = Out_Emissive4_g170836;
				float In_Grayscale3_g170835 = temp_output_200_12_g170814;
				float In_Luminosity3_g170835 = temp_output_200_15_g170814;
				float In_MultiMask3_g170835 = temp_output_200_11_g170814;
				float In_AlphaClip3_g170835 = Out_AlphaClip4_g170836;
				float In_AlphaFade3_g170835 = Out_AlphaFade4_g170836;
				float3 In_Translucency3_g170835 = Out_Translucency4_g170836;
				float In_Transmission3_g170835 = Out_Transmission4_g170836;
				float In_Thickness3_g170835 = Out_Thickness4_g170836;
				float In_Diffusion3_g170835 = Out_Diffusion4_g170836;
				Data3_g170835.Dummy = In_Dummy3_g170835;
				Data3_g170835.Albedo = In_Albedo3_g170835;
				Data3_g170835.AlbedoRaw = In_AlbedoRaw3_g170835;
				Data3_g170835.NormalTS = In_NormalTS3_g170835;
				Data3_g170835.NormalWS = In_NormalWS3_g170835;
				Data3_g170835.Shader = In_Shader3_g170835;
				Data3_g170835.Emissive= In_Emissive3_g170835;
				Data3_g170835.MultiMask = In_MultiMask3_g170835;
				Data3_g170835.Grayscale = In_Grayscale3_g170835;
				Data3_g170835.Luminosity = In_Luminosity3_g170835;
				Data3_g170835.AlphaClip = In_AlphaClip3_g170835;
				Data3_g170835.AlphaFade = In_AlphaFade3_g170835;
				Data3_g170835.Translucency = In_Translucency3_g170835;
				Data3_g170835.Transmission = In_Transmission3_g170835;
				Data3_g170835.Thickness = In_Thickness3_g170835;
				Data3_g170835.Diffusion = In_Diffusion3_g170835;
				TVEVisualData Data4_g170840 = Data3_g170835;
				float Out_Dummy4_g170840 = 0;
				float3 Out_Albedo4_g170840 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170840 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170840 = float2( 0,0 );
				float3 Out_NormalWS4_g170840 = float3( 0,0,0 );
				float4 Out_Shader4_g170840 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170840 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170840 = 0;
				float Out_Grayscale4_g170840 = 0;
				float Out_Luminosity4_g170840 = 0;
				float Out_AlphaClip4_g170840 = 0;
				float Out_AlphaFade4_g170840 = 0;
				float3 Out_Translucency4_g170840 = float3( 0,0,0 );
				float Out_Transmission4_g170840 = 0;
				float Out_Thickness4_g170840 = 0;
				float Out_Diffusion4_g170840 = 0;
				Out_Dummy4_g170840 = Data4_g170840.Dummy;
				Out_Albedo4_g170840 = Data4_g170840.Albedo;
				Out_AlbedoRaw4_g170840 = Data4_g170840.AlbedoRaw;
				Out_NormalTS4_g170840 = Data4_g170840.NormalTS;
				Out_NormalWS4_g170840 = Data4_g170840.NormalWS;
				Out_Shader4_g170840 = Data4_g170840.Shader;
				Out_Emissive4_g170840= Data4_g170840.Emissive;
				Out_MultiMask4_g170840 = Data4_g170840.MultiMask;
				Out_Grayscale4_g170840 = Data4_g170840.Grayscale;
				Out_Luminosity4_g170840= Data4_g170840.Luminosity;
				Out_AlphaClip4_g170840 = Data4_g170840.AlphaClip;
				Out_AlphaFade4_g170840 = Data4_g170840.AlphaFade;
				Out_Translucency4_g170840 = Data4_g170840.Translucency;
				Out_Transmission4_g170840 = Data4_g170840.Transmission;
				Out_Thickness4_g170840 = Data4_g170840.Thickness;
				Out_Diffusion4_g170840 = Data4_g170840.Diffusion;
				half3 Visual_Albedo292_g170838 = Out_Albedo4_g170840;
				float temp_output_280_12_g170838 = Out_Grayscale4_g170840;
				half Visual_Grayscale308_g170838 = temp_output_280_12_g170838;
				float3 temp_cast_39 = (Visual_Grayscale308_g170838).xxx;
				TVEGlobalData Data15_g170839 = Data204_g170494;
				float Out_Dummy15_g170839 = 0;
				float4 Out_CoatParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170839 = float4( 0,0,0,0 );
				Out_Dummy15_g170839 = Data15_g170839.Dummy;
				Out_CoatParams15_g170839 = Data15_g170839.CoatParams;
				Out_PaintParams15_g170839 = Data15_g170839.PaintParams;
				Out_GlowParams15_g170839 = Data15_g170839.GlowParams;
				Out_AtmoParams15_g170839= Data15_g170839.AtmoParams;
				Out_FadeParams15_g170839= Data15_g170839.FadeParams;
				Out_FormParams15_g170839 = Data15_g170839.FormParams;
				Out_LandParams15_g170839 = Data15_g170839.LandParams;
				Out_WindParams15_g170839 = Data15_g170839.WindParams;
				Out_PushParams15_g170839 = Data15_g170839.PushParams;
				half4 Global_AtmoParams314_g170838 = Out_AtmoParams15_g170839;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170838 = ( (Global_AtmoParams314_g170838).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170838 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170838 = staticSwitch351_g170838;
				float3 lerpResult485_g170838 = lerp( Visual_Albedo292_g170838 , temp_cast_39 , ( Dryness_GlobalMask352_g170838 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170859 = RGBToHSV( lerpResult485_g170838 );
				half3 hsvTorgb61_g170859 = HSVToRGB( half3(( hsvTorgb58_g170859.x + _DrynessShiftValue ),hsvTorgb58_g170859.y,hsvTorgb58_g170859.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170838 = hsvTorgb61_g170859;
				#else
				float3 staticSwitch499_g170838 = lerpResult485_g170838;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170858 = 2.0;
				#else
				float staticSwitch1_g170858 = 4.594794;
				#endif
				half Dryness_TexMask478_g170838 = 1.0;
				float temp_output_280_11_g170838 = Out_MultiMask4_g170840;
				half Visual_MultiMask310_g170838 = temp_output_280_11_g170838;
				float lerpResult283_g170838 = lerp( 1.0 , Visual_MultiMask310_g170838 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170838 = lerpResult283_g170838;
				float temp_output_280_15_g170838 = Out_Luminosity4_g170840;
				half Visual_Luminosity309_g170838 = temp_output_280_15_g170838;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170838 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170853 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170853 = ( _DrynessLumaRemap.y - temp_output_7_0_g170853 );
				float lerpResult295_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170854 - temp_output_7_0_g170853 ) / ( temp_output_10_0_g170853 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170838 = lerpResult295_g170838;
				TVEModelData Data15_g170860 = Data16_g170493;
				float Out_Dummy15_g170860 = 0;
				float3 Out_PositionWS15_g170860 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170860 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170860 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170860 = float3( 0,0,0 );
				float4 Out_VertexData15_g170860 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170860 = float4( 0,0,0,0 );
				Out_Dummy15_g170860 = Data15_g170860.Dummy;
				Out_PositionWS15_g170860 = Data15_g170860.PositionWS;
				Out_PositionWO15_g170860 = Data15_g170860.PositionWO;
				Out_PivotWS15_g170860 = Data15_g170860.PivotWS;
				Out_PivotWO15_g170860 = Data15_g170860.PivotWO;
				Out_NormalWS15_g170860 = Data15_g170860.NormalWS;
				Out_ViewDirWS15_g170860 = Data15_g170860.ViewDirWS;
				Out_VertexData15_g170860 = Data15_g170860.VertexData;
				Out_BoundsData15_g170860 = Data15_g170860.BoundsData;
				half4 Model_VertexMasks386_g170838 = Out_VertexData15_g170860;
				float4 break375_g170838 = Model_VertexMasks386_g170838;
				float4 break33_g170847 = _dryness_vert_mode;
				float temp_output_30_0_g170847 = ( break375_g170838.x * break33_g170847.x );
				float temp_output_29_0_g170847 = ( break375_g170838.y * break33_g170847.y );
				float temp_output_31_0_g170847 = ( break375_g170838.z * break33_g170847.z );
				float temp_output_28_0_g170847 = ( temp_output_30_0_g170847 + temp_output_29_0_g170847 + temp_output_31_0_g170847 + ( break375_g170838.w * break33_g170847.w ) );
				float clampResult17_g170848 = clamp( temp_output_28_0_g170847 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170849 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170849 = ( _DrynessMeshRemap.y - temp_output_7_0_g170849 );
				float lerpResult452_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170848 - temp_output_7_0_g170849 ) / ( temp_output_10_0_g170849 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170838;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				float temp_output_448_0_g170838 = staticSwitch14_g170855;
				half Dryness_VertMask378_g170838 = temp_output_448_0_g170838;
				half Dryness_MaskNoise291_g170838 = 1.0;
				half Custom_Mask411_g170838 = 1.0;
				float temp_output_7_0_g170852 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170852 = ( _DrynessBlendRemap.y - temp_output_7_0_g170852 );
				half Dryness_Mask329_g170838 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170838 * Dryness_MultiMask302_g170838 * Dryness_LumaMask301_g170838 * Dryness_VertMask378_g170838 * Dryness_MaskNoise291_g170838 * Dryness_GlobalMask352_g170838 * Custom_Mask411_g170838 ) - temp_output_7_0_g170852 ) / ( temp_output_10_0_g170852 + 0.0001 ) ) );
				float3 lerpResult336_g170838 = lerp( Visual_Albedo292_g170838 , ( staticSwitch499_g170838 * staticSwitch1_g170858 * (_DrynessColor).rgb ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170838 = lerpResult336_g170838;
				#else
				float3 staticSwitch356_g170838 = Visual_Albedo292_g170838;
				#endif
				half3 Final_Albedo331_g170838 = staticSwitch356_g170838;
				float3 In_Albedo3_g170841 = Final_Albedo331_g170838;
				float3 In_AlbedoRaw3_g170841 = Out_AlbedoRaw4_g170840;
				float2 In_NormalTS3_g170841 = Out_NormalTS4_g170840;
				float3 In_NormalWS3_g170841 = Out_NormalWS4_g170840;
				half4 Visual_Shader415_g170838 = Out_Shader4_g170840;
				float4 break438_g170838 = Visual_Shader415_g170838;
				float4 appendResult439_g170838 = (float4(break438_g170838.x , break438_g170838.y , break438_g170838.z , ( break438_g170838.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170838 = lerp( Visual_Shader415_g170838 , appendResult439_g170838 , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170838 = lerpResult427_g170838;
				#else
				float4 staticSwitch426_g170838 = Visual_Shader415_g170838;
				#endif
				half4 Final_Shader433_g170838 = staticSwitch426_g170838;
				float4 In_Shader3_g170841 = Final_Shader433_g170838;
				float4 In_Emissive3_g170841 = Out_Emissive4_g170840;
				float In_Grayscale3_g170841 = temp_output_280_12_g170838;
				float In_Luminosity3_g170841 = temp_output_280_15_g170838;
				float In_MultiMask3_g170841 = temp_output_280_11_g170838;
				float In_AlphaClip3_g170841 = Out_AlphaClip4_g170840;
				float In_AlphaFade3_g170841 = Out_AlphaFade4_g170840;
				float3 In_Translucency3_g170841 = Out_Translucency4_g170840;
				half Visual_Transmission416_g170838 = Out_Transmission4_g170840;
				float lerpResult421_g170838 = lerp( Visual_Transmission416_g170838 , ( Visual_Transmission416_g170838 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170838 = lerpResult421_g170838;
				#else
				float staticSwitch418_g170838 = Visual_Transmission416_g170838;
				#endif
				half Final_Transmission425_g170838 = staticSwitch418_g170838;
				float In_Transmission3_g170841 = Final_Transmission425_g170838;
				float In_Thickness3_g170841 = Out_Thickness4_g170840;
				float In_Diffusion3_g170841 = Out_Diffusion4_g170840;
				Data3_g170841.Dummy = In_Dummy3_g170841;
				Data3_g170841.Albedo = In_Albedo3_g170841;
				Data3_g170841.AlbedoRaw = In_AlbedoRaw3_g170841;
				Data3_g170841.NormalTS = In_NormalTS3_g170841;
				Data3_g170841.NormalWS = In_NormalWS3_g170841;
				Data3_g170841.Shader = In_Shader3_g170841;
				Data3_g170841.Emissive= In_Emissive3_g170841;
				Data3_g170841.MultiMask = In_MultiMask3_g170841;
				Data3_g170841.Grayscale = In_Grayscale3_g170841;
				Data3_g170841.Luminosity = In_Luminosity3_g170841;
				Data3_g170841.AlphaClip = In_AlphaClip3_g170841;
				Data3_g170841.AlphaFade = In_AlphaFade3_g170841;
				Data3_g170841.Translucency = In_Translucency3_g170841;
				Data3_g170841.Transmission = In_Transmission3_g170841;
				Data3_g170841.Thickness = In_Thickness3_g170841;
				Data3_g170841.Diffusion = In_Diffusion3_g170841;
				TVEVisualData Data4_g170862 = Data3_g170841;
				float Out_Dummy4_g170862 = 0;
				float3 Out_Albedo4_g170862 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170862 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170862 = float2( 0,0 );
				float3 Out_NormalWS4_g170862 = float3( 0,0,0 );
				float4 Out_Shader4_g170862 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170862 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170862 = 0;
				float Out_Grayscale4_g170862 = 0;
				float Out_Luminosity4_g170862 = 0;
				float Out_AlphaClip4_g170862 = 0;
				float Out_AlphaFade4_g170862 = 0;
				float3 Out_Translucency4_g170862 = float3( 0,0,0 );
				float Out_Transmission4_g170862 = 0;
				float Out_Thickness4_g170862 = 0;
				float Out_Diffusion4_g170862 = 0;
				Out_Dummy4_g170862 = Data4_g170862.Dummy;
				Out_Albedo4_g170862 = Data4_g170862.Albedo;
				Out_AlbedoRaw4_g170862 = Data4_g170862.AlbedoRaw;
				Out_NormalTS4_g170862 = Data4_g170862.NormalTS;
				Out_NormalWS4_g170862 = Data4_g170862.NormalWS;
				Out_Shader4_g170862 = Data4_g170862.Shader;
				Out_Emissive4_g170862= Data4_g170862.Emissive;
				Out_MultiMask4_g170862 = Data4_g170862.MultiMask;
				Out_Grayscale4_g170862 = Data4_g170862.Grayscale;
				Out_Luminosity4_g170862= Data4_g170862.Luminosity;
				Out_AlphaClip4_g170862 = Data4_g170862.AlphaClip;
				Out_AlphaFade4_g170862 = Data4_g170862.AlphaFade;
				Out_Translucency4_g170862 = Data4_g170862.Translucency;
				Out_Transmission4_g170862 = Data4_g170862.Transmission;
				Out_Thickness4_g170862 = Data4_g170862.Thickness;
				Out_Diffusion4_g170862 = Data4_g170862.Diffusion;
				half3 Visual_Albedo127_g170861 = Out_Albedo4_g170862;
				float4 vertexToFrag24_g170813 = IN.ase_texcoord10;
				half4 Interp_Data1269 = vertexToFrag24_g170813;
				float clampResult208_g170861 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170861 = ( Visual_Albedo127_g170861 + ( ( Visual_Albedo127_g170861 * Visual_Albedo127_g170861 * 200.0 * _motion_highlight_color ) * clampResult208_g170861 ) );
				#else
				float3 staticSwitch214_g170861 = Visual_Albedo127_g170861;
				#endif
				half3 Final_Albedo160_g170861 = staticSwitch214_g170861;
				float3 In_Albedo3_g170863 = Final_Albedo160_g170861;
				float3 In_AlbedoRaw3_g170863 = Out_AlbedoRaw4_g170862;
				float2 In_NormalTS3_g170863 = Out_NormalTS4_g170862;
				float3 In_NormalWS3_g170863 = Out_NormalWS4_g170862;
				float4 In_Shader3_g170863 = Out_Shader4_g170862;
				float4 In_Emissive3_g170863 = Out_Emissive4_g170862;
				float In_Grayscale3_g170863 = Out_Grayscale4_g170862;
				float In_Luminosity3_g170863 = Out_Luminosity4_g170862;
				float In_MultiMask3_g170863 = Out_MultiMask4_g170862;
				float In_AlphaClip3_g170863 = Out_AlphaClip4_g170862;
				float In_AlphaFade3_g170863 = Out_AlphaFade4_g170862;
				float3 In_Translucency3_g170863 = Out_Translucency4_g170862;
				float In_Transmission3_g170863 = Out_Transmission4_g170862;
				float In_Thickness3_g170863 = Out_Thickness4_g170862;
				float In_Diffusion3_g170863 = Out_Diffusion4_g170862;
				Data3_g170863.Dummy = In_Dummy3_g170863;
				Data3_g170863.Albedo = In_Albedo3_g170863;
				Data3_g170863.AlbedoRaw = In_AlbedoRaw3_g170863;
				Data3_g170863.NormalTS = In_NormalTS3_g170863;
				Data3_g170863.NormalWS = In_NormalWS3_g170863;
				Data3_g170863.Shader = In_Shader3_g170863;
				Data3_g170863.Emissive= In_Emissive3_g170863;
				Data3_g170863.MultiMask = In_MultiMask3_g170863;
				Data3_g170863.Grayscale = In_Grayscale3_g170863;
				Data3_g170863.Luminosity = In_Luminosity3_g170863;
				Data3_g170863.AlphaClip = In_AlphaClip3_g170863;
				Data3_g170863.AlphaFade = In_AlphaFade3_g170863;
				Data3_g170863.Translucency = In_Translucency3_g170863;
				Data3_g170863.Transmission = In_Transmission3_g170863;
				Data3_g170863.Thickness = In_Thickness3_g170863;
				Data3_g170863.Diffusion = In_Diffusion3_g170863;
				TVEVisualData Data4_g170865 = Data3_g170863;
				float Out_Dummy4_g170865 = 0;
				float3 Out_Albedo4_g170865 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170865 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170865 = float2( 0,0 );
				float3 Out_NormalWS4_g170865 = float3( 0,0,0 );
				float4 Out_Shader4_g170865 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170865 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170865 = 0;
				float Out_Grayscale4_g170865 = 0;
				float Out_Luminosity4_g170865 = 0;
				float Out_AlphaClip4_g170865 = 0;
				float Out_AlphaFade4_g170865 = 0;
				float3 Out_Translucency4_g170865 = float3( 0,0,0 );
				float Out_Transmission4_g170865 = 0;
				float Out_Thickness4_g170865 = 0;
				float Out_Diffusion4_g170865 = 0;
				Out_Dummy4_g170865 = Data4_g170865.Dummy;
				Out_Albedo4_g170865 = Data4_g170865.Albedo;
				Out_AlbedoRaw4_g170865 = Data4_g170865.AlbedoRaw;
				Out_NormalTS4_g170865 = Data4_g170865.NormalTS;
				Out_NormalWS4_g170865 = Data4_g170865.NormalWS;
				Out_Shader4_g170865 = Data4_g170865.Shader;
				Out_Emissive4_g170865= Data4_g170865.Emissive;
				Out_MultiMask4_g170865 = Data4_g170865.MultiMask;
				Out_Grayscale4_g170865 = Data4_g170865.Grayscale;
				Out_Luminosity4_g170865= Data4_g170865.Luminosity;
				Out_AlphaClip4_g170865 = Data4_g170865.AlphaClip;
				Out_AlphaFade4_g170865 = Data4_g170865.AlphaFade;
				Out_Translucency4_g170865 = Data4_g170865.Translucency;
				Out_Transmission4_g170865 = Data4_g170865.Transmission;
				Out_Thickness4_g170865 = Data4_g170865.Thickness;
				Out_Diffusion4_g170865 = Data4_g170865.Diffusion;
				half3 Visual_Albedo127_g170864 = Out_Albedo4_g170865;
				float3 temp_output_622_0_g170864 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170868) = _OverlayAlbedoTex;
				float localFilterTexture19_g170897 = ( 0.0 );
				SamplerState SamplerDefault19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170897 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170897 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170897 = SamplerDefault19_g170897;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170897 = SamplerDefault19_g170897;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170897 = SamplerPoint19_g170897;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170897 = SamplerLow19_g170897;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170897 = SamplerMedium19_g170897;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170897 = SamplerHigh19_g170897;
				#endif
				SamplerState Sampler238_g170868 = SS19_g170897;
				float4 temp_output_6_0_g170869 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170869 = ( temp_output_6_0_g170869 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170869 = temp_output_6_0_g170869;
				#endif
				half4 Overlay_Coords639_g170864 = staticSwitch14_g170869;
				float4 temp_output_37_0_g170868 = Overlay_Coords639_g170864;
				half4 Coords238_g170868 = temp_output_37_0_g170868;
				TVEModelData Data15_g170899 = Data16_g170493;
				float Out_Dummy15_g170899 = 0;
				float3 Out_PositionWS15_g170899 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170899 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170899 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170899 = float3( 0,0,0 );
				float4 Out_VertexData15_g170899 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170899 = float4( 0,0,0,0 );
				Out_Dummy15_g170899 = Data15_g170899.Dummy;
				Out_PositionWS15_g170899 = Data15_g170899.PositionWS;
				Out_PositionWO15_g170899 = Data15_g170899.PositionWO;
				Out_PivotWS15_g170899 = Data15_g170899.PivotWS;
				Out_PivotWO15_g170899 = Data15_g170899.PivotWO;
				Out_NormalWS15_g170899 = Data15_g170899.NormalWS;
				Out_ViewDirWS15_g170899 = Data15_g170899.ViewDirWS;
				Out_VertexData15_g170899 = Data15_g170899.VertexData;
				Out_BoundsData15_g170899 = Data15_g170899.BoundsData;
				half3 Model_PositionWO602_g170864 = Out_PositionWO15_g170899;
				float3 temp_output_279_0_g170868 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170868 = temp_output_279_0_g170868;
				half4 localSamplePlanar2D238_g170868 = SamplePlanar2D( Texture238_g170868 , Sampler238_g170868 , Coords238_g170868 , WorldPosition238_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170868 = SS19_g170897;
				half4 Coords246_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition246_g170868 = temp_output_279_0_g170868;
				half3 Model_NormalWS712_g170864 = Out_NormalWS15_g170899;
				float3 temp_output_280_0_g170868 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170868 = temp_output_280_0_g170868;
				half4 localSamplePlanar3D246_g170868 = SamplePlanar3D( Texture246_g170868 , Sampler246_g170868 , Coords246_g170868 , WorldPosition246_g170868 , WorldNormal246_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170868 = SS19_g170897;
				float4 Coords234_g170868 = temp_output_37_0_g170868;
				float3 WorldPosition234_g170868 = temp_output_279_0_g170868;
				float4 localSampleStochastic2D234_g170868 = SampleStochastic2D( Texture234_g170868 , Sampler234_g170868 , Coords234_g170868 , WorldPosition234_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170868 = SS19_g170897;
				half4 Coords263_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition263_g170868 = temp_output_279_0_g170868;
				half3 WorldNormal263_g170868 = temp_output_280_0_g170868;
				half4 localSampleStochastic3D263_g170868 = SampleStochastic3D( Texture263_g170868 , Sampler263_g170868 , Coords263_g170868 , WorldPosition263_g170868 , WorldNormal263_g170868 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170864 = localSamplePlanar3D246_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170864 = localSampleStochastic2D234_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170864 = localSampleStochastic3D263_g170868;
				#else
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#endif
				half3 Overlay_Albedo526_g170864 = (staticSwitch676_g170864).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170864 = ( temp_output_622_0_g170864 * Overlay_Albedo526_g170864 );
				#else
				float3 staticSwitch578_g170864 = temp_output_622_0_g170864;
				#endif
				float3 temp_output_6_0_g170875 = staticSwitch578_g170864;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170875 = ( temp_output_6_0_g170875 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170875 = temp_output_6_0_g170875;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170872) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170872 = sampler_Linear_Repeat;
				float4 appendResult863_g170864 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170872 = appendResult863_g170864;
				half4 Coords246_g170872 = temp_output_37_0_g170872;
				float3 temp_output_279_0_g170872 = Model_PositionWO602_g170864;
				half3 WorldPosition246_g170872 = temp_output_279_0_g170872;
				float3 temp_output_280_0_g170872 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170872 = temp_output_280_0_g170872;
				half4 localSamplePlanar3D246_g170872 = SamplePlanar3D( Texture246_g170872 , Sampler246_g170872 , Coords246_g170872 , WorldPosition246_g170872 , WorldNormal246_g170872 );
				half Overlay_GlitterTex854_g170864 = (localSamplePlanar3D246_g170872).x;
				half3 Model_PositionWS879_g170864 = Out_PositionWS15_g170899;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170864 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170864 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170864 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170864 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170864 = staticSwitch868_g170864;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170889) = _OverlayMaskTex;
				SamplerState Sampler276_g170889 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170890 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170890 = temp_output_6_0_g170890;
				#endif
				half4 Local_MaskCoords888_g170864 = staticSwitch14_g170890;
				float4 temp_output_37_0_g170889 = Local_MaskCoords888_g170864;
				half4 Coords276_g170889 = temp_output_37_0_g170889;
				half2 TexCoord276_g170889 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170889 = SampleMain( Texture276_g170889 , Sampler276_g170889 , Coords276_g170889 , TexCoord276_g170889 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170889) = _OverlayMaskTex;
				SamplerState Sampler275_g170889 = sampler_Linear_Repeat;
				half4 Coords275_g170889 = temp_output_37_0_g170889;
				half2 TexCoord275_g170889 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170889 = SampleExtra( Texture275_g170889 , Sampler275_g170889 , Coords275_g170889 , TexCoord275_g170889 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170864 = localSampleExtra275_g170889;
				#else
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#endif
				half4 Local_MaskTex887_g170864 = staticSwitch894_g170864;
				float clampResult17_g170891 = clamp( (Local_MaskTex887_g170864).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170892 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170892 = ( _OverlayMaskRemap.y - temp_output_7_0_g170892 );
				float lerpResult900_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170891 - temp_output_7_0_g170892 ) / ( temp_output_10_0_g170892 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170864 = lerpResult900_g170864;
				float3 temp_output_739_21_g170864 = Out_NormalWS4_g170865;
				half3 Visual_NormalWS749_g170864 = temp_output_739_21_g170864;
				float clampResult17_g170885 = clamp( saturate( (Visual_NormalWS749_g170864).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170884 = _OverlayProjRemap.x;
				float temp_output_10_0_g170884 = ( _OverlayProjRemap.y - temp_output_7_0_g170884 );
				float lerpResult842_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170885 - temp_output_7_0_g170884 ) / ( temp_output_10_0_g170884 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170864 = lerpResult842_g170864;
				float temp_output_739_15_g170864 = Out_Luminosity4_g170865;
				half Visual_Luminosity654_g170864 = temp_output_739_15_g170864;
				float clampResult17_g170887 = clamp( Visual_Luminosity654_g170864 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170886 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170886 = ( _OverlayLumaRemap.y - temp_output_7_0_g170886 );
				float lerpResult587_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170887 - temp_output_7_0_g170886 ) / ( temp_output_10_0_g170886 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170864 = lerpResult587_g170864;
				half4 Model_VertexMasks791_g170864 = Out_VertexData15_g170899;
				float4 break792_g170864 = Model_VertexMasks791_g170864;
				float4 break33_g170877 = _overlay_vert_mode;
				float temp_output_30_0_g170877 = ( break792_g170864.x * break33_g170877.x );
				float temp_output_29_0_g170877 = ( break792_g170864.y * break33_g170877.y );
				float temp_output_31_0_g170877 = ( break792_g170864.z * break33_g170877.z );
				float temp_output_28_0_g170877 = ( temp_output_30_0_g170877 + temp_output_29_0_g170877 + temp_output_31_0_g170877 + ( break792_g170864.w * break33_g170877.w ) );
				float clampResult17_g170878 = clamp( temp_output_28_0_g170877 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170881 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170881 = ( _OverlayMeshRemap.y - temp_output_7_0_g170881 );
				float lerpResult881_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170878 - temp_output_7_0_g170881 ) / ( temp_output_10_0_g170881 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170888 = lerpResult881_g170864;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float temp_output_831_0_g170864 = staticSwitch14_g170888;
				half Overlay_VertMask801_g170864 = temp_output_831_0_g170864;
				half Overlay_MaskNoise427_g170864 = 1.0;
				TVEGlobalData Data15_g170866 = Data204_g170494;
				float Out_Dummy15_g170866 = 0;
				float4 Out_CoatParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170866 = float4( 0,0,0,0 );
				Out_Dummy15_g170866 = Data15_g170866.Dummy;
				Out_CoatParams15_g170866 = Data15_g170866.CoatParams;
				Out_PaintParams15_g170866 = Data15_g170866.PaintParams;
				Out_GlowParams15_g170866 = Data15_g170866.GlowParams;
				Out_AtmoParams15_g170866= Data15_g170866.AtmoParams;
				Out_FadeParams15_g170866= Data15_g170866.FadeParams;
				Out_FormParams15_g170866 = Data15_g170866.FormParams;
				Out_LandParams15_g170866 = Data15_g170866.LandParams;
				Out_WindParams15_g170866 = Data15_g170866.WindParams;
				Out_PushParams15_g170866 = Data15_g170866.PushParams;
				half4 Global_AtmoParams516_g170864 = Out_AtmoParams15_g170866;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170864 = ( (Global_AtmoParams516_g170864).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170864 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170864 = staticSwitch705_g170864;
				half Custom_Mask646_g170864 = 1.0;
				float temp_output_7_0_g170893 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170893 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170893 );
				half Overlay_Mask494_g170864 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170864 * Overlay_MaskProj457_g170864 * Overlay_MaskLuma438_g170864 * Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 * Custom_Mask646_g170864 ) - temp_output_7_0_g170893 ) / ( temp_output_10_0_g170893 + 0.0001 ) ) );
				float3 lerpResult467_g170864 = lerp( Visual_Albedo127_g170864 , ( staticSwitch14_g170875 + Overlay_GlitterColor865_g170864 ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170864 = lerpResult467_g170864;
				#else
				float3 staticSwitch577_g170864 = Visual_Albedo127_g170864;
				#endif
				half3 Final_Albedo493_g170864 = staticSwitch577_g170864;
				float3 In_Albedo3_g170867 = Final_Albedo493_g170864;
				float3 In_AlbedoRaw3_g170867 = Out_AlbedoRaw4_g170865;
				half2 Visual_NormalTS535_g170864 = Out_NormalTS4_g170865;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170870) = _OverlayNormalTex;
				float localFilterTexture29_g170898 = ( 0.0 );
				SamplerState SamplerDefault29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170898 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170898 = SamplerDefault29_g170898;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170898 = SamplerDefault29_g170898;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170898 = SamplerPoint29_g170898;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170898 = SamplerLow29_g170898;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170898 = SamplerMedium29_g170898;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170898 = SamplerHigh29_g170898;
				#endif
				SamplerState Sampler238_g170870 = SS29_g170898;
				float4 temp_output_37_0_g170870 = Overlay_Coords639_g170864;
				half4 Coords238_g170870 = temp_output_37_0_g170870;
				float3 temp_output_279_0_g170870 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170870 = temp_output_279_0_g170870;
				half4 localSamplePlanar2D238_g170870 = SamplePlanar2D( Texture238_g170870 , Sampler238_g170870 , Coords238_g170870 , WorldPosition238_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170870) = _OverlayNormalTex;
				SamplerState Sampler246_g170870 = SS29_g170898;
				half4 Coords246_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition246_g170870 = temp_output_279_0_g170870;
				float3 temp_output_280_0_g170870 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170870 = temp_output_280_0_g170870;
				half4 localSamplePlanar3D246_g170870 = SamplePlanar3D( Texture246_g170870 , Sampler246_g170870 , Coords246_g170870 , WorldPosition246_g170870 , WorldNormal246_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170870) = _OverlayNormalTex;
				SamplerState Sampler234_g170870 = SS29_g170898;
				float4 Coords234_g170870 = temp_output_37_0_g170870;
				float3 WorldPosition234_g170870 = temp_output_279_0_g170870;
				float4 localSampleStochastic2D234_g170870 = SampleStochastic2D( Texture234_g170870 , Sampler234_g170870 , Coords234_g170870 , WorldPosition234_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170870) = _OverlayNormalTex;
				SamplerState Sampler263_g170870 = SS29_g170898;
				half4 Coords263_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition263_g170870 = temp_output_279_0_g170870;
				half3 WorldNormal263_g170870 = temp_output_280_0_g170870;
				half4 localSampleStochastic3D263_g170870 = SampleStochastic3D( Texture263_g170870 , Sampler263_g170870 , Coords263_g170870 , WorldPosition263_g170870 , WorldNormal263_g170870 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170864 = localSamplePlanar3D246_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170864 = localSampleStochastic2D234_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170864 = localSampleStochastic3D263_g170870;
				#else
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#endif
				half4 Normal_Packed45_g170874 = staticSwitch686_g170864;
				float2 appendResult58_g170874 = (float2(( (Normal_Packed45_g170874).x * (Normal_Packed45_g170874).w ) , (Normal_Packed45_g170874).y));
				half2 Normal_Default50_g170874 = appendResult58_g170874;
				half2 Normal_ASTC41_g170874 = (Normal_Packed45_g170874).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170874 = Normal_ASTC41_g170874;
				#else
				float2 staticSwitch38_g170874 = Normal_Default50_g170874;
				#endif
				half2 Normal_NO_DTX544_g170874 = (Normal_Packed45_g170874).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170874 = Normal_NO_DTX544_g170874;
				#else
				float2 staticSwitch37_g170874 = staticSwitch38_g170874;
				#endif
				half2 Normal_Planar45_g170873 = (staticSwitch37_g170874*2.0 + -1.0);
				float2 break71_g170873 = Normal_Planar45_g170873;
				float3 appendResult72_g170873 = (float3(break71_g170873.x , 0.0 , break71_g170873.y));
				half2 Overlay_Normal528_g170864 = (mul( ase_worldToTangent, appendResult72_g170873 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170864 = Overlay_Normal528_g170864;
				#else
				float2 staticSwitch579_g170864 = Visual_NormalTS535_g170864;
				#endif
				float2 lerpResult551_g170864 = lerp( Visual_NormalTS535_g170864 , ( staticSwitch579_g170864 * _OverlayNormalValue ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170864 = lerpResult551_g170864;
				#else
				float2 staticSwitch583_g170864 = Visual_NormalTS535_g170864;
				#endif
				half2 Final_NormalTS499_g170864 = staticSwitch583_g170864;
				float2 In_NormalTS3_g170867 = Final_NormalTS499_g170864;
				float3 In_NormalWS3_g170867 = temp_output_739_21_g170864;
				half4 Visual_Masks536_g170864 = Out_Shader4_g170865;
				float4 appendResult585_g170864 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170864 = lerp( Visual_Masks536_g170864 , appendResult585_g170864 , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170864 = lerpResult584_g170864;
				#else
				float4 staticSwitch586_g170864 = Visual_Masks536_g170864;
				#endif
				half4 Final_Masks482_g170864 = staticSwitch586_g170864;
				float4 In_Shader3_g170867 = Final_Masks482_g170864;
				float4 In_Emissive3_g170867 = Out_Emissive4_g170865;
				float temp_output_739_12_g170864 = Out_Grayscale4_g170865;
				float In_Grayscale3_g170867 = temp_output_739_12_g170864;
				float In_Luminosity3_g170867 = temp_output_739_15_g170864;
				float In_MultiMask3_g170867 = Out_MultiMask4_g170865;
				float In_AlphaClip3_g170867 = Out_AlphaClip4_g170865;
				float In_AlphaFade3_g170867 = Out_AlphaFade4_g170865;
				float3 In_Translucency3_g170867 = Out_Translucency4_g170865;
				half Visual_Transmission699_g170864 = Out_Transmission4_g170865;
				float lerpResult746_g170864 = lerp( Visual_Transmission699_g170864 , ( Visual_Transmission699_g170864 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170864 = lerpResult746_g170864;
				#else
				float staticSwitch703_g170864 = Visual_Transmission699_g170864;
				#endif
				half Final_Transmission702_g170864 = staticSwitch703_g170864;
				float In_Transmission3_g170867 = Final_Transmission702_g170864;
				float In_Thickness3_g170867 = Out_Thickness4_g170865;
				float In_Diffusion3_g170867 = Out_Diffusion4_g170865;
				Data3_g170867.Dummy = In_Dummy3_g170867;
				Data3_g170867.Albedo = In_Albedo3_g170867;
				Data3_g170867.AlbedoRaw = In_AlbedoRaw3_g170867;
				Data3_g170867.NormalTS = In_NormalTS3_g170867;
				Data3_g170867.NormalWS = In_NormalWS3_g170867;
				Data3_g170867.Shader = In_Shader3_g170867;
				Data3_g170867.Emissive= In_Emissive3_g170867;
				Data3_g170867.MultiMask = In_MultiMask3_g170867;
				Data3_g170867.Grayscale = In_Grayscale3_g170867;
				Data3_g170867.Luminosity = In_Luminosity3_g170867;
				Data3_g170867.AlphaClip = In_AlphaClip3_g170867;
				Data3_g170867.AlphaFade = In_AlphaFade3_g170867;
				Data3_g170867.Translucency = In_Translucency3_g170867;
				Data3_g170867.Transmission = In_Transmission3_g170867;
				Data3_g170867.Thickness = In_Thickness3_g170867;
				Data3_g170867.Diffusion = In_Diffusion3_g170867;
				TVEVisualData Data4_g170901 = Data3_g170867;
				float Out_Dummy4_g170901 = 0;
				float3 Out_Albedo4_g170901 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170901 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170901 = float2( 0,0 );
				float3 Out_NormalWS4_g170901 = float3( 0,0,0 );
				float4 Out_Shader4_g170901 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170901 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170901 = 0;
				float Out_Grayscale4_g170901 = 0;
				float Out_Luminosity4_g170901 = 0;
				float Out_AlphaClip4_g170901 = 0;
				float Out_AlphaFade4_g170901 = 0;
				float3 Out_Translucency4_g170901 = float3( 0,0,0 );
				float Out_Transmission4_g170901 = 0;
				float Out_Thickness4_g170901 = 0;
				float Out_Diffusion4_g170901 = 0;
				Out_Dummy4_g170901 = Data4_g170901.Dummy;
				Out_Albedo4_g170901 = Data4_g170901.Albedo;
				Out_AlbedoRaw4_g170901 = Data4_g170901.AlbedoRaw;
				Out_NormalTS4_g170901 = Data4_g170901.NormalTS;
				Out_NormalWS4_g170901 = Data4_g170901.NormalWS;
				Out_Shader4_g170901 = Data4_g170901.Shader;
				Out_Emissive4_g170901= Data4_g170901.Emissive;
				Out_MultiMask4_g170901 = Data4_g170901.MultiMask;
				Out_Grayscale4_g170901 = Data4_g170901.Grayscale;
				Out_Luminosity4_g170901= Data4_g170901.Luminosity;
				Out_AlphaClip4_g170901 = Data4_g170901.AlphaClip;
				Out_AlphaFade4_g170901 = Data4_g170901.AlphaFade;
				Out_Translucency4_g170901 = Data4_g170901.Translucency;
				Out_Transmission4_g170901 = Data4_g170901.Transmission;
				Out_Thickness4_g170901 = Data4_g170901.Thickness;
				Out_Diffusion4_g170901 = Data4_g170901.Diffusion;
				half3 Visual_Albedo127_g170900 = Out_Albedo4_g170901;
				TVEGlobalData Data15_g170906 = Data204_g170494;
				float Out_Dummy15_g170906 = 0;
				float4 Out_CoatParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170906 = float4( 0,0,0,0 );
				Out_Dummy15_g170906 = Data15_g170906.Dummy;
				Out_CoatParams15_g170906 = Data15_g170906.CoatParams;
				Out_PaintParams15_g170906 = Data15_g170906.PaintParams;
				Out_GlowParams15_g170906 = Data15_g170906.GlowParams;
				Out_AtmoParams15_g170906= Data15_g170906.AtmoParams;
				Out_FadeParams15_g170906= Data15_g170906.FadeParams;
				Out_FormParams15_g170906 = Data15_g170906.FormParams;
				Out_LandParams15_g170906 = Data15_g170906.LandParams;
				Out_WindParams15_g170906 = Data15_g170906.WindParams;
				Out_PushParams15_g170906 = Data15_g170906.PushParams;
				half4 Global_AtmoParams516_g170900 = Out_AtmoParams15_g170906;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170900 = ( (Global_AtmoParams516_g170900).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170900 = 1.0;
				#endif
				half Global_Wetness429_g170900 = staticSwitch663_g170900;
				half Wetness_Value1042_g170900 = ( _WetnessIntensityValue * Global_Wetness429_g170900 );
				TVEModelData Data15_g170914 = Data16_g170493;
				float Out_Dummy15_g170914 = 0;
				float3 Out_PositionWS15_g170914 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170914 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170914 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170914 = float3( 0,0,0 );
				float4 Out_VertexData15_g170914 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170914 = float4( 0,0,0,0 );
				Out_Dummy15_g170914 = Data15_g170914.Dummy;
				Out_PositionWS15_g170914 = Data15_g170914.PositionWS;
				Out_PositionWO15_g170914 = Data15_g170914.PositionWO;
				Out_PivotWS15_g170914 = Data15_g170914.PivotWS;
				Out_PivotWO15_g170914 = Data15_g170914.PivotWO;
				Out_NormalWS15_g170914 = Data15_g170914.NormalWS;
				Out_ViewDirWS15_g170914 = Data15_g170914.ViewDirWS;
				Out_VertexData15_g170914 = Data15_g170914.VertexData;
				Out_BoundsData15_g170914 = Data15_g170914.BoundsData;
				half4 Model_VertexData1030_g170900 = Out_VertexData15_g170914;
				float4 break1019_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170919 = _wetness_vert_mode;
				float temp_output_30_0_g170919 = ( break1019_g170900.x * break33_g170919.x );
				float temp_output_29_0_g170919 = ( break1019_g170900.y * break33_g170919.y );
				float temp_output_31_0_g170919 = ( break1019_g170900.z * break33_g170919.z );
				float temp_output_28_0_g170919 = ( temp_output_30_0_g170919 + temp_output_29_0_g170919 + temp_output_31_0_g170919 + ( break1019_g170900.w * break33_g170919.w ) );
				float clampResult17_g170917 = clamp( temp_output_28_0_g170919 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170918 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170918 = ( _WetnessMeshRemap.y - temp_output_7_0_g170918 );
				float lerpResult1026_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170917 - temp_output_7_0_g170918 ) / ( temp_output_10_0_g170918 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170920 = lerpResult1026_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170920 = ( temp_output_6_0_g170920 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170920 = temp_output_6_0_g170920;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170900 = staticSwitch14_g170920;
				#else
				float staticSwitch1110_g170900 = 1.0;
				#endif
				half Wetness_VertMask1024_g170900 = staticSwitch1110_g170900;
				float temp_output_1043_0_g170900 = ( Wetness_Value1042_g170900 * Wetness_VertMask1024_g170900 );
				half Wetness_Mask866_g170900 = temp_output_1043_0_g170900;
				float4 break1083_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170923 = _wetness_water_vert_mode;
				float temp_output_30_0_g170923 = ( break1083_g170900.x * break33_g170923.x );
				float temp_output_29_0_g170923 = ( break1083_g170900.y * break33_g170923.y );
				float temp_output_31_0_g170923 = ( break1083_g170900.z * break33_g170923.z );
				float temp_output_28_0_g170923 = ( temp_output_30_0_g170923 + temp_output_29_0_g170923 + temp_output_31_0_g170923 + ( break1083_g170900.w * break33_g170923.w ) );
				float clampResult17_g170921 = clamp( temp_output_28_0_g170923 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170922 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170922 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170922 );
				float lerpResult1089_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170921 - temp_output_7_0_g170922 ) / ( temp_output_10_0_g170922 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170924 = lerpResult1089_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170924 = ( temp_output_6_0_g170924 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170924 = temp_output_6_0_g170924;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170900 = staticSwitch14_g170924;
				#else
				float staticSwitch1113_g170900 = 1.0;
				#endif
				half Water_VertMask1094_g170900 = staticSwitch1113_g170900;
				half4 Visual_Masks536_g170900 = Out_Shader4_g170901;
				float lerpResult1013_g170900 = lerp( 1.0 , (Visual_Masks536_g170900).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170900 = lerpResult1013_g170900;
				float clampResult17_g170915 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170900 * Water_VertMask1094_g170900 ) - Water_HeightMask782_g170900 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170916 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170916 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170916 );
				half3 Model_NormalWS798_g170900 = Out_NormalWS15_g170914;
				float temp_output_786_0_g170900 = saturate( (Model_NormalWS798_g170900).y );
				half Wetness_ProjMask790_g170900 = temp_output_786_0_g170900;
				half Water_Mask760_g170900 = ( saturate( ( ( clampResult17_g170915 - temp_output_7_0_g170916 ) / ( temp_output_10_0_g170916 + 0.0001 ) ) ) * Wetness_ProjMask790_g170900 );
				float3 lerpResult918_g170900 = lerp( Visual_Albedo127_g170900 , ( Visual_Albedo127_g170900 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170900 = lerpResult918_g170900;
				#else
				float3 staticSwitch946_g170900 = Visual_Albedo127_g170900;
				#endif
				float3 lerpResult768_g170900 = lerp( staticSwitch946_g170900 , ( staticSwitch946_g170900 * staticSwitch946_g170900 ) , _WetnessContrastValue);
				float3 lerpResult651_g170900 = lerp( Visual_Albedo127_g170900 , lerpResult768_g170900 , Wetness_Mask866_g170900);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170900 = lerpResult651_g170900;
				#else
				float3 staticSwitch577_g170900 = Visual_Albedo127_g170900;
				#endif
				half3 Final_Albedo493_g170900 = staticSwitch577_g170900;
				float3 In_Albedo3_g170902 = Final_Albedo493_g170900;
				float3 In_AlbedoRaw3_g170902 = Out_AlbedoRaw4_g170901;
				half2 Visual_Normal535_g170900 = Out_NormalTS4_g170901;
				float lerpResult877_g170900 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170900 = ( Visual_Normal535_g170900 * lerpResult877_g170900 );
				#else
				float2 staticSwitch957_g170900 = Visual_Normal535_g170900;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170912) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170912 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170900 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170912 = appendResult924_g170900;
				half4 Coords238_g170912 = temp_output_37_0_g170912;
				half3 Model_PositionWO602_g170900 = Out_PositionWO15_g170914;
				float3 temp_output_279_0_g170912 = Model_PositionWO602_g170900;
				half3 WorldPosition238_g170912 = temp_output_279_0_g170912;
				half4 localSamplePlanar2D238_g170912 = SamplePlanar2D( Texture238_g170912 , Sampler238_g170912 , Coords238_g170912 , WorldPosition238_g170912 );
				float4 temp_output_1010_0_g170900 = localSamplePlanar2D238_g170912;
				half2 Rain_DropsNormal919_g170900 = (temp_output_1010_0_g170900).zw;
				float2 temp_output_903_0_g170900 = (Rain_DropsNormal919_g170900*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170900 = (temp_output_1010_0_g170900).xy;
				float2 lerpResult904_g170900 = lerp( temp_output_903_0_g170900 , (Rain_RingsNormal713_g170900*2.0 + -1.0) , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170900 = lerpResult904_g170900;
				#else
				float2 staticSwitch960_g170900 = temp_output_903_0_g170900;
				#endif
				half2 Rain_Drops1002_g170900 = ( staticSwitch960_g170900 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170900 = Out_PositionWS15_g170914;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170900 = ( (Global_AtmoParams516_g170900).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170900 = 1.0;
				#endif
				half Global_Rain955_g170900 = staticSwitch949_g170900;
				half Rain_Value1067_g170900 = Global_Rain955_g170900;
				float4 break1097_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170900.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170900.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170900.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170900.w * break33_g170927.w ) );
				float clampResult17_g170925 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170926 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170926 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170926 );
				float lerpResult1100_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170925 - temp_output_7_0_g170926 ) / ( temp_output_10_0_g170926 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170900 = staticSwitch14_g170928;
				#else
				float staticSwitch1115_g170900 = 1.0;
				#endif
				half Rain_VertMask1108_g170900 = staticSwitch1115_g170900;
				half Rain_Mask999_g170900 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170900 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170900 * Rain_VertMask1108_g170900 );
				half2 Normal_Planar45_g170911 = ( Rain_Drops1002_g170900 * Rain_Mask999_g170900 * Wetness_ProjMask790_g170900 );
				float2 break71_g170911 = Normal_Planar45_g170911;
				float3 appendResult72_g170911 = (float3(break71_g170911.x , 0.0 , break71_g170911.y));
				half2 Wetness_Normal526_g170900 = (mul( ase_worldToTangent, appendResult72_g170911 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170900 = Wetness_Normal526_g170900;
				#else
				float2 staticSwitch583_g170900 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170900 = ( staticSwitch957_g170900 + staticSwitch583_g170900 );
				#else
				float2 staticSwitch774_g170900 = Visual_Normal535_g170900;
				#endif
				half2 Final_Normal499_g170900 = staticSwitch774_g170900;
				float2 In_NormalTS3_g170902 = Final_Normal499_g170900;
				float3 In_NormalWS3_g170902 = Out_NormalWS4_g170901;
				float4 break658_g170900 = Visual_Masks536_g170900;
				float temp_output_935_0_g170900 = ( Wetness_Mask866_g170900 * _WetnessSmoothnessValue );
				float lerpResult941_g170900 = lerp( temp_output_935_0_g170900 , 2.0 , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170900 = lerpResult941_g170900;
				#else
				float staticSwitch959_g170900 = temp_output_935_0_g170900;
				#endif
				float4 appendResult661_g170900 = (float4(break658_g170900.x , break658_g170900.y , break658_g170900.z , saturate( ( break658_g170900.w + staticSwitch959_g170900 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170900 = appendResult661_g170900;
				#else
				float4 staticSwitch586_g170900 = Visual_Masks536_g170900;
				#endif
				half4 Final_Masks482_g170900 = staticSwitch586_g170900;
				float4 In_Shader3_g170902 = Final_Masks482_g170900;
				float4 In_Emissive3_g170902 = Out_Emissive4_g170901;
				float In_Grayscale3_g170902 = Out_Grayscale4_g170901;
				float In_Luminosity3_g170902 = Out_Luminosity4_g170901;
				float In_MultiMask3_g170902 = Out_MultiMask4_g170901;
				float In_AlphaClip3_g170902 = Out_AlphaClip4_g170901;
				float In_AlphaFade3_g170902 = Out_AlphaFade4_g170901;
				float3 In_Translucency3_g170902 = Out_Translucency4_g170901;
				float In_Transmission3_g170902 = Out_Transmission4_g170901;
				float In_Thickness3_g170902 = Out_Thickness4_g170901;
				float In_Diffusion3_g170902 = Out_Diffusion4_g170901;
				Data3_g170902.Dummy = In_Dummy3_g170902;
				Data3_g170902.Albedo = In_Albedo3_g170902;
				Data3_g170902.AlbedoRaw = In_AlbedoRaw3_g170902;
				Data3_g170902.NormalTS = In_NormalTS3_g170902;
				Data3_g170902.NormalWS = In_NormalWS3_g170902;
				Data3_g170902.Shader = In_Shader3_g170902;
				Data3_g170902.Emissive= In_Emissive3_g170902;
				Data3_g170902.MultiMask = In_MultiMask3_g170902;
				Data3_g170902.Grayscale = In_Grayscale3_g170902;
				Data3_g170902.Luminosity = In_Luminosity3_g170902;
				Data3_g170902.AlphaClip = In_AlphaClip3_g170902;
				Data3_g170902.AlphaFade = In_AlphaFade3_g170902;
				Data3_g170902.Translucency = In_Translucency3_g170902;
				Data3_g170902.Transmission = In_Transmission3_g170902;
				Data3_g170902.Thickness = In_Thickness3_g170902;
				Data3_g170902.Diffusion = In_Diffusion3_g170902;
				TVEVisualData Data4_g170940 = Data3_g170902;
				float Out_Dummy4_g170940 = 0;
				float3 Out_Albedo4_g170940 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170940 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170940 = float2( 0,0 );
				float3 Out_NormalWS4_g170940 = float3( 0,0,0 );
				float4 Out_Shader4_g170940 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170940 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170940 = 0;
				float Out_Grayscale4_g170940 = 0;
				float Out_Luminosity4_g170940 = 0;
				float Out_AlphaClip4_g170940 = 0;
				float Out_AlphaFade4_g170940 = 0;
				float3 Out_Translucency4_g170940 = float3( 0,0,0 );
				float Out_Transmission4_g170940 = 0;
				float Out_Thickness4_g170940 = 0;
				float Out_Diffusion4_g170940 = 0;
				Out_Dummy4_g170940 = Data4_g170940.Dummy;
				Out_Albedo4_g170940 = Data4_g170940.Albedo;
				Out_AlbedoRaw4_g170940 = Data4_g170940.AlbedoRaw;
				Out_NormalTS4_g170940 = Data4_g170940.NormalTS;
				Out_NormalWS4_g170940 = Data4_g170940.NormalWS;
				Out_Shader4_g170940 = Data4_g170940.Shader;
				Out_Emissive4_g170940= Data4_g170940.Emissive;
				Out_MultiMask4_g170940 = Data4_g170940.MultiMask;
				Out_Grayscale4_g170940 = Data4_g170940.Grayscale;
				Out_Luminosity4_g170940= Data4_g170940.Luminosity;
				Out_AlphaClip4_g170940 = Data4_g170940.AlphaClip;
				Out_AlphaFade4_g170940 = Data4_g170940.AlphaFade;
				Out_Translucency4_g170940 = Data4_g170940.Translucency;
				Out_Transmission4_g170940 = Data4_g170940.Transmission;
				Out_Thickness4_g170940 = Data4_g170940.Thickness;
				Out_Diffusion4_g170940 = Data4_g170940.Diffusion;
				float3 In_Albedo3_g170930 = Out_Albedo4_g170940;
				float3 In_AlbedoRaw3_g170930 = Out_AlbedoRaw4_g170940;
				float2 In_NormalTS3_g170930 = Out_NormalTS4_g170940;
				float3 In_NormalWS3_g170930 = Out_NormalWS4_g170940;
				float4 In_Shader3_g170930 = Out_Shader4_g170940;
				float4 In_Emissive3_g170930 = Out_Emissive4_g170940;
				float In_Grayscale3_g170930 = Out_Grayscale4_g170940;
				float In_Luminosity3_g170930 = Out_Luminosity4_g170940;
				float temp_output_836_11_g170929 = Out_MultiMask4_g170940;
				float In_MultiMask3_g170930 = temp_output_836_11_g170929;
				half Visual_AlphaClip667_g170929 = Out_AlphaClip4_g170940;
				TVEGlobalData Data15_g170939 = Data204_g170494;
				float Out_Dummy15_g170939 = 0;
				float4 Out_CoatParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170939 = float4( 0,0,0,0 );
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_CoatParams15_g170939 = Data15_g170939.CoatParams;
				Out_PaintParams15_g170939 = Data15_g170939.PaintParams;
				Out_GlowParams15_g170939 = Data15_g170939.GlowParams;
				Out_AtmoParams15_g170939= Data15_g170939.AtmoParams;
				Out_FadeParams15_g170939= Data15_g170939.FadeParams;
				Out_FormParams15_g170939 = Data15_g170939.FormParams;
				Out_LandParams15_g170939 = Data15_g170939.LandParams;
				Out_WindParams15_g170939 = Data15_g170939.WindParams;
				Out_PushParams15_g170939 = Data15_g170939.PushParams;
				half4 Global_FadeParams516_g170929 = Out_FadeParams15_g170939;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170929 = saturate( (Global_FadeParams516_g170929).w );
				#else
				float staticSwitch663_g170929 = 1.0;
				#endif
				half Local_GlobalMask429_g170929 = staticSwitch663_g170929;
				float lerpResult811_g170929 = lerp( 1.0 , Visual_AlphaClip667_g170929 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170929 = lerpResult811_g170929;
				TVEModelData Data15_g170941 = Data16_g170493;
				float Out_Dummy15_g170941 = 0;
				float3 Out_PositionWS15_g170941 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170941 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170941 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170941 = float3( 0,0,0 );
				float4 Out_VertexData15_g170941 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170941 = float4( 0,0,0,0 );
				Out_Dummy15_g170941 = Data15_g170941.Dummy;
				Out_PositionWS15_g170941 = Data15_g170941.PositionWS;
				Out_PositionWO15_g170941 = Data15_g170941.PositionWO;
				Out_PivotWS15_g170941 = Data15_g170941.PivotWS;
				Out_PivotWO15_g170941 = Data15_g170941.PivotWO;
				Out_NormalWS15_g170941 = Data15_g170941.NormalWS;
				Out_ViewDirWS15_g170941 = Data15_g170941.ViewDirWS;
				Out_VertexData15_g170941 = Data15_g170941.VertexData;
				Out_BoundsData15_g170941 = Data15_g170941.BoundsData;
				half3 Model_PositionWO602_g170929 = Out_PositionWO15_g170941;
				float4 tex3DNode60_g170933 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170929 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170929 = lerp( 1.0 , tex3DNode60_g170933.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170929 = lerpResult673_g170929;
				half4 Model_VertexMasks752_g170929 = Out_VertexData15_g170941;
				float4 break755_g170929 = Model_VertexMasks752_g170929;
				float4 break33_g170931 = _cutout_vert_mode;
				float temp_output_30_0_g170931 = ( break755_g170929.x * break33_g170931.x );
				float temp_output_29_0_g170931 = ( break755_g170929.y * break33_g170931.y );
				float temp_output_31_0_g170931 = ( break755_g170929.z * break33_g170931.z );
				float temp_output_28_0_g170931 = ( temp_output_30_0_g170931 + temp_output_29_0_g170931 + temp_output_31_0_g170931 + ( break755_g170929.w * break33_g170931.w ) );
				float clampResult17_g170932 = clamp( temp_output_28_0_g170931 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170935 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170935 = ( _CutoutMeshRemap.y - temp_output_7_0_g170935 );
				float lerpResult820_g170929 = lerp( 1.0 , saturate( ( ( clampResult17_g170932 - temp_output_7_0_g170935 ) / ( temp_output_10_0_g170935 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170936 = lerpResult820_g170929;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170936 = ( temp_output_6_0_g170936 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170936 = temp_output_6_0_g170936;
				#endif
				float temp_output_801_0_g170929 = staticSwitch14_g170936;
				half Local_VertMask766_g170929 = temp_output_801_0_g170929;
				half Visual_MultiMask671_g170929 = temp_output_836_11_g170929;
				float lerpResult683_g170929 = lerp( 1.0 , Visual_MultiMask671_g170929 , _CutoutMultiValue);
				half Local_MultiMask685_g170929 = lerpResult683_g170929;
				float lerpResult728_g170929 = lerp( Visual_AlphaClip667_g170929 , min( Visual_AlphaClip667_g170929 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170929 ) - ( Local_AlphaMask814_g170929 * Local_NoiseMask678_g170929 * Local_VertMask766_g170929 ) ) ) ) , Local_MultiMask685_g170929);
				half Local_AlphaClip784_g170929 = lerpResult728_g170929;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170929 = Local_AlphaClip784_g170929;
				#else
				float staticSwitch577_g170929 = Visual_AlphaClip667_g170929;
				#endif
				half Final_AlphaClip795_g170929 = staticSwitch577_g170929;
				float In_AlphaClip3_g170930 = Final_AlphaClip795_g170929;
				float In_AlphaFade3_g170930 = Out_AlphaFade4_g170940;
				float3 In_Translucency3_g170930 = Out_Translucency4_g170940;
				float In_Transmission3_g170930 = Out_Transmission4_g170940;
				float In_Thickness3_g170930 = Out_Thickness4_g170940;
				float In_Diffusion3_g170930 = Out_Diffusion4_g170940;
				Data3_g170930.Dummy = In_Dummy3_g170930;
				Data3_g170930.Albedo = In_Albedo3_g170930;
				Data3_g170930.AlbedoRaw = In_AlbedoRaw3_g170930;
				Data3_g170930.NormalTS = In_NormalTS3_g170930;
				Data3_g170930.NormalWS = In_NormalWS3_g170930;
				Data3_g170930.Shader = In_Shader3_g170930;
				Data3_g170930.Emissive= In_Emissive3_g170930;
				Data3_g170930.MultiMask = In_MultiMask3_g170930;
				Data3_g170930.Grayscale = In_Grayscale3_g170930;
				Data3_g170930.Luminosity = In_Luminosity3_g170930;
				Data3_g170930.AlphaClip = In_AlphaClip3_g170930;
				Data3_g170930.AlphaFade = In_AlphaFade3_g170930;
				Data3_g170930.Translucency = In_Translucency3_g170930;
				Data3_g170930.Transmission = In_Transmission3_g170930;
				Data3_g170930.Thickness = In_Thickness3_g170930;
				Data3_g170930.Diffusion = In_Diffusion3_g170930;
				TVEVisualData Data4_g170944 = Data3_g170930;
				float Out_Dummy4_g170944 = 0;
				float3 Out_Albedo4_g170944 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170944 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170944 = float2( 0,0 );
				float3 Out_NormalWS4_g170944 = float3( 0,0,0 );
				float4 Out_Shader4_g170944 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170944 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170944 = 0;
				float Out_Grayscale4_g170944 = 0;
				float Out_Luminosity4_g170944 = 0;
				float Out_AlphaClip4_g170944 = 0;
				float Out_AlphaFade4_g170944 = 0;
				float3 Out_Translucency4_g170944 = float3( 0,0,0 );
				float Out_Transmission4_g170944 = 0;
				float Out_Thickness4_g170944 = 0;
				float Out_Diffusion4_g170944 = 0;
				Out_Dummy4_g170944 = Data4_g170944.Dummy;
				Out_Albedo4_g170944 = Data4_g170944.Albedo;
				Out_AlbedoRaw4_g170944 = Data4_g170944.AlbedoRaw;
				Out_NormalTS4_g170944 = Data4_g170944.NormalTS;
				Out_NormalWS4_g170944 = Data4_g170944.NormalWS;
				Out_Shader4_g170944 = Data4_g170944.Shader;
				Out_Emissive4_g170944= Data4_g170944.Emissive;
				Out_MultiMask4_g170944 = Data4_g170944.MultiMask;
				Out_Grayscale4_g170944 = Data4_g170944.Grayscale;
				Out_Luminosity4_g170944= Data4_g170944.Luminosity;
				Out_AlphaClip4_g170944 = Data4_g170944.AlphaClip;
				Out_AlphaFade4_g170944 = Data4_g170944.AlphaFade;
				Out_Translucency4_g170944 = Data4_g170944.Translucency;
				Out_Transmission4_g170944 = Data4_g170944.Transmission;
				Out_Thickness4_g170944 = Data4_g170944.Thickness;
				Out_Diffusion4_g170944 = Data4_g170944.Diffusion;
				float3 In_Albedo3_g170945 = Out_Albedo4_g170944;
				float3 In_AlbedoRaw3_g170945 = Out_AlbedoRaw4_g170944;
				float2 In_NormalTS3_g170945 = Out_NormalTS4_g170944;
				float3 In_NormalWS3_g170945 = Out_NormalWS4_g170944;
				float4 In_Shader3_g170945 = Out_Shader4_g170944;
				float4 In_Emissive3_g170945 = Out_Emissive4_g170944;
				float In_Grayscale3_g170945 = Out_Grayscale4_g170944;
				float In_Luminosity3_g170945 = Out_Luminosity4_g170944;
				float temp_output_821_11_g170942 = Out_MultiMask4_g170944;
				float In_MultiMask3_g170945 = temp_output_821_11_g170942;
				half Visual_AlphaClip754_g170942 = Out_AlphaClip4_g170944;
				half Dither_Constant768_g170942 = _DitherConstantValue;
				float3 ase_worldPos = IN.ase_texcoord11.xyz;
				float temp_output_7_0_g170952 = _DitherProximityMaxValue;
				float temp_output_10_0_g170952 = ( _DitherProximityMinValue - temp_output_7_0_g170952 );
				half Dither_Proximity767_g170942 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170952 ) / ( temp_output_10_0_g170952 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170951 = Data16_g170493;
				float Out_Dummy15_g170951 = 0;
				float3 Out_PositionWS15_g170951 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170951 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170951 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170951 = float3( 0,0,0 );
				float4 Out_VertexData15_g170951 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170951 = float4( 0,0,0,0 );
				Out_Dummy15_g170951 = Data15_g170951.Dummy;
				Out_PositionWS15_g170951 = Data15_g170951.PositionWS;
				Out_PositionWO15_g170951 = Data15_g170951.PositionWO;
				Out_PivotWS15_g170951 = Data15_g170951.PivotWS;
				Out_PivotWO15_g170951 = Data15_g170951.PivotWO;
				Out_NormalWS15_g170951 = Data15_g170951.NormalWS;
				Out_ViewDirWS15_g170951 = Data15_g170951.ViewDirWS;
				Out_VertexData15_g170951 = Data15_g170951.VertexData;
				Out_BoundsData15_g170951 = Data15_g170951.BoundsData;
				half3 Model_PositionWS776_g170942 = Out_PositionWS15_g170951;
				float temp_output_7_0_g170950 = _DitherDistanceMinValue;
				float temp_output_10_0_g170950 = ( _DitherDistanceMaxValue - temp_output_7_0_g170950 );
				half Dither_Distance856_g170942 = ( saturate( ( ( distance( Model_PositionWS776_g170942 , _WorldSpaceCameraPos ) - temp_output_7_0_g170950 ) / ( temp_output_10_0_g170950 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170942 = Out_ViewDirWS15_g170951;
				float3 normalizeResult792_g170942 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170942 = dot( Model_ViewDirWS845_g170942 , normalizeResult792_g170942 );
				half Dither_Glancing784_g170942 = ( saturate( ( ( 1.0 - abs( dotResult778_g170942 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170942 = max( max( max( Dither_Constant768_g170942 , Dither_Proximity767_g170942 ) , Dither_Distance856_g170942 ) , Dither_Glancing784_g170942 );
				half3 Model_PositionWO602_g170942 = Out_PositionWO15_g170951;
				float4 tex3DNode60_g170948 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170942 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170942 = tex3DNode60_g170948.r;
				half Local_MaskNoise678_g170942 = temp_output_809_0_g170942;
				half Visual_MultiMask671_g170942 = temp_output_821_11_g170942;
				float lerpResult683_g170942 = lerp( 1.0 , Visual_MultiMask671_g170942 , _DitherMultiValue);
				half Local_MaskMulti685_g170942 = lerpResult683_g170942;
				half Custom_Mask826_g170942 = 1.0;
				float lerpResult728_g170942 = lerp( Visual_AlphaClip754_g170942 , min( Visual_AlphaClip754_g170942 , ( -0.001 - ( Dither_Value429_g170942 - Local_MaskNoise678_g170942 ) ) ) , ( Local_MaskMulti685_g170942 * Custom_Mask826_g170942 ));
				half Local_AlphaClip834_g170942 = lerpResult728_g170942;
				#ifdef TVE_DITHER
				float staticSwitch577_g170942 = Local_AlphaClip834_g170942;
				#else
				float staticSwitch577_g170942 = Visual_AlphaClip754_g170942;
				#endif
				half Final_AlphaClip493_g170942 = staticSwitch577_g170942;
				float In_AlphaClip3_g170945 = Final_AlphaClip493_g170942;
				float In_AlphaFade3_g170945 = Out_AlphaFade4_g170944;
				float3 In_Translucency3_g170945 = Out_Translucency4_g170944;
				float In_Transmission3_g170945 = Out_Transmission4_g170944;
				float In_Thickness3_g170945 = Out_Thickness4_g170944;
				float In_Diffusion3_g170945 = Out_Diffusion4_g170944;
				Data3_g170945.Dummy = In_Dummy3_g170945;
				Data3_g170945.Albedo = In_Albedo3_g170945;
				Data3_g170945.AlbedoRaw = In_AlbedoRaw3_g170945;
				Data3_g170945.NormalTS = In_NormalTS3_g170945;
				Data3_g170945.NormalWS = In_NormalWS3_g170945;
				Data3_g170945.Shader = In_Shader3_g170945;
				Data3_g170945.Emissive= In_Emissive3_g170945;
				Data3_g170945.MultiMask = In_MultiMask3_g170945;
				Data3_g170945.Grayscale = In_Grayscale3_g170945;
				Data3_g170945.Luminosity = In_Luminosity3_g170945;
				Data3_g170945.AlphaClip = In_AlphaClip3_g170945;
				Data3_g170945.AlphaFade = In_AlphaFade3_g170945;
				Data3_g170945.Translucency = In_Translucency3_g170945;
				Data3_g170945.Transmission = In_Transmission3_g170945;
				Data3_g170945.Thickness = In_Thickness3_g170945;
				Data3_g170945.Diffusion = In_Diffusion3_g170945;
				TVEVisualData Data4_g170972 = Data3_g170945;
				float Out_Dummy4_g170972 = 0;
				float3 Out_Albedo4_g170972 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170972 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170972 = float2( 0,0 );
				float3 Out_NormalWS4_g170972 = float3( 0,0,0 );
				float4 Out_Shader4_g170972 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170972 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170972 = 0;
				float Out_Grayscale4_g170972 = 0;
				float Out_Luminosity4_g170972 = 0;
				float Out_AlphaClip4_g170972 = 0;
				float Out_AlphaFade4_g170972 = 0;
				float3 Out_Translucency4_g170972 = float3( 0,0,0 );
				float Out_Transmission4_g170972 = 0;
				float Out_Thickness4_g170972 = 0;
				float Out_Diffusion4_g170972 = 0;
				Out_Dummy4_g170972 = Data4_g170972.Dummy;
				Out_Albedo4_g170972 = Data4_g170972.Albedo;
				Out_AlbedoRaw4_g170972 = Data4_g170972.AlbedoRaw;
				Out_NormalTS4_g170972 = Data4_g170972.NormalTS;
				Out_NormalWS4_g170972 = Data4_g170972.NormalWS;
				Out_Shader4_g170972 = Data4_g170972.Shader;
				Out_Emissive4_g170972= Data4_g170972.Emissive;
				Out_MultiMask4_g170972 = Data4_g170972.MultiMask;
				Out_Grayscale4_g170972 = Data4_g170972.Grayscale;
				Out_Luminosity4_g170972= Data4_g170972.Luminosity;
				Out_AlphaClip4_g170972 = Data4_g170972.AlphaClip;
				Out_AlphaFade4_g170972 = Data4_g170972.AlphaFade;
				Out_Translucency4_g170972 = Data4_g170972.Translucency;
				Out_Transmission4_g170972 = Data4_g170972.Transmission;
				Out_Thickness4_g170972 = Data4_g170972.Thickness;
				Out_Diffusion4_g170972 = Data4_g170972.Diffusion;
				float3 temp_output_297_0_g170963 = Out_Albedo4_g170972;
				float3 In_Albedo3_g170973 = temp_output_297_0_g170963;
				float3 temp_output_297_23_g170963 = Out_AlbedoRaw4_g170972;
				float3 In_AlbedoRaw3_g170973 = temp_output_297_23_g170963;
				float2 In_NormalTS3_g170973 = Out_NormalTS4_g170972;
				float3 In_NormalWS3_g170973 = Out_NormalWS4_g170972;
				float4 In_Shader3_g170973 = Out_Shader4_g170972;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170963 = Out_Emissive4_g170972;
				TVEModelData Data15_g170976 = Data16_g170493;
				float Out_Dummy15_g170976 = 0;
				float3 Out_PositionWS15_g170976 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170976 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170976 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170976 = float3( 0,0,0 );
				float4 Out_VertexData15_g170976 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170976 = float4( 0,0,0,0 );
				Out_Dummy15_g170976 = Data15_g170976.Dummy;
				Out_PositionWS15_g170976 = Data15_g170976.PositionWS;
				Out_PositionWO15_g170976 = Data15_g170976.PositionWO;
				Out_PivotWS15_g170976 = Data15_g170976.PivotWS;
				Out_PivotWO15_g170976 = Data15_g170976.PivotWO;
				Out_NormalWS15_g170976 = Data15_g170976.NormalWS;
				Out_ViewDirWS15_g170976 = Data15_g170976.ViewDirWS;
				Out_VertexData15_g170976 = Data15_g170976.VertexData;
				Out_BoundsData15_g170976 = Data15_g170976.BoundsData;
				half4 Model_VertexMasks216_g170963 = Out_VertexData15_g170976;
				float4 break251_g170963 = Model_VertexMasks216_g170963;
				float4 break33_g170967 = _emissive_vert_mode;
				float temp_output_30_0_g170967 = ( break251_g170963.x * break33_g170967.x );
				float temp_output_29_0_g170967 = ( break251_g170963.y * break33_g170967.y );
				float temp_output_31_0_g170967 = ( break251_g170963.z * break33_g170967.z );
				float temp_output_28_0_g170967 = ( temp_output_30_0_g170967 + temp_output_29_0_g170967 + temp_output_31_0_g170967 + ( break251_g170963.w * break33_g170967.w ) );
				float clampResult17_g170966 = clamp( temp_output_28_0_g170967 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170970 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170970 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170970 );
				float lerpResult303_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170966 - temp_output_7_0_g170970 ) / ( temp_output_10_0_g170970 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170975 = lerpResult303_g170963;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170975 = ( temp_output_6_0_g170975 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170975 = temp_output_6_0_g170975;
				#endif
				float temp_output_263_0_g170963 = staticSwitch14_g170975;
				half Emissive_MeshMask221_g170963 = temp_output_263_0_g170963;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170965) = _EmissiveMaskTex;
				SamplerState Sampler276_g170965 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170971 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170971 = ( temp_output_6_0_g170971 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170971 = temp_output_6_0_g170971;
				#endif
				half4 Emissive_Coords167_g170963 = staticSwitch14_g170971;
				float4 temp_output_37_0_g170965 = Emissive_Coords167_g170963;
				half4 Coords276_g170965 = temp_output_37_0_g170965;
				half2 TexCoord276_g170965 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170965 = SampleMain( Texture276_g170965 , Sampler276_g170965 , Coords276_g170965 , TexCoord276_g170965 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170965) = _EmissiveMaskTex;
				SamplerState Sampler275_g170965 = sampler_Linear_Repeat;
				half4 Coords275_g170965 = temp_output_37_0_g170965;
				half2 TexCoord275_g170965 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170965 = SampleExtra( Texture275_g170965 , Sampler275_g170965 , Coords275_g170965 , TexCoord275_g170965 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170963 = localSampleExtra275_g170965;
				#else
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#endif
				half4 Emissive_MaskTex201_g170963 = staticSwitch176_g170963;
				float clampResult17_g170969 = clamp( (Emissive_MaskTex201_g170963).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170968 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170968 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170968 );
				float lerpResult302_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170969 - temp_output_7_0_g170968 ) / ( temp_output_10_0_g170968 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170963 = lerpResult302_g170963;
				float temp_output_279_0_g170963 = ( Emissive_MeshMask221_g170963 * Emissive_Mask103_g170963 );
				float3 appendResult293_g170963 = (float3(temp_output_279_0_g170963 , temp_output_279_0_g170963 , temp_output_279_0_g170963));
				half3 Local_EmissiveColor278_g170963 = appendResult293_g170963;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170964 = Data204_g170494;
				float Out_Dummy15_g170964 = 0;
				float4 Out_CoatParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170964 = float4( 0,0,0,0 );
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_CoatParams15_g170964 = Data15_g170964.CoatParams;
				Out_PaintParams15_g170964 = Data15_g170964.PaintParams;
				Out_GlowParams15_g170964 = Data15_g170964.GlowParams;
				Out_AtmoParams15_g170964= Data15_g170964.AtmoParams;
				Out_FadeParams15_g170964= Data15_g170964.FadeParams;
				Out_FormParams15_g170964 = Data15_g170964.FormParams;
				Out_LandParams15_g170964 = Data15_g170964.LandParams;
				Out_WindParams15_g170964 = Data15_g170964.WindParams;
				Out_PushParams15_g170964 = Data15_g170964.PushParams;
				half4 Global_GlowParams179_g170963 = Out_GlowParams15_g170964;
				float3 lerpResult299_g170963 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170963).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170963 = lerpResult299_g170963;
				#else
				float3 staticSwitch228_g170963 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170963 = staticSwitch228_g170963;
				half3 Visual_AlbedoRaw306_g170963 = temp_output_297_23_g170963;
				float3 lerpResult307_g170963 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170963 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170963 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170963 * lerpResult307_g170963 );
				half3 Emissive_Blend260_g170963 = ( ( (Visual_Emissive255_g170963).xyz * Local_EmissiveColor278_g170963 ) * Local_EmissiveValue88_g170963 );
				float3 temp_output_3_0_g170977 = Emissive_Blend260_g170963;
				float temp_output_15_0_g170977 = _emissive_power_value;
				float3 temp_output_23_0_g170977 = ( temp_output_3_0_g170977 * temp_output_15_0_g170977 );
				half Local_EmissiveMask294_g170963 = temp_output_279_0_g170963;
				float4 appendResult295_g170963 = (float4(temp_output_23_0_g170977 , Local_EmissiveMask294_g170963));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170963 = appendResult295_g170963;
				#else
				float4 staticSwitch129_g170963 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170963 = staticSwitch129_g170963;
				float4 In_Emissive3_g170973 = Final_Emissive184_g170963;
				float In_Grayscale3_g170973 = Out_Grayscale4_g170972;
				float In_Luminosity3_g170973 = Out_Luminosity4_g170972;
				float temp_output_297_11_g170963 = Out_MultiMask4_g170972;
				float In_MultiMask3_g170973 = temp_output_297_11_g170963;
				float In_AlphaClip3_g170973 = Out_AlphaClip4_g170972;
				float In_AlphaFade3_g170973 = Out_AlphaFade4_g170972;
				float3 In_Translucency3_g170973 = Out_Translucency4_g170972;
				float In_Transmission3_g170973 = Out_Transmission4_g170972;
				float In_Thickness3_g170973 = Out_Thickness4_g170972;
				float In_Diffusion3_g170973 = Out_Diffusion4_g170972;
				Data3_g170973.Dummy = In_Dummy3_g170973;
				Data3_g170973.Albedo = In_Albedo3_g170973;
				Data3_g170973.AlbedoRaw = In_AlbedoRaw3_g170973;
				Data3_g170973.NormalTS = In_NormalTS3_g170973;
				Data3_g170973.NormalWS = In_NormalWS3_g170973;
				Data3_g170973.Shader = In_Shader3_g170973;
				Data3_g170973.Emissive= In_Emissive3_g170973;
				Data3_g170973.MultiMask = In_MultiMask3_g170973;
				Data3_g170973.Grayscale = In_Grayscale3_g170973;
				Data3_g170973.Luminosity = In_Luminosity3_g170973;
				Data3_g170973.AlphaClip = In_AlphaClip3_g170973;
				Data3_g170973.AlphaFade = In_AlphaFade3_g170973;
				Data3_g170973.Translucency = In_Translucency3_g170973;
				Data3_g170973.Transmission = In_Transmission3_g170973;
				Data3_g170973.Thickness = In_Thickness3_g170973;
				Data3_g170973.Diffusion = In_Diffusion3_g170973;
				TVEVisualData Data4_g170995 = Data3_g170973;
				float Out_Dummy4_g170995 = 0;
				float3 Out_Albedo4_g170995 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170995 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170995 = float2( 0,0 );
				float3 Out_NormalWS4_g170995 = float3( 0,0,0 );
				float4 Out_Shader4_g170995 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170995 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170995 = 0;
				float Out_Grayscale4_g170995 = 0;
				float Out_Luminosity4_g170995 = 0;
				float Out_AlphaClip4_g170995 = 0;
				float Out_AlphaFade4_g170995 = 0;
				float3 Out_Translucency4_g170995 = float3( 0,0,0 );
				float Out_Transmission4_g170995 = 0;
				float Out_Thickness4_g170995 = 0;
				float Out_Diffusion4_g170995 = 0;
				Out_Dummy4_g170995 = Data4_g170995.Dummy;
				Out_Albedo4_g170995 = Data4_g170995.Albedo;
				Out_AlbedoRaw4_g170995 = Data4_g170995.AlbedoRaw;
				Out_NormalTS4_g170995 = Data4_g170995.NormalTS;
				Out_NormalWS4_g170995 = Data4_g170995.NormalWS;
				Out_Shader4_g170995 = Data4_g170995.Shader;
				Out_Emissive4_g170995= Data4_g170995.Emissive;
				Out_MultiMask4_g170995 = Data4_g170995.MultiMask;
				Out_Grayscale4_g170995 = Data4_g170995.Grayscale;
				Out_Luminosity4_g170995= Data4_g170995.Luminosity;
				Out_AlphaClip4_g170995 = Data4_g170995.AlphaClip;
				Out_AlphaFade4_g170995 = Data4_g170995.AlphaFade;
				Out_Translucency4_g170995 = Data4_g170995.Translucency;
				Out_Transmission4_g170995 = Data4_g170995.Transmission;
				Out_Thickness4_g170995 = Data4_g170995.Thickness;
				Out_Diffusion4_g170995 = Data4_g170995.Diffusion;
				half3 Visual_Albedo199_g170994 = Out_Albedo4_g170995;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170994 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170994 );
				half Visual_Transmission138_g170994 = Out_Transmission4_g170995;
				half Subsurface_Value268_g170994 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170997 = Data204_g170494;
				float Out_Dummy15_g170997 = 0;
				float4 Out_CoatParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170997 = float4( 0,0,0,0 );
				Out_Dummy15_g170997 = Data15_g170997.Dummy;
				Out_CoatParams15_g170997 = Data15_g170997.CoatParams;
				Out_PaintParams15_g170997 = Data15_g170997.PaintParams;
				Out_GlowParams15_g170997 = Data15_g170997.GlowParams;
				Out_AtmoParams15_g170997= Data15_g170997.AtmoParams;
				Out_FadeParams15_g170997= Data15_g170997.FadeParams;
				Out_FormParams15_g170997 = Data15_g170997.FormParams;
				Out_LandParams15_g170997 = Data15_g170997.LandParams;
				Out_WindParams15_g170997 = Data15_g170997.WindParams;
				Out_PushParams15_g170997 = Data15_g170997.PushParams;
				half4 Global_GlowParams373_g170994 = Out_GlowParams15_g170997;
				float lerpResult403_g170994 = lerp( 1.0 , saturate( (Global_GlowParams373_g170994).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170994 = lerpResult403_g170994;
				#else
				float staticSwitch367_g170994 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170994 = staticSwitch367_g170994;
				float temp_output_301_11_g170994 = Out_MultiMask4_g170995;
				half Visual_MultiMask292_g170994 = temp_output_301_11_g170994;
				float lerpResult293_g170994 = lerp( 1.0 , Visual_MultiMask292_g170994 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170994 = lerpResult293_g170994;
				half Custom_Mask363_g170994 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170994 = ( Visual_Transmission138_g170994 * Subsurface_Value268_g170994 * Subsurface_GlobalMask369_g170994 * Subsurface_MultiMask296_g170994 * Custom_Mask363_g170994 );
				#else
				float staticSwitch345_g170994 = 0.0;
				#endif
				half Final_Transmission269_g170994 = staticSwitch345_g170994;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170994 = ( Subsurface_Color264_g170994 * Final_Transmission269_g170994 * 10.0 );
				#else
				float3 staticSwitch348_g170994 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170994 = staticSwitch348_g170994;
				TVEModelData Data15_g171000 = Data16_g170493;
				float Out_Dummy15_g171000 = 0;
				float3 Out_PositionWS15_g171000 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171000 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171000 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171000 = float3( 0,0,0 );
				float4 Out_VertexData15_g171000 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171000 = float4( 0,0,0,0 );
				Out_Dummy15_g171000 = Data15_g171000.Dummy;
				Out_PositionWS15_g171000 = Data15_g171000.PositionWS;
				Out_PositionWO15_g171000 = Data15_g171000.PositionWO;
				Out_PivotWS15_g171000 = Data15_g171000.PivotWS;
				Out_PivotWO15_g171000 = Data15_g171000.PivotWO;
				Out_NormalWS15_g171000 = Data15_g171000.NormalWS;
				Out_ViewDirWS15_g171000 = Data15_g171000.ViewDirWS;
				Out_VertexData15_g171000 = Data15_g171000.VertexData;
				Out_BoundsData15_g171000 = Data15_g171000.BoundsData;
				half3 Model_ViewDirWS392_g170994 = Out_ViewDirWS15_g171000;
				float dotResult324_g170994 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170994 );
				float saferPower323_g170994 = abs( saturate( dotResult324_g170994 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170994 = 0.0;
				#else
				float staticSwitch330_g170994 = ( pow( saferPower323_g170994 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170994 = staticSwitch330_g170994;
				float3 temp_output_6_0_g170998 = ( Final_Translucency254_g170994 * Mask_Subsurface_View320_g170994 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170998 = ( temp_output_6_0_g170998 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170998 = temp_output_6_0_g170998;
				#endif
				half3 Subsurface_Approximation333_g170994 = staticSwitch14_g170998;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170994 = ( Visual_Albedo199_g170994 + Subsurface_Approximation333_g170994 );
				#else
				float3 staticSwitch353_g170994 = Visual_Albedo199_g170994;
				#endif
				half3 Final_Albedo312_g170994 = staticSwitch353_g170994;
				float3 In_Albedo3_g170996 = Final_Albedo312_g170994;
				float3 In_AlbedoRaw3_g170996 = Out_AlbedoRaw4_g170995;
				float2 In_NormalTS3_g170996 = Out_NormalTS4_g170995;
				float3 In_NormalWS3_g170996 = Out_NormalWS4_g170995;
				float4 In_Shader3_g170996 = Out_Shader4_g170995;
				float4 In_Emissive3_g170996 = Out_Emissive4_g170995;
				float In_Grayscale3_g170996 = Out_Grayscale4_g170995;
				float In_Luminosity3_g170996 = Out_Luminosity4_g170995;
				float In_MultiMask3_g170996 = temp_output_301_11_g170994;
				float In_AlphaClip3_g170996 = Out_AlphaClip4_g170995;
				float In_AlphaFade3_g170996 = Out_AlphaFade4_g170995;
				float3 In_Translucency3_g170996 = Final_Translucency254_g170994;
				float In_Transmission3_g170996 = Final_Transmission269_g170994;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170994 = 0.0;
				#else
				float staticSwitch351_g170994 = 1.0;
				#endif
				half Final_Thickness275_g170994 = staticSwitch351_g170994;
				float In_Thickness3_g170996 = Final_Thickness275_g170994;
				float Final_Diffusion340_g170994 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170996 = Final_Diffusion340_g170994;
				Data3_g170996.Dummy = In_Dummy3_g170996;
				Data3_g170996.Albedo = In_Albedo3_g170996;
				Data3_g170996.AlbedoRaw = In_AlbedoRaw3_g170996;
				Data3_g170996.NormalTS = In_NormalTS3_g170996;
				Data3_g170996.NormalWS = In_NormalWS3_g170996;
				Data3_g170996.Shader = In_Shader3_g170996;
				Data3_g170996.Emissive= In_Emissive3_g170996;
				Data3_g170996.MultiMask = In_MultiMask3_g170996;
				Data3_g170996.Grayscale = In_Grayscale3_g170996;
				Data3_g170996.Luminosity = In_Luminosity3_g170996;
				Data3_g170996.AlphaClip = In_AlphaClip3_g170996;
				Data3_g170996.AlphaFade = In_AlphaFade3_g170996;
				Data3_g170996.Translucency = In_Translucency3_g170996;
				Data3_g170996.Transmission = In_Transmission3_g170996;
				Data3_g170996.Thickness = In_Thickness3_g170996;
				Data3_g170996.Diffusion = In_Diffusion3_g170996;
				TVEVisualData Data4_g171011 = Data3_g170996;
				float Out_Dummy4_g171011 = 0;
				float3 Out_Albedo4_g171011 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171011 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171011 = float2( 0,0 );
				float3 Out_NormalWS4_g171011 = float3( 0,0,0 );
				float4 Out_Shader4_g171011 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171011 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171011 = 0;
				float Out_Grayscale4_g171011 = 0;
				float Out_Luminosity4_g171011 = 0;
				float Out_AlphaClip4_g171011 = 0;
				float Out_AlphaFade4_g171011 = 0;
				float3 Out_Translucency4_g171011 = float3( 0,0,0 );
				float Out_Transmission4_g171011 = 0;
				float Out_Thickness4_g171011 = 0;
				float Out_Diffusion4_g171011 = 0;
				Out_Dummy4_g171011 = Data4_g171011.Dummy;
				Out_Albedo4_g171011 = Data4_g171011.Albedo;
				Out_AlbedoRaw4_g171011 = Data4_g171011.AlbedoRaw;
				Out_NormalTS4_g171011 = Data4_g171011.NormalTS;
				Out_NormalWS4_g171011 = Data4_g171011.NormalWS;
				Out_Shader4_g171011 = Data4_g171011.Shader;
				Out_Emissive4_g171011= Data4_g171011.Emissive;
				Out_MultiMask4_g171011 = Data4_g171011.MultiMask;
				Out_Grayscale4_g171011 = Data4_g171011.Grayscale;
				Out_Luminosity4_g171011= Data4_g171011.Luminosity;
				Out_AlphaClip4_g171011 = Data4_g171011.AlphaClip;
				Out_AlphaFade4_g171011 = Data4_g171011.AlphaFade;
				Out_Translucency4_g171011 = Data4_g171011.Translucency;
				Out_Transmission4_g171011 = Data4_g171011.Transmission;
				Out_Thickness4_g171011 = Data4_g171011.Thickness;
				Out_Diffusion4_g171011 = Data4_g171011.Diffusion;
				half3 Input_Albedo24_g171010 = Out_Albedo4_g171011;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g171010 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g171010 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g171010 = staticSwitch22_g171010;
				float4 break24_g171005 = Out_Shader4_g171011;
				half Metallic95_g171005 = break24_g171005.x;
				half Input_Metallic25_g171010 = Metallic95_g171005;
				half OneMinusReflectivity31_g171010 = ( (ColorSpaceDielectricSpec23_g171010).w - ( (ColorSpaceDielectricSpec23_g171010).w * Input_Metallic25_g171010 ) );
				
				float localCustomAlphaClip19_g171012 = ( 0.0 );
				float temp_output_3_0_g171012 = Out_AlphaClip4_g171011;
				float Alpha19_g171012 = temp_output_3_0_g171012;
				float temp_output_15_0_g171012 = 0.0;
				float Treshold19_g171012 = temp_output_15_0_g171012;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#else
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#endif
				
				o.Albedo = ( Input_Albedo24_g171010 * OneMinusReflectivity31_g171010 );
				o.Normal = fixed3( 0, 0, 1 );
				o.Emission = (Out_Emissive4_g171011).xyz;
				o.Alpha = saturate( ( Alpha19_g171012 * Out_AlphaFade4_g171011 ) );
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				UnityMetaInput metaIN;
				UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
				metaIN.Albedo = o.Albedo;
				metaIN.Emission = o.Emission;
				#ifdef EDITOR_VISUALIZATION
					metaIN.VizUV = IN.vizUV;
					metaIN.LightCoord = IN.lightCoord;
				#endif
				return UnityMetaFragment(metaIN);
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ZWrite On
			ZTest LEqual
			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_shadowcaster
			#ifndef UNITY_PASS_SHADOWCASTER
				#define UNITY_PASS_SHADOWCASTER
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
           //Nature Renderer (Instanced Indirect)
           #include "Assets/Visual Design Cafe/Nature Renderer/Shader Includes/Nature Renderer.templatex"
           #pragma instancing_options procedural:SetupNatureRenderer forwardadd
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				V2F_SHADOW_CASTER;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef UNITY_STANDARD_USE_DITHER_MASK
				sampler3D _DitherMaskLOD;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindMode;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _MotionWindOffInfo;
			uniform half _MotionWindOptimizedInfo;
			uniform half _MotionWindAdvancedInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTexRT);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half _MotionIntensityValue;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBaseTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBaseNoiseValue;
			uniform half _global_wind_layer_value;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseDelayValue;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171003 = (TVEModelData)0;
				float In_Dummy16_g171003 = 0.0;
				TVEModelData Data16_g170980 = (TVEModelData)0;
				half Dummy1575_g170978 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170980 = Dummy1575_g170978;
				TVEModelData Data16_g170957 = (TVEModelData)0;
				float In_Dummy16_g170957 = 0.0;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				half Dummy181_g170707 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170721 = Dummy181_g170707;
				TVEModelData Data16_g170671 = (TVEModelData)0;
				half Dummy181_g170668 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170671 = Dummy181_g170668;
				TVEModelData Data16_g170583 = (TVEModelData)0;
				half Dummy181_g170580 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170583 = Dummy181_g170580;
				TVEModelData Data16_g170578 = (TVEModelData)0;
				float In_Dummy16_g170578 = 0.0;
				TVEModelData Data16_g170492 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170492 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170492 = PositionOS131_g170478;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_worldPos;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170492 = PositionWS122_g170478;
				float4x4 break19_g170480 = unity_ObjectToWorld;
				float3 appendResult20_g170480 = (float3(break19_g170480[ 0 ][ 3 ] , break19_g170480[ 1 ][ 3 ] , break19_g170480[ 2 ][ 3 ]));
				half3 ObjectData20_g170482 = appendResult20_g170480;
				half3 WorldData19_g170482 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170482 = WorldData19_g170482;
				#else
				float3 staticSwitch14_g170482 = ObjectData20_g170482;
				#endif
				float3 temp_output_124_0_g170480 = staticSwitch14_g170482;
				float3 temp_output_239_7_g170478 = temp_output_124_0_g170480;
				float4x4 break19_g170484 = unity_ObjectToWorld;
				float3 appendResult20_g170484 = (float3(break19_g170484[ 0 ][ 3 ] , break19_g170484[ 1 ][ 3 ] , break19_g170484[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170488 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170488;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170484 = PivotOS149_g170478;
				float3 PivotsOnly105_g170484 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170484 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170486 = ( appendResult20_g170484 + PivotsOnly105_g170484 );
				half3 WorldData19_g170486 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170486 = WorldData19_g170486;
				#else
				float3 staticSwitch14_g170486 = ObjectData20_g170486;
				#endif
				float3 temp_output_124_0_g170484 = staticSwitch14_g170486;
				float3 temp_output_237_7_g170478 = temp_output_124_0_g170484;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_237_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_239_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170492 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170492 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170492 = float3( 0,0,0 );
				float3 In_PivotOS16_g170492 = PivotOS149_g170478;
				float3 In_PivotWS16_g170492 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170492 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170492 = NormalOS134_g170478;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170492 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170492 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170492 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170492 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170492 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170492 = VertexMasks171_g170478;
				float4 break33_g170491 = _object_phase_mode;
				float temp_output_30_0_g170491 = ( v.ase_color.r * break33_g170491.x );
				float temp_output_29_0_g170491 = ( v.ase_color.g * break33_g170491.y );
				float temp_output_31_0_g170491 = ( v.ase_color.b * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( v.ase_color.a * break33_g170491.w ) );
				float3 break243_g170478 = PivotWO133_g170478;
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170491 + ( break243_g170478.x + break243_g170478.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(1.0 , 1.0 , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_MotionData16_g170492 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170492 = BoundsData254_g170478;
				float4 In_RotationData16_g170492 = float4( 0,0,0,0 );
				Data16_g170492.Dummy = In_Dummy16_g170492;
				Data16_g170492.PositionOS = In_PositionOS16_g170492;
				Data16_g170492.PositionWS = In_PositionWS16_g170492;
				Data16_g170492.PositionWO = In_PositionWO16_g170492;
				Data16_g170492.PositionRawOS = In_PositionRawOS16_g170492;
				Data16_g170492.PositionAddOS = In_PositionAddOS16_g170492;
				Data16_g170492.PivotOS = In_PivotOS16_g170492;
				Data16_g170492.PivotWS = In_PivotWS16_g170492;
				Data16_g170492.PivotWO = In_PivotWO16_g170492;
				Data16_g170492.NormalOS = In_NormalOS16_g170492;
				Data16_g170492.NormalWS = In_NormalWS16_g170492;
				Data16_g170492.NormalRawOS = In_NormalRawOS16_g170492;
				Data16_g170492.NormalRawWS = In_NormalRawWS16_g170492;
				Data16_g170492.TangentOS = In_TangentOS16_g170492;
				Data16_g170492.ViewDirWS = In_ViewDirWS16_g170492;
				Data16_g170492.VertexData = In_VertexData16_g170492;
				Data16_g170492.MotionData = In_MotionData16_g170492;
				Data16_g170492.BoundsData = In_BoundsData16_g170492;
				Data16_g170492.RotationData = In_RotationData16_g170492;
				TVEModelData Data15_g170579 = Data16_g170492;
				float Out_Dummy15_g170579 = 0;
				float3 Out_PositionOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170579 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170579 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170579 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170579 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170579 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170579 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170579 = float3( 0,0,0 );
				float4 Out_VertexData15_g170579 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170579 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170579 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170579 = float4( 0,0,0,0 );
				Out_Dummy15_g170579 = Data15_g170579.Dummy;
				Out_PositionOS15_g170579 = Data15_g170579.PositionOS;
				Out_PositionWS15_g170579 = Data15_g170579.PositionWS;
				Out_PositionWO15_g170579 = Data15_g170579.PositionWO;
				Out_PositionRawOS15_g170579 = Data15_g170579.PositionRawOS;
				Out_PositionAddOS15_g170579 = Data15_g170579.PositionAddOS;
				Out_PivotOS15_g170579 = Data15_g170579.PivotOS;
				Out_PivotWS15_g170579 = Data15_g170579.PivotWS;
				Out_PivotWO15_g170579 = Data15_g170579.PivotWO;
				Out_NormalOS15_g170579 = Data15_g170579.NormalOS;
				Out_NormalWS15_g170579 = Data15_g170579.NormalWS;
				Out_NormalRawOS15_g170579 = Data15_g170579.NormalRawOS;
				Out_NormalRawWS15_g170579 = Data15_g170579.NormalRawWS;
				Out_TangentOS15_g170579 = Data15_g170579.TangentOS;
				Out_ViewDirWS15_g170579 = Data15_g170579.ViewDirWS;
				Out_VertexData15_g170579 = Data15_g170579.VertexData;
				Out_MotionData15_g170579 = Data15_g170579.MotionData;
				Out_BoundsData15_g170579 = Data15_g170579.BoundsData;
				Out_RotationData15_g170579 = Data15_g170579.RotationData;
				float3 temp_output_218_24_g170577 = Out_PivotOS15_g170579;
				float3 In_PositionOS16_g170578 = ( Out_PositionOS15_g170579 - temp_output_218_24_g170577 );
				float3 In_PositionWS16_g170578 = Out_PositionWS15_g170579;
				float3 In_PositionWO16_g170578 = Out_PositionWO15_g170579;
				float3 In_PositionRawOS16_g170578 = Out_PositionRawOS15_g170579;
				float3 In_PositionAddOS16_g170578 = Out_PositionAddOS15_g170579;
				float3 In_PivotOS16_g170578 = temp_output_218_24_g170577;
				float3 In_PivotWS16_g170578 = Out_PivotWS15_g170579;
				float3 In_PivotWO16_g170578 = Out_PivotWO15_g170579;
				float3 In_NormalOS16_g170578 = Out_NormalOS15_g170579;
				float3 In_NormalWS16_g170578 = Out_NormalWS15_g170579;
				float3 In_NormalRawOS16_g170578 = Out_NormalRawOS15_g170579;
				float3 In_NormalRawWS16_g170578 = Out_NormalRawWS15_g170579;
				float4 In_TangentOS16_g170578 = Out_TangentOS15_g170579;
				float3 In_ViewDirWS16_g170578 = Out_ViewDirWS15_g170579;
				float4 In_VertexData16_g170578 = Out_VertexData15_g170579;
				float4 In_MotionData16_g170578 = Out_MotionData15_g170579;
				float4 In_BoundsData16_g170578 = Out_BoundsData15_g170579;
				float4 In_RotationData16_g170578 = Out_RotationData15_g170579;
				Data16_g170578.Dummy = In_Dummy16_g170578;
				Data16_g170578.PositionOS = In_PositionOS16_g170578;
				Data16_g170578.PositionWS = In_PositionWS16_g170578;
				Data16_g170578.PositionWO = In_PositionWO16_g170578;
				Data16_g170578.PositionRawOS = In_PositionRawOS16_g170578;
				Data16_g170578.PositionAddOS = In_PositionAddOS16_g170578;
				Data16_g170578.PivotOS = In_PivotOS16_g170578;
				Data16_g170578.PivotWS = In_PivotWS16_g170578;
				Data16_g170578.PivotWO = In_PivotWO16_g170578;
				Data16_g170578.NormalOS = In_NormalOS16_g170578;
				Data16_g170578.NormalWS = In_NormalWS16_g170578;
				Data16_g170578.NormalRawOS = In_NormalRawOS16_g170578;
				Data16_g170578.NormalRawWS = In_NormalRawWS16_g170578;
				Data16_g170578.TangentOS = In_TangentOS16_g170578;
				Data16_g170578.ViewDirWS = In_ViewDirWS16_g170578;
				Data16_g170578.VertexData = In_VertexData16_g170578;
				Data16_g170578.MotionData = In_MotionData16_g170578;
				Data16_g170578.BoundsData = In_BoundsData16_g170578;
				Data16_g170578.RotationData = In_RotationData16_g170578;
				TVEModelData Data15_g170581 = Data16_g170578;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_MotionData15_g170581 = Data15_g170581.MotionData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				half3 Model_PositionOS147_g170580 = Out_PositionOS15_g170581;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170582 = unity_CameraToWorld;
				float3 appendResult118_g170582 = (float3(break117_g170582[ 0 ][ 2 ] , break117_g170582[ 1 ][ 2 ] , break117_g170582[ 2 ][ 2 ]));
				float3 lerpResult209_g170580 = lerp( ase_worldViewDir , -appendResult118_g170582 , unity_OrthoParams.w);
				float3 break201_g170580 = cross( lerpResult209_g170580 , half3(0,1,0) );
				float3 appendResult196_g170580 = (float3(-break201_g170580.z , 0.0 , break201_g170580.x));
				float dotResult189_g170580 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170580 = abs( dotResult189_g170580 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170580 = ( Model_PositionOS147_g170580 + ( mul( unity_WorldToObject, float4( appendResult196_g170580 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170580 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170580).y ) ) );
				#else
				float3 staticSwitch211_g170580 = Model_PositionOS147_g170580;
				#endif
				half3 Final_Position178_g170580 = staticSwitch211_g170580;
				float3 In_PositionOS16_g170583 = Final_Position178_g170580;
				float3 In_PositionWS16_g170583 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170583 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170583 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170583 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170583 = Out_PivotOS15_g170581;
				float3 In_PivotWS16_g170583 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170583 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170583 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170583 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170583 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170583 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170583 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170583 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170583 = Out_VertexData15_g170581;
				float4 In_MotionData16_g170583 = Out_MotionData15_g170581;
				float4 In_BoundsData16_g170583 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170583 = Out_RotationData15_g170581;
				Data16_g170583.Dummy = In_Dummy16_g170583;
				Data16_g170583.PositionOS = In_PositionOS16_g170583;
				Data16_g170583.PositionWS = In_PositionWS16_g170583;
				Data16_g170583.PositionWO = In_PositionWO16_g170583;
				Data16_g170583.PositionRawOS = In_PositionRawOS16_g170583;
				Data16_g170583.PositionAddOS = In_PositionAddOS16_g170583;
				Data16_g170583.PivotOS = In_PivotOS16_g170583;
				Data16_g170583.PivotWS = In_PivotWS16_g170583;
				Data16_g170583.PivotWO = In_PivotWO16_g170583;
				Data16_g170583.NormalOS = In_NormalOS16_g170583;
				Data16_g170583.NormalWS = In_NormalWS16_g170583;
				Data16_g170583.NormalRawOS = In_NormalRawOS16_g170583;
				Data16_g170583.NormalRawWS = In_NormalRawWS16_g170583;
				Data16_g170583.TangentOS = In_TangentOS16_g170583;
				Data16_g170583.ViewDirWS = In_ViewDirWS16_g170583;
				Data16_g170583.VertexData = In_VertexData16_g170583;
				Data16_g170583.MotionData = In_MotionData16_g170583;
				Data16_g170583.BoundsData = In_BoundsData16_g170583;
				Data16_g170583.RotationData = In_RotationData16_g170583;
				TVEModelData Data15_g170670 = Data16_g170583;
				float Out_Dummy15_g170670 = 0;
				float3 Out_PositionOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170670 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170670 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170670 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170670 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170670 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170670 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170670 = float3( 0,0,0 );
				float4 Out_VertexData15_g170670 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170670 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170670 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170670 = float4( 0,0,0,0 );
				Out_Dummy15_g170670 = Data15_g170670.Dummy;
				Out_PositionOS15_g170670 = Data15_g170670.PositionOS;
				Out_PositionWS15_g170670 = Data15_g170670.PositionWS;
				Out_PositionWO15_g170670 = Data15_g170670.PositionWO;
				Out_PositionRawOS15_g170670 = Data15_g170670.PositionRawOS;
				Out_PositionAddOS15_g170670 = Data15_g170670.PositionAddOS;
				Out_PivotOS15_g170670 = Data15_g170670.PivotOS;
				Out_PivotWS15_g170670 = Data15_g170670.PivotWS;
				Out_PivotWO15_g170670 = Data15_g170670.PivotWO;
				Out_NormalOS15_g170670 = Data15_g170670.NormalOS;
				Out_NormalWS15_g170670 = Data15_g170670.NormalWS;
				Out_NormalRawOS15_g170670 = Data15_g170670.NormalRawOS;
				Out_NormalRawWS15_g170670 = Data15_g170670.NormalRawWS;
				Out_TangentOS15_g170670 = Data15_g170670.TangentOS;
				Out_ViewDirWS15_g170670 = Data15_g170670.ViewDirWS;
				Out_VertexData15_g170670 = Data15_g170670.VertexData;
				Out_MotionData15_g170670 = Data15_g170670.MotionData;
				Out_BoundsData15_g170670 = Data15_g170670.BoundsData;
				Out_RotationData15_g170670 = Data15_g170670.RotationData;
				half3 Model_PositionOS147_g170668 = Out_PositionOS15_g170670;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170668 = Out_PivotWO15_g170670;
				half3 Model_PivotWO162_g170668 = temp_output_210_19_g170668;
				float temp_output_7_0_g170669 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170669 = ( _SizeFadeDistMinValue - temp_output_7_0_g170669 );
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170672 = Data204_g170494;
				float Out_Dummy15_g170672 = 0;
				float4 Out_CoatParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170672 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170672 = float4( 0,0,0,0 );
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_CoatParams15_g170672 = Data15_g170672.CoatParams;
				Out_PaintParams15_g170672 = Data15_g170672.PaintParams;
				Out_GlowParams15_g170672 = Data15_g170672.GlowParams;
				Out_AtmoParams15_g170672= Data15_g170672.AtmoParams;
				Out_FadeParams15_g170672= Data15_g170672.FadeParams;
				Out_FormParams15_g170672 = Data15_g170672.FormParams;
				Out_LandParams15_g170672 = Data15_g170672.LandParams;
				Out_WindParams15_g170672 = Data15_g170672.WindParams;
				Out_PushParams15_g170672 = Data15_g170672.PushParams;
				half4 Input_FormParams188_g170668 = Out_FormParams15_g170672;
				float lerpResult213_g170668 = lerp( 1.0 , (Input_FormParams188_g170668).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170668 = lerpResult213_g170668;
				#else
				float staticSwitch194_g170668 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170668 = staticSwitch194_g170668;
				float temp_output_189_0_g170668 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170668 ) - temp_output_7_0_g170669 ) / ( temp_output_10_0_g170669 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170668 );
				float3 appendResult200_g170668 = (float3(temp_output_189_0_g170668 , temp_output_189_0_g170668 , temp_output_189_0_g170668));
				float3 appendResult201_g170668 = (float3(1.0 , temp_output_189_0_g170668 , 1.0));
				float3 lerpResult202_g170668 = lerp( appendResult200_g170668 , appendResult201_g170668 , _SizeFadeScaleMode);
				float3 lerpResult184_g170668 = lerp( temp_cast_5 , lerpResult202_g170668 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170668 = ( lerpResult184_g170668 * Model_PositionOS147_g170668 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170668 = temp_output_167_0_g170668;
				#else
				float3 staticSwitch199_g170668 = Model_PositionOS147_g170668;
				#endif
				half3 Final_Position178_g170668 = staticSwitch199_g170668;
				float3 In_PositionOS16_g170671 = Final_Position178_g170668;
				float3 In_PositionWS16_g170671 = Out_PositionWS15_g170670;
				float3 In_PositionWO16_g170671 = Out_PositionWO15_g170670;
				float3 In_PositionRawOS16_g170671 = Out_PositionRawOS15_g170670;
				float3 In_PositionAddOS16_g170671 = Out_PositionAddOS15_g170670;
				float3 temp_output_210_24_g170668 = Out_PivotOS15_g170670;
				float3 In_PivotOS16_g170671 = temp_output_210_24_g170668;
				float3 In_PivotWS16_g170671 = Out_PivotWS15_g170670;
				float3 In_PivotWO16_g170671 = temp_output_210_19_g170668;
				float3 In_NormalOS16_g170671 = Out_NormalOS15_g170670;
				float3 In_NormalWS16_g170671 = Out_NormalWS15_g170670;
				float3 In_NormalRawOS16_g170671 = Out_NormalRawOS15_g170670;
				float3 In_NormalRawWS16_g170671 = Out_NormalRawWS15_g170670;
				float4 In_TangentOS16_g170671 = Out_TangentOS15_g170670;
				float3 In_ViewDirWS16_g170671 = Out_ViewDirWS15_g170670;
				float4 In_VertexData16_g170671 = Out_VertexData15_g170670;
				float4 In_MotionData16_g170671 = Out_MotionData15_g170670;
				float4 In_BoundsData16_g170671 = Out_BoundsData15_g170670;
				float4 In_RotationData16_g170671 = Out_RotationData15_g170670;
				Data16_g170671.Dummy = In_Dummy16_g170671;
				Data16_g170671.PositionOS = In_PositionOS16_g170671;
				Data16_g170671.PositionWS = In_PositionWS16_g170671;
				Data16_g170671.PositionWO = In_PositionWO16_g170671;
				Data16_g170671.PositionRawOS = In_PositionRawOS16_g170671;
				Data16_g170671.PositionAddOS = In_PositionAddOS16_g170671;
				Data16_g170671.PivotOS = In_PivotOS16_g170671;
				Data16_g170671.PivotWS = In_PivotWS16_g170671;
				Data16_g170671.PivotWO = In_PivotWO16_g170671;
				Data16_g170671.NormalOS = In_NormalOS16_g170671;
				Data16_g170671.NormalWS = In_NormalWS16_g170671;
				Data16_g170671.NormalRawOS = In_NormalRawOS16_g170671;
				Data16_g170671.NormalRawWS = In_NormalRawWS16_g170671;
				Data16_g170671.TangentOS = In_TangentOS16_g170671;
				Data16_g170671.ViewDirWS = In_ViewDirWS16_g170671;
				Data16_g170671.VertexData = In_VertexData16_g170671;
				Data16_g170671.MotionData = In_MotionData16_g170671;
				Data16_g170671.BoundsData = In_BoundsData16_g170671;
				Data16_g170671.RotationData = In_RotationData16_g170671;
				TVEModelData Data15_g170717 = Data16_g170671;
				float Out_Dummy15_g170717 = 0;
				float3 Out_PositionOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170717 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170717 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170717 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170717 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170717 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170717 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170717 = float3( 0,0,0 );
				float4 Out_VertexData15_g170717 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170717 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170717 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170717 = float4( 0,0,0,0 );
				Out_Dummy15_g170717 = Data15_g170717.Dummy;
				Out_PositionOS15_g170717 = Data15_g170717.PositionOS;
				Out_PositionWS15_g170717 = Data15_g170717.PositionWS;
				Out_PositionWO15_g170717 = Data15_g170717.PositionWO;
				Out_PositionRawOS15_g170717 = Data15_g170717.PositionRawOS;
				Out_PositionAddOS15_g170717 = Data15_g170717.PositionAddOS;
				Out_PivotOS15_g170717 = Data15_g170717.PivotOS;
				Out_PivotWS15_g170717 = Data15_g170717.PivotWS;
				Out_PivotWO15_g170717 = Data15_g170717.PivotWO;
				Out_NormalOS15_g170717 = Data15_g170717.NormalOS;
				Out_NormalWS15_g170717 = Data15_g170717.NormalWS;
				Out_NormalRawOS15_g170717 = Data15_g170717.NormalRawOS;
				Out_NormalRawWS15_g170717 = Data15_g170717.NormalRawWS;
				Out_TangentOS15_g170717 = Data15_g170717.TangentOS;
				Out_ViewDirWS15_g170717 = Data15_g170717.ViewDirWS;
				Out_VertexData15_g170717 = Data15_g170717.VertexData;
				Out_MotionData15_g170717 = Data15_g170717.MotionData;
				Out_BoundsData15_g170717 = Data15_g170717.BoundsData;
				Out_RotationData15_g170717 = Data15_g170717.RotationData;
				float3 temp_output_1567_0_g170707 = Out_PositionOS15_g170717;
				float3 In_PositionOS16_g170721 = temp_output_1567_0_g170707;
				float3 temp_output_1567_16_g170707 = Out_PositionWS15_g170717;
				float3 In_PositionWS16_g170721 = temp_output_1567_16_g170707;
				float3 temp_output_1567_17_g170707 = Out_PositionWO15_g170717;
				float3 In_PositionWO16_g170721 = temp_output_1567_17_g170707;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170717;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170707 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170707 = Out_VertexData15_g170717;
				half4 Model_VertexMasks518_g170707 = temp_output_1567_29_g170707;
				float4 break1689_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170719 = _motion_small_vert_mode;
				float temp_output_30_0_g170719 = ( break1689_g170707.x * break33_g170719.x );
				float temp_output_29_0_g170719 = ( break1689_g170707.y * break33_g170719.y );
				float temp_output_31_0_g170719 = ( break1689_g170707.z * break33_g170719.z );
				float temp_output_28_0_g170719 = ( temp_output_30_0_g170719 + temp_output_29_0_g170719 + temp_output_31_0_g170719 + ( break1689_g170707.w * break33_g170719.w ) );
				float temp_output_1727_0_g170707 = temp_output_28_0_g170719;
				float4 temp_output_1567_30_g170707 = Out_BoundsData15_g170717;
				half4 Model_BoundsData1322_g170707 = temp_output_1567_30_g170707;
				float4 break33_g170722 = _motion_small_proc_mode;
				float temp_output_30_0_g170722 = ( (Model_BoundsData1322_g170707).z * break33_g170722.x );
				float temp_output_29_0_g170722 = ( (Model_BoundsData1322_g170707).w * break33_g170722.y );
				float temp_output_1734_0_g170707 = ( temp_output_30_0_g170722 + temp_output_29_0_g170722 );
				float lerpResult1906_g170707 = lerp( temp_output_1727_0_g170707 , temp_output_1734_0_g170707 , _motion_small_mask_mode);
				float enc1805_g170707 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170707 = DecodeFloatToVector2( enc1805_g170707 );
				float2 break1804_g170707 = localDecodeFloatToVector21805_g170707;
				half Small_Mask_Legacy1806_g170707 = break1804_g170707.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170707 = Small_Mask_Legacy1806_g170707;
				#else
				float staticSwitch1800_g170707 = lerpResult1906_g170707;
				#endif
				float clampResult17_g170724 = clamp( staticSwitch1800_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170725 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170725 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170725 );
				float temp_output_6_0_g170743 = saturate( ( ( clampResult17_g170724 - temp_output_7_0_g170725 ) / ( temp_output_10_0_g170725 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170743 = ( temp_output_6_0_g170743 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				half Small_Mask640_g170707 = staticSwitch14_g170743;
				half3 Model_PositionOS147_g170707 = temp_output_1567_0_g170707;
				float3 normalizeResult1832_g170707 = normalize( Model_PositionOS147_g170707 );
				half3 Model_PositionWO162_g170707 = temp_output_1567_17_g170707;
				float3 temp_output_1567_19_g170707 = Out_PivotWO15_g170717;
				half3 Model_PivotWO402_g170707 = temp_output_1567_19_g170707;
				float3 lerpResult829_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170707 = Out_MotionData15_g170717;
				half4 Model_MotionMasks489_g170707 = temp_output_1567_27_g170707;
				half3 Base_Position1394_g170707 = ( lerpResult829_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170750 = Base_Position1394_g170707;
				half Flow_TilllingRT1397_g170707 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170750 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTillingRT670_g170750 * 0.005 );
				half4 Noise_ParamsRT535_g170750 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170750, 0.0 );
				half Flow_Value1855_g170707 = _MotionIntensityValue;
				half Input_MotionValue629_g170750 = Flow_Value1855_g170707;
				float2 lerpResult709_g170750 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult712_g170750 = (float3(lerpResult709_g170750 , ( (Noise_ParamsRT535_g170750).b * Input_MotionValue629_g170750 )));
				float4 lerpResult627_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170750 = (lerpResult627_g170750).xy;
				half Input_MotionTilling321_g170750 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170750 = ( -(Input_PositionWO419_g170750).xz * Input_MotionTilling321_g170750 * 0.005 );
				float2 temp_output_3_0_g170751 = Noise_Coord515_g170750;
				float2 temp_output_21_0_g170751 = (Global_WindDirection593_g170750*2.0 + -1.0);
				float lerpResult128_g170756 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170750 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170750 = ( ( lerpResult128_g170756 * Input_MotionSpeed62_g170750 ) * 0.02 );
				float temp_output_15_0_g170751 = Noise_Speed516_g170750;
				float temp_output_23_0_g170751 = frac( temp_output_15_0_g170751 );
				float4 lerpResult39_g170751 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * temp_output_23_0_g170751 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170751 + ( temp_output_21_0_g170751 * frac( ( temp_output_15_0_g170751 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170751 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170750 = lerpResult39_g170751;
				half Input_MotionNoise552_g170750 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170750 = (lerpResult627_g170750).z;
				half Motion_Intensity720_g170750 = ( Global_WindIntensity576_g170750 * Input_MotionValue629_g170750 );
				float lerpResult701_g170750 = lerp( 1.0 , Input_MotionNoise552_g170750 , Motion_Intensity720_g170750);
				float2 lerpResult646_g170750 = lerp( Global_WindDirection593_g170750 , (Noise_Params685_g170750).rg , lerpResult701_g170750);
				float2 lerpResult724_g170750 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170750 , Motion_Intensity720_g170750);
				float3 appendResult708_g170750 = (float3(lerpResult724_g170750 , ( (Noise_Params685_g170750).a * Motion_Intensity720_g170750 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170750 = appendResult712_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170750 = appendResult708_g170750;
				#else
				float3 staticSwitch673_g170750 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170750 = staticSwitch673_g170750;
				float temp_output_136_0_g170757 = _global_wind_layer_value;
				float temp_output_19_0_g170759 = TVE_WindLayers[(int)temp_output_136_0_g170757];
				half3 Input_Position180_g170760 = Input_PositionWO419_g170750;
				float2 temp_output_75_0_g170760 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_82_0_g170760 = temp_output_136_0_g170757;
				float2 temp_output_119_0_g170760 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170760).xz ) );
				float temp_output_7_0_g170765 = 1.0;
				float temp_output_10_0_g170765 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170765 );
				float4 lerpResult131_g170760 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170760,temp_output_82_0_g170760), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170760,temp_output_82_0_g170760), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170760 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170765 ) / temp_output_10_0_g170765 ) ));
				float4 temp_output_17_0_g170759 = lerpResult131_g170760;
				float4 temp_output_3_0_g170759 = TVE_WindParams;
				float4 ifLocalVar18_g170759 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170759 >= 0.5 )
				ifLocalVar18_g170759 = temp_output_17_0_g170759;
				else
				ifLocalVar18_g170759 = temp_output_3_0_g170759;
				float4 lerpResult22_g170759 = lerp( temp_output_3_0_g170759 , temp_output_17_0_g170759 , temp_output_19_0_g170759);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170759 = lerpResult22_g170759;
				#else
				float4 staticSwitch24_g170759 = ifLocalVar18_g170759;
				#endif
				float4 temp_output_610_0_g170750 = staticSwitch24_g170759;
				float2 lerpResult699_g170750 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170750).rg , Input_MotionValue629_g170750);
				float3 appendResult643_g170750 = (float3(lerpResult699_g170750 , ( (temp_output_610_0_g170750).b * Input_MotionValue629_g170750 )));
				float3 lerpResult623_g170750 = lerp( Motion_Local694_g170750 , appendResult643_g170750 , (temp_output_610_0_g170750).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170750 = lerpResult623_g170750;
				#else
				float3 staticSwitch693_g170750 = appendResult643_g170750;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170750 = staticSwitch693_g170750;
				#else
				float3 staticSwitch612_g170750 = Motion_Local694_g170750;
				#endif
				float3 temp_output_2275_567_g170707 = staticSwitch612_g170750;
				float2 break83_g170739 = ((temp_output_2275_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170739 = (float3(break83_g170739.x , 0.0 , break83_g170739.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170739 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170707 = ( lerpResult1411_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170767 = Small_Position1421_g170707;
				half Input_MotionTillingRT670_g170767 = ( Flow_TilllingRT1397_g170707 + 0.2 );
				half2 Noise_CoordRT668_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTillingRT670_g170767 * 0.005 );
				half4 Noise_ParamsRT535_g170767 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170767, 0.0 );
				half Input_MotionValue629_g170767 = Flow_Value1855_g170707;
				float2 lerpResult709_g170767 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult712_g170767 = (float3(lerpResult709_g170767 , ( (Noise_ParamsRT535_g170767).b * Input_MotionValue629_g170767 )));
				float4 lerpResult627_g170767 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170767 = (lerpResult627_g170767).xy;
				half Input_MotionTilling321_g170767 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170767 = ( -(Input_PositionWO419_g170767).xz * Input_MotionTilling321_g170767 * 0.005 );
				float2 temp_output_3_0_g170768 = Noise_Coord515_g170767;
				float2 temp_output_21_0_g170768 = (Global_WindDirection593_g170767*2.0 + -1.0);
				float lerpResult128_g170773 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170767 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170767 = ( ( lerpResult128_g170773 * Input_MotionSpeed62_g170767 ) * 0.02 );
				float temp_output_15_0_g170768 = Noise_Speed516_g170767;
				float temp_output_23_0_g170768 = frac( temp_output_15_0_g170768 );
				float4 lerpResult39_g170768 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * temp_output_23_0_g170768 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170768 + ( temp_output_21_0_g170768 * frac( ( temp_output_15_0_g170768 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170768 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170767 = lerpResult39_g170768;
				half Input_MotionNoise552_g170767 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170767 = (lerpResult627_g170767).z;
				half Motion_Intensity720_g170767 = ( Global_WindIntensity576_g170767 * Input_MotionValue629_g170767 );
				float lerpResult701_g170767 = lerp( 1.0 , Input_MotionNoise552_g170767 , Motion_Intensity720_g170767);
				float2 lerpResult646_g170767 = lerp( Global_WindDirection593_g170767 , (Noise_Params685_g170767).rg , lerpResult701_g170767);
				float2 lerpResult724_g170767 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170767 , Motion_Intensity720_g170767);
				float3 appendResult708_g170767 = (float3(lerpResult724_g170767 , ( (Noise_Params685_g170767).a * Motion_Intensity720_g170767 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170767 = appendResult712_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170767 = appendResult708_g170767;
				#else
				float3 staticSwitch673_g170767 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170767 = staticSwitch673_g170767;
				float temp_output_136_0_g170774 = _global_wind_layer_value;
				float temp_output_19_0_g170776 = TVE_WindLayers[(int)temp_output_136_0_g170774];
				half3 Input_Position180_g170777 = Input_PositionWO419_g170767;
				float2 temp_output_75_0_g170777 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_82_0_g170777 = temp_output_136_0_g170774;
				float2 temp_output_119_0_g170777 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170777).xz ) );
				float temp_output_7_0_g170782 = 1.0;
				float temp_output_10_0_g170782 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170782 );
				float4 lerpResult131_g170777 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170777,temp_output_82_0_g170777), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170777,temp_output_82_0_g170777), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170777 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170782 ) / temp_output_10_0_g170782 ) ));
				float4 temp_output_17_0_g170776 = lerpResult131_g170777;
				float4 temp_output_3_0_g170776 = TVE_WindParams;
				float4 ifLocalVar18_g170776 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170776 >= 0.5 )
				ifLocalVar18_g170776 = temp_output_17_0_g170776;
				else
				ifLocalVar18_g170776 = temp_output_3_0_g170776;
				float4 lerpResult22_g170776 = lerp( temp_output_3_0_g170776 , temp_output_17_0_g170776 , temp_output_19_0_g170776);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170776 = lerpResult22_g170776;
				#else
				float4 staticSwitch24_g170776 = ifLocalVar18_g170776;
				#endif
				float4 temp_output_610_0_g170767 = staticSwitch24_g170776;
				float2 lerpResult699_g170767 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170767).rg , Input_MotionValue629_g170767);
				float3 appendResult643_g170767 = (float3(lerpResult699_g170767 , ( (temp_output_610_0_g170767).b * Input_MotionValue629_g170767 )));
				float3 lerpResult623_g170767 = lerp( Motion_Local694_g170767 , appendResult643_g170767 , (temp_output_610_0_g170767).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170767 = lerpResult623_g170767;
				#else
				float3 staticSwitch693_g170767 = appendResult643_g170767;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170767 = staticSwitch693_g170767;
				#else
				float3 staticSwitch612_g170767 = Motion_Local694_g170767;
				#endif
				float3 temp_output_2276_567_g170707 = staticSwitch612_g170767;
				float2 break83_g170738 = ((temp_output_2276_567_g170707).xy*2.0 + -1.0);
				float3 appendResult79_g170738 = (float3(break83_g170738.x , 0.0 , break83_g170738.y));
				half2 Small_Direction1489_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170738 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170707 = Small_Direction1489_g170707;
				#else
				float2 staticSwitch1485_g170707 = Base_Direction893_g170707;
				#endif
				half2 Wave_Direction1486_g170707 = staticSwitch1485_g170707;
				float2 break1828_g170707 = -Wave_Direction1486_g170707;
				float3 appendResult1830_g170707 = (float3(break1828_g170707.x , 0.0 , break1828_g170707.y));
				float dotResult1831_g170707 = dot( normalizeResult1832_g170707 , appendResult1830_g170707 );
				float lerpResult1826_g170707 = lerp( 1.0 , (dotResult1831_g170707*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170707 = lerpResult1826_g170707;
				float2 break1939_g170707 = Small_Direction1489_g170707;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170767 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170767 = Input_MotionSpeed62_g170767;
				#else
				float staticSwitch734_g170767 = 4.0;
				#endif
				float mulTime113_g170783 = _Time.y * staticSwitch734_g170767;
				float lerpResult128_g170783 = lerp( mulTime113_g170783 , ( ( mulTime113_g170783 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170767 = Input_PositionWO419_g170767;
				half Small_Vertical2215_g170707 = ( sin( ( lerpResult128_g170783 + ( ( break726_g170767.x + break726_g170767.y + break726_g170767.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170707 = length( Small_Direction1489_g170707 );
				float3 appendResult2056_g170707 = (float3(break1939_g170707.x , ( Small_Vertical2215_g170707 * Small_Intensity2047_g170707 ) , break1939_g170707.y));
				float lerpResult2098_g170707 = lerp( 1.0 , ( Small_Intensity2047_g170707 * Small_Intensity2047_g170707 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170707 = (float3(lerpResult2098_g170707 , 1.0 , lerpResult2098_g170707));
				half3 Small_Squash789_g170707 = ( Small_Value2180_g170707 * Small_Mask640_g170707 * Motion_FrontMask1142_g170707 * appendResult2056_g170707 * appendResult2101_g170707 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170707 = Small_Squash789_g170707;
				#else
				float3 staticSwitch495_g170707 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170720 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170720 = ( break1710_g170707.x * break33_g170720.x );
				float temp_output_29_0_g170720 = ( break1710_g170707.y * break33_g170720.y );
				float temp_output_31_0_g170720 = ( break1710_g170707.z * break33_g170720.z );
				float temp_output_28_0_g170720 = ( temp_output_30_0_g170720 + temp_output_29_0_g170720 + temp_output_31_0_g170720 + ( break1710_g170707.w * break33_g170720.w ) );
				float temp_output_1729_0_g170707 = temp_output_28_0_g170720;
				float4 break33_g170723 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170723 = ( (Model_BoundsData1322_g170707).z * break33_g170723.x );
				float temp_output_29_0_g170723 = ( (Model_BoundsData1322_g170707).w * break33_g170723.y );
				float temp_output_1735_0_g170707 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 );
				float lerpResult1908_g170707 = lerp( temp_output_1729_0_g170707 , temp_output_1735_0_g170707 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170707 = break1804_g170707.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170707 = Tiny_Mask_Legacy1807_g170707;
				#else
				float staticSwitch1810_g170707 = lerpResult1908_g170707;
				#endif
				float clampResult17_g170726 = clamp( staticSwitch1810_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170727 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170727 );
				float temp_output_6_0_g170728 = saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170727 ) / ( temp_output_10_0_g170727 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				half Tiny_Mask218_g170707 = staticSwitch14_g170728;
				half3 Input_Position500_g170744 = Model_PositionWO162_g170707;
				half Input_MotionTilling321_g170744 = _MotionTinyTillingValue;
				float lerpResult128_g170748 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170744 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170744 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170744).xz * Input_MotionTilling321_g170744 * 0.03 ) + ( lerpResult128_g170748 * Input_MotionSpeed62_g170744 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170707 = temp_output_519_0_g170744;
				half3 Model_PositionWS1819_g170707 = temp_output_1567_16_g170707;
				half Motion_FadeMask1820_g170707 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170707 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170707 = abs( (temp_output_2275_567_g170707).z );
				half Small_Noise1427_g170707 = (temp_output_2276_567_g170707).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170707 = Small_Noise1427_g170707;
				#else
				float staticSwitch2013_g170707 = Base_Noise1159_g170707;
				#endif
				float temp_output_136_0_g170708 = _global_push_layer_value;
				float temp_output_19_0_g170709 = TVE_PushLayers[(int)temp_output_136_0_g170708];
				float3 lerpResult1547_g170707 = lerp( Model_PositionWO162_g170707 , Model_PivotWO402_g170707 , _MotionPushPivotValue);
				half3 Push_Position1549_g170707 = ( lerpResult1547_g170707 + ( (Model_MotionMasks489_g170707).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170710 = Push_Position1549_g170707;
				float2 temp_output_75_0_g170710 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_82_0_g170710 = temp_output_136_0_g170708;
				float2 temp_output_119_0_g170710 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170710).xz ) );
				float temp_output_7_0_g170715 = 1.0;
				float temp_output_10_0_g170715 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170715 );
				float4 lerpResult131_g170710 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170710,temp_output_82_0_g170710), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170710,temp_output_82_0_g170710), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170710 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170715 ) / temp_output_10_0_g170715 ) ));
				float4 temp_output_17_0_g170709 = lerpResult131_g170710;
				float4 temp_output_3_0_g170709 = TVE_PushParams;
				float4 ifLocalVar18_g170709 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170709 >= 0.5 )
				ifLocalVar18_g170709 = temp_output_17_0_g170709;
				else
				ifLocalVar18_g170709 = temp_output_3_0_g170709;
				float4 lerpResult22_g170709 = lerp( temp_output_3_0_g170709 , temp_output_17_0_g170709 , temp_output_19_0_g170709);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170709 = lerpResult22_g170709;
				#else
				float4 staticSwitch24_g170709 = ifLocalVar18_g170709;
				#endif
				half4 Global_PushParams214_g170707 = staticSwitch24_g170709;
				half Push_Noise1977_g170707 = (Global_PushParams214_g170707).b;
				half Push_Value1501_g170707 = _MotionPushIntensityValue;
				half Push_Influence1504_g170707 = saturate( ( (Global_PushParams214_g170707).a * Push_Value1501_g170707 ) );
				float lerpResult2016_g170707 = lerp( staticSwitch2013_g170707 , Push_Noise1977_g170707 , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170707 = lerpResult2016_g170707;
				#else
				float staticSwitch2012_g170707 = staticSwitch2013_g170707;
				#endif
				half Wave_Noise1475_g170707 = staticSwitch2012_g170707;
				half3 Tiny_Flutter1451_g170707 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170707 * Tiny_Direction859_g170707 * Motion_FadeMask1820_g170707 * Flow_Value1855_g170707 * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170707 = Tiny_Flutter1451_g170707;
				#else
				float3 staticSwitch414_g170707 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170707 = ( staticSwitch495_g170707 + staticSwitch414_g170707 );
				float3 In_PositionAddOS16_g170721 = Final_PositionADD1569_g170707;
				float3 temp_output_1567_24_g170707 = Out_PivotOS15_g170717;
				float3 In_PivotOS16_g170721 = temp_output_1567_24_g170707;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170717;
				float3 In_PivotWO16_g170721 = temp_output_1567_19_g170707;
				float3 temp_output_1567_20_g170707 = Out_NormalOS15_g170717;
				float3 In_NormalOS16_g170721 = temp_output_1567_20_g170707;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170717;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170717;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170717;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170717;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170717;
				float4 In_VertexData16_g170721 = temp_output_1567_29_g170707;
				float4 In_MotionData16_g170721 = temp_output_1567_27_g170707;
				float4 In_BoundsData16_g170721 = temp_output_1567_30_g170707;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170707 = _MotionBaseIntensityValue;
				float4 break748_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170731 = _motion_base_vert_mode;
				float temp_output_30_0_g170731 = ( break748_g170707.x * break33_g170731.x );
				float temp_output_29_0_g170731 = ( break748_g170707.y * break33_g170731.y );
				float temp_output_31_0_g170731 = ( break748_g170707.z * break33_g170731.z );
				float temp_output_28_0_g170731 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 + temp_output_31_0_g170731 + ( break748_g170707.w * break33_g170731.w ) );
				float temp_output_1731_0_g170707 = temp_output_28_0_g170731;
				float4 break33_g170732 = _motion_base_proc_mode;
				float temp_output_30_0_g170732 = ( (Model_BoundsData1322_g170707).z * break33_g170732.x );
				float temp_output_29_0_g170732 = ( (Model_BoundsData1322_g170707).w * break33_g170732.y );
				float temp_output_1733_0_g170707 = ( temp_output_30_0_g170732 + temp_output_29_0_g170732 );
				float lerpResult1904_g170707 = lerp( temp_output_1731_0_g170707 , temp_output_1733_0_g170707 , _motion_base_mask_mode);
				float clampResult17_g170729 = clamp( lerpResult1904_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170730 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170730 );
				float temp_output_6_0_g170742 = saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170742 = ( temp_output_6_0_g170742 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170742 = temp_output_6_0_g170742;
				#endif
				half Base_Mask217_g170707 = staticSwitch14_g170742;
				half Base_Intensity2041_g170707 = length( Base_Direction893_g170707 );
				float lerpResult2090_g170707 = lerp( 1.0 , ( Base_Intensity2041_g170707 * Base_Intensity2041_g170707 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170707 = ( Base_Value2242_g170707 * Base_Mask217_g170707 * Base_Direction893_g170707 * lerpResult2090_g170707 );
				#else
				float2 staticSwitch1573_g170707 = temp_cast_54;
				#endif
				float4 break1864_g170707 = Model_VertexMasks518_g170707;
				float4 break33_g170735 = _motion_push_vert_mode;
				float temp_output_30_0_g170735 = ( break1864_g170707.x * break33_g170735.x );
				float temp_output_29_0_g170735 = ( break1864_g170707.y * break33_g170735.y );
				float temp_output_31_0_g170735 = ( break1864_g170707.z * break33_g170735.z );
				float temp_output_28_0_g170735 = ( temp_output_30_0_g170735 + temp_output_29_0_g170735 + temp_output_31_0_g170735 + ( break1864_g170707.w * break33_g170735.w ) );
				float temp_output_1867_0_g170707 = temp_output_28_0_g170735;
				float4 break33_g170736 = _motion_push_proc_mode;
				float temp_output_30_0_g170736 = ( (Model_BoundsData1322_g170707).z * break33_g170736.x );
				float temp_output_29_0_g170736 = ( (Model_BoundsData1322_g170707).w * break33_g170736.y );
				float temp_output_1868_0_g170707 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 );
				float lerpResult1910_g170707 = lerp( temp_output_1867_0_g170707 , temp_output_1868_0_g170707 , _motion_push_mask_mode);
				float clampResult17_g170733 = clamp( lerpResult1910_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170734 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170734 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170734 );
				float temp_output_6_0_g170737 = saturate( ( ( clampResult17_g170733 - temp_output_7_0_g170734 ) / ( temp_output_10_0_g170734 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Push_Mask1877_g170707 = staticSwitch14_g170737;
				float2 break83_g170740 = ((Global_PushParams214_g170707).rg*2.0 + -1.0);
				float3 appendResult79_g170740 = (float3(break83_g170740.x , 0.0 , break83_g170740.y));
				half2 Push_Direction1972_g170707 = (( mul( unity_WorldToObject, float4( appendResult79_g170740 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170707 = lerp( staticSwitch1573_g170707 , ( Push_Mask1877_g170707 * Push_Value1501_g170707 * Push_Direction1972_g170707 ) , Push_Influence1504_g170707);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170707 = lerpResult1496_g170707;
				#else
				float2 staticSwitch1506_g170707 = staticSwitch1573_g170707;
				#endif
				half2 Base_Bending1440_g170707 = staticSwitch1506_g170707;
				float4 appendResult2023_g170707 = (float4(Base_Bending1440_g170707 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170707 = appendResult2023_g170707;
				float4 In_RotationData16_g170721 = Final_RotationData1570_g170707;
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.MotionData = In_MotionData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				TVEModelData Data15_g170956 = Data16_g170721;
				float Out_Dummy15_g170956 = 0;
				float3 Out_PositionOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170956 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170956 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170956 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170956 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170956 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170956 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170956 = float3( 0,0,0 );
				float4 Out_VertexData15_g170956 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170956 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170956 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170956 = float4( 0,0,0,0 );
				Out_Dummy15_g170956 = Data15_g170956.Dummy;
				Out_PositionOS15_g170956 = Data15_g170956.PositionOS;
				Out_PositionWS15_g170956 = Data15_g170956.PositionWS;
				Out_PositionWO15_g170956 = Data15_g170956.PositionWO;
				Out_PositionRawOS15_g170956 = Data15_g170956.PositionRawOS;
				Out_PositionAddOS15_g170956 = Data15_g170956.PositionAddOS;
				Out_PivotOS15_g170956 = Data15_g170956.PivotOS;
				Out_PivotWS15_g170956 = Data15_g170956.PivotWS;
				Out_PivotWO15_g170956 = Data15_g170956.PivotWO;
				Out_NormalOS15_g170956 = Data15_g170956.NormalOS;
				Out_NormalWS15_g170956 = Data15_g170956.NormalWS;
				Out_NormalRawOS15_g170956 = Data15_g170956.NormalRawOS;
				Out_NormalRawWS15_g170956 = Data15_g170956.NormalRawWS;
				Out_TangentOS15_g170956 = Data15_g170956.TangentOS;
				Out_ViewDirWS15_g170956 = Data15_g170956.ViewDirWS;
				Out_VertexData15_g170956 = Data15_g170956.VertexData;
				Out_MotionData15_g170956 = Data15_g170956.MotionData;
				Out_BoundsData15_g170956 = Data15_g170956.BoundsData;
				Out_RotationData15_g170956 = Data15_g170956.RotationData;
				half3 Model_PositionOS147_g170955 = Out_PositionOS15_g170956;
				half3 Input_False58_g170958 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170959 = Model_PositionOS147_g170955;
				half3 VertexPos40_g170960 = VertexPos40_g170959;
				float3 appendResult74_g170960 = (float3(VertexPos40_g170960.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170960 = appendResult74_g170960;
				float3 break84_g170960 = VertexPos40_g170960;
				float3 appendResult81_g170960 = (float3(0.0 , break84_g170960.y , break84_g170960.z));
				half3 VertexPosOtherAxis82_g170960 = appendResult81_g170960;
				float4 temp_output_1567_33_g170955 = Out_RotationData15_g170956;
				half4 Model_VertexBend1569_g170955 = temp_output_1567_33_g170955;
				half2 Angle44_g170959 = (Model_VertexBend1569_g170955).xy;
				half Angle44_g170960 = (Angle44_g170959).y;
				half3 VertexPos40_g170961 = ( VertexPosRotationAxis50_g170960 + ( VertexPosOtherAxis82_g170960 * cos( Angle44_g170960 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170960 ) * sin( Angle44_g170960 ) ) );
				float3 appendResult74_g170961 = (float3(0.0 , 0.0 , VertexPos40_g170961.z));
				half3 VertexPosRotationAxis50_g170961 = appendResult74_g170961;
				float3 break84_g170961 = VertexPos40_g170961;
				float3 appendResult81_g170961 = (float3(break84_g170961.x , break84_g170961.y , 0.0));
				half3 VertexPosOtherAxis82_g170961 = appendResult81_g170961;
				half Angle44_g170961 = -(Angle44_g170959).x;
				half3 Input_True57_g170958 = ( VertexPosRotationAxis50_g170961 + ( VertexPosOtherAxis82_g170961 * cos( Angle44_g170961 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170961 ) * sin( Angle44_g170961 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch65_g170958 = Input_False58_g170958;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch67_g170958 = staticSwitch65_g170958;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170958 = Input_True57_g170958;
				#else
				float3 staticSwitch69_g170958 = staticSwitch67_g170958;
				#endif
				float3 temp_output_1578_0_g170955 = staticSwitch69_g170958;
				float3 temp_output_1567_31_g170955 = Out_PositionAddOS15_g170956;
				half3 Model_PositionADD1568_g170955 = temp_output_1567_31_g170955;
				half3 Final_PositionOS178_g170955 = ( temp_output_1578_0_g170955 + Model_PositionADD1568_g170955 );
				float3 In_PositionOS16_g170957 = Final_PositionOS178_g170955;
				float3 In_PositionWS16_g170957 = Out_PositionWS15_g170956;
				float3 In_PositionWO16_g170957 = Out_PositionWO15_g170956;
				float3 In_PositionRawOS16_g170957 = Out_PositionRawOS15_g170956;
				float3 In_PositionAddOS16_g170957 = temp_output_1567_31_g170955;
				float3 In_PivotOS16_g170957 = Out_PivotOS15_g170956;
				float3 In_PivotWS16_g170957 = Out_PivotWS15_g170956;
				float3 In_PivotWO16_g170957 = Out_PivotWO15_g170956;
				float3 In_NormalOS16_g170957 = Out_NormalOS15_g170956;
				float3 In_NormalWS16_g170957 = Out_NormalWS15_g170956;
				float3 In_NormalRawOS16_g170957 = Out_NormalRawOS15_g170956;
				float3 In_NormalRawWS16_g170957 = Out_NormalRawWS15_g170956;
				float4 In_TangentOS16_g170957 = Out_TangentOS15_g170956;
				float3 In_ViewDirWS16_g170957 = Out_ViewDirWS15_g170956;
				float4 In_VertexData16_g170957 = Out_VertexData15_g170956;
				float4 In_MotionData16_g170957 = Out_MotionData15_g170956;
				float4 In_BoundsData16_g170957 = Out_BoundsData15_g170956;
				float4 In_RotationData16_g170957 = temp_output_1567_33_g170955;
				Data16_g170957.Dummy = In_Dummy16_g170957;
				Data16_g170957.PositionOS = In_PositionOS16_g170957;
				Data16_g170957.PositionWS = In_PositionWS16_g170957;
				Data16_g170957.PositionWO = In_PositionWO16_g170957;
				Data16_g170957.PositionRawOS = In_PositionRawOS16_g170957;
				Data16_g170957.PositionAddOS = In_PositionAddOS16_g170957;
				Data16_g170957.PivotOS = In_PivotOS16_g170957;
				Data16_g170957.PivotWS = In_PivotWS16_g170957;
				Data16_g170957.PivotWO = In_PivotWO16_g170957;
				Data16_g170957.NormalOS = In_NormalOS16_g170957;
				Data16_g170957.NormalWS = In_NormalWS16_g170957;
				Data16_g170957.NormalRawOS = In_NormalRawOS16_g170957;
				Data16_g170957.NormalRawWS = In_NormalRawWS16_g170957;
				Data16_g170957.TangentOS = In_TangentOS16_g170957;
				Data16_g170957.ViewDirWS = In_ViewDirWS16_g170957;
				Data16_g170957.VertexData = In_VertexData16_g170957;
				Data16_g170957.MotionData = In_MotionData16_g170957;
				Data16_g170957.BoundsData = In_BoundsData16_g170957;
				Data16_g170957.RotationData = In_RotationData16_g170957;
				TVEModelData Data15_g170979 = Data16_g170957;
				float Out_Dummy15_g170979 = 0;
				float3 Out_PositionOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170979 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170979 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170979 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170979 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170979 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170979 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170979 = float3( 0,0,0 );
				float4 Out_VertexData15_g170979 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170979 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170979 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170979 = float4( 0,0,0,0 );
				Out_Dummy15_g170979 = Data15_g170979.Dummy;
				Out_PositionOS15_g170979 = Data15_g170979.PositionOS;
				Out_PositionWS15_g170979 = Data15_g170979.PositionWS;
				Out_PositionWO15_g170979 = Data15_g170979.PositionWO;
				Out_PositionRawOS15_g170979 = Data15_g170979.PositionRawOS;
				Out_PositionAddOS15_g170979 = Data15_g170979.PositionAddOS;
				Out_PivotOS15_g170979 = Data15_g170979.PivotOS;
				Out_PivotWS15_g170979 = Data15_g170979.PivotWS;
				Out_PivotWO15_g170979 = Data15_g170979.PivotWO;
				Out_NormalOS15_g170979 = Data15_g170979.NormalOS;
				Out_NormalWS15_g170979 = Data15_g170979.NormalWS;
				Out_NormalRawOS15_g170979 = Data15_g170979.NormalRawOS;
				Out_NormalRawWS15_g170979 = Data15_g170979.NormalRawWS;
				Out_TangentOS15_g170979 = Data15_g170979.TangentOS;
				Out_ViewDirWS15_g170979 = Data15_g170979.ViewDirWS;
				Out_VertexData15_g170979 = Data15_g170979.VertexData;
				Out_MotionData15_g170979 = Data15_g170979.MotionData;
				Out_BoundsData15_g170979 = Data15_g170979.BoundsData;
				Out_RotationData15_g170979 = Data15_g170979.RotationData;
				float3 In_PositionOS16_g170980 = Out_PositionOS15_g170979;
				float3 In_PositionWS16_g170980 = Out_PositionWS15_g170979;
				float3 temp_output_1567_17_g170978 = Out_PositionWO15_g170979;
				float3 In_PositionWO16_g170980 = temp_output_1567_17_g170978;
				float3 temp_output_1567_26_g170978 = Out_PositionRawOS15_g170979;
				float3 In_PositionRawOS16_g170980 = temp_output_1567_26_g170978;
				float3 In_PositionAddOS16_g170980 = Out_PositionAddOS15_g170979;
				float3 In_PivotOS16_g170980 = Out_PivotOS15_g170979;
				float3 In_PivotWS16_g170980 = Out_PivotWS15_g170979;
				float3 In_PivotWO16_g170980 = Out_PivotWO15_g170979;
				half3 Model_NormalOS1568_g170978 = Out_NormalOS15_g170979;
				float3 lerpResult1589_g170978 = lerp( Model_NormalOS1568_g170978 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170978 = temp_output_1567_26_g170978;
				float3 normalizeResult1594_g170978 = ASESafeNormalize( ( Model_PositionRAW1592_g170978 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170978 = lerp( lerpResult1589_g170978 , normalizeResult1594_g170978 , _NormalSphereValue);
				half3 Input_False58_g170993 = lerpResult1585_g170978;
				half3 VertexPos40_g170982 = lerpResult1585_g170978;
				half3 VertexPos40_g170983 = VertexPos40_g170982;
				float3 appendResult74_g170983 = (float3(VertexPos40_g170983.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170983 = appendResult74_g170983;
				float3 break84_g170983 = VertexPos40_g170983;
				float3 appendResult81_g170983 = (float3(0.0 , break84_g170983.y , break84_g170983.z));
				half3 VertexPosOtherAxis82_g170983 = appendResult81_g170983;
				float4 temp_output_1567_33_g170978 = Out_RotationData15_g170979;
				half4 Model_RotationData1583_g170978 = temp_output_1567_33_g170978;
				half2 Angle44_g170982 = Model_RotationData1583_g170978.xy;
				half Angle44_g170983 = (Angle44_g170982).y;
				half3 VertexPos40_g170984 = ( VertexPosRotationAxis50_g170983 + ( VertexPosOtherAxis82_g170983 * cos( Angle44_g170983 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170983 ) * sin( Angle44_g170983 ) ) );
				float3 appendResult74_g170984 = (float3(0.0 , 0.0 , VertexPos40_g170984.z));
				half3 VertexPosRotationAxis50_g170984 = appendResult74_g170984;
				float3 break84_g170984 = VertexPos40_g170984;
				float3 appendResult81_g170984 = (float3(break84_g170984.x , break84_g170984.y , 0.0));
				half3 VertexPosOtherAxis82_g170984 = appendResult81_g170984;
				half Angle44_g170984 = -(Angle44_g170982).x;
				float3 lerpResult1591_g170978 = lerp( lerpResult1585_g170978 , ( VertexPosRotationAxis50_g170984 + ( VertexPosOtherAxis82_g170984 * cos( Angle44_g170984 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170984 ) * sin( Angle44_g170984 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170993 = lerpResult1591_g170978;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch65_g170993 = Input_False58_g170993;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch67_g170993 = staticSwitch65_g170993;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170993 = Input_True57_g170993;
				#else
				float3 staticSwitch69_g170993 = staticSwitch67_g170993;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170978 = staticSwitch69_g170993;
				#else
				float3 staticSwitch1595_g170978 = lerpResult1585_g170978;
				#endif
				float4 temp_output_1567_29_g170978 = Out_VertexData15_g170979;
				half4 Model_VertexData1608_g170978 = temp_output_1567_29_g170978;
				float4 break1683_g170978 = Model_VertexData1608_g170978;
				float4 break33_g170986 = _normal_vert_mode;
				float temp_output_30_0_g170986 = ( break1683_g170978.x * break33_g170986.x );
				float temp_output_29_0_g170986 = ( break1683_g170978.y * break33_g170986.y );
				float temp_output_31_0_g170986 = ( break1683_g170978.z * break33_g170986.z );
				float temp_output_28_0_g170986 = ( temp_output_30_0_g170986 + temp_output_29_0_g170986 + temp_output_31_0_g170986 + ( break1683_g170978.w * break33_g170986.w ) );
				float clampResult17_g170988 = clamp( temp_output_28_0_g170986 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170987 = _NormalMeshRemap.x;
				float temp_output_10_0_g170987 = ( _NormalMeshRemap.y - temp_output_7_0_g170987 );
				float lerpResult1695_g170978 = lerp( 1.0 , saturate( ( ( clampResult17_g170988 - temp_output_7_0_g170987 ) / ( temp_output_10_0_g170987 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170989 = lerpResult1695_g170978;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170989 = ( temp_output_6_0_g170989 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170989 = temp_output_6_0_g170989;
				#endif
				float temp_output_1690_0_g170978 = staticSwitch14_g170989;
				half Normal_MeskMask1691_g170978 = temp_output_1690_0_g170978;
				half Normal_Proj_Mask1647_g170978 = 1.0;
				float temp_output_1699_0_g170978 = ( Normal_MeskMask1691_g170978 * Normal_Proj_Mask1647_g170978 );
				float3 lerpResult1670_g170978 = lerp( Model_NormalOS1568_g170978 , staticSwitch1595_g170978 , temp_output_1699_0_g170978);
				half3 Final_NormalOS178_g170978 = lerpResult1670_g170978;
				float3 In_NormalOS16_g170980 = Final_NormalOS178_g170978;
				float3 temp_output_1567_21_g170978 = Out_NormalWS15_g170979;
				float3 In_NormalWS16_g170980 = temp_output_1567_21_g170978;
				float3 In_NormalRawOS16_g170980 = Out_NormalRawOS15_g170979;
				float3 In_NormalRawWS16_g170980 = Out_NormalRawWS15_g170979;
				float4 In_TangentOS16_g170980 = Out_TangentOS15_g170979;
				float3 In_ViewDirWS16_g170980 = Out_ViewDirWS15_g170979;
				float4 In_VertexData16_g170980 = temp_output_1567_29_g170978;
				float4 In_MotionData16_g170980 = Out_MotionData15_g170979;
				float4 In_BoundsData16_g170980 = Out_BoundsData15_g170979;
				float4 In_RotationData16_g170980 = temp_output_1567_33_g170978;
				Data16_g170980.Dummy = In_Dummy16_g170980;
				Data16_g170980.PositionOS = In_PositionOS16_g170980;
				Data16_g170980.PositionWS = In_PositionWS16_g170980;
				Data16_g170980.PositionWO = In_PositionWO16_g170980;
				Data16_g170980.PositionRawOS = In_PositionRawOS16_g170980;
				Data16_g170980.PositionAddOS = In_PositionAddOS16_g170980;
				Data16_g170980.PivotOS = In_PivotOS16_g170980;
				Data16_g170980.PivotWS = In_PivotWS16_g170980;
				Data16_g170980.PivotWO = In_PivotWO16_g170980;
				Data16_g170980.NormalOS = In_NormalOS16_g170980;
				Data16_g170980.NormalWS = In_NormalWS16_g170980;
				Data16_g170980.NormalRawOS = In_NormalRawOS16_g170980;
				Data16_g170980.NormalRawWS = In_NormalRawWS16_g170980;
				Data16_g170980.TangentOS = In_TangentOS16_g170980;
				Data16_g170980.ViewDirWS = In_ViewDirWS16_g170980;
				Data16_g170980.VertexData = In_VertexData16_g170980;
				Data16_g170980.MotionData = In_MotionData16_g170980;
				Data16_g170980.BoundsData = In_BoundsData16_g170980;
				Data16_g170980.RotationData = In_RotationData16_g170980;
				TVEModelData Data15_g171002 = Data16_g170980;
				float Out_Dummy15_g171002 = 0;
				float3 Out_PositionOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171002 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171002 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171002 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171002 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171002 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171002 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171002 = float3( 0,0,0 );
				float4 Out_VertexData15_g171002 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171002 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171002 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171002 = float4( 0,0,0,0 );
				Out_Dummy15_g171002 = Data15_g171002.Dummy;
				Out_PositionOS15_g171002 = Data15_g171002.PositionOS;
				Out_PositionWS15_g171002 = Data15_g171002.PositionWS;
				Out_PositionWO15_g171002 = Data15_g171002.PositionWO;
				Out_PositionRawOS15_g171002 = Data15_g171002.PositionRawOS;
				Out_PositionAddOS15_g171002 = Data15_g171002.PositionAddOS;
				Out_PivotOS15_g171002 = Data15_g171002.PivotOS;
				Out_PivotWS15_g171002 = Data15_g171002.PivotWS;
				Out_PivotWO15_g171002 = Data15_g171002.PivotWO;
				Out_NormalOS15_g171002 = Data15_g171002.NormalOS;
				Out_NormalWS15_g171002 = Data15_g171002.NormalWS;
				Out_NormalRawOS15_g171002 = Data15_g171002.NormalRawOS;
				Out_NormalRawWS15_g171002 = Data15_g171002.NormalRawWS;
				Out_TangentOS15_g171002 = Data15_g171002.TangentOS;
				Out_ViewDirWS15_g171002 = Data15_g171002.ViewDirWS;
				Out_VertexData15_g171002 = Data15_g171002.VertexData;
				Out_MotionData15_g171002 = Data15_g171002.MotionData;
				Out_BoundsData15_g171002 = Data15_g171002.BoundsData;
				Out_RotationData15_g171002 = Data15_g171002.RotationData;
				float3 temp_output_217_24_g171001 = Out_PivotOS15_g171002;
				float3 In_PositionOS16_g171003 = ( Out_PositionOS15_g171002 + temp_output_217_24_g171001 );
				float3 In_PositionWS16_g171003 = Out_PositionWS15_g171002;
				float3 In_PositionWO16_g171003 = Out_PositionWO15_g171002;
				float3 In_PositionRawOS16_g171003 = Out_PositionRawOS15_g171002;
				float3 In_PositionAddOS16_g171003 = Out_PositionAddOS15_g171002;
				float3 In_PivotOS16_g171003 = temp_output_217_24_g171001;
				float3 In_PivotWS16_g171003 = Out_PivotWS15_g171002;
				float3 In_PivotWO16_g171003 = Out_PivotWO15_g171002;
				float3 In_NormalOS16_g171003 = Out_NormalOS15_g171002;
				float3 In_NormalWS16_g171003 = Out_NormalWS15_g171002;
				float3 In_NormalRawOS16_g171003 = Out_NormalRawOS15_g171002;
				float3 In_NormalRawWS16_g171003 = Out_NormalRawWS15_g171002;
				float4 In_TangentOS16_g171003 = Out_TangentOS15_g171002;
				float3 In_ViewDirWS16_g171003 = Out_ViewDirWS15_g171002;
				float4 In_VertexData16_g171003 = Out_VertexData15_g171002;
				float4 In_MotionData16_g171003 = Out_MotionData15_g171002;
				float4 In_BoundsData16_g171003 = Out_BoundsData15_g171002;
				float4 In_RotationData16_g171003 = Out_RotationData15_g171002;
				Data16_g171003.Dummy = In_Dummy16_g171003;
				Data16_g171003.PositionOS = In_PositionOS16_g171003;
				Data16_g171003.PositionWS = In_PositionWS16_g171003;
				Data16_g171003.PositionWO = In_PositionWO16_g171003;
				Data16_g171003.PositionRawOS = In_PositionRawOS16_g171003;
				Data16_g171003.PositionAddOS = In_PositionAddOS16_g171003;
				Data16_g171003.PivotOS = In_PivotOS16_g171003;
				Data16_g171003.PivotWS = In_PivotWS16_g171003;
				Data16_g171003.PivotWO = In_PivotWO16_g171003;
				Data16_g171003.NormalOS = In_NormalOS16_g171003;
				Data16_g171003.NormalWS = In_NormalWS16_g171003;
				Data16_g171003.NormalRawOS = In_NormalRawOS16_g171003;
				Data16_g171003.NormalRawWS = In_NormalRawWS16_g171003;
				Data16_g171003.TangentOS = In_TangentOS16_g171003;
				Data16_g171003.ViewDirWS = In_ViewDirWS16_g171003;
				Data16_g171003.VertexData = In_VertexData16_g171003;
				Data16_g171003.MotionData = In_MotionData16_g171003;
				Data16_g171003.BoundsData = In_BoundsData16_g171003;
				Data16_g171003.RotationData = In_RotationData16_g171003;
				TVEModelData Data15_g171008 = Data16_g171003;
				float Out_Dummy15_g171008 = 0;
				float3 Out_PositionOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171008 = float3( 0,0,0 );
				float4 Out_VertexData15_g171008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g171008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171008 = float4( 0,0,0,0 );
				Out_Dummy15_g171008 = Data15_g171008.Dummy;
				Out_PositionOS15_g171008 = Data15_g171008.PositionOS;
				Out_PositionWS15_g171008 = Data15_g171008.PositionWS;
				Out_PositionWO15_g171008 = Data15_g171008.PositionWO;
				Out_PositionRawOS15_g171008 = Data15_g171008.PositionRawOS;
				Out_PositionAddOS15_g171008 = Data15_g171008.PositionAddOS;
				Out_PivotOS15_g171008 = Data15_g171008.PivotOS;
				Out_PivotWS15_g171008 = Data15_g171008.PivotWS;
				Out_PivotWO15_g171008 = Data15_g171008.PivotWO;
				Out_NormalOS15_g171008 = Data15_g171008.NormalOS;
				Out_NormalWS15_g171008 = Data15_g171008.NormalWS;
				Out_NormalRawOS15_g171008 = Data15_g171008.NormalRawOS;
				Out_NormalRawWS15_g171008 = Data15_g171008.NormalRawWS;
				Out_TangentOS15_g171008 = Data15_g171008.TangentOS;
				Out_ViewDirWS15_g171008 = Data15_g171008.ViewDirWS;
				Out_VertexData15_g171008 = Data15_g171008.VertexData;
				Out_MotionData15_g171008 = Data15_g171008.MotionData;
				Out_BoundsData15_g171008 = Data15_g171008.BoundsData;
				Out_RotationData15_g171008 = Data15_g171008.RotationData;
				float3 temp_output_31_0_g171005 = Out_PositionOS15_g171008;
				
				o.ase_texcoord4.xyz = vertexToFrag73_g170478;
				o.ase_texcoord5.xyz = vertexToFrag76_g170478;
				o.ase_texcoord6.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord7.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170741 = ( _MotionHighlightValue * Motion_FadeMask1820_g170707 * ( Base_Mask217_g170707 * Base_Mask217_g170707 ) * ( Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 * Wave_Noise1475_g170707 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170741 = ( temp_output_6_0_g170741 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170741 = temp_output_6_0_g170741;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170741;
				float4 appendResult23_g170813 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170813 = appendResult23_g170813;
				o.ase_texcoord9 = vertexToFrag24_g170813;
				o.ase_texcoord10.xyz = ase_worldPos;
				
				o.ase_texcoord2 = v.ase_texcoord;
				o.ase_texcoord3.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;
				o.ase_texcoord4.w = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord10.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g171005 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171008;
				v.tangent = Out_TangentOS15_g171008;

				TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localCustomAlphaClip19_g171012 = ( 0.0 );
				float localBreakData4_g171011 = ( 0.0 );
				float localCompData3_g170996 = ( 0.0 );
				TVEVisualData Data3_g170996 = (TVEVisualData)0;
				half Dummy145_g170994 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170996 = Dummy145_g170994;
				float localBreakData4_g170995 = ( 0.0 );
				float localCompData3_g170973 = ( 0.0 );
				TVEVisualData Data3_g170973 = (TVEVisualData)0;
				half Dummy145_g170963 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170973 = Dummy145_g170963;
				float localBreakData4_g170972 = ( 0.0 );
				float localCompData3_g170945 = ( 0.0 );
				TVEVisualData Data3_g170945 = (TVEVisualData)0;
				half Dummy594_g170942 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170945 = Dummy594_g170942;
				float localBreakData4_g170944 = ( 0.0 );
				float localCompData3_g170930 = ( 0.0 );
				TVEVisualData Data3_g170930 = (TVEVisualData)0;
				half Dummy594_g170929 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170930 = Dummy594_g170929;
				float localBreakData4_g170940 = ( 0.0 );
				float localCompData3_g170902 = ( 0.0 );
				TVEVisualData Data3_g170902 = (TVEVisualData)0;
				half Dummy594_g170900 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170902 = Dummy594_g170900;
				float localBreakData4_g170901 = ( 0.0 );
				float localCompData3_g170867 = ( 0.0 );
				TVEVisualData Data3_g170867 = (TVEVisualData)0;
				half Dummy594_g170864 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170867 = Dummy594_g170864;
				float localBreakData4_g170865 = ( 0.0 );
				float localCompData3_g170863 = ( 0.0 );
				TVEVisualData Data3_g170863 = (TVEVisualData)0;
				float In_Dummy3_g170863 = 0.0;
				float localBreakData4_g170862 = ( 0.0 );
				float localCompData3_g170841 = ( 0.0 );
				TVEVisualData Data3_g170841 = (TVEVisualData)0;
				half Dummy205_g170838 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170841 = Dummy205_g170838;
				float localBreakData4_g170840 = ( 0.0 );
				float localCompData3_g170835 = ( 0.0 );
				TVEVisualData Data3_g170835 = (TVEVisualData)0;
				half Dummy205_g170814 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170835 = Dummy205_g170814;
				float localBreakData4_g170836 = ( 0.0 );
				float localCompData3_g170807 = ( 0.0 );
				TVEVisualData Data3_g170807 = (TVEVisualData)0;
				half Dummy220_g170804 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170807 = Dummy220_g170804;
				float localBreakData4_g170806 = ( 0.0 );
				float localCompData3_g170797 = ( 0.0 );
				TVEVisualData Data3_g170797 = (TVEVisualData)0;
				half Dummy220_g170794 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170797 = Dummy220_g170794;
				float localBreakData4_g170796 = ( 0.0 );
				float localCompData3_g170786 = ( 0.0 );
				TVEVisualData Data3_g170786 = (TVEVisualData)0;
				half Dummy202_g170784 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170786 = Dummy202_g170784;
				float localBreakData4_g170785 = ( 0.0 );
				float localCompData3_g170691 = ( 0.0 );
				TVEVisualData Data3_g170691 = (TVEVisualData)0;
				half4 Dummy944_g170674 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170691 = Dummy944_g170674.x;
				float localBreakData4_g170690 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170667 = Dummy946_g170634.x;
				float localBreakData4_g170646 = ( 0.0 );
				float localCompData3_g170633 = ( 0.0 );
				TVEVisualData Data3_g170633 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170633 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainAlbedoTex;
				float localFilterTexture19_g170629 = ( 0.0 );
				SamplerState SamplerDefault19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170629 = SamplerDefault19_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170629 = SamplerDefault19_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170629 = SamplerPoint19_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170629 = SamplerLow19_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170629 = SamplerMedium19_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170629 = SamplerHigh19_g170629;
				#endif
				SamplerState Sampler276_g170626 = SS19_g170629;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainAlbedoTex;
				SamplerState Sampler275_g170626 = SS19_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainAlbedoTex;
				SamplerState Sampler238_g170626 = SS19_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				TVEModelData Data16_g170493 = (TVEModelData)0;
				float In_Dummy16_g170493 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord4.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170493 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord5.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170493 = PositionWO132_g170478;
				float3 In_PivotWS16_g170493 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170493 = PivotWO133_g170478;
				float3 ase_worldNormal = IN.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170493 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170493 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170493 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170493 = float4( 1,1,1,1 );
				Data16_g170493.Dummy = In_Dummy16_g170493;
				Data16_g170493.PositionWS = In_PositionWS16_g170493;
				Data16_g170493.PositionWO = In_PositionWO16_g170493;
				Data16_g170493.PivotWS = In_PivotWS16_g170493;
				Data16_g170493.PivotWO = In_PivotWO16_g170493;
				Data16_g170493.NormalWS = In_NormalWS16_g170493;
				Data16_g170493.ViewDirWS = In_ViewDirWS16_g170493;
				Data16_g170493.VertexData = In_VertexData16_g170493;
				Data16_g170493.BoundsData = In_BoundsData16_g170493;
				TVEModelData Data15_g170632 = Data16_g170493;
				float Out_Dummy15_g170632 = 0;
				float3 Out_PositionWS15_g170632 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170632 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170632 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170632 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170632 = float3( 0,0,0 );
				float4 Out_VertexData15_g170632 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170632 = float4( 0,0,0,0 );
				Out_Dummy15_g170632 = Data15_g170632.Dummy;
				Out_PositionWS15_g170632 = Data15_g170632.PositionWS;
				Out_PositionWO15_g170632 = Data15_g170632.PositionWO;
				Out_PivotWS15_g170632 = Data15_g170632.PivotWS;
				Out_PivotWO15_g170632 = Data15_g170632.PivotWO;
				Out_NormalWS15_g170632 = Data15_g170632.NormalWS;
				Out_ViewDirWS15_g170632 = Data15_g170632.ViewDirWS;
				Out_VertexData15_g170632 = Data15_g170632.VertexData;
				Out_BoundsData15_g170632 = Data15_g170632.BoundsData;
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170632;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainAlbedoTex;
				SamplerState Sampler246_g170626 = SS19_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170632;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainAlbedoTex;
				SamplerState Sampler234_g170626 = SS19_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainAlbedoTex;
				SamplerState Sampler263_g170626 = SS19_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170628) = _MainShaderTex;
				float localFilterTexture30_g170631 = ( 0.0 );
				SamplerState SamplerDefault30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170631 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170631 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170631 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170631 = SamplerDefault30_g170631;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170631 = SamplerDefault30_g170631;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170631 = SamplerPoint30_g170631;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170631 = SamplerLow30_g170631;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170631 = SamplerMedium30_g170631;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170631 = SamplerHigh30_g170631;
				#endif
				SamplerState Sampler276_g170628 = SS30_g170631;
				float4 temp_output_37_0_g170628 = Local_Coords180_g170617;
				half4 Coords276_g170628 = temp_output_37_0_g170628;
				half2 TexCoord276_g170628 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170628 = SampleMain( Texture276_g170628 , Sampler276_g170628 , Coords276_g170628 , TexCoord276_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170628) = _MainShaderTex;
				SamplerState Sampler275_g170628 = SS30_g170631;
				half4 Coords275_g170628 = temp_output_37_0_g170628;
				half2 TexCoord275_g170628 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170628 = SampleExtra( Texture275_g170628 , Sampler275_g170628 , Coords275_g170628 , TexCoord275_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170628) = _MainShaderTex;
				SamplerState Sampler238_g170628 = SS30_g170631;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				float3 temp_output_279_0_g170628 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170628) = _MainShaderTex;
				SamplerState Sampler246_g170628 = SS30_g170631;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				float3 temp_output_280_0_g170628 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170628) = _MainShaderTex;
				SamplerState Sampler234_g170628 = SS30_g170631;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170628) = _MainShaderTex;
				SamplerState Sampler263_g170628 = SS30_g170631;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170628;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170623 = _MainMultiRemap.x;
				float temp_output_10_0_g170623 = ( _MainMultiRemap.y - temp_output_7_0_g170623 );
				half Local_MultiMask78_g170617 = saturate( ( ( clampResult17_g170622 - temp_output_7_0_g170623 ) / ( temp_output_10_0_g170623 + 0.0001 ) ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170633 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170633 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainNormalTex;
				float localFilterTexture29_g170630 = ( 0.0 );
				SamplerState SamplerDefault29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170630 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170630 = SamplerDefault29_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170630 = SamplerDefault29_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170630 = SamplerPoint29_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170630 = SamplerLow29_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170630 = SamplerMedium29_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170630 = SamplerHigh29_g170630;
				#endif
				SamplerState Sampler276_g170627 = SS29_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainNormalTex;
				SamplerState Sampler275_g170627 = SS29_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainNormalTex;
				SamplerState Sampler238_g170627 = SS29_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainNormalTex;
				SamplerState Sampler246_g170627 = SS29_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainNormalTex;
				SamplerState Sampler234_g170627 = SS29_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainNormalTex;
				SamplerState Sampler263_g170627 = SS29_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord7.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170633 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170633 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170633 = Local_Masks109_g170617;
				float4 In_Emissive3_g170633 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170633 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170633 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170633 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170633 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170633 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170633 = temp_cast_4;
				float In_Transmission3_g170633 = 1.0;
				float In_Thickness3_g170633 = 0.0;
				float In_Diffusion3_g170633 = 0.0;
				Data3_g170633.Dummy = In_Dummy3_g170633;
				Data3_g170633.Albedo = In_Albedo3_g170633;
				Data3_g170633.AlbedoRaw = In_AlbedoRaw3_g170633;
				Data3_g170633.NormalTS = In_NormalTS3_g170633;
				Data3_g170633.NormalWS = In_NormalWS3_g170633;
				Data3_g170633.Shader = In_Shader3_g170633;
				Data3_g170633.Emissive= In_Emissive3_g170633;
				Data3_g170633.MultiMask = In_MultiMask3_g170633;
				Data3_g170633.Grayscale = In_Grayscale3_g170633;
				Data3_g170633.Luminosity = In_Luminosity3_g170633;
				Data3_g170633.AlphaClip = In_AlphaClip3_g170633;
				Data3_g170633.AlphaFade = In_AlphaFade3_g170633;
				Data3_g170633.Translucency = In_Translucency3_g170633;
				Data3_g170633.Transmission = In_Transmission3_g170633;
				Data3_g170633.Thickness = In_Thickness3_g170633;
				Data3_g170633.Diffusion = In_Diffusion3_g170633;
				TVEVisualData Data4_g170646 = Data3_g170633;
				float Out_Dummy4_g170646 = 0;
				float3 Out_Albedo4_g170646 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170646 = float2( 0,0 );
				float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
				float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170646 = 0;
				float Out_Grayscale4_g170646 = 0;
				float Out_Luminosity4_g170646 = 0;
				float Out_AlphaClip4_g170646 = 0;
				float Out_AlphaFade4_g170646 = 0;
				float3 Out_Translucency4_g170646 = float3( 0,0,0 );
				float Out_Transmission4_g170646 = 0;
				float Out_Thickness4_g170646 = 0;
				float Out_Diffusion4_g170646 = 0;
				Out_Dummy4_g170646 = Data4_g170646.Dummy;
				Out_Albedo4_g170646 = Data4_g170646.Albedo;
				Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
				Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
				Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
				Out_Shader4_g170646 = Data4_g170646.Shader;
				Out_Emissive4_g170646= Data4_g170646.Emissive;
				Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
				Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
				Out_Luminosity4_g170646= Data4_g170646.Luminosity;
				Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
				Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
				Out_Translucency4_g170646 = Data4_g170646.Translucency;
				Out_Transmission4_g170646 = Data4_g170646.Transmission;
				Out_Thickness4_g170646 = Data4_g170646.Thickness;
				Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170646;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170663 = ( 0.0 );
				SamplerState SamplerDefault19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170663 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170663 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170663 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170663 = SamplerDefault19_g170663;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170663 = SamplerDefault19_g170663;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170663 = SamplerPoint19_g170663;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170663 = SamplerLow19_g170663;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170663 = SamplerMedium19_g170663;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170663 = SamplerHigh19_g170663;
				#endif
				SamplerState Sampler276_g170635 = SS19_g170663;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170663;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170663;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170666 = Data16_g170493;
				float Out_Dummy15_g170666 = 0;
				float3 Out_PositionWS15_g170666 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170666 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170666 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170666 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170666 = float3( 0,0,0 );
				float4 Out_VertexData15_g170666 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_PositionWS15_g170666 = Data15_g170666.PositionWS;
				Out_PositionWO15_g170666 = Data15_g170666.PositionWO;
				Out_PivotWS15_g170666 = Data15_g170666.PivotWS;
				Out_PivotWO15_g170666 = Data15_g170666.PivotWO;
				Out_NormalWS15_g170666 = Data15_g170666.NormalWS;
				Out_ViewDirWS15_g170666 = Data15_g170666.ViewDirWS;
				Out_VertexData15_g170666 = Data15_g170666.VertexData;
				Out_BoundsData15_g170666 = Data15_g170666.BoundsData;
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170666;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170663;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170666;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170663;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170663;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170665 = ( 0.0 );
				SamplerState SamplerDefault30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170665 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170665 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170665 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170665 = SamplerDefault30_g170665;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170665 = SamplerDefault30_g170665;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170665 = SamplerPoint30_g170665;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170665 = SamplerLow30_g170665;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170665 = SamplerMedium30_g170665;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170665 = SamplerHigh30_g170665;
				#endif
				SamplerState Sampler276_g170637 = SS30_g170665;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170665;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170665;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170665;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170665;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170665;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170642 = _SecondMultiRemap.x;
				float temp_output_10_0_g170642 = ( _SecondMultiRemap.y - temp_output_7_0_g170642 );
				float temp_output_765_0_g170634 = saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170642 ) / ( temp_output_10_0_g170642 + 0.0001 ) ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170659 = 2.0;
				#else
				float staticSwitch1_g170659 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170659 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170650 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170649 = _SecondMaskRemap.x;
				float temp_output_10_0_g170649 = ( _SecondMaskRemap.y - temp_output_7_0_g170649 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170650 - temp_output_7_0_g170649 ) / ( temp_output_10_0_g170649 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170646;
				float clampResult17_g170651 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _SecondProjRemap.x;
				float temp_output_10_0_g170652 = ( _SecondProjRemap.y - temp_output_7_0_g170652 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170666;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170653 = _second_vert_mode;
				float temp_output_30_0_g170653 = ( break965_g170634.x * break33_g170653.x );
				float temp_output_29_0_g170653 = ( break965_g170634.y * break33_g170653.y );
				float temp_output_31_0_g170653 = ( break965_g170634.z * break33_g170653.z );
				float temp_output_28_0_g170653 = ( temp_output_30_0_g170653 + temp_output_29_0_g170653 + temp_output_31_0_g170653 + ( break965_g170634.w * break33_g170653.w ) );
				float clampResult17_g170647 = clamp( temp_output_28_0_g170653 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170648 = _SecondMeshRemap.x;
				float temp_output_10_0_g170648 = ( _SecondMeshRemap.y - temp_output_7_0_g170648 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170648 ) / ( temp_output_10_0_g170648 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170661 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170661 = ( temp_output_6_0_g170661 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170661 = temp_output_6_0_g170661;
				#endif
				float temp_output_987_0_g170634 = staticSwitch14_g170661;
				half Blend_VertMask918_g170634 = temp_output_987_0_g170634;
				float localBuildGlobalData204_g170494 = ( 0.0 );
				TVEGlobalData Data204_g170494 = (TVEGlobalData)0;
				half Dummy211_g170494 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170494 = Dummy211_g170494;
				float temp_output_82_0_g170504 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170506 = TVE_CoatLayers[(int)temp_output_82_0_g170504];
				TVEModelData Data15_g170576 = Data16_g170493;
				float Out_Dummy15_g170576 = 0;
				float3 Out_PositionWS15_g170576 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170576 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170576 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170576 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170576 = float3( 0,0,0 );
				float4 Out_VertexData15_g170576 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170576 = float4( 0,0,0,0 );
				Out_Dummy15_g170576 = Data15_g170576.Dummy;
				Out_PositionWS15_g170576 = Data15_g170576.PositionWS;
				Out_PositionWO15_g170576 = Data15_g170576.PositionWO;
				Out_PivotWS15_g170576 = Data15_g170576.PivotWS;
				Out_PivotWO15_g170576 = Data15_g170576.PivotWO;
				Out_NormalWS15_g170576 = Data15_g170576.NormalWS;
				Out_ViewDirWS15_g170576 = Data15_g170576.ViewDirWS;
				Out_VertexData15_g170576 = Data15_g170576.VertexData;
				Out_BoundsData15_g170576 = Data15_g170576.BoundsData;
				half3 Model_PositionWS143_g170494 = Out_PositionWS15_g170576;
				half3 Model_PivotWS145_g170494 = Out_PivotWS15_g170576;
				float3 lerpResult300_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170507 = lerpResult300_g170494;
				float2 temp_output_75_0_g170507 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_82_0_g170507 = temp_output_82_0_g170504;
				float2 temp_output_119_0_g170507 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170507).xz ) );
				float temp_output_7_0_g170512 = 1.0;
				float temp_output_10_0_g170512 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170512 );
				float4 lerpResult131_g170507 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170507,temp_output_82_0_g170507), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170507,temp_output_82_0_g170507), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170507 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170512 ) / temp_output_10_0_g170512 ) ));
				float4 temp_output_17_0_g170506 = lerpResult131_g170507;
				float4 temp_output_3_0_g170506 = TVE_CoatParams;
				float4 ifLocalVar18_g170506 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170506 >= 0.5 )
				ifLocalVar18_g170506 = temp_output_17_0_g170506;
				else
				ifLocalVar18_g170506 = temp_output_3_0_g170506;
				float4 lerpResult22_g170506 = lerp( temp_output_3_0_g170506 , temp_output_17_0_g170506 , temp_output_19_0_g170506);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170506 = lerpResult22_g170506;
				#else
				float4 staticSwitch24_g170506 = ifLocalVar18_g170506;
				#endif
				half4 Coat_Params302_g170494 = staticSwitch24_g170506;
				float4 In_CoatParams204_g170494 = Coat_Params302_g170494;
				float temp_output_82_0_g170495 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170497 = TVE_PaintLayers[(int)temp_output_82_0_g170495];
				float3 lerpResult85_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170498 = lerpResult85_g170494;
				float2 temp_output_75_0_g170498 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_82_0_g170498 = temp_output_82_0_g170495;
				float2 temp_output_119_0_g170498 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170498).xz ) );
				float temp_output_7_0_g170503 = 1.0;
				float temp_output_10_0_g170503 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170503 );
				float4 lerpResult131_g170498 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170498,temp_output_82_0_g170498), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170498,temp_output_82_0_g170498), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170498 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170503 ) / temp_output_10_0_g170503 ) ));
				float4 temp_output_17_0_g170497 = lerpResult131_g170498;
				float4 temp_output_3_0_g170497 = TVE_PaintParams;
				float4 ifLocalVar18_g170497 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170497 >= 0.5 )
				ifLocalVar18_g170497 = temp_output_17_0_g170497;
				else
				ifLocalVar18_g170497 = temp_output_3_0_g170497;
				float4 lerpResult22_g170497 = lerp( temp_output_3_0_g170497 , temp_output_17_0_g170497 , temp_output_19_0_g170497);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170497 = lerpResult22_g170497;
				#else
				float4 staticSwitch24_g170497 = ifLocalVar18_g170497;
				#endif
				half4 Paint_Params71_g170494 = staticSwitch24_g170497;
				float4 In_PaintParams204_g170494 = Paint_Params71_g170494;
				float temp_output_82_0_g170513 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170515 = TVE_GlowLayers[(int)temp_output_82_0_g170513];
				float3 lerpResult247_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170516 = lerpResult247_g170494;
				float2 temp_output_75_0_g170516 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_82_0_g170516 = temp_output_82_0_g170513;
				float2 temp_output_119_0_g170516 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170516).xz ) );
				float temp_output_7_0_g170521 = 1.0;
				float temp_output_10_0_g170521 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170521 );
				float4 lerpResult131_g170516 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170516,temp_output_82_0_g170516), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170516,temp_output_82_0_g170516), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170516 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170521 ) / temp_output_10_0_g170521 ) ));
				float4 temp_output_17_0_g170515 = lerpResult131_g170516;
				float4 temp_output_3_0_g170515 = TVE_GlowParams;
				float4 ifLocalVar18_g170515 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170515 >= 0.5 )
				ifLocalVar18_g170515 = temp_output_17_0_g170515;
				else
				ifLocalVar18_g170515 = temp_output_3_0_g170515;
				float4 lerpResult22_g170515 = lerp( temp_output_3_0_g170515 , temp_output_17_0_g170515 , temp_output_19_0_g170515);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170515 = lerpResult22_g170515;
				#else
				float4 staticSwitch24_g170515 = ifLocalVar18_g170515;
				#endif
				half4 Glow_Params248_g170494 = staticSwitch24_g170515;
				float4 In_GlowParams204_g170494 = Glow_Params248_g170494;
				float temp_output_132_0_g170558 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170560 = TVE_AtmoLayers[(int)temp_output_132_0_g170558];
				float3 lerpResult104_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170561 = lerpResult104_g170494;
				float2 temp_output_75_0_g170561 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_82_0_g170561 = temp_output_132_0_g170558;
				float2 temp_output_119_0_g170561 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170561).xz ) );
				float temp_output_7_0_g170566 = 1.0;
				float temp_output_10_0_g170566 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170566 );
				float4 lerpResult131_g170561 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170561,temp_output_82_0_g170561), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170561,temp_output_82_0_g170561), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170561 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170566 ) / temp_output_10_0_g170566 ) ));
				float4 temp_output_17_0_g170560 = lerpResult131_g170561;
				float4 temp_output_3_0_g170560 = TVE_AtmoParams;
				float4 ifLocalVar18_g170560 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170560 >= 0.5 )
				ifLocalVar18_g170560 = temp_output_17_0_g170560;
				else
				ifLocalVar18_g170560 = temp_output_3_0_g170560;
				float4 lerpResult22_g170560 = lerp( temp_output_3_0_g170560 , temp_output_17_0_g170560 , temp_output_19_0_g170560);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170560 = lerpResult22_g170560;
				#else
				float4 staticSwitch24_g170560 = ifLocalVar18_g170560;
				#endif
				half4 Atmo_Params80_g170494 = staticSwitch24_g170560;
				float4 In_AtmoParams204_g170494 = Atmo_Params80_g170494;
				float temp_output_132_0_g170567 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170569 = TVE_FadeLayers[(int)temp_output_132_0_g170567];
				float3 lerpResult382_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFadePivotValue);
				half3 Input_Position180_g170570 = lerpResult382_g170494;
				float2 temp_output_75_0_g170570 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_82_0_g170570 = temp_output_132_0_g170567;
				float2 temp_output_119_0_g170570 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170570).xz ) );
				float temp_output_7_0_g170575 = 1.0;
				float temp_output_10_0_g170575 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170575 );
				float4 lerpResult131_g170570 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170570,temp_output_82_0_g170570), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170570,temp_output_82_0_g170570), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170570 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170575 ) / temp_output_10_0_g170575 ) ));
				float4 temp_output_17_0_g170569 = lerpResult131_g170570;
				float4 temp_output_3_0_g170569 = TVE_FadeParams;
				float4 ifLocalVar18_g170569 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170569 >= 0.5 )
				ifLocalVar18_g170569 = temp_output_17_0_g170569;
				else
				ifLocalVar18_g170569 = temp_output_3_0_g170569;
				float4 lerpResult22_g170569 = lerp( temp_output_3_0_g170569 , temp_output_17_0_g170569 , temp_output_19_0_g170569);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170569 = lerpResult22_g170569;
				#else
				float4 staticSwitch24_g170569 = ifLocalVar18_g170569;
				#endif
				half4 Fade_Params387_g170494 = staticSwitch24_g170569;
				float4 In_FadeParams204_g170494 = Fade_Params387_g170494;
				float temp_output_130_0_g170549 = _GlobalFormLayerValue;
				float temp_output_19_0_g170551 = TVE_FormLayers[(int)temp_output_130_0_g170549];
				float3 lerpResult168_g170494 = lerp( Model_PositionWS143_g170494 , Model_PivotWS145_g170494 , _GlobalFormPivotValue);
				half3 Input_Position180_g170552 = lerpResult168_g170494;
				float2 temp_output_75_0_g170552 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_82_0_g170552 = temp_output_130_0_g170549;
				float2 temp_output_119_0_g170552 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170552).xz ) );
				float temp_output_7_0_g170557 = 1.0;
				float temp_output_10_0_g170557 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170557 );
				float4 lerpResult131_g170552 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170552,temp_output_82_0_g170552), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170552,temp_output_82_0_g170552), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170552 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170557 ) / temp_output_10_0_g170557 ) ));
				float4 temp_output_17_0_g170551 = lerpResult131_g170552;
				float4 temp_output_3_0_g170551 = TVE_FormParams;
				float4 ifLocalVar18_g170551 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170551 >= 0.5 )
				ifLocalVar18_g170551 = temp_output_17_0_g170551;
				else
				ifLocalVar18_g170551 = temp_output_3_0_g170551;
				float4 lerpResult22_g170551 = lerp( temp_output_3_0_g170551 , temp_output_17_0_g170551 , temp_output_19_0_g170551);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170551 = lerpResult22_g170551;
				#else
				float4 staticSwitch24_g170551 = ifLocalVar18_g170551;
				#endif
				half4 Form_Params112_g170494 = staticSwitch24_g170551;
				float4 In_FormParams204_g170494 = Form_Params112_g170494;
				half4 Land_Params375_g170494 = TVE_LandParams;
				float4 In_LandParams204_g170494 = Land_Params375_g170494;
				float temp_output_136_0_g170540 = _GlobalWindLayerValue;
				float temp_output_19_0_g170542 = TVE_WindLayers[(int)temp_output_136_0_g170540];
				half3 Input_Position180_g170543 = Model_PositionWS143_g170494;
				float2 temp_output_75_0_g170543 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_82_0_g170543 = temp_output_136_0_g170540;
				float2 temp_output_119_0_g170543 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170543).xz ) );
				float temp_output_7_0_g170548 = 1.0;
				float temp_output_10_0_g170548 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170548 );
				float4 lerpResult131_g170543 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170543,temp_output_82_0_g170543), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170543,temp_output_82_0_g170543), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170543 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170548 ) / temp_output_10_0_g170548 ) ));
				float4 temp_output_17_0_g170542 = lerpResult131_g170543;
				float4 temp_output_3_0_g170542 = TVE_WindParams;
				float4 ifLocalVar18_g170542 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170542 >= 0.5 )
				ifLocalVar18_g170542 = temp_output_17_0_g170542;
				else
				ifLocalVar18_g170542 = temp_output_3_0_g170542;
				float4 lerpResult22_g170542 = lerp( temp_output_3_0_g170542 , temp_output_17_0_g170542 , temp_output_19_0_g170542);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170542 = lerpResult22_g170542;
				#else
				float4 staticSwitch24_g170542 = ifLocalVar18_g170542;
				#endif
				half4 Wind_Params88_g170494 = staticSwitch24_g170542;
				float4 In_WindParams204_g170494 = Wind_Params88_g170494;
				float temp_output_136_0_g170522 = _GlobalPushLayerValue;
				float temp_output_19_0_g170523 = TVE_PushLayers[(int)temp_output_136_0_g170522];
				half3 Input_Position180_g170524 = Model_PivotWS145_g170494;
				float2 temp_output_75_0_g170524 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_82_0_g170524 = temp_output_136_0_g170522;
				float2 temp_output_119_0_g170524 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170524).xz ) );
				float temp_output_7_0_g170529 = 1.0;
				float temp_output_10_0_g170529 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170529 );
				float4 lerpResult131_g170524 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170524,temp_output_82_0_g170524), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170524,temp_output_82_0_g170524), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170524 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170529 ) / temp_output_10_0_g170529 ) ));
				float4 temp_output_17_0_g170523 = lerpResult131_g170524;
				float4 temp_output_3_0_g170523 = TVE_PushParams;
				float4 ifLocalVar18_g170523 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170523 >= 0.5 )
				ifLocalVar18_g170523 = temp_output_17_0_g170523;
				else
				ifLocalVar18_g170523 = temp_output_3_0_g170523;
				float4 lerpResult22_g170523 = lerp( temp_output_3_0_g170523 , temp_output_17_0_g170523 , temp_output_19_0_g170523);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170523 = lerpResult22_g170523;
				#else
				float4 staticSwitch24_g170523 = ifLocalVar18_g170523;
				#endif
				half4 Push_Params335_g170494 = staticSwitch24_g170523;
				float4 In_PushParams204_g170494 = Push_Params335_g170494;
				Data204_g170494.Dummy = In_Dummy204_g170494;
				Data204_g170494.CoatParams = In_CoatParams204_g170494;
				Data204_g170494.PaintParams = In_PaintParams204_g170494;
				Data204_g170494.GlowParams = In_GlowParams204_g170494;
				Data204_g170494.AtmoParams = In_AtmoParams204_g170494;
				Data204_g170494.FadeParams = In_FadeParams204_g170494;
				Data204_g170494.FormParams= In_FormParams204_g170494;
				Data204_g170494.LandParams = In_LandParams204_g170494;
				Data204_g170494.WindParams = In_WindParams204_g170494;
				Data204_g170494.PushParams = In_PushParams204_g170494;
				TVEGlobalData Data15_g170645 = Data204_g170494;
				float Out_Dummy15_g170645 = 0;
				float4 Out_CoatParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170645 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170645 = float4( 0,0,0,0 );
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_CoatParams15_g170645 = Data15_g170645.CoatParams;
				Out_PaintParams15_g170645 = Data15_g170645.PaintParams;
				Out_GlowParams15_g170645 = Data15_g170645.GlowParams;
				Out_AtmoParams15_g170645= Data15_g170645.AtmoParams;
				Out_FadeParams15_g170645= Data15_g170645.FadeParams;
				Out_FormParams15_g170645 = Data15_g170645.FormParams;
				Out_LandParams15_g170645 = Data15_g170645.LandParams;
				Out_WindParams15_g170645 = Data15_g170645.WindParams;
				Out_PushParams15_g170645 = Data15_g170645.PushParams;
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170645;
				float lerpResult1013_g170634 = lerp( 1.0 , (Global_CoatParams975_g170634).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = lerpResult1013_g170634;
				#else
				float staticSwitch971_g170634 = 1.0;
				#endif
				half Blend_GlobalMask972_g170634 = staticSwitch971_g170634;
				float temp_output_432_0_g170634 = ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 );
				float clampResult17_g170655 = clamp( temp_output_432_0_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _SecondBlendRemap.x;
				float temp_output_10_0_g170654 = ( _SecondBlendRemap.y - temp_output_7_0_g170654 );
				half Blend_Mask412_g170634 = ( saturate( ( ( clampResult17_g170655 - temp_output_7_0_g170654 ) / ( temp_output_10_0_g170654 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170667 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170667 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170646;
				float2 lerpResult40_g170657 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170664 = ( 0.0 );
				SamplerState SamplerDefault29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170664 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170664 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170664 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170664 = SamplerDefault29_g170664;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170664 = SamplerDefault29_g170664;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170664 = SamplerPoint29_g170664;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170664 = SamplerLow29_g170664;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170664 = SamplerMedium29_g170664;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170664 = SamplerHigh29_g170664;
				#endif
				SamplerState Sampler276_g170636 = SS29_g170664;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170664;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170664;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170664;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170664;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170664;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170657 = ( lerpResult40_g170657 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170657 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170667 = Final_NormalTS612_g170634;
				float3 appendResult68_g170658 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170658 = appendResult68_g170658;
				float3 worldNormal74_g170658 = normalize( float3(dot(tanToWorld0,tanNormal74_g170658), dot(tanToWorld1,tanNormal74_g170658), dot(tanToWorld2,tanNormal74_g170658)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170658;
				float3 In_NormalWS3_g170667 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170646;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170667 = Final_Masks613_g170634;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170646;
				float3 temp_output_3_0_g170660 = Final_Albedo601_g170634;
				float dotResult20_g170660 = dot( temp_output_3_0_g170660 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170660;
				float In_Grayscale3_g170667 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170667 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170646;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170667 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170646;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170667 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170646;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170667 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170646;
				float In_Transmission3_g170667 = Out_Transmission4_g170646;
				float In_Thickness3_g170667 = Out_Thickness4_g170646;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170646;
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				TVEVisualData Data4_g170690 = Data3_g170667;
				float Out_Dummy4_g170690 = 0;
				float3 Out_Albedo4_g170690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170690 = float2( 0,0 );
				float3 Out_NormalWS4_g170690 = float3( 0,0,0 );
				float4 Out_Shader4_g170690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170690 = 0;
				float Out_Grayscale4_g170690 = 0;
				float Out_Luminosity4_g170690 = 0;
				float Out_AlphaClip4_g170690 = 0;
				float Out_AlphaFade4_g170690 = 0;
				float3 Out_Translucency4_g170690 = float3( 0,0,0 );
				float Out_Transmission4_g170690 = 0;
				float Out_Thickness4_g170690 = 0;
				float Out_Diffusion4_g170690 = 0;
				Out_Dummy4_g170690 = Data4_g170690.Dummy;
				Out_Albedo4_g170690 = Data4_g170690.Albedo;
				Out_AlbedoRaw4_g170690 = Data4_g170690.AlbedoRaw;
				Out_NormalTS4_g170690 = Data4_g170690.NormalTS;
				Out_NormalWS4_g170690 = Data4_g170690.NormalWS;
				Out_Shader4_g170690 = Data4_g170690.Shader;
				Out_Emissive4_g170690= Data4_g170690.Emissive;
				Out_MultiMask4_g170690 = Data4_g170690.MultiMask;
				Out_Grayscale4_g170690 = Data4_g170690.Grayscale;
				Out_Luminosity4_g170690= Data4_g170690.Luminosity;
				Out_AlphaClip4_g170690 = Data4_g170690.AlphaClip;
				Out_AlphaFade4_g170690 = Data4_g170690.AlphaFade;
				Out_Translucency4_g170690 = Data4_g170690.Translucency;
				Out_Transmission4_g170690 = Data4_g170690.Transmission;
				Out_Thickness4_g170690 = Data4_g170690.Thickness;
				Out_Diffusion4_g170690 = Data4_g170690.Diffusion;
				half3 Visual_Albedo527_g170674 = Out_Albedo4_g170690;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170675) = _ThirdAlbedoTex;
				float localFilterTexture19_g170703 = ( 0.0 );
				SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170703 = SamplerDefault19_g170703;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170703 = SamplerDefault19_g170703;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170703 = SamplerPoint19_g170703;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170703 = SamplerLow19_g170703;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170703 = SamplerMedium19_g170703;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170703 = SamplerHigh19_g170703;
				#endif
				SamplerState Sampler276_g170675 = SS19_g170703;
				half4 Local_LayerCoords790_g170674 = _third_coord_value;
				float4 temp_output_37_0_g170675 = Local_LayerCoords790_g170674;
				half4 Coords276_g170675 = temp_output_37_0_g170675;
				half2 TexCoord276_g170675 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170675 = SampleMain( Texture276_g170675 , Sampler276_g170675 , Coords276_g170675 , TexCoord276_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170675 = SS19_g170703;
				half4 Coords275_g170675 = temp_output_37_0_g170675;
				half2 TexCoord275_g170675 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170675 = SampleExtra( Texture275_g170675 , Sampler275_g170675 , Coords275_g170675 , TexCoord275_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170675 = SS19_g170703;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				TVEModelData Data15_g170706 = Data16_g170493;
				float Out_Dummy15_g170706 = 0;
				float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
				float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
				Out_Dummy15_g170706 = Data15_g170706.Dummy;
				Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
				Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
				Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
				Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
				Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
				Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
				Out_VertexData15_g170706 = Data15_g170706.VertexData;
				Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
				half3 Model_PositionWO636_g170674 = Out_PositionWO15_g170706;
				float3 temp_output_279_0_g170675 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170675 = SS19_g170703;
				half4 Coords246_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition246_g170675 = temp_output_279_0_g170675;
				half3 Model_NormalWS869_g170674 = Out_NormalWS15_g170706;
				float3 temp_output_280_0_g170675 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170675 = temp_output_280_0_g170675;
				half4 localSamplePlanar3D246_g170675 = SamplePlanar3D( Texture246_g170675 , Sampler246_g170675 , Coords246_g170675 , WorldPosition246_g170675 , WorldNormal246_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170675 = SS19_g170703;
				float4 Coords234_g170675 = temp_output_37_0_g170675;
				float3 WorldPosition234_g170675 = temp_output_279_0_g170675;
				float4 localSampleStochastic2D234_g170675 = SampleStochastic2D( Texture234_g170675 , Sampler234_g170675 , Coords234_g170675 , WorldPosition234_g170675 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170675) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170675 = SS19_g170703;
				half4 Coords263_g170675 = temp_output_37_0_g170675;
				half3 WorldPosition263_g170675 = temp_output_279_0_g170675;
				half3 WorldNormal263_g170675 = temp_output_280_0_g170675;
				half4 localSampleStochastic3D263_g170675 = SampleStochastic3D( Texture263_g170675 , Sampler263_g170675 , Coords263_g170675 , WorldPosition263_g170675 , WorldNormal263_g170675 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170674 = localSampleExtra275_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170674 = localSamplePlanar2D238_g170675;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170674 = localSamplePlanar3D246_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170674 = localSampleStochastic2D234_g170675;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170674 = localSampleStochastic3D263_g170675;
				#else
				float4 staticSwitch693_g170674 = localSampleMain276_g170675;
				#endif
				half4 Local_AlbedoTex777_g170674 = staticSwitch693_g170674;
				float3 lerpResult716_g170674 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170674).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170674 = lerpResult716_g170674;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170677) = _ThirdShaderTex;
				float localFilterTexture30_g170705 = ( 0.0 );
				SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170705 = SamplerDefault30_g170705;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170705 = SamplerDefault30_g170705;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170705 = SamplerPoint30_g170705;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170705 = SamplerLow30_g170705;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170705 = SamplerMedium30_g170705;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170705 = SamplerHigh30_g170705;
				#endif
				SamplerState Sampler276_g170677 = SS30_g170705;
				float4 temp_output_37_0_g170677 = Local_LayerCoords790_g170674;
				half4 Coords276_g170677 = temp_output_37_0_g170677;
				half2 TexCoord276_g170677 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170677 = SampleMain( Texture276_g170677 , Sampler276_g170677 , Coords276_g170677 , TexCoord276_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170677) = _ThirdShaderTex;
				SamplerState Sampler275_g170677 = SS30_g170705;
				half4 Coords275_g170677 = temp_output_37_0_g170677;
				half2 TexCoord275_g170677 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170677 = SampleExtra( Texture275_g170677 , Sampler275_g170677 , Coords275_g170677 , TexCoord275_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170677) = _ThirdShaderTex;
				SamplerState Sampler238_g170677 = SS30_g170705;
				half4 Coords238_g170677 = temp_output_37_0_g170677;
				float3 temp_output_279_0_g170677 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170677 = temp_output_279_0_g170677;
				half4 localSamplePlanar2D238_g170677 = SamplePlanar2D( Texture238_g170677 , Sampler238_g170677 , Coords238_g170677 , WorldPosition238_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170677) = _ThirdShaderTex;
				SamplerState Sampler246_g170677 = SS30_g170705;
				half4 Coords246_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition246_g170677 = temp_output_279_0_g170677;
				float3 temp_output_280_0_g170677 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170677 = temp_output_280_0_g170677;
				half4 localSamplePlanar3D246_g170677 = SamplePlanar3D( Texture246_g170677 , Sampler246_g170677 , Coords246_g170677 , WorldPosition246_g170677 , WorldNormal246_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170677) = _ThirdShaderTex;
				SamplerState Sampler234_g170677 = SS30_g170705;
				float4 Coords234_g170677 = temp_output_37_0_g170677;
				float3 WorldPosition234_g170677 = temp_output_279_0_g170677;
				float4 localSampleStochastic2D234_g170677 = SampleStochastic2D( Texture234_g170677 , Sampler234_g170677 , Coords234_g170677 , WorldPosition234_g170677 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170677) = _ThirdShaderTex;
				SamplerState Sampler263_g170677 = SS30_g170705;
				half4 Coords263_g170677 = temp_output_37_0_g170677;
				half3 WorldPosition263_g170677 = temp_output_279_0_g170677;
				half3 WorldNormal263_g170677 = temp_output_280_0_g170677;
				half4 localSampleStochastic3D263_g170677 = SampleStochastic3D( Texture263_g170677 , Sampler263_g170677 , Coords263_g170677 , WorldPosition263_g170677 , WorldNormal263_g170677 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170674 = localSampleExtra275_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170674 = localSamplePlanar2D238_g170677;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170674 = localSamplePlanar3D246_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170674 = localSampleStochastic2D234_g170677;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170674 = localSampleStochastic3D263_g170677;
				#else
				float4 staticSwitch722_g170674 = localSampleMain276_g170677;
				#endif
				half4 Local_ShaderTex775_g170674 = staticSwitch722_g170674;
				float lerpResult739_g170674 = lerp( 1.0 , (Local_ShaderTex775_g170674).y , _ThirdOcclusionValue);
				float4 appendResult749_g170674 = (float4(( (Local_ShaderTex775_g170674).x * _ThirdMetallicValue ) , lerpResult739_g170674 , (Local_ShaderTex775_g170674).z , ( (Local_ShaderTex775_g170674).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170674 = appendResult749_g170674;
				float clampResult17_g170680 = clamp( (Local_Masks750_g170674).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170681 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170681 = ( _ThirdMultiRemap.y - temp_output_7_0_g170681 );
				float temp_output_765_0_g170674 = saturate( ( ( clampResult17_g170680 - temp_output_7_0_g170681 ) / ( temp_output_10_0_g170681 + 0.0001 ) ) );
				half Local_MultiMask767_g170674 = temp_output_765_0_g170674;
				float lerpResult705_g170674 = lerp( 1.0 , Local_MultiMask767_g170674 , _ThirdColorMode);
				float4 lerpResult706_g170674 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170674);
				half3 Local_ColorRGB774_g170674 = (lerpResult706_g170674).rgb;
				half3 Local_Albedo768_g170674 = ( Local_AlbedoRGB771_g170674 * Local_ColorRGB774_g170674 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170698 = 2.0;
				#else
				float staticSwitch1_g170698 = 4.594794;
				#endif
				float3 lerpResult985_g170674 = lerp( Local_Albedo768_g170674 , ( Visual_Albedo527_g170674 * Local_Albedo768_g170674 * staticSwitch1_g170698 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
				SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170674 = _third_mask_coord_value;
				float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170674;
				half4 Coords276_g170701 = temp_output_37_0_g170701;
				half2 TexCoord276_g170701 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
				SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
				half4 Coords275_g170701 = temp_output_37_0_g170701;
				half2 TexCoord275_g170701 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
				SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
				half4 Coords238_g170701 = temp_output_37_0_g170701;
				float3 temp_output_279_0_g170701 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
				half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
				SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
				half4 Coords246_g170701 = temp_output_37_0_g170701;
				half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
				float3 temp_output_280_0_g170701 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
				half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170674 = localSampleExtra275_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170674 = localSamplePlanar2D238_g170701;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170674 = localSamplePlanar3D246_g170701;
				#else
				float4 staticSwitch817_g170674 = localSampleMain276_g170701;
				#endif
				half4 Local_MaskTex861_g170674 = staticSwitch817_g170674;
				float clampResult17_g170685 = clamp( (Local_MaskTex861_g170674).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170686 = ( _ThirdMaskRemap.y - temp_output_7_0_g170686 );
				float lerpResult1028_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170674 = lerpResult1028_g170674;
				half4 Model_VertexMasks960_g170674 = Out_VertexData15_g170706;
				float4 break961_g170674 = Model_VertexMasks960_g170674;
				float4 break33_g170689 = _third_vert_mode;
				float temp_output_30_0_g170689 = ( break961_g170674.x * break33_g170689.x );
				float temp_output_29_0_g170689 = ( break961_g170674.y * break33_g170689.y );
				float temp_output_31_0_g170689 = ( break961_g170674.z * break33_g170689.z );
				float temp_output_28_0_g170689 = ( temp_output_30_0_g170689 + temp_output_29_0_g170689 + temp_output_31_0_g170689 + ( break961_g170674.w * break33_g170689.w ) );
				float clampResult17_g170683 = clamp( temp_output_28_0_g170689 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170684 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170684 = ( _ThirdMeshRemap.y - temp_output_7_0_g170684 );
				float lerpResult1026_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170683 - temp_output_7_0_g170684 ) / ( temp_output_10_0_g170684 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170700 = lerpResult1026_g170674;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_992_0_g170674 = staticSwitch14_g170700;
				half Blend_VertMask913_g170674 = temp_output_992_0_g170674;
				half3 Visual_NormalWS953_g170674 = Out_NormalWS4_g170690;
				float clampResult17_g170687 = clamp( saturate( (Visual_NormalWS953_g170674).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _ThirdProjRemap.x;
				float temp_output_10_0_g170688 = ( _ThirdProjRemap.y - temp_output_7_0_g170688 );
				float lerpResult1004_g170674 = lerp( 1.0 , saturate( ( ( clampResult17_g170687 - temp_output_7_0_g170688 ) / ( temp_output_10_0_g170688 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170674 = lerpResult1004_g170674;
				TVEGlobalData Data15_g170692 = Data204_g170494;
				float Out_Dummy15_g170692 = 0;
				float4 Out_CoatParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170692 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170692 = float4( 0,0,0,0 );
				Out_Dummy15_g170692 = Data15_g170692.Dummy;
				Out_CoatParams15_g170692 = Data15_g170692.CoatParams;
				Out_PaintParams15_g170692 = Data15_g170692.PaintParams;
				Out_GlowParams15_g170692 = Data15_g170692.GlowParams;
				Out_AtmoParams15_g170692= Data15_g170692.AtmoParams;
				Out_FadeParams15_g170692= Data15_g170692.FadeParams;
				Out_FormParams15_g170692 = Data15_g170692.FormParams;
				Out_LandParams15_g170692 = Data15_g170692.LandParams;
				Out_WindParams15_g170692 = Data15_g170692.WindParams;
				Out_PushParams15_g170692 = Data15_g170692.PushParams;
				half4 Global_CoatParams972_g170674 = Out_CoatParams15_g170692;
				float lerpResult1023_g170674 = lerp( 1.0 , (Global_CoatParams972_g170674).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170674 = lerpResult1023_g170674;
				#else
				float staticSwitch965_g170674 = 1.0;
				#endif
				half Blend_GlobalMask968_g170674 = staticSwitch965_g170674;
				float temp_output_432_0_g170674 = ( _ThirdIntensityValue * Detail_TexMask429_g170674 * Blend_VertMask913_g170674 * Blend_ProjMask912_g170674 * Blend_GlobalMask968_g170674 );
				float clampResult17_g170694 = clamp( temp_output_432_0_g170674 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170693 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170693 = ( _ThirdBlendRemap.y - temp_output_7_0_g170693 );
				half Detail_Mask412_g170674 = ( saturate( ( ( clampResult17_g170694 - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170674 = lerp( Visual_Albedo527_g170674 , lerpResult985_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170674 = lerpResult989_g170674;
				#else
				float3 staticSwitch415_g170674 = Visual_Albedo527_g170674;
				#endif
				half3 Final_Albedo601_g170674 = staticSwitch415_g170674;
				float3 In_Albedo3_g170691 = Final_Albedo601_g170674;
				float3 In_AlbedoRaw3_g170691 = Final_Albedo601_g170674;
				half2 Visual_NormalTS529_g170674 = Out_NormalTS4_g170690;
				float2 lerpResult40_g170696 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170674 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170676) = _ThirdNormalTex;
				float localFilterTexture29_g170704 = ( 0.0 );
				SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170704 = SamplerDefault29_g170704;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170704 = SamplerDefault29_g170704;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170704 = SamplerPoint29_g170704;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170704 = SamplerLow29_g170704;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170704 = SamplerMedium29_g170704;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170704 = SamplerHigh29_g170704;
				#endif
				SamplerState Sampler276_g170676 = SS29_g170704;
				float4 temp_output_37_0_g170676 = Local_LayerCoords790_g170674;
				half4 Coords276_g170676 = temp_output_37_0_g170676;
				half2 TexCoord276_g170676 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170676 = SampleMain( Texture276_g170676 , Sampler276_g170676 , Coords276_g170676 , TexCoord276_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170676) = _ThirdNormalTex;
				SamplerState Sampler275_g170676 = SS29_g170704;
				half4 Coords275_g170676 = temp_output_37_0_g170676;
				half2 TexCoord275_g170676 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170676 = SampleExtra( Texture275_g170676 , Sampler275_g170676 , Coords275_g170676 , TexCoord275_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170676) = _ThirdNormalTex;
				SamplerState Sampler238_g170676 = SS29_g170704;
				half4 Coords238_g170676 = temp_output_37_0_g170676;
				float3 temp_output_279_0_g170676 = Model_PositionWO636_g170674;
				half3 WorldPosition238_g170676 = temp_output_279_0_g170676;
				half4 localSamplePlanar2D238_g170676 = SamplePlanar2D( Texture238_g170676 , Sampler238_g170676 , Coords238_g170676 , WorldPosition238_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170676) = _ThirdNormalTex;
				SamplerState Sampler246_g170676 = SS29_g170704;
				half4 Coords246_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition246_g170676 = temp_output_279_0_g170676;
				float3 temp_output_280_0_g170676 = Model_NormalWS869_g170674;
				half3 WorldNormal246_g170676 = temp_output_280_0_g170676;
				half4 localSamplePlanar3D246_g170676 = SamplePlanar3D( Texture246_g170676 , Sampler246_g170676 , Coords246_g170676 , WorldPosition246_g170676 , WorldNormal246_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170676) = _ThirdNormalTex;
				SamplerState Sampler234_g170676 = SS29_g170704;
				float4 Coords234_g170676 = temp_output_37_0_g170676;
				float3 WorldPosition234_g170676 = temp_output_279_0_g170676;
				float4 localSampleStochastic2D234_g170676 = SampleStochastic2D( Texture234_g170676 , Sampler234_g170676 , Coords234_g170676 , WorldPosition234_g170676 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170676) = _ThirdNormalTex;
				SamplerState Sampler263_g170676 = SS29_g170704;
				half4 Coords263_g170676 = temp_output_37_0_g170676;
				half3 WorldPosition263_g170676 = temp_output_279_0_g170676;
				half3 WorldNormal263_g170676 = temp_output_280_0_g170676;
				half4 localSampleStochastic3D263_g170676 = SampleStochastic3D( Texture263_g170676 , Sampler263_g170676 , Coords263_g170676 , WorldPosition263_g170676 , WorldNormal263_g170676 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170674 = localSampleExtra275_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170674 = localSamplePlanar2D238_g170676;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170674 = localSamplePlanar3D246_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170674 = localSampleStochastic2D234_g170676;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170674 = localSampleStochastic3D263_g170676;
				#else
				float4 staticSwitch698_g170674 = localSampleMain276_g170676;
				#endif
				half4 Local_NormalTex776_g170674 = staticSwitch698_g170674;
				half4 Normal_Packed45_g170678 = Local_NormalTex776_g170674;
				float2 appendResult58_g170678 = (float2(( (Normal_Packed45_g170678).x * (Normal_Packed45_g170678).w ) , (Normal_Packed45_g170678).y));
				half2 Normal_Default50_g170678 = appendResult58_g170678;
				half2 Normal_ASTC41_g170678 = (Normal_Packed45_g170678).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170678 = Normal_ASTC41_g170678;
				#else
				float2 staticSwitch38_g170678 = Normal_Default50_g170678;
				#endif
				half2 Normal_NO_DTX544_g170678 = (Normal_Packed45_g170678).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170678 = Normal_NO_DTX544_g170678;
				#else
				float2 staticSwitch37_g170678 = staticSwitch38_g170678;
				#endif
				float2 temp_output_724_0_g170674 = ( (staticSwitch37_g170678*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170679 = temp_output_724_0_g170674;
				float2 break71_g170679 = Normal_Planar45_g170679;
				float3 appendResult72_g170679 = (float3(break71_g170679.x , 0.0 , break71_g170679.y));
				float2 temp_output_858_0_g170674 = (mul( ase_worldToTangent, appendResult72_g170679 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170674 = temp_output_858_0_g170674;
				#else
				float2 staticSwitch727_g170674 = temp_output_724_0_g170674;
				#endif
				half2 Local_NormalTS729_g170674 = staticSwitch727_g170674;
				float2 temp_output_36_0_g170696 = ( lerpResult40_g170696 + Local_NormalTS729_g170674 );
				float2 lerpResult405_g170674 = lerp( Visual_NormalTS529_g170674 , temp_output_36_0_g170696 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170674 = lerpResult405_g170674;
				#else
				float2 staticSwitch418_g170674 = Visual_NormalTS529_g170674;
				#endif
				half2 Final_NormalTS612_g170674 = staticSwitch418_g170674;
				float2 In_NormalTS3_g170691 = Final_NormalTS612_g170674;
				float3 appendResult68_g170697 = (float3(Final_NormalTS612_g170674 , 1.0));
				float3 tanNormal74_g170697 = appendResult68_g170697;
				float3 worldNormal74_g170697 = normalize( float3(dot(tanToWorld0,tanNormal74_g170697), dot(tanToWorld1,tanNormal74_g170697), dot(tanToWorld2,tanNormal74_g170697)) );
				half3 Final_NormalWS956_g170674 = worldNormal74_g170697;
				float3 In_NormalWS3_g170691 = Final_NormalWS956_g170674;
				half4 Visual_Shader531_g170674 = Out_Shader4_g170690;
				float4 lerpResult1000_g170674 = lerp( Local_Masks750_g170674 , ( Visual_Shader531_g170674 * Local_Masks750_g170674 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170674 = lerp( Visual_Shader531_g170674 , lerpResult1000_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170674 = lerpResult998_g170674;
				#else
				float4 staticSwitch451_g170674 = Visual_Shader531_g170674;
				#endif
				half4 Final_Masks613_g170674 = staticSwitch451_g170674;
				float4 In_Shader3_g170691 = Final_Masks613_g170674;
				float4 In_Emissive3_g170691 = Out_Emissive4_g170690;
				float3 temp_output_3_0_g170699 = Final_Albedo601_g170674;
				float dotResult20_g170699 = dot( temp_output_3_0_g170699 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170674 = dotResult20_g170699;
				float In_Grayscale3_g170691 = Final_Grayscale615_g170674;
				float clampResult651_g170674 = clamp( saturate( ( Final_Grayscale615_g170674 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170674 = clampResult651_g170674;
				float In_Luminosity3_g170691 = Final_Luminosity652_g170674;
				half Visual_MultiMask547_g170674 = Out_MultiMask4_g170690;
				float lerpResult477_g170674 = lerp( Visual_MultiMask547_g170674 , Local_MultiMask767_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch482_g170674 = lerpResult477_g170674;
				#else
				float staticSwitch482_g170674 = Visual_MultiMask547_g170674;
				#endif
				half Final_MultiMask572_g170674 = staticSwitch482_g170674;
				float In_MultiMask3_g170691 = Final_MultiMask572_g170674;
				half Visual_AlphaClip559_g170674 = Out_AlphaClip4_g170690;
				float temp_output_718_0_g170674 = (Local_AlbedoTex777_g170674).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170674 = ( temp_output_718_0_g170674 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170674 = temp_output_718_0_g170674;
				#endif
				half Local_AlphaClip772_g170674 = staticSwitch924_g170674;
				float lerpResult448_g170674 = lerp( Visual_AlphaClip559_g170674 , Local_AlphaClip772_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch564_g170674 = lerpResult448_g170674;
				#else
				float staticSwitch564_g170674 = Visual_AlphaClip559_g170674;
				#endif
				half Final_AlphaClip602_g170674 = staticSwitch564_g170674;
				float In_AlphaClip3_g170691 = Final_AlphaClip602_g170674;
				half Visual_AlphaFade588_g170674 = Out_AlphaFade4_g170690;
				half Local_AlphaFade773_g170674 = (lerpResult706_g170674).a;
				float lerpResult604_g170674 = lerp( Visual_AlphaFade588_g170674 , Local_AlphaFade773_g170674 , Detail_Mask412_g170674);
				#ifdef TVE_THIRD
				float staticSwitch608_g170674 = lerpResult604_g170674;
				#else
				float staticSwitch608_g170674 = Visual_AlphaFade588_g170674;
				#endif
				half Final_AlphaFade611_g170674 = staticSwitch608_g170674;
				float In_AlphaFade3_g170691 = Final_AlphaFade611_g170674;
				float3 In_Translucency3_g170691 = Out_Translucency4_g170690;
				float In_Transmission3_g170691 = Out_Transmission4_g170690;
				float In_Thickness3_g170691 = Out_Thickness4_g170690;
				float In_Diffusion3_g170691 = Out_Diffusion4_g170690;
				Data3_g170691.Dummy = In_Dummy3_g170691;
				Data3_g170691.Albedo = In_Albedo3_g170691;
				Data3_g170691.AlbedoRaw = In_AlbedoRaw3_g170691;
				Data3_g170691.NormalTS = In_NormalTS3_g170691;
				Data3_g170691.NormalWS = In_NormalWS3_g170691;
				Data3_g170691.Shader = In_Shader3_g170691;
				Data3_g170691.Emissive= In_Emissive3_g170691;
				Data3_g170691.MultiMask = In_MultiMask3_g170691;
				Data3_g170691.Grayscale = In_Grayscale3_g170691;
				Data3_g170691.Luminosity = In_Luminosity3_g170691;
				Data3_g170691.AlphaClip = In_AlphaClip3_g170691;
				Data3_g170691.AlphaFade = In_AlphaFade3_g170691;
				Data3_g170691.Translucency = In_Translucency3_g170691;
				Data3_g170691.Transmission = In_Transmission3_g170691;
				Data3_g170691.Thickness = In_Thickness3_g170691;
				Data3_g170691.Diffusion = In_Diffusion3_g170691;
				TVEVisualData Data4_g170785 = Data3_g170691;
				float Out_Dummy4_g170785 = 0;
				float3 Out_Albedo4_g170785 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170785 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170785 = float2( 0,0 );
				float3 Out_NormalWS4_g170785 = float3( 0,0,0 );
				float4 Out_Shader4_g170785 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170785 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170785 = 0;
				float Out_Grayscale4_g170785 = 0;
				float Out_Luminosity4_g170785 = 0;
				float Out_AlphaClip4_g170785 = 0;
				float Out_AlphaFade4_g170785 = 0;
				float3 Out_Translucency4_g170785 = float3( 0,0,0 );
				float Out_Transmission4_g170785 = 0;
				float Out_Thickness4_g170785 = 0;
				float Out_Diffusion4_g170785 = 0;
				Out_Dummy4_g170785 = Data4_g170785.Dummy;
				Out_Albedo4_g170785 = Data4_g170785.Albedo;
				Out_AlbedoRaw4_g170785 = Data4_g170785.AlbedoRaw;
				Out_NormalTS4_g170785 = Data4_g170785.NormalTS;
				Out_NormalWS4_g170785 = Data4_g170785.NormalWS;
				Out_Shader4_g170785 = Data4_g170785.Shader;
				Out_Emissive4_g170785= Data4_g170785.Emissive;
				Out_MultiMask4_g170785 = Data4_g170785.MultiMask;
				Out_Grayscale4_g170785 = Data4_g170785.Grayscale;
				Out_Luminosity4_g170785= Data4_g170785.Luminosity;
				Out_AlphaClip4_g170785 = Data4_g170785.AlphaClip;
				Out_AlphaFade4_g170785 = Data4_g170785.AlphaFade;
				Out_Translucency4_g170785 = Data4_g170785.Translucency;
				Out_Transmission4_g170785 = Data4_g170785.Transmission;
				Out_Thickness4_g170785 = Data4_g170785.Thickness;
				Out_Diffusion4_g170785 = Data4_g170785.Diffusion;
				half3 Visual_Albedo127_g170784 = Out_Albedo4_g170785;
				TVEModelData Data15_g170793 = Data16_g170493;
				float Out_Dummy15_g170793 = 0;
				float3 Out_PositionWS15_g170793 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170793 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170793 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170793 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170793 = float3( 0,0,0 );
				float4 Out_VertexData15_g170793 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170793 = float4( 0,0,0,0 );
				Out_Dummy15_g170793 = Data15_g170793.Dummy;
				Out_PositionWS15_g170793 = Data15_g170793.PositionWS;
				Out_PositionWO15_g170793 = Data15_g170793.PositionWO;
				Out_PivotWS15_g170793 = Data15_g170793.PivotWS;
				Out_PivotWO15_g170793 = Data15_g170793.PivotWO;
				Out_NormalWS15_g170793 = Data15_g170793.NormalWS;
				Out_ViewDirWS15_g170793 = Data15_g170793.ViewDirWS;
				Out_VertexData15_g170793 = Data15_g170793.VertexData;
				Out_BoundsData15_g170793 = Data15_g170793.BoundsData;
				half4 Model_VertexData206_g170784 = Out_VertexData15_g170793;
				float4 break208_g170784 = Model_VertexData206_g170784;
				float4 break33_g170791 = _occlusion_vert_mode;
				float temp_output_30_0_g170791 = ( break208_g170784.x * break33_g170791.x );
				float temp_output_29_0_g170791 = ( break208_g170784.y * break33_g170791.y );
				float temp_output_31_0_g170791 = ( break208_g170784.z * break33_g170791.z );
				float temp_output_28_0_g170791 = ( temp_output_30_0_g170791 + temp_output_29_0_g170791 + temp_output_31_0_g170791 + ( break208_g170784.w * break33_g170791.w ) );
				float temp_output_194_0_g170784 = temp_output_28_0_g170791;
				float clampResult17_g170789 = clamp( temp_output_194_0_g170784 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170788 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170788 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170788 );
				float temp_output_6_0_g170790 = saturate( ( ( clampResult17_g170789 - temp_output_7_0_g170788 ) / ( temp_output_10_0_g170788 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170790 = ( temp_output_6_0_g170790 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170790 = temp_output_6_0_g170790;
				#endif
				half Occlusion_Mask82_g170784 = staticSwitch14_g170790;
				float3 lerpResult75_g170784 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170784);
				float3 lerpResult186_g170784 = lerp( Visual_Albedo127_g170784 , ( Visual_Albedo127_g170784 * lerpResult75_g170784 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170784 = lerpResult186_g170784;
				#else
				float3 staticSwitch171_g170784 = Visual_Albedo127_g170784;
				#endif
				half3 Final_Albedo160_g170784 = staticSwitch171_g170784;
				float3 In_Albedo3_g170786 = Final_Albedo160_g170784;
				float3 In_AlbedoRaw3_g170786 = Final_Albedo160_g170784;
				float2 In_NormalTS3_g170786 = Out_NormalTS4_g170785;
				float3 In_NormalWS3_g170786 = Out_NormalWS4_g170785;
				float4 In_Shader3_g170786 = Out_Shader4_g170785;
				float4 In_Emissive3_g170786 = Out_Emissive4_g170785;
				float3 temp_output_3_0_g170787 = Final_Albedo160_g170784;
				float dotResult20_g170787 = dot( temp_output_3_0_g170787 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170784 = dotResult20_g170787;
				float In_Grayscale3_g170786 = Final_Grayscale164_g170784;
				float clampResult180_g170784 = clamp( saturate( ( Final_Grayscale164_g170784 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170784 = clampResult180_g170784;
				float In_Luminosity3_g170786 = Final_Shading181_g170784;
				float In_MultiMask3_g170786 = Out_MultiMask4_g170785;
				float In_AlphaClip3_g170786 = Out_AlphaClip4_g170785;
				float In_AlphaFade3_g170786 = Out_AlphaFade4_g170785;
				float3 In_Translucency3_g170786 = Out_Translucency4_g170785;
				float In_Transmission3_g170786 = Out_Transmission4_g170785;
				float In_Thickness3_g170786 = Out_Thickness4_g170785;
				float In_Diffusion3_g170786 = Out_Diffusion4_g170785;
				Data3_g170786.Dummy = In_Dummy3_g170786;
				Data3_g170786.Albedo = In_Albedo3_g170786;
				Data3_g170786.AlbedoRaw = In_AlbedoRaw3_g170786;
				Data3_g170786.NormalTS = In_NormalTS3_g170786;
				Data3_g170786.NormalWS = In_NormalWS3_g170786;
				Data3_g170786.Shader = In_Shader3_g170786;
				Data3_g170786.Emissive= In_Emissive3_g170786;
				Data3_g170786.MultiMask = In_MultiMask3_g170786;
				Data3_g170786.Grayscale = In_Grayscale3_g170786;
				Data3_g170786.Luminosity = In_Luminosity3_g170786;
				Data3_g170786.AlphaClip = In_AlphaClip3_g170786;
				Data3_g170786.AlphaFade = In_AlphaFade3_g170786;
				Data3_g170786.Translucency = In_Translucency3_g170786;
				Data3_g170786.Transmission = In_Transmission3_g170786;
				Data3_g170786.Thickness = In_Thickness3_g170786;
				Data3_g170786.Diffusion = In_Diffusion3_g170786;
				TVEVisualData Data4_g170796 = Data3_g170786;
				float Out_Dummy4_g170796 = 0;
				float3 Out_Albedo4_g170796 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170796 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170796 = float2( 0,0 );
				float3 Out_NormalWS4_g170796 = float3( 0,0,0 );
				float4 Out_Shader4_g170796 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170796 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170796 = 0;
				float Out_Grayscale4_g170796 = 0;
				float Out_Luminosity4_g170796 = 0;
				float Out_AlphaClip4_g170796 = 0;
				float Out_AlphaFade4_g170796 = 0;
				float3 Out_Translucency4_g170796 = float3( 0,0,0 );
				float Out_Transmission4_g170796 = 0;
				float Out_Thickness4_g170796 = 0;
				float Out_Diffusion4_g170796 = 0;
				Out_Dummy4_g170796 = Data4_g170796.Dummy;
				Out_Albedo4_g170796 = Data4_g170796.Albedo;
				Out_AlbedoRaw4_g170796 = Data4_g170796.AlbedoRaw;
				Out_NormalTS4_g170796 = Data4_g170796.NormalTS;
				Out_NormalWS4_g170796 = Data4_g170796.NormalWS;
				Out_Shader4_g170796 = Data4_g170796.Shader;
				Out_Emissive4_g170796= Data4_g170796.Emissive;
				Out_MultiMask4_g170796 = Data4_g170796.MultiMask;
				Out_Grayscale4_g170796 = Data4_g170796.Grayscale;
				Out_Luminosity4_g170796= Data4_g170796.Luminosity;
				Out_AlphaClip4_g170796 = Data4_g170796.AlphaClip;
				Out_AlphaFade4_g170796 = Data4_g170796.AlphaFade;
				Out_Translucency4_g170796 = Data4_g170796.Translucency;
				Out_Transmission4_g170796 = Data4_g170796.Transmission;
				Out_Thickness4_g170796 = Data4_g170796.Thickness;
				Out_Diffusion4_g170796 = Data4_g170796.Diffusion;
				half3 Visual_Albedo127_g170794 = Out_Albedo4_g170796;
				TVEModelData Data15_g170803 = Data16_g170493;
				float Out_Dummy15_g170803 = 0;
				float3 Out_PositionWS15_g170803 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170803 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170803 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170803 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170803 = float3( 0,0,0 );
				float4 Out_VertexData15_g170803 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170803 = float4( 0,0,0,0 );
				Out_Dummy15_g170803 = Data15_g170803.Dummy;
				Out_PositionWS15_g170803 = Data15_g170803.PositionWS;
				Out_PositionWO15_g170803 = Data15_g170803.PositionWO;
				Out_PivotWS15_g170803 = Data15_g170803.PivotWS;
				Out_PivotWO15_g170803 = Data15_g170803.PivotWO;
				Out_NormalWS15_g170803 = Data15_g170803.NormalWS;
				Out_ViewDirWS15_g170803 = Data15_g170803.ViewDirWS;
				Out_VertexData15_g170803 = Data15_g170803.VertexData;
				Out_BoundsData15_g170803 = Data15_g170803.BoundsData;
				half4 Model_VertexData224_g170794 = Out_VertexData15_g170803;
				float4 break226_g170794 = Model_VertexData224_g170794;
				float4 break33_g170795 = _gradient_vert_mode;
				float temp_output_30_0_g170795 = ( break226_g170794.x * break33_g170795.x );
				float temp_output_29_0_g170795 = ( break226_g170794.y * break33_g170795.y );
				float temp_output_31_0_g170795 = ( break226_g170794.z * break33_g170795.z );
				float temp_output_28_0_g170795 = ( temp_output_30_0_g170795 + temp_output_29_0_g170795 + temp_output_31_0_g170795 + ( break226_g170794.w * break33_g170795.w ) );
				float temp_output_211_0_g170794 = temp_output_28_0_g170795;
				float clampResult17_g170800 = clamp( temp_output_211_0_g170794 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170801 = _GradientMeshRemap.x;
				float temp_output_10_0_g170801 = ( _GradientMeshRemap.y - temp_output_7_0_g170801 );
				float temp_output_6_0_g170802 = saturate( ( ( clampResult17_g170800 - temp_output_7_0_g170801 ) / ( temp_output_10_0_g170801 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170802 = ( temp_output_6_0_g170802 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170802 = temp_output_6_0_g170802;
				#endif
				half Gradient_VertMask82_g170794 = staticSwitch14_g170802;
				half Gradient_Mask200_g170794 = Gradient_VertMask82_g170794;
				float3 lerpResult75_g170794 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170794);
				float temp_output_162_11_g170794 = Out_MultiMask4_g170796;
				half Visual_MultiMask196_g170794 = temp_output_162_11_g170794;
				float lerpResult190_g170794 = lerp( 1.0 , Visual_MultiMask196_g170794 , _GradientMultiValue);
				half Gradient_MultiMask194_g170794 = lerpResult190_g170794;
				float3 lerpResult186_g170794 = lerp( Visual_Albedo127_g170794 , ( Visual_Albedo127_g170794 * lerpResult75_g170794 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170794 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170794 = lerpResult186_g170794;
				#else
				float3 staticSwitch171_g170794 = Visual_Albedo127_g170794;
				#endif
				half3 Final_Albedo160_g170794 = staticSwitch171_g170794;
				float3 In_Albedo3_g170797 = Final_Albedo160_g170794;
				float3 In_AlbedoRaw3_g170797 = Final_Albedo160_g170794;
				float2 In_NormalTS3_g170797 = Out_NormalTS4_g170796;
				float3 In_NormalWS3_g170797 = Out_NormalWS4_g170796;
				float4 In_Shader3_g170797 = Out_Shader4_g170796;
				float4 In_Emissive3_g170797 = Out_Emissive4_g170796;
				float3 temp_output_3_0_g170798 = Final_Albedo160_g170794;
				float dotResult20_g170798 = dot( temp_output_3_0_g170798 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170794 = dotResult20_g170798;
				float In_Grayscale3_g170797 = Final_Grayscale164_g170794;
				float clampResult180_g170794 = clamp( saturate( ( Final_Grayscale164_g170794 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170794 = clampResult180_g170794;
				float In_Luminosity3_g170797 = Final_Luminosity181_g170794;
				float In_MultiMask3_g170797 = temp_output_162_11_g170794;
				float In_AlphaClip3_g170797 = Out_AlphaClip4_g170796;
				float In_AlphaFade3_g170797 = Out_AlphaFade4_g170796;
				float3 In_Translucency3_g170797 = Out_Translucency4_g170796;
				float In_Transmission3_g170797 = Out_Transmission4_g170796;
				float In_Thickness3_g170797 = Out_Thickness4_g170796;
				float In_Diffusion3_g170797 = Out_Diffusion4_g170796;
				Data3_g170797.Dummy = In_Dummy3_g170797;
				Data3_g170797.Albedo = In_Albedo3_g170797;
				Data3_g170797.AlbedoRaw = In_AlbedoRaw3_g170797;
				Data3_g170797.NormalTS = In_NormalTS3_g170797;
				Data3_g170797.NormalWS = In_NormalWS3_g170797;
				Data3_g170797.Shader = In_Shader3_g170797;
				Data3_g170797.Emissive= In_Emissive3_g170797;
				Data3_g170797.MultiMask = In_MultiMask3_g170797;
				Data3_g170797.Grayscale = In_Grayscale3_g170797;
				Data3_g170797.Luminosity = In_Luminosity3_g170797;
				Data3_g170797.AlphaClip = In_AlphaClip3_g170797;
				Data3_g170797.AlphaFade = In_AlphaFade3_g170797;
				Data3_g170797.Translucency = In_Translucency3_g170797;
				Data3_g170797.Transmission = In_Transmission3_g170797;
				Data3_g170797.Thickness = In_Thickness3_g170797;
				Data3_g170797.Diffusion = In_Diffusion3_g170797;
				TVEVisualData Data4_g170806 = Data3_g170797;
				float Out_Dummy4_g170806 = 0;
				float3 Out_Albedo4_g170806 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170806 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170806 = float2( 0,0 );
				float3 Out_NormalWS4_g170806 = float3( 0,0,0 );
				float4 Out_Shader4_g170806 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170806 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170806 = 0;
				float Out_Grayscale4_g170806 = 0;
				float Out_Luminosity4_g170806 = 0;
				float Out_AlphaClip4_g170806 = 0;
				float Out_AlphaFade4_g170806 = 0;
				float3 Out_Translucency4_g170806 = float3( 0,0,0 );
				float Out_Transmission4_g170806 = 0;
				float Out_Thickness4_g170806 = 0;
				float Out_Diffusion4_g170806 = 0;
				Out_Dummy4_g170806 = Data4_g170806.Dummy;
				Out_Albedo4_g170806 = Data4_g170806.Albedo;
				Out_AlbedoRaw4_g170806 = Data4_g170806.AlbedoRaw;
				Out_NormalTS4_g170806 = Data4_g170806.NormalTS;
				Out_NormalWS4_g170806 = Data4_g170806.NormalWS;
				Out_Shader4_g170806 = Data4_g170806.Shader;
				Out_Emissive4_g170806= Data4_g170806.Emissive;
				Out_MultiMask4_g170806 = Data4_g170806.MultiMask;
				Out_Grayscale4_g170806 = Data4_g170806.Grayscale;
				Out_Luminosity4_g170806= Data4_g170806.Luminosity;
				Out_AlphaClip4_g170806 = Data4_g170806.AlphaClip;
				Out_AlphaFade4_g170806 = Data4_g170806.AlphaFade;
				Out_Translucency4_g170806 = Data4_g170806.Translucency;
				Out_Transmission4_g170806 = Data4_g170806.Transmission;
				Out_Thickness4_g170806 = Data4_g170806.Thickness;
				Out_Diffusion4_g170806 = Data4_g170806.Diffusion;
				half3 Visual_Albedo127_g170804 = Out_Albedo4_g170806;
				TVEModelData Data15_g170812 = Data16_g170493;
				float Out_Dummy15_g170812 = 0;
				float3 Out_PositionWS15_g170812 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170812 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170812 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170812 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170812 = float3( 0,0,0 );
				float4 Out_VertexData15_g170812 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170812 = float4( 0,0,0,0 );
				Out_Dummy15_g170812 = Data15_g170812.Dummy;
				Out_PositionWS15_g170812 = Data15_g170812.PositionWS;
				Out_PositionWO15_g170812 = Data15_g170812.PositionWO;
				Out_PivotWS15_g170812 = Data15_g170812.PivotWS;
				Out_PivotWO15_g170812 = Data15_g170812.PivotWO;
				Out_NormalWS15_g170812 = Data15_g170812.NormalWS;
				Out_ViewDirWS15_g170812 = Data15_g170812.ViewDirWS;
				Out_VertexData15_g170812 = Data15_g170812.VertexData;
				Out_BoundsData15_g170812 = Data15_g170812.BoundsData;
				half3 Model_PositionWO224_g170804 = Out_PositionWO15_g170812;
				half3 Model_PivotWO239_g170804 = Out_PivotWO15_g170812;
				float3 lerpResult242_g170804 = lerp( Model_PositionWO224_g170804 , Model_PivotWO239_g170804 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170808 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170804 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170810 = clamp( tex3DNode60_g170808.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170811 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170811 = ( _VariationNoiseRemap.y - temp_output_7_0_g170811 );
				float temp_output_238_0_g170804 = saturate( ( ( clampResult17_g170810 - temp_output_7_0_g170811 ) / ( temp_output_10_0_g170811 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170804 = temp_output_238_0_g170804;
				half Variaton_Mask200_g170804 = Variaton_NoiseMask82_g170804;
				float3 lerpResult75_g170804 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170804);
				float temp_output_162_11_g170804 = Out_MultiMask4_g170806;
				half Visual_MultiMask196_g170804 = temp_output_162_11_g170804;
				float lerpResult190_g170804 = lerp( 1.0 , Visual_MultiMask196_g170804 , _VariationMultiValue);
				half Variaton_MultiMask194_g170804 = lerpResult190_g170804;
				float3 lerpResult186_g170804 = lerp( Visual_Albedo127_g170804 , ( Visual_Albedo127_g170804 * lerpResult75_g170804 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170804 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170804 = lerpResult186_g170804;
				#else
				float3 staticSwitch171_g170804 = Visual_Albedo127_g170804;
				#endif
				half3 Final_Albedo160_g170804 = staticSwitch171_g170804;
				float3 In_Albedo3_g170807 = Final_Albedo160_g170804;
				float3 In_AlbedoRaw3_g170807 = Final_Albedo160_g170804;
				float2 In_NormalTS3_g170807 = Out_NormalTS4_g170806;
				float3 In_NormalWS3_g170807 = Out_NormalWS4_g170806;
				float4 In_Shader3_g170807 = Out_Shader4_g170806;
				float4 In_Emissive3_g170807 = Out_Emissive4_g170806;
				float3 temp_output_3_0_g170805 = Final_Albedo160_g170804;
				float dotResult20_g170805 = dot( temp_output_3_0_g170805 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170804 = dotResult20_g170805;
				float In_Grayscale3_g170807 = Final_Grayscale164_g170804;
				float clampResult180_g170804 = clamp( saturate( ( Final_Grayscale164_g170804 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170804 = clampResult180_g170804;
				float In_Luminosity3_g170807 = Final_Luminosity181_g170804;
				float In_MultiMask3_g170807 = temp_output_162_11_g170804;
				float In_AlphaClip3_g170807 = Out_AlphaClip4_g170806;
				float In_AlphaFade3_g170807 = Out_AlphaFade4_g170806;
				float3 In_Translucency3_g170807 = Out_Translucency4_g170806;
				float In_Transmission3_g170807 = Out_Transmission4_g170806;
				float In_Thickness3_g170807 = Out_Thickness4_g170806;
				float In_Diffusion3_g170807 = Out_Diffusion4_g170806;
				Data3_g170807.Dummy = In_Dummy3_g170807;
				Data3_g170807.Albedo = In_Albedo3_g170807;
				Data3_g170807.AlbedoRaw = In_AlbedoRaw3_g170807;
				Data3_g170807.NormalTS = In_NormalTS3_g170807;
				Data3_g170807.NormalWS = In_NormalWS3_g170807;
				Data3_g170807.Shader = In_Shader3_g170807;
				Data3_g170807.Emissive= In_Emissive3_g170807;
				Data3_g170807.MultiMask = In_MultiMask3_g170807;
				Data3_g170807.Grayscale = In_Grayscale3_g170807;
				Data3_g170807.Luminosity = In_Luminosity3_g170807;
				Data3_g170807.AlphaClip = In_AlphaClip3_g170807;
				Data3_g170807.AlphaFade = In_AlphaFade3_g170807;
				Data3_g170807.Translucency = In_Translucency3_g170807;
				Data3_g170807.Transmission = In_Transmission3_g170807;
				Data3_g170807.Thickness = In_Thickness3_g170807;
				Data3_g170807.Diffusion = In_Diffusion3_g170807;
				TVEVisualData Data4_g170836 = Data3_g170807;
				float Out_Dummy4_g170836 = 0;
				float3 Out_Albedo4_g170836 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170836 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170836 = float2( 0,0 );
				float3 Out_NormalWS4_g170836 = float3( 0,0,0 );
				float4 Out_Shader4_g170836 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170836 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170836 = 0;
				float Out_Grayscale4_g170836 = 0;
				float Out_Luminosity4_g170836 = 0;
				float Out_AlphaClip4_g170836 = 0;
				float Out_AlphaFade4_g170836 = 0;
				float3 Out_Translucency4_g170836 = float3( 0,0,0 );
				float Out_Transmission4_g170836 = 0;
				float Out_Thickness4_g170836 = 0;
				float Out_Diffusion4_g170836 = 0;
				Out_Dummy4_g170836 = Data4_g170836.Dummy;
				Out_Albedo4_g170836 = Data4_g170836.Albedo;
				Out_AlbedoRaw4_g170836 = Data4_g170836.AlbedoRaw;
				Out_NormalTS4_g170836 = Data4_g170836.NormalTS;
				Out_NormalWS4_g170836 = Data4_g170836.NormalWS;
				Out_Shader4_g170836 = Data4_g170836.Shader;
				Out_Emissive4_g170836= Data4_g170836.Emissive;
				Out_MultiMask4_g170836 = Data4_g170836.MultiMask;
				Out_Grayscale4_g170836 = Data4_g170836.Grayscale;
				Out_Luminosity4_g170836= Data4_g170836.Luminosity;
				Out_AlphaClip4_g170836 = Data4_g170836.AlphaClip;
				Out_AlphaFade4_g170836 = Data4_g170836.AlphaFade;
				Out_Translucency4_g170836 = Data4_g170836.Translucency;
				Out_Transmission4_g170836 = Data4_g170836.Transmission;
				Out_Thickness4_g170836 = Data4_g170836.Thickness;
				Out_Diffusion4_g170836 = Data4_g170836.Diffusion;
				half3 Visual_Albedo139_g170814 = Out_Albedo4_g170836;
				float temp_output_200_12_g170814 = Out_Grayscale4_g170836;
				half Visual_Grayscale150_g170814 = temp_output_200_12_g170814;
				float3 temp_cast_37 = (Visual_Grayscale150_g170814).xxx;
				TVEGlobalData Data15_g170815 = Data204_g170494;
				float Out_Dummy15_g170815 = 0;
				float4 Out_CoatParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170815 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170815 = float4( 0,0,0,0 );
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_CoatParams15_g170815 = Data15_g170815.CoatParams;
				Out_PaintParams15_g170815 = Data15_g170815.PaintParams;
				Out_GlowParams15_g170815 = Data15_g170815.GlowParams;
				Out_AtmoParams15_g170815= Data15_g170815.AtmoParams;
				Out_FadeParams15_g170815= Data15_g170815.FadeParams;
				Out_FormParams15_g170815 = Data15_g170815.FormParams;
				Out_LandParams15_g170815 = Data15_g170815.LandParams;
				Out_WindParams15_g170815 = Data15_g170815.WindParams;
				Out_PushParams15_g170815 = Data15_g170815.PushParams;
				half4 Global_PaintParams209_g170814 = Out_PaintParams15_g170815;
				float temp_output_6_0_g170816 = ( saturate( (Global_PaintParams209_g170814).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170816 = ( temp_output_6_0_g170816 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170816 = temp_output_6_0_g170816;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170814 = staticSwitch14_g170816;
				#else
				float staticSwitch283_g170814 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170814 = staticSwitch283_g170814;
				float3 lerpResult368_g170814 = lerp( Visual_Albedo139_g170814 , temp_cast_37 , ( Tinting_GlobalValue285_g170814 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170834 = 2.0;
				#else
				float staticSwitch1_g170834 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170814 = (Global_PaintParams209_g170814).xyz;
				#else
				float3 staticSwitch288_g170814 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170814 = staticSwitch288_g170814;
				float temp_output_200_11_g170814 = Out_MultiMask4_g170836;
				half Visual_MultiMask181_g170814 = temp_output_200_11_g170814;
				float lerpResult147_g170814 = lerp( 1.0 , Visual_MultiMask181_g170814 , _TintingMultiValue);
				half Tinting_MutiMask121_g170814 = lerpResult147_g170814;
				half Tinting_TexMask385_g170814 = 1.0;
				float temp_output_200_15_g170814 = Out_Luminosity4_g170836;
				half Visual_Luminosity257_g170814 = temp_output_200_15_g170814;
				float clampResult17_g170828 = clamp( Visual_Luminosity257_g170814 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170827 = _TintingLumaRemap.x;
				float temp_output_10_0_g170827 = ( _TintingLumaRemap.y - temp_output_7_0_g170827 );
				float lerpResult228_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170828 - temp_output_7_0_g170827 ) / ( temp_output_10_0_g170827 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170814 = lerpResult228_g170814;
				TVEModelData Data15_g170837 = Data16_g170493;
				float Out_Dummy15_g170837 = 0;
				float3 Out_PositionWS15_g170837 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170837 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170837 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170837 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170837 = float3( 0,0,0 );
				float4 Out_VertexData15_g170837 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170837 = float4( 0,0,0,0 );
				Out_Dummy15_g170837 = Data15_g170837.Dummy;
				Out_PositionWS15_g170837 = Data15_g170837.PositionWS;
				Out_PositionWO15_g170837 = Data15_g170837.PositionWO;
				Out_PivotWS15_g170837 = Data15_g170837.PivotWS;
				Out_PivotWO15_g170837 = Data15_g170837.PivotWO;
				Out_NormalWS15_g170837 = Data15_g170837.NormalWS;
				Out_ViewDirWS15_g170837 = Data15_g170837.ViewDirWS;
				Out_VertexData15_g170837 = Data15_g170837.VertexData;
				Out_BoundsData15_g170837 = Data15_g170837.BoundsData;
				half4 Model_VertexMasks307_g170814 = Out_VertexData15_g170837;
				float4 break311_g170814 = Model_VertexMasks307_g170814;
				float4 break33_g170820 = _tinting_vert_mode;
				float temp_output_30_0_g170820 = ( break311_g170814.x * break33_g170820.x );
				float temp_output_29_0_g170820 = ( break311_g170814.y * break33_g170820.y );
				float temp_output_31_0_g170820 = ( break311_g170814.z * break33_g170820.z );
				float temp_output_28_0_g170820 = ( temp_output_30_0_g170820 + temp_output_29_0_g170820 + temp_output_31_0_g170820 + ( break311_g170814.w * break33_g170820.w ) );
				float clampResult17_g170826 = clamp( temp_output_28_0_g170820 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170825 = _TintingMeshRemap.x;
				float temp_output_10_0_g170825 = ( _TintingMeshRemap.y - temp_output_7_0_g170825 );
				float lerpResult370_g170814 = lerp( 1.0 , saturate( ( ( clampResult17_g170826 - temp_output_7_0_g170825 ) / ( temp_output_10_0_g170825 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170829 = lerpResult370_g170814;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170829 = ( temp_output_6_0_g170829 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170829 = temp_output_6_0_g170829;
				#endif
				float temp_output_333_0_g170814 = staticSwitch14_g170829;
				half Tinting_VertMask309_g170814 = temp_output_333_0_g170814;
				half Tinting_NoiseMask213_g170814 = 1.0;
				half Custom_Mask345_g170814 = 1.0;
				float temp_output_7_0_g170823 = _TintingBlendRemap.x;
				float temp_output_10_0_g170823 = ( _TintingBlendRemap.y - temp_output_7_0_g170823 );
				half Tinting_Mask242_g170814 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170814 * Tinting_TexMask385_g170814 * Tinting_LumaMask153_g170814 * Tinting_VertMask309_g170814 * Tinting_NoiseMask213_g170814 * Tinting_GlobalValue285_g170814 * Custom_Mask345_g170814 ) - temp_output_7_0_g170823 ) / ( temp_output_10_0_g170823 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170814 = lerp( Visual_Albedo139_g170814 , ( lerpResult368_g170814 * staticSwitch1_g170834 * Tinting_ColorGlobal290_g170814 * (_TintingColor).rgb ) , Tinting_Mask242_g170814);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170814 = lerpResult90_g170814;
				#else
				float3 staticSwitch286_g170814 = Visual_Albedo139_g170814;
				#endif
				half3 Final_Albedo97_g170814 = staticSwitch286_g170814;
				float3 In_Albedo3_g170835 = Final_Albedo97_g170814;
				float3 In_AlbedoRaw3_g170835 = Out_AlbedoRaw4_g170836;
				float2 In_NormalTS3_g170835 = Out_NormalTS4_g170836;
				float3 In_NormalWS3_g170835 = Out_NormalWS4_g170836;
				float4 In_Shader3_g170835 = Out_Shader4_g170836;
				float4 In_Emissive3_g170835 = Out_Emissive4_g170836;
				float In_Grayscale3_g170835 = temp_output_200_12_g170814;
				float In_Luminosity3_g170835 = temp_output_200_15_g170814;
				float In_MultiMask3_g170835 = temp_output_200_11_g170814;
				float In_AlphaClip3_g170835 = Out_AlphaClip4_g170836;
				float In_AlphaFade3_g170835 = Out_AlphaFade4_g170836;
				float3 In_Translucency3_g170835 = Out_Translucency4_g170836;
				float In_Transmission3_g170835 = Out_Transmission4_g170836;
				float In_Thickness3_g170835 = Out_Thickness4_g170836;
				float In_Diffusion3_g170835 = Out_Diffusion4_g170836;
				Data3_g170835.Dummy = In_Dummy3_g170835;
				Data3_g170835.Albedo = In_Albedo3_g170835;
				Data3_g170835.AlbedoRaw = In_AlbedoRaw3_g170835;
				Data3_g170835.NormalTS = In_NormalTS3_g170835;
				Data3_g170835.NormalWS = In_NormalWS3_g170835;
				Data3_g170835.Shader = In_Shader3_g170835;
				Data3_g170835.Emissive= In_Emissive3_g170835;
				Data3_g170835.MultiMask = In_MultiMask3_g170835;
				Data3_g170835.Grayscale = In_Grayscale3_g170835;
				Data3_g170835.Luminosity = In_Luminosity3_g170835;
				Data3_g170835.AlphaClip = In_AlphaClip3_g170835;
				Data3_g170835.AlphaFade = In_AlphaFade3_g170835;
				Data3_g170835.Translucency = In_Translucency3_g170835;
				Data3_g170835.Transmission = In_Transmission3_g170835;
				Data3_g170835.Thickness = In_Thickness3_g170835;
				Data3_g170835.Diffusion = In_Diffusion3_g170835;
				TVEVisualData Data4_g170840 = Data3_g170835;
				float Out_Dummy4_g170840 = 0;
				float3 Out_Albedo4_g170840 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170840 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170840 = float2( 0,0 );
				float3 Out_NormalWS4_g170840 = float3( 0,0,0 );
				float4 Out_Shader4_g170840 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170840 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170840 = 0;
				float Out_Grayscale4_g170840 = 0;
				float Out_Luminosity4_g170840 = 0;
				float Out_AlphaClip4_g170840 = 0;
				float Out_AlphaFade4_g170840 = 0;
				float3 Out_Translucency4_g170840 = float3( 0,0,0 );
				float Out_Transmission4_g170840 = 0;
				float Out_Thickness4_g170840 = 0;
				float Out_Diffusion4_g170840 = 0;
				Out_Dummy4_g170840 = Data4_g170840.Dummy;
				Out_Albedo4_g170840 = Data4_g170840.Albedo;
				Out_AlbedoRaw4_g170840 = Data4_g170840.AlbedoRaw;
				Out_NormalTS4_g170840 = Data4_g170840.NormalTS;
				Out_NormalWS4_g170840 = Data4_g170840.NormalWS;
				Out_Shader4_g170840 = Data4_g170840.Shader;
				Out_Emissive4_g170840= Data4_g170840.Emissive;
				Out_MultiMask4_g170840 = Data4_g170840.MultiMask;
				Out_Grayscale4_g170840 = Data4_g170840.Grayscale;
				Out_Luminosity4_g170840= Data4_g170840.Luminosity;
				Out_AlphaClip4_g170840 = Data4_g170840.AlphaClip;
				Out_AlphaFade4_g170840 = Data4_g170840.AlphaFade;
				Out_Translucency4_g170840 = Data4_g170840.Translucency;
				Out_Transmission4_g170840 = Data4_g170840.Transmission;
				Out_Thickness4_g170840 = Data4_g170840.Thickness;
				Out_Diffusion4_g170840 = Data4_g170840.Diffusion;
				half3 Visual_Albedo292_g170838 = Out_Albedo4_g170840;
				float temp_output_280_12_g170838 = Out_Grayscale4_g170840;
				half Visual_Grayscale308_g170838 = temp_output_280_12_g170838;
				float3 temp_cast_39 = (Visual_Grayscale308_g170838).xxx;
				TVEGlobalData Data15_g170839 = Data204_g170494;
				float Out_Dummy15_g170839 = 0;
				float4 Out_CoatParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170839 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170839 = float4( 0,0,0,0 );
				Out_Dummy15_g170839 = Data15_g170839.Dummy;
				Out_CoatParams15_g170839 = Data15_g170839.CoatParams;
				Out_PaintParams15_g170839 = Data15_g170839.PaintParams;
				Out_GlowParams15_g170839 = Data15_g170839.GlowParams;
				Out_AtmoParams15_g170839= Data15_g170839.AtmoParams;
				Out_FadeParams15_g170839= Data15_g170839.FadeParams;
				Out_FormParams15_g170839 = Data15_g170839.FormParams;
				Out_LandParams15_g170839 = Data15_g170839.LandParams;
				Out_WindParams15_g170839 = Data15_g170839.WindParams;
				Out_PushParams15_g170839 = Data15_g170839.PushParams;
				half4 Global_AtmoParams314_g170838 = Out_AtmoParams15_g170839;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170838 = ( (Global_AtmoParams314_g170838).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170838 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170838 = staticSwitch351_g170838;
				float3 lerpResult485_g170838 = lerp( Visual_Albedo292_g170838 , temp_cast_39 , ( Dryness_GlobalMask352_g170838 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170859 = RGBToHSV( lerpResult485_g170838 );
				half3 hsvTorgb61_g170859 = HSVToRGB( half3(( hsvTorgb58_g170859.x + _DrynessShiftValue ),hsvTorgb58_g170859.y,hsvTorgb58_g170859.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170838 = hsvTorgb61_g170859;
				#else
				float3 staticSwitch499_g170838 = lerpResult485_g170838;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170858 = 2.0;
				#else
				float staticSwitch1_g170858 = 4.594794;
				#endif
				half Dryness_TexMask478_g170838 = 1.0;
				float temp_output_280_11_g170838 = Out_MultiMask4_g170840;
				half Visual_MultiMask310_g170838 = temp_output_280_11_g170838;
				float lerpResult283_g170838 = lerp( 1.0 , Visual_MultiMask310_g170838 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170838 = lerpResult283_g170838;
				float temp_output_280_15_g170838 = Out_Luminosity4_g170840;
				half Visual_Luminosity309_g170838 = temp_output_280_15_g170838;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170838 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170853 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170853 = ( _DrynessLumaRemap.y - temp_output_7_0_g170853 );
				float lerpResult295_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170854 - temp_output_7_0_g170853 ) / ( temp_output_10_0_g170853 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170838 = lerpResult295_g170838;
				TVEModelData Data15_g170860 = Data16_g170493;
				float Out_Dummy15_g170860 = 0;
				float3 Out_PositionWS15_g170860 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170860 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170860 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170860 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170860 = float3( 0,0,0 );
				float4 Out_VertexData15_g170860 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170860 = float4( 0,0,0,0 );
				Out_Dummy15_g170860 = Data15_g170860.Dummy;
				Out_PositionWS15_g170860 = Data15_g170860.PositionWS;
				Out_PositionWO15_g170860 = Data15_g170860.PositionWO;
				Out_PivotWS15_g170860 = Data15_g170860.PivotWS;
				Out_PivotWO15_g170860 = Data15_g170860.PivotWO;
				Out_NormalWS15_g170860 = Data15_g170860.NormalWS;
				Out_ViewDirWS15_g170860 = Data15_g170860.ViewDirWS;
				Out_VertexData15_g170860 = Data15_g170860.VertexData;
				Out_BoundsData15_g170860 = Data15_g170860.BoundsData;
				half4 Model_VertexMasks386_g170838 = Out_VertexData15_g170860;
				float4 break375_g170838 = Model_VertexMasks386_g170838;
				float4 break33_g170847 = _dryness_vert_mode;
				float temp_output_30_0_g170847 = ( break375_g170838.x * break33_g170847.x );
				float temp_output_29_0_g170847 = ( break375_g170838.y * break33_g170847.y );
				float temp_output_31_0_g170847 = ( break375_g170838.z * break33_g170847.z );
				float temp_output_28_0_g170847 = ( temp_output_30_0_g170847 + temp_output_29_0_g170847 + temp_output_31_0_g170847 + ( break375_g170838.w * break33_g170847.w ) );
				float clampResult17_g170848 = clamp( temp_output_28_0_g170847 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170849 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170849 = ( _DrynessMeshRemap.y - temp_output_7_0_g170849 );
				float lerpResult452_g170838 = lerp( 1.0 , saturate( ( ( clampResult17_g170848 - temp_output_7_0_g170849 ) / ( temp_output_10_0_g170849 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170838;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				float temp_output_448_0_g170838 = staticSwitch14_g170855;
				half Dryness_VertMask378_g170838 = temp_output_448_0_g170838;
				half Dryness_MaskNoise291_g170838 = 1.0;
				half Custom_Mask411_g170838 = 1.0;
				float temp_output_7_0_g170852 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170852 = ( _DrynessBlendRemap.y - temp_output_7_0_g170852 );
				half Dryness_Mask329_g170838 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170838 * Dryness_MultiMask302_g170838 * Dryness_LumaMask301_g170838 * Dryness_VertMask378_g170838 * Dryness_MaskNoise291_g170838 * Dryness_GlobalMask352_g170838 * Custom_Mask411_g170838 ) - temp_output_7_0_g170852 ) / ( temp_output_10_0_g170852 + 0.0001 ) ) );
				float3 lerpResult336_g170838 = lerp( Visual_Albedo292_g170838 , ( staticSwitch499_g170838 * staticSwitch1_g170858 * (_DrynessColor).rgb ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170838 = lerpResult336_g170838;
				#else
				float3 staticSwitch356_g170838 = Visual_Albedo292_g170838;
				#endif
				half3 Final_Albedo331_g170838 = staticSwitch356_g170838;
				float3 In_Albedo3_g170841 = Final_Albedo331_g170838;
				float3 In_AlbedoRaw3_g170841 = Out_AlbedoRaw4_g170840;
				float2 In_NormalTS3_g170841 = Out_NormalTS4_g170840;
				float3 In_NormalWS3_g170841 = Out_NormalWS4_g170840;
				half4 Visual_Shader415_g170838 = Out_Shader4_g170840;
				float4 break438_g170838 = Visual_Shader415_g170838;
				float4 appendResult439_g170838 = (float4(break438_g170838.x , break438_g170838.y , break438_g170838.z , ( break438_g170838.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170838 = lerp( Visual_Shader415_g170838 , appendResult439_g170838 , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170838 = lerpResult427_g170838;
				#else
				float4 staticSwitch426_g170838 = Visual_Shader415_g170838;
				#endif
				half4 Final_Shader433_g170838 = staticSwitch426_g170838;
				float4 In_Shader3_g170841 = Final_Shader433_g170838;
				float4 In_Emissive3_g170841 = Out_Emissive4_g170840;
				float In_Grayscale3_g170841 = temp_output_280_12_g170838;
				float In_Luminosity3_g170841 = temp_output_280_15_g170838;
				float In_MultiMask3_g170841 = temp_output_280_11_g170838;
				float In_AlphaClip3_g170841 = Out_AlphaClip4_g170840;
				float In_AlphaFade3_g170841 = Out_AlphaFade4_g170840;
				float3 In_Translucency3_g170841 = Out_Translucency4_g170840;
				half Visual_Transmission416_g170838 = Out_Transmission4_g170840;
				float lerpResult421_g170838 = lerp( Visual_Transmission416_g170838 , ( Visual_Transmission416_g170838 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170838);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170838 = lerpResult421_g170838;
				#else
				float staticSwitch418_g170838 = Visual_Transmission416_g170838;
				#endif
				half Final_Transmission425_g170838 = staticSwitch418_g170838;
				float In_Transmission3_g170841 = Final_Transmission425_g170838;
				float In_Thickness3_g170841 = Out_Thickness4_g170840;
				float In_Diffusion3_g170841 = Out_Diffusion4_g170840;
				Data3_g170841.Dummy = In_Dummy3_g170841;
				Data3_g170841.Albedo = In_Albedo3_g170841;
				Data3_g170841.AlbedoRaw = In_AlbedoRaw3_g170841;
				Data3_g170841.NormalTS = In_NormalTS3_g170841;
				Data3_g170841.NormalWS = In_NormalWS3_g170841;
				Data3_g170841.Shader = In_Shader3_g170841;
				Data3_g170841.Emissive= In_Emissive3_g170841;
				Data3_g170841.MultiMask = In_MultiMask3_g170841;
				Data3_g170841.Grayscale = In_Grayscale3_g170841;
				Data3_g170841.Luminosity = In_Luminosity3_g170841;
				Data3_g170841.AlphaClip = In_AlphaClip3_g170841;
				Data3_g170841.AlphaFade = In_AlphaFade3_g170841;
				Data3_g170841.Translucency = In_Translucency3_g170841;
				Data3_g170841.Transmission = In_Transmission3_g170841;
				Data3_g170841.Thickness = In_Thickness3_g170841;
				Data3_g170841.Diffusion = In_Diffusion3_g170841;
				TVEVisualData Data4_g170862 = Data3_g170841;
				float Out_Dummy4_g170862 = 0;
				float3 Out_Albedo4_g170862 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170862 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170862 = float2( 0,0 );
				float3 Out_NormalWS4_g170862 = float3( 0,0,0 );
				float4 Out_Shader4_g170862 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170862 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170862 = 0;
				float Out_Grayscale4_g170862 = 0;
				float Out_Luminosity4_g170862 = 0;
				float Out_AlphaClip4_g170862 = 0;
				float Out_AlphaFade4_g170862 = 0;
				float3 Out_Translucency4_g170862 = float3( 0,0,0 );
				float Out_Transmission4_g170862 = 0;
				float Out_Thickness4_g170862 = 0;
				float Out_Diffusion4_g170862 = 0;
				Out_Dummy4_g170862 = Data4_g170862.Dummy;
				Out_Albedo4_g170862 = Data4_g170862.Albedo;
				Out_AlbedoRaw4_g170862 = Data4_g170862.AlbedoRaw;
				Out_NormalTS4_g170862 = Data4_g170862.NormalTS;
				Out_NormalWS4_g170862 = Data4_g170862.NormalWS;
				Out_Shader4_g170862 = Data4_g170862.Shader;
				Out_Emissive4_g170862= Data4_g170862.Emissive;
				Out_MultiMask4_g170862 = Data4_g170862.MultiMask;
				Out_Grayscale4_g170862 = Data4_g170862.Grayscale;
				Out_Luminosity4_g170862= Data4_g170862.Luminosity;
				Out_AlphaClip4_g170862 = Data4_g170862.AlphaClip;
				Out_AlphaFade4_g170862 = Data4_g170862.AlphaFade;
				Out_Translucency4_g170862 = Data4_g170862.Translucency;
				Out_Transmission4_g170862 = Data4_g170862.Transmission;
				Out_Thickness4_g170862 = Data4_g170862.Thickness;
				Out_Diffusion4_g170862 = Data4_g170862.Diffusion;
				half3 Visual_Albedo127_g170861 = Out_Albedo4_g170862;
				float4 vertexToFrag24_g170813 = IN.ase_texcoord9;
				half4 Interp_Data1269 = vertexToFrag24_g170813;
				float clampResult208_g170861 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170861 = ( Visual_Albedo127_g170861 + ( ( Visual_Albedo127_g170861 * Visual_Albedo127_g170861 * 200.0 * _motion_highlight_color ) * clampResult208_g170861 ) );
				#else
				float3 staticSwitch214_g170861 = Visual_Albedo127_g170861;
				#endif
				half3 Final_Albedo160_g170861 = staticSwitch214_g170861;
				float3 In_Albedo3_g170863 = Final_Albedo160_g170861;
				float3 In_AlbedoRaw3_g170863 = Out_AlbedoRaw4_g170862;
				float2 In_NormalTS3_g170863 = Out_NormalTS4_g170862;
				float3 In_NormalWS3_g170863 = Out_NormalWS4_g170862;
				float4 In_Shader3_g170863 = Out_Shader4_g170862;
				float4 In_Emissive3_g170863 = Out_Emissive4_g170862;
				float In_Grayscale3_g170863 = Out_Grayscale4_g170862;
				float In_Luminosity3_g170863 = Out_Luminosity4_g170862;
				float In_MultiMask3_g170863 = Out_MultiMask4_g170862;
				float In_AlphaClip3_g170863 = Out_AlphaClip4_g170862;
				float In_AlphaFade3_g170863 = Out_AlphaFade4_g170862;
				float3 In_Translucency3_g170863 = Out_Translucency4_g170862;
				float In_Transmission3_g170863 = Out_Transmission4_g170862;
				float In_Thickness3_g170863 = Out_Thickness4_g170862;
				float In_Diffusion3_g170863 = Out_Diffusion4_g170862;
				Data3_g170863.Dummy = In_Dummy3_g170863;
				Data3_g170863.Albedo = In_Albedo3_g170863;
				Data3_g170863.AlbedoRaw = In_AlbedoRaw3_g170863;
				Data3_g170863.NormalTS = In_NormalTS3_g170863;
				Data3_g170863.NormalWS = In_NormalWS3_g170863;
				Data3_g170863.Shader = In_Shader3_g170863;
				Data3_g170863.Emissive= In_Emissive3_g170863;
				Data3_g170863.MultiMask = In_MultiMask3_g170863;
				Data3_g170863.Grayscale = In_Grayscale3_g170863;
				Data3_g170863.Luminosity = In_Luminosity3_g170863;
				Data3_g170863.AlphaClip = In_AlphaClip3_g170863;
				Data3_g170863.AlphaFade = In_AlphaFade3_g170863;
				Data3_g170863.Translucency = In_Translucency3_g170863;
				Data3_g170863.Transmission = In_Transmission3_g170863;
				Data3_g170863.Thickness = In_Thickness3_g170863;
				Data3_g170863.Diffusion = In_Diffusion3_g170863;
				TVEVisualData Data4_g170865 = Data3_g170863;
				float Out_Dummy4_g170865 = 0;
				float3 Out_Albedo4_g170865 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170865 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170865 = float2( 0,0 );
				float3 Out_NormalWS4_g170865 = float3( 0,0,0 );
				float4 Out_Shader4_g170865 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170865 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170865 = 0;
				float Out_Grayscale4_g170865 = 0;
				float Out_Luminosity4_g170865 = 0;
				float Out_AlphaClip4_g170865 = 0;
				float Out_AlphaFade4_g170865 = 0;
				float3 Out_Translucency4_g170865 = float3( 0,0,0 );
				float Out_Transmission4_g170865 = 0;
				float Out_Thickness4_g170865 = 0;
				float Out_Diffusion4_g170865 = 0;
				Out_Dummy4_g170865 = Data4_g170865.Dummy;
				Out_Albedo4_g170865 = Data4_g170865.Albedo;
				Out_AlbedoRaw4_g170865 = Data4_g170865.AlbedoRaw;
				Out_NormalTS4_g170865 = Data4_g170865.NormalTS;
				Out_NormalWS4_g170865 = Data4_g170865.NormalWS;
				Out_Shader4_g170865 = Data4_g170865.Shader;
				Out_Emissive4_g170865= Data4_g170865.Emissive;
				Out_MultiMask4_g170865 = Data4_g170865.MultiMask;
				Out_Grayscale4_g170865 = Data4_g170865.Grayscale;
				Out_Luminosity4_g170865= Data4_g170865.Luminosity;
				Out_AlphaClip4_g170865 = Data4_g170865.AlphaClip;
				Out_AlphaFade4_g170865 = Data4_g170865.AlphaFade;
				Out_Translucency4_g170865 = Data4_g170865.Translucency;
				Out_Transmission4_g170865 = Data4_g170865.Transmission;
				Out_Thickness4_g170865 = Data4_g170865.Thickness;
				Out_Diffusion4_g170865 = Data4_g170865.Diffusion;
				half3 Visual_Albedo127_g170864 = Out_Albedo4_g170865;
				float3 temp_output_622_0_g170864 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170868) = _OverlayAlbedoTex;
				float localFilterTexture19_g170897 = ( 0.0 );
				SamplerState SamplerDefault19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170897 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170897 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170897 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170897 = SamplerDefault19_g170897;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170897 = SamplerDefault19_g170897;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170897 = SamplerPoint19_g170897;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170897 = SamplerLow19_g170897;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170897 = SamplerMedium19_g170897;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170897 = SamplerHigh19_g170897;
				#endif
				SamplerState Sampler238_g170868 = SS19_g170897;
				float4 temp_output_6_0_g170869 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170869 = ( temp_output_6_0_g170869 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170869 = temp_output_6_0_g170869;
				#endif
				half4 Overlay_Coords639_g170864 = staticSwitch14_g170869;
				float4 temp_output_37_0_g170868 = Overlay_Coords639_g170864;
				half4 Coords238_g170868 = temp_output_37_0_g170868;
				TVEModelData Data15_g170899 = Data16_g170493;
				float Out_Dummy15_g170899 = 0;
				float3 Out_PositionWS15_g170899 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170899 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170899 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170899 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170899 = float3( 0,0,0 );
				float4 Out_VertexData15_g170899 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170899 = float4( 0,0,0,0 );
				Out_Dummy15_g170899 = Data15_g170899.Dummy;
				Out_PositionWS15_g170899 = Data15_g170899.PositionWS;
				Out_PositionWO15_g170899 = Data15_g170899.PositionWO;
				Out_PivotWS15_g170899 = Data15_g170899.PivotWS;
				Out_PivotWO15_g170899 = Data15_g170899.PivotWO;
				Out_NormalWS15_g170899 = Data15_g170899.NormalWS;
				Out_ViewDirWS15_g170899 = Data15_g170899.ViewDirWS;
				Out_VertexData15_g170899 = Data15_g170899.VertexData;
				Out_BoundsData15_g170899 = Data15_g170899.BoundsData;
				half3 Model_PositionWO602_g170864 = Out_PositionWO15_g170899;
				float3 temp_output_279_0_g170868 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170868 = temp_output_279_0_g170868;
				half4 localSamplePlanar2D238_g170868 = SamplePlanar2D( Texture238_g170868 , Sampler238_g170868 , Coords238_g170868 , WorldPosition238_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170868 = SS19_g170897;
				half4 Coords246_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition246_g170868 = temp_output_279_0_g170868;
				half3 Model_NormalWS712_g170864 = Out_NormalWS15_g170899;
				float3 temp_output_280_0_g170868 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170868 = temp_output_280_0_g170868;
				half4 localSamplePlanar3D246_g170868 = SamplePlanar3D( Texture246_g170868 , Sampler246_g170868 , Coords246_g170868 , WorldPosition246_g170868 , WorldNormal246_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170868 = SS19_g170897;
				float4 Coords234_g170868 = temp_output_37_0_g170868;
				float3 WorldPosition234_g170868 = temp_output_279_0_g170868;
				float4 localSampleStochastic2D234_g170868 = SampleStochastic2D( Texture234_g170868 , Sampler234_g170868 , Coords234_g170868 , WorldPosition234_g170868 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170868) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170868 = SS19_g170897;
				half4 Coords263_g170868 = temp_output_37_0_g170868;
				half3 WorldPosition263_g170868 = temp_output_279_0_g170868;
				half3 WorldNormal263_g170868 = temp_output_280_0_g170868;
				half4 localSampleStochastic3D263_g170868 = SampleStochastic3D( Texture263_g170868 , Sampler263_g170868 , Coords263_g170868 , WorldPosition263_g170868 , WorldNormal263_g170868 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170864 = localSamplePlanar3D246_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170864 = localSampleStochastic2D234_g170868;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170864 = localSampleStochastic3D263_g170868;
				#else
				float4 staticSwitch676_g170864 = localSamplePlanar2D238_g170868;
				#endif
				half3 Overlay_Albedo526_g170864 = (staticSwitch676_g170864).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170864 = ( temp_output_622_0_g170864 * Overlay_Albedo526_g170864 );
				#else
				float3 staticSwitch578_g170864 = temp_output_622_0_g170864;
				#endif
				float3 temp_output_6_0_g170875 = staticSwitch578_g170864;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170875 = ( temp_output_6_0_g170875 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170875 = temp_output_6_0_g170875;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170872) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170872 = sampler_Linear_Repeat;
				float4 appendResult863_g170864 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170872 = appendResult863_g170864;
				half4 Coords246_g170872 = temp_output_37_0_g170872;
				float3 temp_output_279_0_g170872 = Model_PositionWO602_g170864;
				half3 WorldPosition246_g170872 = temp_output_279_0_g170872;
				float3 temp_output_280_0_g170872 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170872 = temp_output_280_0_g170872;
				half4 localSamplePlanar3D246_g170872 = SamplePlanar3D( Texture246_g170872 , Sampler246_g170872 , Coords246_g170872 , WorldPosition246_g170872 , WorldNormal246_g170872 );
				half Overlay_GlitterTex854_g170864 = (localSamplePlanar3D246_g170872).x;
				half3 Model_PositionWS879_g170864 = Out_PositionWS15_g170899;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170864 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170864 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170864 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170864 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170864 = staticSwitch868_g170864;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170889) = _OverlayMaskTex;
				SamplerState Sampler276_g170889 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170890 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170890 = temp_output_6_0_g170890;
				#endif
				half4 Local_MaskCoords888_g170864 = staticSwitch14_g170890;
				float4 temp_output_37_0_g170889 = Local_MaskCoords888_g170864;
				half4 Coords276_g170889 = temp_output_37_0_g170889;
				half2 TexCoord276_g170889 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170889 = SampleMain( Texture276_g170889 , Sampler276_g170889 , Coords276_g170889 , TexCoord276_g170889 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170889) = _OverlayMaskTex;
				SamplerState Sampler275_g170889 = sampler_Linear_Repeat;
				half4 Coords275_g170889 = temp_output_37_0_g170889;
				half2 TexCoord275_g170889 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170889 = SampleExtra( Texture275_g170889 , Sampler275_g170889 , Coords275_g170889 , TexCoord275_g170889 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170864 = localSampleExtra275_g170889;
				#else
				float4 staticSwitch894_g170864 = localSampleMain276_g170889;
				#endif
				half4 Local_MaskTex887_g170864 = staticSwitch894_g170864;
				float clampResult17_g170891 = clamp( (Local_MaskTex887_g170864).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170892 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170892 = ( _OverlayMaskRemap.y - temp_output_7_0_g170892 );
				float lerpResult900_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170891 - temp_output_7_0_g170892 ) / ( temp_output_10_0_g170892 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170864 = lerpResult900_g170864;
				float3 temp_output_739_21_g170864 = Out_NormalWS4_g170865;
				half3 Visual_NormalWS749_g170864 = temp_output_739_21_g170864;
				float clampResult17_g170885 = clamp( saturate( (Visual_NormalWS749_g170864).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170884 = _OverlayProjRemap.x;
				float temp_output_10_0_g170884 = ( _OverlayProjRemap.y - temp_output_7_0_g170884 );
				float lerpResult842_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170885 - temp_output_7_0_g170884 ) / ( temp_output_10_0_g170884 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170864 = lerpResult842_g170864;
				float temp_output_739_15_g170864 = Out_Luminosity4_g170865;
				half Visual_Luminosity654_g170864 = temp_output_739_15_g170864;
				float clampResult17_g170887 = clamp( Visual_Luminosity654_g170864 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170886 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170886 = ( _OverlayLumaRemap.y - temp_output_7_0_g170886 );
				float lerpResult587_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170887 - temp_output_7_0_g170886 ) / ( temp_output_10_0_g170886 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170864 = lerpResult587_g170864;
				half4 Model_VertexMasks791_g170864 = Out_VertexData15_g170899;
				float4 break792_g170864 = Model_VertexMasks791_g170864;
				float4 break33_g170877 = _overlay_vert_mode;
				float temp_output_30_0_g170877 = ( break792_g170864.x * break33_g170877.x );
				float temp_output_29_0_g170877 = ( break792_g170864.y * break33_g170877.y );
				float temp_output_31_0_g170877 = ( break792_g170864.z * break33_g170877.z );
				float temp_output_28_0_g170877 = ( temp_output_30_0_g170877 + temp_output_29_0_g170877 + temp_output_31_0_g170877 + ( break792_g170864.w * break33_g170877.w ) );
				float clampResult17_g170878 = clamp( temp_output_28_0_g170877 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170881 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170881 = ( _OverlayMeshRemap.y - temp_output_7_0_g170881 );
				float lerpResult881_g170864 = lerp( 1.0 , saturate( ( ( clampResult17_g170878 - temp_output_7_0_g170881 ) / ( temp_output_10_0_g170881 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170888 = lerpResult881_g170864;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float temp_output_831_0_g170864 = staticSwitch14_g170888;
				half Overlay_VertMask801_g170864 = temp_output_831_0_g170864;
				half Overlay_MaskNoise427_g170864 = 1.0;
				TVEGlobalData Data15_g170866 = Data204_g170494;
				float Out_Dummy15_g170866 = 0;
				float4 Out_CoatParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170866 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170866 = float4( 0,0,0,0 );
				Out_Dummy15_g170866 = Data15_g170866.Dummy;
				Out_CoatParams15_g170866 = Data15_g170866.CoatParams;
				Out_PaintParams15_g170866 = Data15_g170866.PaintParams;
				Out_GlowParams15_g170866 = Data15_g170866.GlowParams;
				Out_AtmoParams15_g170866= Data15_g170866.AtmoParams;
				Out_FadeParams15_g170866= Data15_g170866.FadeParams;
				Out_FormParams15_g170866 = Data15_g170866.FormParams;
				Out_LandParams15_g170866 = Data15_g170866.LandParams;
				Out_WindParams15_g170866 = Data15_g170866.WindParams;
				Out_PushParams15_g170866 = Data15_g170866.PushParams;
				half4 Global_AtmoParams516_g170864 = Out_AtmoParams15_g170866;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170864 = ( (Global_AtmoParams516_g170864).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170864 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170864 = staticSwitch705_g170864;
				half Custom_Mask646_g170864 = 1.0;
				float temp_output_7_0_g170893 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170893 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170893 );
				half Overlay_Mask494_g170864 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170864 * Overlay_MaskProj457_g170864 * Overlay_MaskLuma438_g170864 * Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 * Custom_Mask646_g170864 ) - temp_output_7_0_g170893 ) / ( temp_output_10_0_g170893 + 0.0001 ) ) );
				float3 lerpResult467_g170864 = lerp( Visual_Albedo127_g170864 , ( staticSwitch14_g170875 + Overlay_GlitterColor865_g170864 ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170864 = lerpResult467_g170864;
				#else
				float3 staticSwitch577_g170864 = Visual_Albedo127_g170864;
				#endif
				half3 Final_Albedo493_g170864 = staticSwitch577_g170864;
				float3 In_Albedo3_g170867 = Final_Albedo493_g170864;
				float3 In_AlbedoRaw3_g170867 = Out_AlbedoRaw4_g170865;
				half2 Visual_NormalTS535_g170864 = Out_NormalTS4_g170865;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170870) = _OverlayNormalTex;
				float localFilterTexture29_g170898 = ( 0.0 );
				SamplerState SamplerDefault29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170898 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170898 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170898 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170898 = SamplerDefault29_g170898;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170898 = SamplerDefault29_g170898;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170898 = SamplerPoint29_g170898;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170898 = SamplerLow29_g170898;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170898 = SamplerMedium29_g170898;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170898 = SamplerHigh29_g170898;
				#endif
				SamplerState Sampler238_g170870 = SS29_g170898;
				float4 temp_output_37_0_g170870 = Overlay_Coords639_g170864;
				half4 Coords238_g170870 = temp_output_37_0_g170870;
				float3 temp_output_279_0_g170870 = Model_PositionWO602_g170864;
				half3 WorldPosition238_g170870 = temp_output_279_0_g170870;
				half4 localSamplePlanar2D238_g170870 = SamplePlanar2D( Texture238_g170870 , Sampler238_g170870 , Coords238_g170870 , WorldPosition238_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170870) = _OverlayNormalTex;
				SamplerState Sampler246_g170870 = SS29_g170898;
				half4 Coords246_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition246_g170870 = temp_output_279_0_g170870;
				float3 temp_output_280_0_g170870 = Model_NormalWS712_g170864;
				half3 WorldNormal246_g170870 = temp_output_280_0_g170870;
				half4 localSamplePlanar3D246_g170870 = SamplePlanar3D( Texture246_g170870 , Sampler246_g170870 , Coords246_g170870 , WorldPosition246_g170870 , WorldNormal246_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170870) = _OverlayNormalTex;
				SamplerState Sampler234_g170870 = SS29_g170898;
				float4 Coords234_g170870 = temp_output_37_0_g170870;
				float3 WorldPosition234_g170870 = temp_output_279_0_g170870;
				float4 localSampleStochastic2D234_g170870 = SampleStochastic2D( Texture234_g170870 , Sampler234_g170870 , Coords234_g170870 , WorldPosition234_g170870 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170870) = _OverlayNormalTex;
				SamplerState Sampler263_g170870 = SS29_g170898;
				half4 Coords263_g170870 = temp_output_37_0_g170870;
				half3 WorldPosition263_g170870 = temp_output_279_0_g170870;
				half3 WorldNormal263_g170870 = temp_output_280_0_g170870;
				half4 localSampleStochastic3D263_g170870 = SampleStochastic3D( Texture263_g170870 , Sampler263_g170870 , Coords263_g170870 , WorldPosition263_g170870 , WorldNormal263_g170870 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170864 = localSamplePlanar3D246_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170864 = localSampleStochastic2D234_g170870;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170864 = localSampleStochastic3D263_g170870;
				#else
				float4 staticSwitch686_g170864 = localSamplePlanar2D238_g170870;
				#endif
				half4 Normal_Packed45_g170874 = staticSwitch686_g170864;
				float2 appendResult58_g170874 = (float2(( (Normal_Packed45_g170874).x * (Normal_Packed45_g170874).w ) , (Normal_Packed45_g170874).y));
				half2 Normal_Default50_g170874 = appendResult58_g170874;
				half2 Normal_ASTC41_g170874 = (Normal_Packed45_g170874).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170874 = Normal_ASTC41_g170874;
				#else
				float2 staticSwitch38_g170874 = Normal_Default50_g170874;
				#endif
				half2 Normal_NO_DTX544_g170874 = (Normal_Packed45_g170874).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170874 = Normal_NO_DTX544_g170874;
				#else
				float2 staticSwitch37_g170874 = staticSwitch38_g170874;
				#endif
				half2 Normal_Planar45_g170873 = (staticSwitch37_g170874*2.0 + -1.0);
				float2 break71_g170873 = Normal_Planar45_g170873;
				float3 appendResult72_g170873 = (float3(break71_g170873.x , 0.0 , break71_g170873.y));
				half2 Overlay_Normal528_g170864 = (mul( ase_worldToTangent, appendResult72_g170873 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170864 = Overlay_Normal528_g170864;
				#else
				float2 staticSwitch579_g170864 = Visual_NormalTS535_g170864;
				#endif
				float2 lerpResult551_g170864 = lerp( Visual_NormalTS535_g170864 , ( staticSwitch579_g170864 * _OverlayNormalValue ) , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170864 = lerpResult551_g170864;
				#else
				float2 staticSwitch583_g170864 = Visual_NormalTS535_g170864;
				#endif
				half2 Final_NormalTS499_g170864 = staticSwitch583_g170864;
				float2 In_NormalTS3_g170867 = Final_NormalTS499_g170864;
				float3 In_NormalWS3_g170867 = temp_output_739_21_g170864;
				half4 Visual_Masks536_g170864 = Out_Shader4_g170865;
				float4 appendResult585_g170864 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170864 = lerp( Visual_Masks536_g170864 , appendResult585_g170864 , Overlay_Mask494_g170864);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170864 = lerpResult584_g170864;
				#else
				float4 staticSwitch586_g170864 = Visual_Masks536_g170864;
				#endif
				half4 Final_Masks482_g170864 = staticSwitch586_g170864;
				float4 In_Shader3_g170867 = Final_Masks482_g170864;
				float4 In_Emissive3_g170867 = Out_Emissive4_g170865;
				float temp_output_739_12_g170864 = Out_Grayscale4_g170865;
				float In_Grayscale3_g170867 = temp_output_739_12_g170864;
				float In_Luminosity3_g170867 = temp_output_739_15_g170864;
				float In_MultiMask3_g170867 = Out_MultiMask4_g170865;
				float In_AlphaClip3_g170867 = Out_AlphaClip4_g170865;
				float In_AlphaFade3_g170867 = Out_AlphaFade4_g170865;
				float3 In_Translucency3_g170867 = Out_Translucency4_g170865;
				half Visual_Transmission699_g170864 = Out_Transmission4_g170865;
				float lerpResult746_g170864 = lerp( Visual_Transmission699_g170864 , ( Visual_Transmission699_g170864 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170864 * Overlay_MaskNoise427_g170864 * Overlay_MaskGlobal429_g170864 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170864 = lerpResult746_g170864;
				#else
				float staticSwitch703_g170864 = Visual_Transmission699_g170864;
				#endif
				half Final_Transmission702_g170864 = staticSwitch703_g170864;
				float In_Transmission3_g170867 = Final_Transmission702_g170864;
				float In_Thickness3_g170867 = Out_Thickness4_g170865;
				float In_Diffusion3_g170867 = Out_Diffusion4_g170865;
				Data3_g170867.Dummy = In_Dummy3_g170867;
				Data3_g170867.Albedo = In_Albedo3_g170867;
				Data3_g170867.AlbedoRaw = In_AlbedoRaw3_g170867;
				Data3_g170867.NormalTS = In_NormalTS3_g170867;
				Data3_g170867.NormalWS = In_NormalWS3_g170867;
				Data3_g170867.Shader = In_Shader3_g170867;
				Data3_g170867.Emissive= In_Emissive3_g170867;
				Data3_g170867.MultiMask = In_MultiMask3_g170867;
				Data3_g170867.Grayscale = In_Grayscale3_g170867;
				Data3_g170867.Luminosity = In_Luminosity3_g170867;
				Data3_g170867.AlphaClip = In_AlphaClip3_g170867;
				Data3_g170867.AlphaFade = In_AlphaFade3_g170867;
				Data3_g170867.Translucency = In_Translucency3_g170867;
				Data3_g170867.Transmission = In_Transmission3_g170867;
				Data3_g170867.Thickness = In_Thickness3_g170867;
				Data3_g170867.Diffusion = In_Diffusion3_g170867;
				TVEVisualData Data4_g170901 = Data3_g170867;
				float Out_Dummy4_g170901 = 0;
				float3 Out_Albedo4_g170901 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170901 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170901 = float2( 0,0 );
				float3 Out_NormalWS4_g170901 = float3( 0,0,0 );
				float4 Out_Shader4_g170901 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170901 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170901 = 0;
				float Out_Grayscale4_g170901 = 0;
				float Out_Luminosity4_g170901 = 0;
				float Out_AlphaClip4_g170901 = 0;
				float Out_AlphaFade4_g170901 = 0;
				float3 Out_Translucency4_g170901 = float3( 0,0,0 );
				float Out_Transmission4_g170901 = 0;
				float Out_Thickness4_g170901 = 0;
				float Out_Diffusion4_g170901 = 0;
				Out_Dummy4_g170901 = Data4_g170901.Dummy;
				Out_Albedo4_g170901 = Data4_g170901.Albedo;
				Out_AlbedoRaw4_g170901 = Data4_g170901.AlbedoRaw;
				Out_NormalTS4_g170901 = Data4_g170901.NormalTS;
				Out_NormalWS4_g170901 = Data4_g170901.NormalWS;
				Out_Shader4_g170901 = Data4_g170901.Shader;
				Out_Emissive4_g170901= Data4_g170901.Emissive;
				Out_MultiMask4_g170901 = Data4_g170901.MultiMask;
				Out_Grayscale4_g170901 = Data4_g170901.Grayscale;
				Out_Luminosity4_g170901= Data4_g170901.Luminosity;
				Out_AlphaClip4_g170901 = Data4_g170901.AlphaClip;
				Out_AlphaFade4_g170901 = Data4_g170901.AlphaFade;
				Out_Translucency4_g170901 = Data4_g170901.Translucency;
				Out_Transmission4_g170901 = Data4_g170901.Transmission;
				Out_Thickness4_g170901 = Data4_g170901.Thickness;
				Out_Diffusion4_g170901 = Data4_g170901.Diffusion;
				half3 Visual_Albedo127_g170900 = Out_Albedo4_g170901;
				TVEGlobalData Data15_g170906 = Data204_g170494;
				float Out_Dummy15_g170906 = 0;
				float4 Out_CoatParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170906 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170906 = float4( 0,0,0,0 );
				Out_Dummy15_g170906 = Data15_g170906.Dummy;
				Out_CoatParams15_g170906 = Data15_g170906.CoatParams;
				Out_PaintParams15_g170906 = Data15_g170906.PaintParams;
				Out_GlowParams15_g170906 = Data15_g170906.GlowParams;
				Out_AtmoParams15_g170906= Data15_g170906.AtmoParams;
				Out_FadeParams15_g170906= Data15_g170906.FadeParams;
				Out_FormParams15_g170906 = Data15_g170906.FormParams;
				Out_LandParams15_g170906 = Data15_g170906.LandParams;
				Out_WindParams15_g170906 = Data15_g170906.WindParams;
				Out_PushParams15_g170906 = Data15_g170906.PushParams;
				half4 Global_AtmoParams516_g170900 = Out_AtmoParams15_g170906;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170900 = ( (Global_AtmoParams516_g170900).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170900 = 1.0;
				#endif
				half Global_Wetness429_g170900 = staticSwitch663_g170900;
				half Wetness_Value1042_g170900 = ( _WetnessIntensityValue * Global_Wetness429_g170900 );
				TVEModelData Data15_g170914 = Data16_g170493;
				float Out_Dummy15_g170914 = 0;
				float3 Out_PositionWS15_g170914 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170914 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170914 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170914 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170914 = float3( 0,0,0 );
				float4 Out_VertexData15_g170914 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170914 = float4( 0,0,0,0 );
				Out_Dummy15_g170914 = Data15_g170914.Dummy;
				Out_PositionWS15_g170914 = Data15_g170914.PositionWS;
				Out_PositionWO15_g170914 = Data15_g170914.PositionWO;
				Out_PivotWS15_g170914 = Data15_g170914.PivotWS;
				Out_PivotWO15_g170914 = Data15_g170914.PivotWO;
				Out_NormalWS15_g170914 = Data15_g170914.NormalWS;
				Out_ViewDirWS15_g170914 = Data15_g170914.ViewDirWS;
				Out_VertexData15_g170914 = Data15_g170914.VertexData;
				Out_BoundsData15_g170914 = Data15_g170914.BoundsData;
				half4 Model_VertexData1030_g170900 = Out_VertexData15_g170914;
				float4 break1019_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170919 = _wetness_vert_mode;
				float temp_output_30_0_g170919 = ( break1019_g170900.x * break33_g170919.x );
				float temp_output_29_0_g170919 = ( break1019_g170900.y * break33_g170919.y );
				float temp_output_31_0_g170919 = ( break1019_g170900.z * break33_g170919.z );
				float temp_output_28_0_g170919 = ( temp_output_30_0_g170919 + temp_output_29_0_g170919 + temp_output_31_0_g170919 + ( break1019_g170900.w * break33_g170919.w ) );
				float clampResult17_g170917 = clamp( temp_output_28_0_g170919 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170918 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170918 = ( _WetnessMeshRemap.y - temp_output_7_0_g170918 );
				float lerpResult1026_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170917 - temp_output_7_0_g170918 ) / ( temp_output_10_0_g170918 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170920 = lerpResult1026_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170920 = ( temp_output_6_0_g170920 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170920 = temp_output_6_0_g170920;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170900 = staticSwitch14_g170920;
				#else
				float staticSwitch1110_g170900 = 1.0;
				#endif
				half Wetness_VertMask1024_g170900 = staticSwitch1110_g170900;
				float temp_output_1043_0_g170900 = ( Wetness_Value1042_g170900 * Wetness_VertMask1024_g170900 );
				half Wetness_Mask866_g170900 = temp_output_1043_0_g170900;
				float4 break1083_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170923 = _wetness_water_vert_mode;
				float temp_output_30_0_g170923 = ( break1083_g170900.x * break33_g170923.x );
				float temp_output_29_0_g170923 = ( break1083_g170900.y * break33_g170923.y );
				float temp_output_31_0_g170923 = ( break1083_g170900.z * break33_g170923.z );
				float temp_output_28_0_g170923 = ( temp_output_30_0_g170923 + temp_output_29_0_g170923 + temp_output_31_0_g170923 + ( break1083_g170900.w * break33_g170923.w ) );
				float clampResult17_g170921 = clamp( temp_output_28_0_g170923 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170922 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170922 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170922 );
				float lerpResult1089_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170921 - temp_output_7_0_g170922 ) / ( temp_output_10_0_g170922 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170924 = lerpResult1089_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170924 = ( temp_output_6_0_g170924 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170924 = temp_output_6_0_g170924;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170900 = staticSwitch14_g170924;
				#else
				float staticSwitch1113_g170900 = 1.0;
				#endif
				half Water_VertMask1094_g170900 = staticSwitch1113_g170900;
				half4 Visual_Masks536_g170900 = Out_Shader4_g170901;
				float lerpResult1013_g170900 = lerp( 1.0 , (Visual_Masks536_g170900).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170900 = lerpResult1013_g170900;
				float clampResult17_g170915 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170900 * Water_VertMask1094_g170900 ) - Water_HeightMask782_g170900 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170916 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170916 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170916 );
				half3 Model_NormalWS798_g170900 = Out_NormalWS15_g170914;
				float temp_output_786_0_g170900 = saturate( (Model_NormalWS798_g170900).y );
				half Wetness_ProjMask790_g170900 = temp_output_786_0_g170900;
				half Water_Mask760_g170900 = ( saturate( ( ( clampResult17_g170915 - temp_output_7_0_g170916 ) / ( temp_output_10_0_g170916 + 0.0001 ) ) ) * Wetness_ProjMask790_g170900 );
				float3 lerpResult918_g170900 = lerp( Visual_Albedo127_g170900 , ( Visual_Albedo127_g170900 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170900 = lerpResult918_g170900;
				#else
				float3 staticSwitch946_g170900 = Visual_Albedo127_g170900;
				#endif
				float3 lerpResult768_g170900 = lerp( staticSwitch946_g170900 , ( staticSwitch946_g170900 * staticSwitch946_g170900 ) , _WetnessContrastValue);
				float3 lerpResult651_g170900 = lerp( Visual_Albedo127_g170900 , lerpResult768_g170900 , Wetness_Mask866_g170900);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170900 = lerpResult651_g170900;
				#else
				float3 staticSwitch577_g170900 = Visual_Albedo127_g170900;
				#endif
				half3 Final_Albedo493_g170900 = staticSwitch577_g170900;
				float3 In_Albedo3_g170902 = Final_Albedo493_g170900;
				float3 In_AlbedoRaw3_g170902 = Out_AlbedoRaw4_g170901;
				half2 Visual_Normal535_g170900 = Out_NormalTS4_g170901;
				float lerpResult877_g170900 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170900 = ( Visual_Normal535_g170900 * lerpResult877_g170900 );
				#else
				float2 staticSwitch957_g170900 = Visual_Normal535_g170900;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170912) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170912 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170900 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170912 = appendResult924_g170900;
				half4 Coords238_g170912 = temp_output_37_0_g170912;
				half3 Model_PositionWO602_g170900 = Out_PositionWO15_g170914;
				float3 temp_output_279_0_g170912 = Model_PositionWO602_g170900;
				half3 WorldPosition238_g170912 = temp_output_279_0_g170912;
				half4 localSamplePlanar2D238_g170912 = SamplePlanar2D( Texture238_g170912 , Sampler238_g170912 , Coords238_g170912 , WorldPosition238_g170912 );
				float4 temp_output_1010_0_g170900 = localSamplePlanar2D238_g170912;
				half2 Rain_DropsNormal919_g170900 = (temp_output_1010_0_g170900).zw;
				float2 temp_output_903_0_g170900 = (Rain_DropsNormal919_g170900*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170900 = (temp_output_1010_0_g170900).xy;
				float2 lerpResult904_g170900 = lerp( temp_output_903_0_g170900 , (Rain_RingsNormal713_g170900*2.0 + -1.0) , ( Water_Mask760_g170900 * Water_Mask760_g170900 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170900 = lerpResult904_g170900;
				#else
				float2 staticSwitch960_g170900 = temp_output_903_0_g170900;
				#endif
				half2 Rain_Drops1002_g170900 = ( staticSwitch960_g170900 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170900 = Out_PositionWS15_g170914;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170900 = ( (Global_AtmoParams516_g170900).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170900 = 1.0;
				#endif
				half Global_Rain955_g170900 = staticSwitch949_g170900;
				half Rain_Value1067_g170900 = Global_Rain955_g170900;
				float4 break1097_g170900 = Model_VertexData1030_g170900;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170900.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170900.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170900.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170900.w * break33_g170927.w ) );
				float clampResult17_g170925 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170926 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170926 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170926 );
				float lerpResult1100_g170900 = lerp( 1.0 , saturate( ( ( clampResult17_g170925 - temp_output_7_0_g170926 ) / ( temp_output_10_0_g170926 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170900;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170900 = staticSwitch14_g170928;
				#else
				float staticSwitch1115_g170900 = 1.0;
				#endif
				half Rain_VertMask1108_g170900 = staticSwitch1115_g170900;
				half Rain_Mask999_g170900 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170900 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170900 * Rain_VertMask1108_g170900 );
				half2 Normal_Planar45_g170911 = ( Rain_Drops1002_g170900 * Rain_Mask999_g170900 * Wetness_ProjMask790_g170900 );
				float2 break71_g170911 = Normal_Planar45_g170911;
				float3 appendResult72_g170911 = (float3(break71_g170911.x , 0.0 , break71_g170911.y));
				half2 Wetness_Normal526_g170900 = (mul( ase_worldToTangent, appendResult72_g170911 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170900 = Wetness_Normal526_g170900;
				#else
				float2 staticSwitch583_g170900 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170900 = ( staticSwitch957_g170900 + staticSwitch583_g170900 );
				#else
				float2 staticSwitch774_g170900 = Visual_Normal535_g170900;
				#endif
				half2 Final_Normal499_g170900 = staticSwitch774_g170900;
				float2 In_NormalTS3_g170902 = Final_Normal499_g170900;
				float3 In_NormalWS3_g170902 = Out_NormalWS4_g170901;
				float4 break658_g170900 = Visual_Masks536_g170900;
				float temp_output_935_0_g170900 = ( Wetness_Mask866_g170900 * _WetnessSmoothnessValue );
				float lerpResult941_g170900 = lerp( temp_output_935_0_g170900 , 2.0 , Water_Mask760_g170900);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170900 = lerpResult941_g170900;
				#else
				float staticSwitch959_g170900 = temp_output_935_0_g170900;
				#endif
				float4 appendResult661_g170900 = (float4(break658_g170900.x , break658_g170900.y , break658_g170900.z , saturate( ( break658_g170900.w + staticSwitch959_g170900 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170900 = appendResult661_g170900;
				#else
				float4 staticSwitch586_g170900 = Visual_Masks536_g170900;
				#endif
				half4 Final_Masks482_g170900 = staticSwitch586_g170900;
				float4 In_Shader3_g170902 = Final_Masks482_g170900;
				float4 In_Emissive3_g170902 = Out_Emissive4_g170901;
				float In_Grayscale3_g170902 = Out_Grayscale4_g170901;
				float In_Luminosity3_g170902 = Out_Luminosity4_g170901;
				float In_MultiMask3_g170902 = Out_MultiMask4_g170901;
				float In_AlphaClip3_g170902 = Out_AlphaClip4_g170901;
				float In_AlphaFade3_g170902 = Out_AlphaFade4_g170901;
				float3 In_Translucency3_g170902 = Out_Translucency4_g170901;
				float In_Transmission3_g170902 = Out_Transmission4_g170901;
				float In_Thickness3_g170902 = Out_Thickness4_g170901;
				float In_Diffusion3_g170902 = Out_Diffusion4_g170901;
				Data3_g170902.Dummy = In_Dummy3_g170902;
				Data3_g170902.Albedo = In_Albedo3_g170902;
				Data3_g170902.AlbedoRaw = In_AlbedoRaw3_g170902;
				Data3_g170902.NormalTS = In_NormalTS3_g170902;
				Data3_g170902.NormalWS = In_NormalWS3_g170902;
				Data3_g170902.Shader = In_Shader3_g170902;
				Data3_g170902.Emissive= In_Emissive3_g170902;
				Data3_g170902.MultiMask = In_MultiMask3_g170902;
				Data3_g170902.Grayscale = In_Grayscale3_g170902;
				Data3_g170902.Luminosity = In_Luminosity3_g170902;
				Data3_g170902.AlphaClip = In_AlphaClip3_g170902;
				Data3_g170902.AlphaFade = In_AlphaFade3_g170902;
				Data3_g170902.Translucency = In_Translucency3_g170902;
				Data3_g170902.Transmission = In_Transmission3_g170902;
				Data3_g170902.Thickness = In_Thickness3_g170902;
				Data3_g170902.Diffusion = In_Diffusion3_g170902;
				TVEVisualData Data4_g170940 = Data3_g170902;
				float Out_Dummy4_g170940 = 0;
				float3 Out_Albedo4_g170940 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170940 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170940 = float2( 0,0 );
				float3 Out_NormalWS4_g170940 = float3( 0,0,0 );
				float4 Out_Shader4_g170940 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170940 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170940 = 0;
				float Out_Grayscale4_g170940 = 0;
				float Out_Luminosity4_g170940 = 0;
				float Out_AlphaClip4_g170940 = 0;
				float Out_AlphaFade4_g170940 = 0;
				float3 Out_Translucency4_g170940 = float3( 0,0,0 );
				float Out_Transmission4_g170940 = 0;
				float Out_Thickness4_g170940 = 0;
				float Out_Diffusion4_g170940 = 0;
				Out_Dummy4_g170940 = Data4_g170940.Dummy;
				Out_Albedo4_g170940 = Data4_g170940.Albedo;
				Out_AlbedoRaw4_g170940 = Data4_g170940.AlbedoRaw;
				Out_NormalTS4_g170940 = Data4_g170940.NormalTS;
				Out_NormalWS4_g170940 = Data4_g170940.NormalWS;
				Out_Shader4_g170940 = Data4_g170940.Shader;
				Out_Emissive4_g170940= Data4_g170940.Emissive;
				Out_MultiMask4_g170940 = Data4_g170940.MultiMask;
				Out_Grayscale4_g170940 = Data4_g170940.Grayscale;
				Out_Luminosity4_g170940= Data4_g170940.Luminosity;
				Out_AlphaClip4_g170940 = Data4_g170940.AlphaClip;
				Out_AlphaFade4_g170940 = Data4_g170940.AlphaFade;
				Out_Translucency4_g170940 = Data4_g170940.Translucency;
				Out_Transmission4_g170940 = Data4_g170940.Transmission;
				Out_Thickness4_g170940 = Data4_g170940.Thickness;
				Out_Diffusion4_g170940 = Data4_g170940.Diffusion;
				float3 In_Albedo3_g170930 = Out_Albedo4_g170940;
				float3 In_AlbedoRaw3_g170930 = Out_AlbedoRaw4_g170940;
				float2 In_NormalTS3_g170930 = Out_NormalTS4_g170940;
				float3 In_NormalWS3_g170930 = Out_NormalWS4_g170940;
				float4 In_Shader3_g170930 = Out_Shader4_g170940;
				float4 In_Emissive3_g170930 = Out_Emissive4_g170940;
				float In_Grayscale3_g170930 = Out_Grayscale4_g170940;
				float In_Luminosity3_g170930 = Out_Luminosity4_g170940;
				float temp_output_836_11_g170929 = Out_MultiMask4_g170940;
				float In_MultiMask3_g170930 = temp_output_836_11_g170929;
				half Visual_AlphaClip667_g170929 = Out_AlphaClip4_g170940;
				TVEGlobalData Data15_g170939 = Data204_g170494;
				float Out_Dummy15_g170939 = 0;
				float4 Out_CoatParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170939 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170939 = float4( 0,0,0,0 );
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_CoatParams15_g170939 = Data15_g170939.CoatParams;
				Out_PaintParams15_g170939 = Data15_g170939.PaintParams;
				Out_GlowParams15_g170939 = Data15_g170939.GlowParams;
				Out_AtmoParams15_g170939= Data15_g170939.AtmoParams;
				Out_FadeParams15_g170939= Data15_g170939.FadeParams;
				Out_FormParams15_g170939 = Data15_g170939.FormParams;
				Out_LandParams15_g170939 = Data15_g170939.LandParams;
				Out_WindParams15_g170939 = Data15_g170939.WindParams;
				Out_PushParams15_g170939 = Data15_g170939.PushParams;
				half4 Global_FadeParams516_g170929 = Out_FadeParams15_g170939;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170929 = saturate( (Global_FadeParams516_g170929).w );
				#else
				float staticSwitch663_g170929 = 1.0;
				#endif
				half Local_GlobalMask429_g170929 = staticSwitch663_g170929;
				float lerpResult811_g170929 = lerp( 1.0 , Visual_AlphaClip667_g170929 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170929 = lerpResult811_g170929;
				TVEModelData Data15_g170941 = Data16_g170493;
				float Out_Dummy15_g170941 = 0;
				float3 Out_PositionWS15_g170941 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170941 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170941 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170941 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170941 = float3( 0,0,0 );
				float4 Out_VertexData15_g170941 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170941 = float4( 0,0,0,0 );
				Out_Dummy15_g170941 = Data15_g170941.Dummy;
				Out_PositionWS15_g170941 = Data15_g170941.PositionWS;
				Out_PositionWO15_g170941 = Data15_g170941.PositionWO;
				Out_PivotWS15_g170941 = Data15_g170941.PivotWS;
				Out_PivotWO15_g170941 = Data15_g170941.PivotWO;
				Out_NormalWS15_g170941 = Data15_g170941.NormalWS;
				Out_ViewDirWS15_g170941 = Data15_g170941.ViewDirWS;
				Out_VertexData15_g170941 = Data15_g170941.VertexData;
				Out_BoundsData15_g170941 = Data15_g170941.BoundsData;
				half3 Model_PositionWO602_g170929 = Out_PositionWO15_g170941;
				float4 tex3DNode60_g170933 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170929 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170929 = lerp( 1.0 , tex3DNode60_g170933.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170929 = lerpResult673_g170929;
				half4 Model_VertexMasks752_g170929 = Out_VertexData15_g170941;
				float4 break755_g170929 = Model_VertexMasks752_g170929;
				float4 break33_g170931 = _cutout_vert_mode;
				float temp_output_30_0_g170931 = ( break755_g170929.x * break33_g170931.x );
				float temp_output_29_0_g170931 = ( break755_g170929.y * break33_g170931.y );
				float temp_output_31_0_g170931 = ( break755_g170929.z * break33_g170931.z );
				float temp_output_28_0_g170931 = ( temp_output_30_0_g170931 + temp_output_29_0_g170931 + temp_output_31_0_g170931 + ( break755_g170929.w * break33_g170931.w ) );
				float clampResult17_g170932 = clamp( temp_output_28_0_g170931 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170935 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170935 = ( _CutoutMeshRemap.y - temp_output_7_0_g170935 );
				float lerpResult820_g170929 = lerp( 1.0 , saturate( ( ( clampResult17_g170932 - temp_output_7_0_g170935 ) / ( temp_output_10_0_g170935 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170936 = lerpResult820_g170929;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170936 = ( temp_output_6_0_g170936 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170936 = temp_output_6_0_g170936;
				#endif
				float temp_output_801_0_g170929 = staticSwitch14_g170936;
				half Local_VertMask766_g170929 = temp_output_801_0_g170929;
				half Visual_MultiMask671_g170929 = temp_output_836_11_g170929;
				float lerpResult683_g170929 = lerp( 1.0 , Visual_MultiMask671_g170929 , _CutoutMultiValue);
				half Local_MultiMask685_g170929 = lerpResult683_g170929;
				float lerpResult728_g170929 = lerp( Visual_AlphaClip667_g170929 , min( Visual_AlphaClip667_g170929 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170929 ) - ( Local_AlphaMask814_g170929 * Local_NoiseMask678_g170929 * Local_VertMask766_g170929 ) ) ) ) , Local_MultiMask685_g170929);
				half Local_AlphaClip784_g170929 = lerpResult728_g170929;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170929 = Local_AlphaClip784_g170929;
				#else
				float staticSwitch577_g170929 = Visual_AlphaClip667_g170929;
				#endif
				half Final_AlphaClip795_g170929 = staticSwitch577_g170929;
				float In_AlphaClip3_g170930 = Final_AlphaClip795_g170929;
				float In_AlphaFade3_g170930 = Out_AlphaFade4_g170940;
				float3 In_Translucency3_g170930 = Out_Translucency4_g170940;
				float In_Transmission3_g170930 = Out_Transmission4_g170940;
				float In_Thickness3_g170930 = Out_Thickness4_g170940;
				float In_Diffusion3_g170930 = Out_Diffusion4_g170940;
				Data3_g170930.Dummy = In_Dummy3_g170930;
				Data3_g170930.Albedo = In_Albedo3_g170930;
				Data3_g170930.AlbedoRaw = In_AlbedoRaw3_g170930;
				Data3_g170930.NormalTS = In_NormalTS3_g170930;
				Data3_g170930.NormalWS = In_NormalWS3_g170930;
				Data3_g170930.Shader = In_Shader3_g170930;
				Data3_g170930.Emissive= In_Emissive3_g170930;
				Data3_g170930.MultiMask = In_MultiMask3_g170930;
				Data3_g170930.Grayscale = In_Grayscale3_g170930;
				Data3_g170930.Luminosity = In_Luminosity3_g170930;
				Data3_g170930.AlphaClip = In_AlphaClip3_g170930;
				Data3_g170930.AlphaFade = In_AlphaFade3_g170930;
				Data3_g170930.Translucency = In_Translucency3_g170930;
				Data3_g170930.Transmission = In_Transmission3_g170930;
				Data3_g170930.Thickness = In_Thickness3_g170930;
				Data3_g170930.Diffusion = In_Diffusion3_g170930;
				TVEVisualData Data4_g170944 = Data3_g170930;
				float Out_Dummy4_g170944 = 0;
				float3 Out_Albedo4_g170944 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170944 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170944 = float2( 0,0 );
				float3 Out_NormalWS4_g170944 = float3( 0,0,0 );
				float4 Out_Shader4_g170944 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170944 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170944 = 0;
				float Out_Grayscale4_g170944 = 0;
				float Out_Luminosity4_g170944 = 0;
				float Out_AlphaClip4_g170944 = 0;
				float Out_AlphaFade4_g170944 = 0;
				float3 Out_Translucency4_g170944 = float3( 0,0,0 );
				float Out_Transmission4_g170944 = 0;
				float Out_Thickness4_g170944 = 0;
				float Out_Diffusion4_g170944 = 0;
				Out_Dummy4_g170944 = Data4_g170944.Dummy;
				Out_Albedo4_g170944 = Data4_g170944.Albedo;
				Out_AlbedoRaw4_g170944 = Data4_g170944.AlbedoRaw;
				Out_NormalTS4_g170944 = Data4_g170944.NormalTS;
				Out_NormalWS4_g170944 = Data4_g170944.NormalWS;
				Out_Shader4_g170944 = Data4_g170944.Shader;
				Out_Emissive4_g170944= Data4_g170944.Emissive;
				Out_MultiMask4_g170944 = Data4_g170944.MultiMask;
				Out_Grayscale4_g170944 = Data4_g170944.Grayscale;
				Out_Luminosity4_g170944= Data4_g170944.Luminosity;
				Out_AlphaClip4_g170944 = Data4_g170944.AlphaClip;
				Out_AlphaFade4_g170944 = Data4_g170944.AlphaFade;
				Out_Translucency4_g170944 = Data4_g170944.Translucency;
				Out_Transmission4_g170944 = Data4_g170944.Transmission;
				Out_Thickness4_g170944 = Data4_g170944.Thickness;
				Out_Diffusion4_g170944 = Data4_g170944.Diffusion;
				float3 In_Albedo3_g170945 = Out_Albedo4_g170944;
				float3 In_AlbedoRaw3_g170945 = Out_AlbedoRaw4_g170944;
				float2 In_NormalTS3_g170945 = Out_NormalTS4_g170944;
				float3 In_NormalWS3_g170945 = Out_NormalWS4_g170944;
				float4 In_Shader3_g170945 = Out_Shader4_g170944;
				float4 In_Emissive3_g170945 = Out_Emissive4_g170944;
				float In_Grayscale3_g170945 = Out_Grayscale4_g170944;
				float In_Luminosity3_g170945 = Out_Luminosity4_g170944;
				float temp_output_821_11_g170942 = Out_MultiMask4_g170944;
				float In_MultiMask3_g170945 = temp_output_821_11_g170942;
				half Visual_AlphaClip754_g170942 = Out_AlphaClip4_g170944;
				half Dither_Constant768_g170942 = _DitherConstantValue;
				float3 ase_worldPos = IN.ase_texcoord10.xyz;
				float temp_output_7_0_g170952 = _DitherProximityMaxValue;
				float temp_output_10_0_g170952 = ( _DitherProximityMinValue - temp_output_7_0_g170952 );
				half Dither_Proximity767_g170942 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170952 ) / ( temp_output_10_0_g170952 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170951 = Data16_g170493;
				float Out_Dummy15_g170951 = 0;
				float3 Out_PositionWS15_g170951 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170951 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170951 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170951 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170951 = float3( 0,0,0 );
				float4 Out_VertexData15_g170951 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170951 = float4( 0,0,0,0 );
				Out_Dummy15_g170951 = Data15_g170951.Dummy;
				Out_PositionWS15_g170951 = Data15_g170951.PositionWS;
				Out_PositionWO15_g170951 = Data15_g170951.PositionWO;
				Out_PivotWS15_g170951 = Data15_g170951.PivotWS;
				Out_PivotWO15_g170951 = Data15_g170951.PivotWO;
				Out_NormalWS15_g170951 = Data15_g170951.NormalWS;
				Out_ViewDirWS15_g170951 = Data15_g170951.ViewDirWS;
				Out_VertexData15_g170951 = Data15_g170951.VertexData;
				Out_BoundsData15_g170951 = Data15_g170951.BoundsData;
				half3 Model_PositionWS776_g170942 = Out_PositionWS15_g170951;
				float temp_output_7_0_g170950 = _DitherDistanceMinValue;
				float temp_output_10_0_g170950 = ( _DitherDistanceMaxValue - temp_output_7_0_g170950 );
				half Dither_Distance856_g170942 = ( saturate( ( ( distance( Model_PositionWS776_g170942 , _WorldSpaceCameraPos ) - temp_output_7_0_g170950 ) / ( temp_output_10_0_g170950 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170942 = Out_ViewDirWS15_g170951;
				float3 normalizeResult792_g170942 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170942 = dot( Model_ViewDirWS845_g170942 , normalizeResult792_g170942 );
				half Dither_Glancing784_g170942 = ( saturate( ( ( 1.0 - abs( dotResult778_g170942 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170942 = max( max( max( Dither_Constant768_g170942 , Dither_Proximity767_g170942 ) , Dither_Distance856_g170942 ) , Dither_Glancing784_g170942 );
				half3 Model_PositionWO602_g170942 = Out_PositionWO15_g170951;
				float4 tex3DNode60_g170948 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170942 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170942 = tex3DNode60_g170948.r;
				half Local_MaskNoise678_g170942 = temp_output_809_0_g170942;
				half Visual_MultiMask671_g170942 = temp_output_821_11_g170942;
				float lerpResult683_g170942 = lerp( 1.0 , Visual_MultiMask671_g170942 , _DitherMultiValue);
				half Local_MaskMulti685_g170942 = lerpResult683_g170942;
				half Custom_Mask826_g170942 = 1.0;
				float lerpResult728_g170942 = lerp( Visual_AlphaClip754_g170942 , min( Visual_AlphaClip754_g170942 , ( -0.001 - ( Dither_Value429_g170942 - Local_MaskNoise678_g170942 ) ) ) , ( Local_MaskMulti685_g170942 * Custom_Mask826_g170942 ));
				half Local_AlphaClip834_g170942 = lerpResult728_g170942;
				#ifdef TVE_DITHER
				float staticSwitch577_g170942 = Local_AlphaClip834_g170942;
				#else
				float staticSwitch577_g170942 = Visual_AlphaClip754_g170942;
				#endif
				half Final_AlphaClip493_g170942 = staticSwitch577_g170942;
				float In_AlphaClip3_g170945 = Final_AlphaClip493_g170942;
				float In_AlphaFade3_g170945 = Out_AlphaFade4_g170944;
				float3 In_Translucency3_g170945 = Out_Translucency4_g170944;
				float In_Transmission3_g170945 = Out_Transmission4_g170944;
				float In_Thickness3_g170945 = Out_Thickness4_g170944;
				float In_Diffusion3_g170945 = Out_Diffusion4_g170944;
				Data3_g170945.Dummy = In_Dummy3_g170945;
				Data3_g170945.Albedo = In_Albedo3_g170945;
				Data3_g170945.AlbedoRaw = In_AlbedoRaw3_g170945;
				Data3_g170945.NormalTS = In_NormalTS3_g170945;
				Data3_g170945.NormalWS = In_NormalWS3_g170945;
				Data3_g170945.Shader = In_Shader3_g170945;
				Data3_g170945.Emissive= In_Emissive3_g170945;
				Data3_g170945.MultiMask = In_MultiMask3_g170945;
				Data3_g170945.Grayscale = In_Grayscale3_g170945;
				Data3_g170945.Luminosity = In_Luminosity3_g170945;
				Data3_g170945.AlphaClip = In_AlphaClip3_g170945;
				Data3_g170945.AlphaFade = In_AlphaFade3_g170945;
				Data3_g170945.Translucency = In_Translucency3_g170945;
				Data3_g170945.Transmission = In_Transmission3_g170945;
				Data3_g170945.Thickness = In_Thickness3_g170945;
				Data3_g170945.Diffusion = In_Diffusion3_g170945;
				TVEVisualData Data4_g170972 = Data3_g170945;
				float Out_Dummy4_g170972 = 0;
				float3 Out_Albedo4_g170972 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170972 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170972 = float2( 0,0 );
				float3 Out_NormalWS4_g170972 = float3( 0,0,0 );
				float4 Out_Shader4_g170972 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170972 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170972 = 0;
				float Out_Grayscale4_g170972 = 0;
				float Out_Luminosity4_g170972 = 0;
				float Out_AlphaClip4_g170972 = 0;
				float Out_AlphaFade4_g170972 = 0;
				float3 Out_Translucency4_g170972 = float3( 0,0,0 );
				float Out_Transmission4_g170972 = 0;
				float Out_Thickness4_g170972 = 0;
				float Out_Diffusion4_g170972 = 0;
				Out_Dummy4_g170972 = Data4_g170972.Dummy;
				Out_Albedo4_g170972 = Data4_g170972.Albedo;
				Out_AlbedoRaw4_g170972 = Data4_g170972.AlbedoRaw;
				Out_NormalTS4_g170972 = Data4_g170972.NormalTS;
				Out_NormalWS4_g170972 = Data4_g170972.NormalWS;
				Out_Shader4_g170972 = Data4_g170972.Shader;
				Out_Emissive4_g170972= Data4_g170972.Emissive;
				Out_MultiMask4_g170972 = Data4_g170972.MultiMask;
				Out_Grayscale4_g170972 = Data4_g170972.Grayscale;
				Out_Luminosity4_g170972= Data4_g170972.Luminosity;
				Out_AlphaClip4_g170972 = Data4_g170972.AlphaClip;
				Out_AlphaFade4_g170972 = Data4_g170972.AlphaFade;
				Out_Translucency4_g170972 = Data4_g170972.Translucency;
				Out_Transmission4_g170972 = Data4_g170972.Transmission;
				Out_Thickness4_g170972 = Data4_g170972.Thickness;
				Out_Diffusion4_g170972 = Data4_g170972.Diffusion;
				float3 temp_output_297_0_g170963 = Out_Albedo4_g170972;
				float3 In_Albedo3_g170973 = temp_output_297_0_g170963;
				float3 temp_output_297_23_g170963 = Out_AlbedoRaw4_g170972;
				float3 In_AlbedoRaw3_g170973 = temp_output_297_23_g170963;
				float2 In_NormalTS3_g170973 = Out_NormalTS4_g170972;
				float3 In_NormalWS3_g170973 = Out_NormalWS4_g170972;
				float4 In_Shader3_g170973 = Out_Shader4_g170972;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170963 = Out_Emissive4_g170972;
				TVEModelData Data15_g170976 = Data16_g170493;
				float Out_Dummy15_g170976 = 0;
				float3 Out_PositionWS15_g170976 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170976 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170976 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170976 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170976 = float3( 0,0,0 );
				float4 Out_VertexData15_g170976 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170976 = float4( 0,0,0,0 );
				Out_Dummy15_g170976 = Data15_g170976.Dummy;
				Out_PositionWS15_g170976 = Data15_g170976.PositionWS;
				Out_PositionWO15_g170976 = Data15_g170976.PositionWO;
				Out_PivotWS15_g170976 = Data15_g170976.PivotWS;
				Out_PivotWO15_g170976 = Data15_g170976.PivotWO;
				Out_NormalWS15_g170976 = Data15_g170976.NormalWS;
				Out_ViewDirWS15_g170976 = Data15_g170976.ViewDirWS;
				Out_VertexData15_g170976 = Data15_g170976.VertexData;
				Out_BoundsData15_g170976 = Data15_g170976.BoundsData;
				half4 Model_VertexMasks216_g170963 = Out_VertexData15_g170976;
				float4 break251_g170963 = Model_VertexMasks216_g170963;
				float4 break33_g170967 = _emissive_vert_mode;
				float temp_output_30_0_g170967 = ( break251_g170963.x * break33_g170967.x );
				float temp_output_29_0_g170967 = ( break251_g170963.y * break33_g170967.y );
				float temp_output_31_0_g170967 = ( break251_g170963.z * break33_g170967.z );
				float temp_output_28_0_g170967 = ( temp_output_30_0_g170967 + temp_output_29_0_g170967 + temp_output_31_0_g170967 + ( break251_g170963.w * break33_g170967.w ) );
				float clampResult17_g170966 = clamp( temp_output_28_0_g170967 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170970 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170970 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170970 );
				float lerpResult303_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170966 - temp_output_7_0_g170970 ) / ( temp_output_10_0_g170970 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170975 = lerpResult303_g170963;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170975 = ( temp_output_6_0_g170975 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170975 = temp_output_6_0_g170975;
				#endif
				float temp_output_263_0_g170963 = staticSwitch14_g170975;
				half Emissive_MeshMask221_g170963 = temp_output_263_0_g170963;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170965) = _EmissiveMaskTex;
				SamplerState Sampler276_g170965 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170971 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170971 = ( temp_output_6_0_g170971 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170971 = temp_output_6_0_g170971;
				#endif
				half4 Emissive_Coords167_g170963 = staticSwitch14_g170971;
				float4 temp_output_37_0_g170965 = Emissive_Coords167_g170963;
				half4 Coords276_g170965 = temp_output_37_0_g170965;
				half2 TexCoord276_g170965 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170965 = SampleMain( Texture276_g170965 , Sampler276_g170965 , Coords276_g170965 , TexCoord276_g170965 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170965) = _EmissiveMaskTex;
				SamplerState Sampler275_g170965 = sampler_Linear_Repeat;
				half4 Coords275_g170965 = temp_output_37_0_g170965;
				half2 TexCoord275_g170965 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170965 = SampleExtra( Texture275_g170965 , Sampler275_g170965 , Coords275_g170965 , TexCoord275_g170965 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170963 = localSampleExtra275_g170965;
				#else
				float4 staticSwitch176_g170963 = localSampleMain276_g170965;
				#endif
				half4 Emissive_MaskTex201_g170963 = staticSwitch176_g170963;
				float clampResult17_g170969 = clamp( (Emissive_MaskTex201_g170963).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170968 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170968 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170968 );
				float lerpResult302_g170963 = lerp( 1.0 , saturate( ( ( clampResult17_g170969 - temp_output_7_0_g170968 ) / ( temp_output_10_0_g170968 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170963 = lerpResult302_g170963;
				float temp_output_279_0_g170963 = ( Emissive_MeshMask221_g170963 * Emissive_Mask103_g170963 );
				float3 appendResult293_g170963 = (float3(temp_output_279_0_g170963 , temp_output_279_0_g170963 , temp_output_279_0_g170963));
				half3 Local_EmissiveColor278_g170963 = appendResult293_g170963;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170964 = Data204_g170494;
				float Out_Dummy15_g170964 = 0;
				float4 Out_CoatParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170964 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170964 = float4( 0,0,0,0 );
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_CoatParams15_g170964 = Data15_g170964.CoatParams;
				Out_PaintParams15_g170964 = Data15_g170964.PaintParams;
				Out_GlowParams15_g170964 = Data15_g170964.GlowParams;
				Out_AtmoParams15_g170964= Data15_g170964.AtmoParams;
				Out_FadeParams15_g170964= Data15_g170964.FadeParams;
				Out_FormParams15_g170964 = Data15_g170964.FormParams;
				Out_LandParams15_g170964 = Data15_g170964.LandParams;
				Out_WindParams15_g170964 = Data15_g170964.WindParams;
				Out_PushParams15_g170964 = Data15_g170964.PushParams;
				half4 Global_GlowParams179_g170963 = Out_GlowParams15_g170964;
				float3 lerpResult299_g170963 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170963).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170963 = lerpResult299_g170963;
				#else
				float3 staticSwitch228_g170963 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170963 = staticSwitch228_g170963;
				half3 Visual_AlbedoRaw306_g170963 = temp_output_297_23_g170963;
				float3 lerpResult307_g170963 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170963 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170963 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170963 * lerpResult307_g170963 );
				half3 Emissive_Blend260_g170963 = ( ( (Visual_Emissive255_g170963).xyz * Local_EmissiveColor278_g170963 ) * Local_EmissiveValue88_g170963 );
				float3 temp_output_3_0_g170977 = Emissive_Blend260_g170963;
				float temp_output_15_0_g170977 = _emissive_power_value;
				float3 temp_output_23_0_g170977 = ( temp_output_3_0_g170977 * temp_output_15_0_g170977 );
				half Local_EmissiveMask294_g170963 = temp_output_279_0_g170963;
				float4 appendResult295_g170963 = (float4(temp_output_23_0_g170977 , Local_EmissiveMask294_g170963));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170963 = appendResult295_g170963;
				#else
				float4 staticSwitch129_g170963 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170963 = staticSwitch129_g170963;
				float4 In_Emissive3_g170973 = Final_Emissive184_g170963;
				float In_Grayscale3_g170973 = Out_Grayscale4_g170972;
				float In_Luminosity3_g170973 = Out_Luminosity4_g170972;
				float temp_output_297_11_g170963 = Out_MultiMask4_g170972;
				float In_MultiMask3_g170973 = temp_output_297_11_g170963;
				float In_AlphaClip3_g170973 = Out_AlphaClip4_g170972;
				float In_AlphaFade3_g170973 = Out_AlphaFade4_g170972;
				float3 In_Translucency3_g170973 = Out_Translucency4_g170972;
				float In_Transmission3_g170973 = Out_Transmission4_g170972;
				float In_Thickness3_g170973 = Out_Thickness4_g170972;
				float In_Diffusion3_g170973 = Out_Diffusion4_g170972;
				Data3_g170973.Dummy = In_Dummy3_g170973;
				Data3_g170973.Albedo = In_Albedo3_g170973;
				Data3_g170973.AlbedoRaw = In_AlbedoRaw3_g170973;
				Data3_g170973.NormalTS = In_NormalTS3_g170973;
				Data3_g170973.NormalWS = In_NormalWS3_g170973;
				Data3_g170973.Shader = In_Shader3_g170973;
				Data3_g170973.Emissive= In_Emissive3_g170973;
				Data3_g170973.MultiMask = In_MultiMask3_g170973;
				Data3_g170973.Grayscale = In_Grayscale3_g170973;
				Data3_g170973.Luminosity = In_Luminosity3_g170973;
				Data3_g170973.AlphaClip = In_AlphaClip3_g170973;
				Data3_g170973.AlphaFade = In_AlphaFade3_g170973;
				Data3_g170973.Translucency = In_Translucency3_g170973;
				Data3_g170973.Transmission = In_Transmission3_g170973;
				Data3_g170973.Thickness = In_Thickness3_g170973;
				Data3_g170973.Diffusion = In_Diffusion3_g170973;
				TVEVisualData Data4_g170995 = Data3_g170973;
				float Out_Dummy4_g170995 = 0;
				float3 Out_Albedo4_g170995 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170995 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170995 = float2( 0,0 );
				float3 Out_NormalWS4_g170995 = float3( 0,0,0 );
				float4 Out_Shader4_g170995 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170995 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170995 = 0;
				float Out_Grayscale4_g170995 = 0;
				float Out_Luminosity4_g170995 = 0;
				float Out_AlphaClip4_g170995 = 0;
				float Out_AlphaFade4_g170995 = 0;
				float3 Out_Translucency4_g170995 = float3( 0,0,0 );
				float Out_Transmission4_g170995 = 0;
				float Out_Thickness4_g170995 = 0;
				float Out_Diffusion4_g170995 = 0;
				Out_Dummy4_g170995 = Data4_g170995.Dummy;
				Out_Albedo4_g170995 = Data4_g170995.Albedo;
				Out_AlbedoRaw4_g170995 = Data4_g170995.AlbedoRaw;
				Out_NormalTS4_g170995 = Data4_g170995.NormalTS;
				Out_NormalWS4_g170995 = Data4_g170995.NormalWS;
				Out_Shader4_g170995 = Data4_g170995.Shader;
				Out_Emissive4_g170995= Data4_g170995.Emissive;
				Out_MultiMask4_g170995 = Data4_g170995.MultiMask;
				Out_Grayscale4_g170995 = Data4_g170995.Grayscale;
				Out_Luminosity4_g170995= Data4_g170995.Luminosity;
				Out_AlphaClip4_g170995 = Data4_g170995.AlphaClip;
				Out_AlphaFade4_g170995 = Data4_g170995.AlphaFade;
				Out_Translucency4_g170995 = Data4_g170995.Translucency;
				Out_Transmission4_g170995 = Data4_g170995.Transmission;
				Out_Thickness4_g170995 = Data4_g170995.Thickness;
				Out_Diffusion4_g170995 = Data4_g170995.Diffusion;
				half3 Visual_Albedo199_g170994 = Out_Albedo4_g170995;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170994 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170994 );
				half Visual_Transmission138_g170994 = Out_Transmission4_g170995;
				half Subsurface_Value268_g170994 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170997 = Data204_g170494;
				float Out_Dummy15_g170997 = 0;
				float4 Out_CoatParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170997 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170997 = float4( 0,0,0,0 );
				Out_Dummy15_g170997 = Data15_g170997.Dummy;
				Out_CoatParams15_g170997 = Data15_g170997.CoatParams;
				Out_PaintParams15_g170997 = Data15_g170997.PaintParams;
				Out_GlowParams15_g170997 = Data15_g170997.GlowParams;
				Out_AtmoParams15_g170997= Data15_g170997.AtmoParams;
				Out_FadeParams15_g170997= Data15_g170997.FadeParams;
				Out_FormParams15_g170997 = Data15_g170997.FormParams;
				Out_LandParams15_g170997 = Data15_g170997.LandParams;
				Out_WindParams15_g170997 = Data15_g170997.WindParams;
				Out_PushParams15_g170997 = Data15_g170997.PushParams;
				half4 Global_GlowParams373_g170994 = Out_GlowParams15_g170997;
				float lerpResult403_g170994 = lerp( 1.0 , saturate( (Global_GlowParams373_g170994).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170994 = lerpResult403_g170994;
				#else
				float staticSwitch367_g170994 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170994 = staticSwitch367_g170994;
				float temp_output_301_11_g170994 = Out_MultiMask4_g170995;
				half Visual_MultiMask292_g170994 = temp_output_301_11_g170994;
				float lerpResult293_g170994 = lerp( 1.0 , Visual_MultiMask292_g170994 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170994 = lerpResult293_g170994;
				half Custom_Mask363_g170994 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170994 = ( Visual_Transmission138_g170994 * Subsurface_Value268_g170994 * Subsurface_GlobalMask369_g170994 * Subsurface_MultiMask296_g170994 * Custom_Mask363_g170994 );
				#else
				float staticSwitch345_g170994 = 0.0;
				#endif
				half Final_Transmission269_g170994 = staticSwitch345_g170994;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170994 = ( Subsurface_Color264_g170994 * Final_Transmission269_g170994 * 10.0 );
				#else
				float3 staticSwitch348_g170994 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170994 = staticSwitch348_g170994;
				TVEModelData Data15_g171000 = Data16_g170493;
				float Out_Dummy15_g171000 = 0;
				float3 Out_PositionWS15_g171000 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171000 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171000 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171000 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171000 = float3( 0,0,0 );
				float4 Out_VertexData15_g171000 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171000 = float4( 0,0,0,0 );
				Out_Dummy15_g171000 = Data15_g171000.Dummy;
				Out_PositionWS15_g171000 = Data15_g171000.PositionWS;
				Out_PositionWO15_g171000 = Data15_g171000.PositionWO;
				Out_PivotWS15_g171000 = Data15_g171000.PivotWS;
				Out_PivotWO15_g171000 = Data15_g171000.PivotWO;
				Out_NormalWS15_g171000 = Data15_g171000.NormalWS;
				Out_ViewDirWS15_g171000 = Data15_g171000.ViewDirWS;
				Out_VertexData15_g171000 = Data15_g171000.VertexData;
				Out_BoundsData15_g171000 = Data15_g171000.BoundsData;
				half3 Model_ViewDirWS392_g170994 = Out_ViewDirWS15_g171000;
				float dotResult324_g170994 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170994 );
				float saferPower323_g170994 = abs( saturate( dotResult324_g170994 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170994 = 0.0;
				#else
				float staticSwitch330_g170994 = ( pow( saferPower323_g170994 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170994 = staticSwitch330_g170994;
				float3 temp_output_6_0_g170998 = ( Final_Translucency254_g170994 * Mask_Subsurface_View320_g170994 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170998 = ( temp_output_6_0_g170998 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170998 = temp_output_6_0_g170998;
				#endif
				half3 Subsurface_Approximation333_g170994 = staticSwitch14_g170998;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170994 = ( Visual_Albedo199_g170994 + Subsurface_Approximation333_g170994 );
				#else
				float3 staticSwitch353_g170994 = Visual_Albedo199_g170994;
				#endif
				half3 Final_Albedo312_g170994 = staticSwitch353_g170994;
				float3 In_Albedo3_g170996 = Final_Albedo312_g170994;
				float3 In_AlbedoRaw3_g170996 = Out_AlbedoRaw4_g170995;
				float2 In_NormalTS3_g170996 = Out_NormalTS4_g170995;
				float3 In_NormalWS3_g170996 = Out_NormalWS4_g170995;
				float4 In_Shader3_g170996 = Out_Shader4_g170995;
				float4 In_Emissive3_g170996 = Out_Emissive4_g170995;
				float In_Grayscale3_g170996 = Out_Grayscale4_g170995;
				float In_Luminosity3_g170996 = Out_Luminosity4_g170995;
				float In_MultiMask3_g170996 = temp_output_301_11_g170994;
				float In_AlphaClip3_g170996 = Out_AlphaClip4_g170995;
				float In_AlphaFade3_g170996 = Out_AlphaFade4_g170995;
				float3 In_Translucency3_g170996 = Final_Translucency254_g170994;
				float In_Transmission3_g170996 = Final_Transmission269_g170994;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170994 = 0.0;
				#else
				float staticSwitch351_g170994 = 1.0;
				#endif
				half Final_Thickness275_g170994 = staticSwitch351_g170994;
				float In_Thickness3_g170996 = Final_Thickness275_g170994;
				float Final_Diffusion340_g170994 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170996 = Final_Diffusion340_g170994;
				Data3_g170996.Dummy = In_Dummy3_g170996;
				Data3_g170996.Albedo = In_Albedo3_g170996;
				Data3_g170996.AlbedoRaw = In_AlbedoRaw3_g170996;
				Data3_g170996.NormalTS = In_NormalTS3_g170996;
				Data3_g170996.NormalWS = In_NormalWS3_g170996;
				Data3_g170996.Shader = In_Shader3_g170996;
				Data3_g170996.Emissive= In_Emissive3_g170996;
				Data3_g170996.MultiMask = In_MultiMask3_g170996;
				Data3_g170996.Grayscale = In_Grayscale3_g170996;
				Data3_g170996.Luminosity = In_Luminosity3_g170996;
				Data3_g170996.AlphaClip = In_AlphaClip3_g170996;
				Data3_g170996.AlphaFade = In_AlphaFade3_g170996;
				Data3_g170996.Translucency = In_Translucency3_g170996;
				Data3_g170996.Transmission = In_Transmission3_g170996;
				Data3_g170996.Thickness = In_Thickness3_g170996;
				Data3_g170996.Diffusion = In_Diffusion3_g170996;
				TVEVisualData Data4_g171011 = Data3_g170996;
				float Out_Dummy4_g171011 = 0;
				float3 Out_Albedo4_g171011 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171011 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171011 = float2( 0,0 );
				float3 Out_NormalWS4_g171011 = float3( 0,0,0 );
				float4 Out_Shader4_g171011 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171011 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171011 = 0;
				float Out_Grayscale4_g171011 = 0;
				float Out_Luminosity4_g171011 = 0;
				float Out_AlphaClip4_g171011 = 0;
				float Out_AlphaFade4_g171011 = 0;
				float3 Out_Translucency4_g171011 = float3( 0,0,0 );
				float Out_Transmission4_g171011 = 0;
				float Out_Thickness4_g171011 = 0;
				float Out_Diffusion4_g171011 = 0;
				Out_Dummy4_g171011 = Data4_g171011.Dummy;
				Out_Albedo4_g171011 = Data4_g171011.Albedo;
				Out_AlbedoRaw4_g171011 = Data4_g171011.AlbedoRaw;
				Out_NormalTS4_g171011 = Data4_g171011.NormalTS;
				Out_NormalWS4_g171011 = Data4_g171011.NormalWS;
				Out_Shader4_g171011 = Data4_g171011.Shader;
				Out_Emissive4_g171011= Data4_g171011.Emissive;
				Out_MultiMask4_g171011 = Data4_g171011.MultiMask;
				Out_Grayscale4_g171011 = Data4_g171011.Grayscale;
				Out_Luminosity4_g171011= Data4_g171011.Luminosity;
				Out_AlphaClip4_g171011 = Data4_g171011.AlphaClip;
				Out_AlphaFade4_g171011 = Data4_g171011.AlphaFade;
				Out_Translucency4_g171011 = Data4_g171011.Translucency;
				Out_Transmission4_g171011 = Data4_g171011.Transmission;
				Out_Thickness4_g171011 = Data4_g171011.Thickness;
				Out_Diffusion4_g171011 = Data4_g171011.Diffusion;
				float temp_output_3_0_g171012 = Out_AlphaClip4_g171011;
				float Alpha19_g171012 = temp_output_3_0_g171012;
				float temp_output_15_0_g171012 = 0.0;
				float Treshold19_g171012 = temp_output_15_0_g171012;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#else
				clip(Alpha19_g171012 - Treshold19_g171012);
				#endif
				#endif
				
				o.Normal = fixed3( 0, 0, 1 );
				#if !defined(ASE_LIGHTING_SIMPLE)
					o.Occlusion = 1;
				#endif
				o.Alpha = saturate( ( Alpha19_g171012 * Out_AlphaFade4_g171011 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef _ALPHATEST_SHADOW_ON
					if (unity_LightShadowBias.z != 0.0)
						clip(o.Alpha - AlphaClipThresholdShadow);
					#ifdef _ALPHATEST_ON
					else
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#else
					#ifdef _ALPHATEST_ON
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
					clip(alphaRef - 0.01);
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				SHADOW_CASTER_FRAGMENT(IN)
			}
			ENDCG
		}
		
	}
	CustomEditor "TVEShaderGUICore"
	
	Fallback Off
}
/*ASEBEGIN
Version=19603
Node;AmplifyShaderEditor.FunctionNode;1285;-14592,-256;Inherit;False;Block Model;46;;170478;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;1209;-14272,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1210;-13824,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1265;-14272,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1211;-13568,-256;Inherit;False;Block Global;56;;170494;212e17d4006dc88449d56ce0340cb5ff;20,315,1,311,1,388,1,317,1,321,1,319,1,376,0,323,1,337,1,282,1,371,1,349,1,385,1,287,1,285,1,276,1,283,1,308,1,348,1,289,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;1217;-12800,-256;Inherit;False;1265;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1213;-8576,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1212;-13248,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1279;-12544,-256;Inherit;False;Block Pivots Sub;-1;;170577;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1214;-8320,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1215;-8320,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1225;-12160,-128;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1280;-12160,-256;Inherit;False;Block Perspective;490;;170580;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1289;-8320,-256;Inherit;False;Block Main;105;;170617;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode;1218;-7936,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1219;-7936,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1220;-7936,-256;Inherit;False;Block Layer;131;;170634;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1228;-11776,-256;Inherit;False;Block Size Fade;495;;170668;467c36a7402d0274b9ad844bbc95de33;0;2;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1222;-7552,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1287;-7552,-256;Inherit;False;Block Detail;178;;170674;a5b52fdec7b855a4fba859a90e837892;7,1013,0,990,1,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1288;-11392,-256;Inherit;False;Block Motion;504;;170707;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode;1226;-7168,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1227;-7168,-256;Inherit;False;Block Occlusion;223;;170784;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;1263;-10944,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1229;-6784,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1230;-6784,-256;Inherit;False;Block Gradient;235;;170794;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1274;-9472,-256;Inherit;False;1263;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1231;-6400,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1232;-6400,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1233;-6400,-256;Inherit;False;Block Variation;248;;170804;f25afe21028a28a4e8dee6f6da7bc1a5;0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;1282;-9216,-256;Inherit;False;Block Interp;-1;;170813;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1234;-6016,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1235;-6016,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1236;-6016,-256;Inherit;False;Block Tinting;261;;170814;9f39e156ea8d89e4997ea2a1e194137e;7,352,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode;1269;-8896,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;1237;-5632,-256;Inherit;False;Block Dryness;290;;170838;f05795de23f951c45bb73c8b4321e4b7;7,398,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode;1264;-5632,-128;Inherit;False;1269;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1238;-5248,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1239;-5248,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1284;-5248,-256;Inherit;False;Block Highlight;0;;170861;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1241;-4864,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1242;-4864,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1243;-4864,-256;Inherit;False;Block Overlay;322;;170864;8ae9c8285a7817844a51243251284d21;9,821,1,819,1,813,1,910,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1244;-4480,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1245;-4480,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1246;-4480,-256;Inherit;False;Block Wetness;368;;170900;52c5a1f52507fc44e926833b126e7855;8,850,1,1075,1,857,1,945,1,930,1,1092,1,851,1,1107,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1247;-4096,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1248;-4096,-256;Inherit;False;Block Cutout;409;;170929;866b4a5fe67e7f34085520e1bb5be2b7;5,775,1,777,1,815,1,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1251;-3712,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1252;-3712,-256;Inherit;False;Block Dithering;427;;170942;c7e02d28445e979479d493926695e6f3;6,843,1,859,1,844,1,827,1,879,0,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1250;-3712,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1249;-11008,-256;Inherit;False;Block Transform;-1;;170955;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1255;-3328,-256;Inherit;False;Block Emissive;447;;170963;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode;1254;-3328,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1267;-3328,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1253;-10624,-256;Inherit;False;Block Normal;582;;170978;87f7defafe56dbf4b954caf5efc3f5ca;4,1713,0,1693,1,1638,0,1700,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1257;-2944,-256;Inherit;False;Block Subsurface;471;;170994;d738d295ada6b1f409db6776b5efe789;3,315,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;1283;-10240,-256;Inherit;False;Block Pivots Add;-1;;171001;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode;1258;-2624,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1266;-9920,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1259;-1920,-256;Inherit;False;1258;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1260;-1920,-192;Inherit;False;1266;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode;1171;-1920,-512;Half;False;Property;_render_cull;_render_cull;601;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1172;-1728,-512;Half;False;Property;_render_src;_render_src;602;1;[HideInInspector];Create;True;0;0;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1173;-1536,-512;Half;False;Property;_render_dst;_render_dst;603;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1174;-1344,-512;Half;False;Property;_render_zw;_render_zw;604;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1175;-640,-512;Inherit;False;Base Compile;-1;;171004;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1176;-1152,-512;Half;False;Property;_render_coverage;_render_coverage;605;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1177;-1920,-640;Half;False;Property;_IsGeneralShader;_IsGeneralShader;606;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1178;-1696,-640;Half;False;Property;_IsSimpleShader;_IsSimpleShader;607;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1261;-1664,-256;Inherit;False;Block Render;2;;171005;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1180;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;6;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1182;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1183;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1184;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1185;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1181;-1120,-256;Float;False;True;-1;2;TVEShaderGUICore;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit;28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;20;True;True;1;0;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;True;True;2;True;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;42;Category;0;0;Workflow;2;638507966350037256;Surface;0;0;  Blend;0;0;  Refraction Model;0;0;  Dither Shadows;1;0;Two Sided;0;638507966389794542;Deferred Pass;0;638541444818398171;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;0;0;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;0;Receive Specular;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;0;Vertex Position,InvertActionOnDeselection;0;638507966500833844;0;6;False;True;True;False;True;True;False;;True;0
WireConnection;1209;0;1285;314
WireConnection;1265;0;1285;128
WireConnection;1211;206;1210;0
WireConnection;1212;0;1211;151
WireConnection;1279;146;1217;0
WireConnection;1280;146;1279;128
WireConnection;1289;225;1213;0
WireConnection;1220;585;1289;106
WireConnection;1220;633;1214;0
WireConnection;1220;974;1215;0
WireConnection;1228;146;1280;128
WireConnection;1228;186;1225;0
WireConnection;1287;585;1220;552
WireConnection;1287;633;1218;0
WireConnection;1287;971;1219;0
WireConnection;1288;146;1228;128
WireConnection;1227;144;1287;552
WireConnection;1227;204;1222;0
WireConnection;1263;0;1288;1903
WireConnection;1230;144;1227;116
WireConnection;1230;222;1226;0
WireConnection;1233;144;1230;116
WireConnection;1233;222;1229;0
WireConnection;1282;22;1274;0
WireConnection;1236;198;1233;116
WireConnection;1236;223;1232;0
WireConnection;1236;207;1231;0
WireConnection;1269;0;1282;0
WireConnection;1237;279;1236;204
WireConnection;1237;297;1235;0
WireConnection;1237;281;1234;0
WireConnection;1284;144;1237;346
WireConnection;1284;212;1264;0
WireConnection;1243;572;1284;116
WireConnection;1243;596;1238;0
WireConnection;1243;600;1239;0
WireConnection;1246;572;1243;566
WireConnection;1246;596;1242;0
WireConnection;1246;600;1241;0
WireConnection;1248;572;1246;566
WireConnection;1248;596;1245;0
WireConnection;1248;600;1244;0
WireConnection;1252;572;1248;566
WireConnection;1252;596;1247;0
WireConnection;1249;146;1288;128
WireConnection;1255;146;1252;566
WireConnection;1255;148;1250;0
WireConnection;1255;178;1251;0
WireConnection;1253;146;1249;128
WireConnection;1257;146;1255;183
WireConnection;1257;385;1267;0
WireConnection;1257;371;1254;0
WireConnection;1283;146;1253;128
WireConnection;1258;0;1257;183
WireConnection;1266;0;1283;128
WireConnection;1261;17;1259;0
WireConnection;1261;19;1260;0
WireConnection;1181;0;1261;21
WireConnection;1181;1;1261;22
WireConnection;1181;2;1261;34
WireConnection;1181;20;1261;108
WireConnection;1181;21;1261;109
WireConnection;1181;7;1261;28
WireConnection;1181;15;1261;30
WireConnection;1181;16;1261;32
WireConnection;1181;17;1261;33
ASEEND*/
//CHKSM=7C072DA34E48C108185AAEDFB65A27547EB3B149
