// Made with Amplify Shader Editor v1.9.6.3
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit"
{
	Properties
	{
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2040
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)]_RenderFilter("Render Filtering", Float) = 0
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTexSS("Noise Mask SS", 2D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[StyledMessage(Info, Use the Object Height and Radius to remap the procedural height and spherical masks when used for motion., 0, 10)]_ObjectBoundsInfo("# ObjectBoundsInfo", Float) = 0
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalCoatLayerValue("Global Coat Layer", Float) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPaintLayerValue("Global Paint Layer", Float) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalAtmoLayerValue("Global Atmo Layer", Float) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFadeLayerValue("Global Fade Layer", Float) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalGlowLayerValue("Global Glow Layer", Float) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFormLayerValue("Global Form Layer", Float) = 0
		[StyledEnum(Wind Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalWindLayerValue("Global Wind Layer", Float) = 0
		[StyledEnum(Push Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPushLayerValue("Global Push Layer", Float) = 0
		_GlobalCoatPivotValue("Global Coat Pivots", Range( 0 , 1)) = 0
		_GlobalPaintPivotValue("Global Paint Pivots", Range( 0 , 1)) = 0
		_GlobalAtmoPivotValue("Global Atmo Pivots", Range( 0 , 1)) = 0
		_GlobalFadePivotValue("Global Fade Pivots", Range( 0 , 1)) = 0
		_GlobalGlowPivotValue("Global Glow Pivots", Range( 0 , 1)) = 0
		_GlobalFormPivotValue("Global Form Pivots", Range( 0 , 1)) = 1
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to mask out the branches from the leaves when using Dual Colors or for Global Effects. The mask is stored in the Shader texture blue channel. , 0, 10)]_MainMultiMaskInfo("# MainMultiMaskInfo", Float) = 0
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider()]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 100)) = 10
		_VariationNoisePivotValue("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[HideInInspector]_tinting_vert_mode("_tinting_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[HideInInspector]_dryness_vert_mode("_dryness_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTexRT("Overlay Glitter RT", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 0
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 8)) = 4
		_OverlayGlitterDistValue("Overlay Glitter Limit", Range( 0 , 200)) = 100
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap1("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessMeshValue("Wetness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessMeshMode("Wetness Mesh Mask", Float) = 0
		[StyledRemapSlider]_WetnessMeshRemap("Wetness Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		_WetnessWaterBaseValue("Wetness Water Base Mask", Range( 0 , 1)) = 1
		_WetnessWaterMeshValue("Wetness Water Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessWaterMeshMode("Wetness Water Mesh Mask", Float) = 1
		[StyledRemapSlider]_WetnessWaterMeshRemap("Wetness Water Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTexRT("Wetness Drops RT", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( -8 , 8)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 8)) = 0.25
		_WetnessDropsDistValue("Wetness Drops Limit", Range( 0 , 200)) = 50
		_WetnessDropsMeshValue("Wetness Drops Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessDropsMeshMode("Wetness Drops Mesh Mask", Float) = 2
		[StyledRemapSlider]_WetnessDropsMeshRemap("Wetness Drops Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_wetness_water_vert_mode("_wetness_water_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_vert_mode("_wetness_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_drops_vert_mode("_wetness_drops_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Affect Shadow Pass,1)]_CutoutShadowMode("Cutout Shadow", Float) = 1
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[Space(10)]_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 100)) = 10
		[Space(10)][StyledToggle]_CutoutElementMode("Use Fade Globals / Elements", Float) = 1
		[HideInInspector]_cutout_vert_mode("_cutout_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityMinValue("Dither Proximity Start", Range( 0 , 40)) = 0
		_DitherProximityMaxValue("Dither Proximity Limit", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Enum(Off,0,Affect Shadow Pass,1)]_DitherShadowMode("Dither Shadow", Float) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 100)) = 50
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)]_EmissiveColorMode("Emissive Color", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		_EmissiveExposureValue("Emissive Weight", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		_SubsurfaceThicknessValue("Subsurface Thickness", Range( 0 , 1)) = 0
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Value", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[StyledMessage(Info, Use the disabled Wind mode when the wind flow is controlled exclusivly by global elements. , 0, 10)]_MotionWindOffInfo("# Message Off", Float) = 0
		[StyledMessage(Info, The Optimized wind mode uses the precomputed Motion Texture RT which is only calculated once and reused for all materials. , 0, 10)]_MotionWindOptimizedInfo("# Message Optimized", Float) = 0
		[StyledMessage(Info, The Advanced wind mode allows the setting of the wind Noise__ Tilling__ and Speed per motion layer for advanced control. Use the Noise value to randomize the wind direction., 0, 10)]_MotionWindAdvancedInfo("# Message Advanced", Float) = 0
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTexRT("Motion Texture RT", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Waves Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Waves Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion LayerA Intensity", Range( 0 , 10)) = 0
		_MotionBasePivotValue("Motion LayerA Pivots", Range( 0 , 1)) = 0.8
		_MotionBasePhaseValue("Motion LayerA Phase", Range( 0 , 1)) = 0
		_MotionBaseNoiseValue("Motion LayerA Noise", Range( 0 , 1)) = 0.5
		_MotionBaseTillingValue("Motion LayerA Tilling", Range( 0 , 100)) = 5
		_MotionBaseSpeedValue("Motion LayerA Speed", Range( 0 , 50)) = 5
		_MotionBaseDelayValue("Motion LayerA Wind Delay", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion LayerA Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion LayerA Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion LayerB Intensity", Range( 0 , 10)) = 0
		_MotionSmallPivotValue("Motion LayerB Pivots", Range( 0 , 1)) = 0.6
		_MotionSmallPhaseValue("Motion LayerB Phase", Range( 0 , 1)) = 0
		_MotionSmallNoiseValue("Motion LayerB Noise", Range( 0 , 1)) = 0.5
		_MotionSmallTillingValue("Motion LayerB Tilling", Range( 0 , 100)) = 5
		_MotionSmallSpeedValue("Motion LayerB Speed", Range( 0 , 50)) = 5
		_MotionSmallDelayValue("Motion LayerB Wind Delay", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion LayerB Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion LayerB Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion Flutter Intensity", Range( 0 , 10)) = 0
		_MotionTinyTillingValue("Motion Flutter Tilling", Range( 0 , 100)) = 20
		_MotionTinySpeedValue("Motion Flutter Speed", Range( 0 , 50)) = 20
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion Flutter Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion Flutter Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		[Enum(Off,0,Optimized,1,Advanced,2)]_MotionWindMode("Motion Wind Mode", Float) = 1
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 100)) = 5
		_MotionDistValue("Motion Wind Waves Limit", Range( 0 , 1000)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_mask_mode("_motion_push_mask_mode", Float) = 0
		[HideInInspector]_motion_push_vert_mode("_motion_push_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_proc_mode("_motion_push_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_push_layer_value("_global_push_layer_value", Float) = 0
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalSpace("[ Normal Space ]", Float) = 1
		_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 5
		[HideInInspector]_render_dst("_render_dst", Float) = 10
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSubsurfaceShader("_IsSubsurfaceShader", Float) = 1

		[HideInInspector] _RenderQueueType("Render Queue Type", Float) = 1
		[HideInInspector][ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 1
		[HideInInspector][ToggleUI] _SupportDecals("Support Decals", Float) = 1.0
		[HideInInspector] _StencilRef("Stencil Ref", Int) = 0 // StencilUsage.Clear
		[HideInInspector] _StencilWriteMask("Stencil Write Mask", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefDepth("Stencil Ref Depth", Int) = 0 // Nothing
		[HideInInspector] _StencilWriteMaskDepth("Stencil Write Mask Depth", Int) = 8 // StencilUsage.TraceReflectionRay
		[HideInInspector] _StencilRefMV("Stencil Ref MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilWriteMaskMV("Stencil Write Mask MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilRefDistortionVec("Stencil Ref Distortion Vec", Int) = 4 				// DEPRECATED
		[HideInInspector] _StencilWriteMaskDistortionVec("Stencil Write Mask Distortion Vec", Int) = 4	// DEPRECATED
		[HideInInspector] _StencilWriteMaskGBuffer("Stencil Write Mask GBuffer", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefGBuffer("Stencil Ref GBuffer", Int) = 2 // StencilUsage.RequiresDeferredLighting
		[HideInInspector] _ZTestGBuffer("ZTest GBuffer", Int) = 4
		[HideInInspector][ToggleUI] _RequireSplitLighting("Require Split Lighting", Float) = 0
		[HideInInspector][ToggleUI] _ReceivesSSR("Receives SSR", Float) = 1
		[HideInInspector][ToggleUI] _ReceivesSSRTransparent("Receives SSR Transparent", Float) = 0
		[HideInInspector] _SurfaceType("Surface Type", Float) = 0
		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
		[HideInInspector] _SrcBlend("Src Blend", Float) = 1
		[HideInInspector] _DstBlend("Dst Blend", Float) = 0
		[HideInInspector] _DstBlend2("__dst2", Float) = 0
		[HideInInspector] _AlphaSrcBlend("Alpha Src Blend", Float) = 1
		[HideInInspector] _AlphaDstBlend("Alpha Dst Blend", Float) = 0
		[HideInInspector][ToggleUI] _ZWrite("ZWrite", Float) = 1
		[HideInInspector][ToggleUI] _TransparentZWrite("Transparent ZWrite", Float) = 0
		[HideInInspector] _CullMode("Cull Mode", Float) = 2
		[HideInInspector] _TransparentSortPriority("Transparent Sort Priority", Float) = 0
		[HideInInspector][ToggleUI] _EnableFogOnTransparent("Enable Fog", Float) = 1
		[HideInInspector] _CullModeForward("Cull Mode Forward", Float) = 2 // This mode is dedicated to Forward to correctly handle backface then front face rendering thin transparent
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.TransparentCullMode)] _TransparentCullMode("Transparent Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector] _ZTestDepthEqualForOpaque("ZTest Depth Equal For Opaque", Int) = 4 // Less equal
		[HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)] _ZTestTransparent("ZTest Transparent", Int) = 4 // Less equal
		[HideInInspector][ToggleUI] _TransparentBackfaceEnable("Transparent Backface Enable", Float) = 0
		[HideInInspector][ToggleUI] _AlphaCutoffEnable("Alpha Cutoff Enable", Float) = 0
		[HideInInspector][ToggleUI] _UseShadowThreshold("Use Shadow Threshold", Float) = 0
		[HideInInspector][ToggleUI] _DoubleSidedEnable("Double Sided Enable", Float) = 0
		[HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double Sided Normal Mode", Float) = 2
		[HideInInspector] _DoubleSidedConstants("DoubleSidedConstants", Vector) = (1,1,-1,0)

		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleUI] _TransparentWritingMotionVec("Transparent Writing MotionVec", Float) = 0
		[HideInInspector][ToggleUI] _PerPixelSorting("_PerPixelSorting", Float) = 0.0
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.OpaqueCullMode)] _OpaqueCullMode("Opaque Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector][ToggleUI] _EnableBlendModePreserveSpecularLighting("Enable Blend Mode Preserve Specular Lighting", Float) = 1
		[HideInInspector] _EmissionColor("Color", Color) = (1, 1, 1)

		[HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		[HideInInspector][Enum(Auto, 0, On, 1, Off, 2)] _DoubleSidedGIMode("Double sided GI mode", Float) = 0

		[HideInInspector][ToggleUI] _AlphaToMaskInspectorValue("_AlphaToMaskInspectorValue", Float) = 0 // Property used to save the alpha to mask state in the inspector
        [HideInInspector][ToggleUI] _AlphaToMask("__alphaToMask", Float) = 0

		//_Refrac ( "Refraction Model", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 1
	}

	SubShader
	{
		LOD 0

		

		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		struct GlobalSurfaceDescription // GBuffer Forward META TransparentBackface
		{
			float3 BaseColor;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float AlphaClipThresholdDepthPostpass;
			float SpecularOcclusion;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float DiffusionProfile;
			float TransmissionMask;
			float Thickness;
			float SubsurfaceMask;
			float Anisotropy;
			float3 Tangent;
			float IridescenceMask;
			float IridescenceThickness;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct AlphaSurfaceDescription // ShadowCaster
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SceneSurfaceDescription // SceneSelection
		{
		    float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PrePassSurfaceDescription // DepthPrePass
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PostPassSurfaceDescription //DepthPostPass
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPostpass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SmoothSurfaceDescription // MotionVectors DepthOnly
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

        struct PickingSurfaceDescription //Picking
		{
            float3 BentNormal;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;

			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 ObjectSpaceViewDirection;
			float3 WorldSpaceViewDirection;
			float3 ObjectSpacePosition;
		};

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlaneASE (float3 pos, float4 plane)
		{
			return dot (float4(pos,1.0f), plane);
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlaneASE(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlaneASE(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlaneASE(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlaneASE(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Cull [_CullMode]
			ZTest [_ZTestGBuffer]

			Stencil
			{
				Ref [_StencilRefGBuffer]
				WriteMask [_StencilWriteMaskGBuffer]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
            #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
            #pragma shader_feature_local_fragment _ _DISABLE_DECALS
            #define _SPECULAR_OCCLUSION_FROM_AO 1
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #define _MATERIAL_FEATURE_TRANSMISSION 1
            #pragma multi_compile _ LOD_FADE_CROSSFADE
            #define ASE_ABSOLUTE_VERTEX_POS 1
            #define _AMBIENT_OCCLUSION 1
            #define HAVE_MESH_MODIFICATION
            #define ASE_SRP_VERSION 170003
            #if !defined(ASE_NEED_CULLFACE)
            #define ASE_NEED_CULLFACE 1
            #endif //ASE_NEED_CULLFACE
            #define ASE_USING_SAMPLING_MACROS 1

            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ RENDERING_LAYERS
            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_GBUFFER

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};


			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness =					surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord9 = vertexToFrag24_g170573;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput,
						OUTPUT_GBUFFER(outGBuffer)
						#ifdef _DEPTHOFFSET_ON
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
						)
			{

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);
				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord7.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord9;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				half3 Input_Albedo24_g170770 = Out_Albedo4_g170771;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170770 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170770 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170770 = staticSwitch22_g170770;
				float4 break24_g170765 = Out_Shader4_g170771;
				half Metallic95_g170765 = break24_g170765.x;
				half Input_Metallic25_g170770 = Metallic95_g170765;
				half OneMinusReflectivity31_g170770 = ( (ColorSpaceDielectricSpec23_g170770).w - ( (ColorSpaceDielectricSpec23_g170770).w * Input_Metallic25_g170770 ) );
				
				float3 appendResult23_g170765 = (float3(Out_NormalTS4_g170771 , 1.0));
				float3 temp_output_13_0_g170769 = appendResult23_g170765;
				float3 temp_output_33_0_g170769 = ( temp_output_13_0_g170769 * _render_normal );
				float3 switchResult12_g170769 = (((isFrontFace>0)?(temp_output_13_0_g170769):(temp_output_33_0_g170769)));
				
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170770 * OneMinusReflectivity31_g170770 );
				surfaceDescription.Normal = switchResult12_g170769;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170771).xyz;
				surfaceDescription.Smoothness = break24_g170765.w;
				surfaceDescription.Occlusion = break24_g170765.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				surfaceDescription.AlphaClipThresholdDepthPrepass = 0.5;
				surfaceDescription.AlphaClipThresholdDepthPostpass = 0.5;

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170771;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170771;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170771;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif
				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				GetSurfaceAndBuiltinData( surfaceDescription, input, V, posInput, surfaceData, builtinData );
				ENCODE_INTO_GBUFFER( surfaceData, builtinData, posInput.positionSS, outGBuffer );
				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 170003
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma shader_feature _ EDITOR_VISUALIZATION
			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define SCENEPICKINGPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#if SHADERPASS == SHADERPASS_LIGHT_TRANSPORT
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/MetaPass.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				#ifdef EDITOR_VISUALIZATION
				float2 VizUV : TEXCOORD0;
				float4 LightCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

                #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

                #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                #endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);

				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.uv3.x , 0.0 , inputMesh.uv3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.uv0.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord9 = vertexToFrag24_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldPos;
				
				outputPackedVaryingsMeshToPS.ase_texcoord2 = inputMesh.uv0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.xy = inputMesh.uv2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord3.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;

				outputPackedVaryingsMeshToPS.positionCS = UnityMetaVertexPosition(inputMesh.positionOS, inputMesh.uv1.xy, inputMesh.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);

				#ifdef EDITOR_VISUALIZATION
					float2 vizUV = 0;
					float4 lightCoord = 0;
					UnityEditorVizData(inputMesh.positionOS.xyz, inputMesh.uv0.xy, inputMesh.uv1.xy, inputMesh.uv2.xy, vizUV, lightCoord);

					outputPackedVaryingsMeshToPS.VizUV.xy = vizUV;
					outputPackedVaryingsMeshToPS.LightCoord = lightCoord;
				#endif

				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv0 = v.uv0;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.uv3 = v.uv3;
				o.ase_color = v.ase_color;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv0 = patch[0].uv0 * bary.x + patch[1].uv0 * bary.y + patch[2].uv0 * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.uv3 = patch[0].uv3 * bary.x + patch[1].uv3 * bary.y + patch[2].uv3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			float4 Frag(PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				float3 V = float3(1.0, 1.0, 1.0);

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 ase_worldNormal = packedInput.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord7.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord9;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = packedInput.ase_texcoord10.xyz;
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				half3 Input_Albedo24_g170770 = Out_Albedo4_g170771;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170770 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170770 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170770 = staticSwitch22_g170770;
				float4 break24_g170765 = Out_Shader4_g170771;
				half Metallic95_g170765 = break24_g170765.x;
				half Input_Metallic25_g170770 = Metallic95_g170765;
				half OneMinusReflectivity31_g170770 = ( (ColorSpaceDielectricSpec23_g170770).w - ( (ColorSpaceDielectricSpec23_g170770).w * Input_Metallic25_g170770 ) );
				
				float3 appendResult23_g170765 = (float3(Out_NormalTS4_g170771 , 1.0));
				float3 temp_output_13_0_g170769 = appendResult23_g170765;
				float3 temp_output_33_0_g170769 = ( temp_output_13_0_g170769 * _render_normal );
				float3 switchResult12_g170769 = (((isFrontFace>0)?(temp_output_13_0_g170769):(temp_output_33_0_g170769)));
				
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170770 * OneMinusReflectivity31_g170770 );
				surfaceDescription.Normal = switchResult12_g170769;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170771).xyz;
				surfaceDescription.Smoothness = break24_g170765.w;
				surfaceDescription.Occlusion = break24_g170765.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170771;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170771;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170771;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				LightTransportData lightTransportData = GetLightTransportData(surfaceData, builtinData, bsdfData);

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				UnityMetaInput metaInput;
				metaInput.Albedo = lightTransportData.diffuseColor.rgb;
				metaInput.Emission = lightTransportData.emissiveColor;

			#ifdef EDITOR_VISUALIZATION
				metaInput.VizUV = packedInput.VizUV;
				metaInput.LightCoord = packedInput.LightCoord;
			#endif
				res = UnityMetaFragment(metaInput);

				return res;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			Cull [_CullMode]
			ZWrite On
			ZClip [_ZClip]
			ZTest LEqual
			ColorMask 0

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_SHADOWS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				// refraction ShadowCaster
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                    #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
                    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170573;
				
				outputPackedVaryingsMeshToPS.ase_texcoord1 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord2.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord2.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 ase_worldNormal = packedInput.ase_texcoord5.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord6.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord8;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
				outputDepth += bias;
				#endif

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmesh.positionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

                #if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
				    DecalPrepassData decalPrepassData;
                    #ifdef _DISABLE_DECALS
				    ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
                    #else
				    decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
                    #endif
				    decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
				    EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
		    #define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SceneSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				//refraction SceneSelectionPass
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SceneSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170573;
				
				outputPackedVaryingsMeshToPS.ase_texcoord1 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord2.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord2.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						, out float4 outColor : SV_Target0
						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SceneSurfaceDescription surfaceDescription = (SceneSurfaceDescription)0;
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 ase_worldNormal = packedInput.ase_texcoord5.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord6.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord8;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

				outColor = float4( _ObjectId, _PassValue, 1.0, 1.0 );
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			Cull [_CullMode]
			ZWrite On

			Stencil
			{
				Ref [_StencilRefDepth]
				WriteMask [_StencilWriteMaskDepth]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 170003
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER WRITE_RENDERING_LAYER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_DEPTH_ONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170573;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord4.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord8;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				float3 appendResult23_g170765 = (float3(Out_NormalTS4_g170771 , 1.0));
				float3 temp_output_13_0_g170769 = appendResult23_g170765;
				float3 temp_output_33_0_g170769 = ( temp_output_13_0_g170769 * _render_normal );
				float3 switchResult12_g170769 = (((isFrontFace>0)?(temp_output_13_0_g170769):(temp_output_33_0_g170769)));
				
				float4 break24_g170765 = Out_Shader4_g170771;
				
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.Normal = switchResult12_g170769;
				surfaceDescription.Smoothness = break24_g170765.w;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

                #if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
				outputDepth = posInput.deviceDepth;
				#endif

                #if SHADERPASS == SHADERPASS_SHADOWS
                float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
                outputDepth += bias;
                #endif

				#ifdef SCENESELECTIONPASS
    				outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
    				outColor = unity_SelectionID;
				#else
    				#ifdef WRITE_MSAA_DEPTH
    				depthColor = packedInput.positionCS.z;
    				depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
    				#endif

    				#if defined(WRITE_NORMAL_BUFFER)
    				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
    				#endif

    				#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
    				DecalPrepassData decalPrepassData;
                    #ifdef _DISABLE_DECALS
				    ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
                    #else
    				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
                    #endif
    				decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
    				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
    				#endif

				#endif // SCENESELECTIONPASS

			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "MotionVectors"
			Tags { "LightMode"="MotionVectors" }

			Cull [_CullMode]

			ZWrite On

			Stencil
			{
				Ref [_StencilRefMV]
				WriteMask [_StencilWriteMaskMV]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER_AND_RENDERING_LAYER

			#ifdef WRITE_DECAL_BUFFER_AND_RENDERING_LAYER
			#define WRITE_DECAL_BUFFER
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_MOTION_VECTORS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
               #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			     #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 vmeshPositionCS : SV_Position;
				float3 vmeshInterp00 : TEXCOORD0;
				float3 vpassInterpolators0 : TEXCOORD1; //interpolators0
				float3 vpassInterpolators1 : TEXCOORD2; //interpolators1
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord10 = vertexToFrag24_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord11.xyz = ase_worldPos;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord4.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord11.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);

				float3 VMESHpositionRWS = positionRWS;
				float4 VMESHpositionCS = TransformWorldToHClip(positionRWS);

				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(VMESHpositionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						if (_TransparentCameraOnlyMotionVectors > 0)
						{
							previousPositionRWS = VMESHpositionRWS.xyz;
						}
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}

				outputPackedVaryingsMeshToPS.vmeshPositionCS = VMESHpositionCS;
				outputPackedVaryingsMeshToPS.vmeshInterp00.xyz = VMESHpositionRWS;

				outputPackedVaryingsMeshToPS.vpassInterpolators0 = float3(VPASSpositionCS.xyw);
				outputPackedVaryingsMeshToPS.vpassInterpolators1 = float3(VPASSpreviousPositionCS.xyw);
				return outputPackedVaryingsMeshToPS;
			}

			#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			#if ( 0 ) // TEMPORARY: defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.previousPositionOS = v.previousPositionOS;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
				o.precomputedVelocity = v.precomputedVelocity;
				#endif
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.previousPositionOS = patch[0].previousPositionOS * bary.x + patch[1].previousPositionOS * bary.y + patch[2].previousPositionOS * bary.z;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
					o.precomputedVelocity = patch[0].precomputedVelocity * bary.x + patch[1].precomputedVelocity * bary.y + patch[2].precomputedVelocity * bary.z;
				#endif
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_DECAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target3
			#elif defined(WRITE_DECAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target2
			#else
			#define SV_TARGET_NORMAL SV_Target1
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_MSAA_DEPTH
					, out float4 depthColor : SV_Target0
					, out float4 outMotionVector : SV_Target1
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target2
						#endif
					#else
					, out float4 outMotionVector : SV_Target0
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target1
						#endif
					#endif

					#ifdef WRITE_NORMAL_BUFFER
					, out float4 outNormalBuffer : SV_TARGET_NORMAL
					#endif

					#ifdef _DEPTHOFFSET_ON
					, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
				, bool ase_vface : SV_IsFrontFace
				)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.vmeshPositionCS;
				input.positionRWS = packedInput.vmeshInterp00.xyz;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SurfaceData surfaceData;
				BuiltinData builtinData;

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 ase_worldNormal = packedInput.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord8.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord10;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = packedInput.ase_texcoord11.xyz;
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				float3 appendResult23_g170765 = (float3(Out_NormalTS4_g170771 , 1.0));
				float3 temp_output_13_0_g170769 = appendResult23_g170765;
				float3 temp_output_33_0_g170769 = ( temp_output_13_0_g170769 * _render_normal );
				float3 switchResult12_g170769 = (((ase_vface>0)?(temp_output_13_0_g170769):(temp_output_33_0_g170769)));
				
				float4 break24_g170765 = Out_Shader4_g170771;
				
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.Normal = switchResult12_g170769;
				surfaceDescription.Smoothness = break24_g170765.w;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				float4 VPASSpositionCS = float4(packedInput.vpassInterpolators0.xy, 0.0, packedInput.vpassInterpolators0.z);
				float4 VPASSpreviousPositionCS = float4(packedInput.vpassInterpolators1.xy, 0.0, packedInput.vpassInterpolators1.z);

				#ifdef _DEPTHOFFSET_ON
				VPASSpositionCS.w += builtinData.depthOffset;
				VPASSpreviousPositionCS.w += builtinData.depthOffset;
				#endif

				float2 motionVector = CalculateMotionVector( VPASSpositionCS, VPASSpreviousPositionCS );
				EncodeMotionVector( motionVector * 0.5, outMotionVector );

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if( forceNoMotion )
					outMotionVector = float4( 2.0, 0.0, 0.0, 0.0 );

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmeshPositionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if defined(WRITE_DECAL_BUFFER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					#endif
					decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="Forward" }

			Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
			Blend 1 SrcAlpha OneMinusSrcAlpha
			Blend 2 One [_DstBlend2]
			Blend 3 One [_DstBlend2]
			Blend 4 One OneMinusSrcAlpha

			Cull [_CullModeForward]
			ZTest [_ZTestDepthEqualForOpaque]
			ZWrite [_ZWrite]

			Stencil
			{
				Ref [_StencilRef]
				WriteMask [_StencilWriteMask]
				Comp Always
				Pass Replace
			}


            ColorMask [_ColorMaskTransparentVelOne] 1
            ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 170003
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile_fragment PUNCTUAL_SHADOW_LOW PUNCTUAL_SHADOW_MEDIUM PUNCTUAL_SHADOW_HIGH
            #pragma multi_compile_fragment DIRECTIONAL_SHADOW_LOW DIRECTIONAL_SHADOW_MEDIUM DIRECTIONAL_SHADOW_HIGH
            #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
            #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_FORWARD
		    #define HAS_LIGHTLOOP 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =                 surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord11 = vertexToFrag24_g170573;
				
				outputPackedVaryingsMeshToPS.ase_texcoord7 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outputPackedVaryingsMeshToPS.vpassPositionCS = float3(VPASSpositionCS.xyw);
					outputPackedVaryingsMeshToPS.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplayMaterial.hlsl"

            #if defined(_TRANSPARENT_REFRACTIVE_SORT) || defined(_ENABLE_FOG_ON_TRANSPARENT)
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/Shaders/UnderWaterUtilities.hlsl"
            #endif

            #ifdef UNITY_VIRTUAL_TEXTURING
                #ifdef OUTPUT_SPLIT_LIGHTING
                   #define DIFFUSE_LIGHTING_TARGET SV_Target2
                   #define SSS_BUFFER_TARGET SV_Target3
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                   #define MOTION_VECTOR_TARGET SV_Target2
                    #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        #define BEFORE_REFRACTION_TARGET SV_Target3
                        #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target4
                #endif
            	#endif
            #if defined(SHADER_API_PSSL)
            	#pragma PSSL_target_output_format(target 1 FMT_32_ABGR)
            #endif
            #else
                #ifdef OUTPUT_SPLIT_LIGHTING
                #define DIFFUSE_LIGHTING_TARGET SV_Target1
                #define SSS_BUFFER_TARGET SV_Target2
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                #define MOTION_VECTOR_TARGET SV_Target1
                #ifdef _TRANSPARENT_REFRACTIVE_SORT
                     #define BEFORE_REFRACTION_TARGET SV_Target2
                     #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target3
                #endif
            #endif
            #endif

			void Frag(PackedVaryingsMeshToPS packedInput
				, out float4 outColor:SV_Target0
            #ifdef UNITY_VIRTUAL_TEXTURING
				, out float4 outVTFeedback : SV_Target1
            #endif
            #ifdef OUTPUT_SPLIT_LIGHTING
				, out float4 outDiffuseLighting : DIFFUSE_LIGHTING_TARGET
				, OUTPUT_SSSBUFFER(outSSSBuffer) : SSS_BUFFER_TARGET
            #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
				, out float4 outMotionVec : MOTION_VECTOR_TARGET
                #ifdef _TRANSPARENT_REFRACTIVE_SORT
                , out float4 outBeforeRefractionColor : BEFORE_REFRACTION_TARGET
                , out float4 outBeforeRefractionAlpha : BEFORE_REFRACTION_ALPHA_TARGET
                #endif
            #endif
            #ifdef _DEPTHOFFSET_ON
				, out float outputDepth : DEPTH_OFFSET_SEMANTIC
            #endif
		    
						)
			{
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outMotionVec = float4(2.0, 0.0, 0.0, 1.0);
				#endif

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				AdjustFragInputsToOffScreenRendering(input, _OffScreenRendering > 0, _OffScreenDownsampleFactor);
				uint2 tileIndex = uint2(input.positionSS.xy) / GetTileSize ();

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord10.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord11;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				half3 Input_Albedo24_g170770 = Out_Albedo4_g170771;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170770 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170770 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170770 = staticSwitch22_g170770;
				float4 break24_g170765 = Out_Shader4_g170771;
				half Metallic95_g170765 = break24_g170765.x;
				half Input_Metallic25_g170770 = Metallic95_g170765;
				half OneMinusReflectivity31_g170770 = ( (ColorSpaceDielectricSpec23_g170770).w - ( (ColorSpaceDielectricSpec23_g170770).w * Input_Metallic25_g170770 ) );
				
				float3 appendResult23_g170765 = (float3(Out_NormalTS4_g170771 , 1.0));
				float3 temp_output_13_0_g170769 = appendResult23_g170765;
				float3 temp_output_33_0_g170769 = ( temp_output_13_0_g170769 * _render_normal );
				float3 switchResult12_g170769 = (((isFrontFace>0)?(temp_output_13_0_g170769):(temp_output_33_0_g170769)));
				
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170770 * OneMinusReflectivity31_g170770 );
				surfaceDescription.Normal = switchResult12_g170769;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170771).xyz;
				surfaceDescription.Smoothness = break24_g170765.w;
				surfaceDescription.Occlusion = break24_g170765.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170771;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170771;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170771;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif

				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

				PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

				outColor = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef DEBUG_DISPLAY
				#ifdef OUTPUT_SPLIT_LIGHTING
					outDiffuseLighting = float4(0, 0, 0, 1);
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#endif

			    bool viewMaterial = GetMaterialDebugColor(outColor, input, builtinData, posInput, surfaceData, bsdfData);

				if (!viewMaterial)
				{
					if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_DIFFUSE_COLOR || _DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_SPECULAR_COLOR)
					{
						float3 result = float3(0.0, 0.0, 0.0);
						GetPBRValidatorDebug(surfaceData, result);
						outColor = float4(result, 1.0f);
					}
					else if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_TRANSPARENCY_OVERDRAW)
					{
						float4 result = _DebugTransparencyOverdrawWeight * float4(TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_A);
						outColor = result;
					}
					else
                #endif
					{
                #ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
                #else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
                #endif
						LightLoopOutput lightLoopOutput;
						LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

						// Alias
						float3 diffuseLighting = lightLoopOutput.diffuseLighting;
						float3 specularLighting = lightLoopOutput.specularLighting;

						diffuseLighting *= GetCurrentExposureMultiplier();
						specularLighting *= GetCurrentExposureMultiplier();

                #ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = float4(0, 0, 0, 1);
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
                #else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);

						#ifdef _ENABLE_FOG_ON_TRANSPARENT
						outColor = EvaluateAtmosphericScattering(posInput, V, outColor);
                        #endif

                        #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        ComputeRefractionSplitColor(posInput, outColor, outBeforeRefractionColor, outBeforeRefractionAlpha);
                        #endif
                #endif

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
						float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);
						bool forceNoMotion = any(unity_MotionVectorsParams.yw == 0.0);
                #if defined(HAVE_VFX_MODIFICATION) && !VFX_FEATURE_MOTION_VECTORS
                        forceNoMotion = true;
                #endif
				        if (!forceNoMotion)
						{
							float2 motionVec = CalculateMotionVector(VPASSpositionCS, VPASSpreviousPositionCS);
							EncodeMotionVector(motionVec * 0.5, outMotionVec);
							outMotionVec.zw = 1.0;
						}
				#endif
				}

				#ifdef DEBUG_DISPLAY
				}
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

                #ifdef UNITY_VIRTUAL_TEXTURING
				    float vtAlphaValue = builtinData.opacity;
                    #if defined(HAS_REFRACTION) && HAS_REFRACTION
					vtAlphaValue = 1.0f - bsdfData.transmittanceMask;
                #endif
				outVTFeedback = PackVTFeedbackWithAlpha(builtinData.vtPackedFeedback, input.positionSS.xy, vtAlphaValue);
				outVTFeedback.rgb *= outVTFeedback.a; // premuliplied alpha
                #endif

			}
			ENDHLSL
		}

		
		Pass
        {
			
            Name "ScenePickingPass"
            Tags { "LightMode"="Picking" }

            Cull [_CullMode]

            HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define VARYINGS_NEED_TANGENT_TO_WORLD

            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
	
            CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _OverlayBlendRemap1;
			half4 _motion_base_proc_mode;
			half4 _MotionBaseMaskRemap;
			half4 _TintingLumaRemap;
			half4 _WetnessWaterColor;
			half4 _motion_push_vert_mode;
			half4 _motion_push_proc_mode;
			half4 _object_phase_mode;
			half4 _wetness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _WetnessMeshRemap;
			float4 _TintingColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			half4 _tinting_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayCoordValue;
			half4 _MotionSmallMaskRemap;
			half4 _DrynessBlendRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _OverlayGlitterColor;
			half4 _dryness_vert_mode;
			half4 _DrynessLumaRemap;
			half4 _MainMultiRemap;
			half4 _overlay_mask_coord_value;
			half4 _motion_tiny_proc_mode;
			half4 _MotionTinyMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			float4 _DrynessColor;
			half4 _OverlayProjRemap;
			half4 _TintingBlendRemap;
			half4 _OverlayLumaRemap;
			half4 _TintingMeshRemap;
			half4 _overlay_coord_value;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _WetnessDropsMeshRemap;
			half4 _SecondMaskRemap;
			half4 _emissive_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _SecondCoordValue;
			half4 _second_mask_coord_value;
			half4 _emissive_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _SecondMultiRemap;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _Color;
			half4 _MainCoordValue;
			half4 _SecondColor;
			half4 _EmissiveColor;
			half4 _main_coord_value;
			half4 _SecondColorTwo;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _MainColor;
			half4 _second_coord_value;
			half4 _SecondProjRemap;
			half4 _wetness_drops_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _GradientColorOne;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _cutout_vert_mode;
			half4 _SecondMeshRemap;
			half4 _ThirdProjRemap;
			half4 _CutoutMeshRemap;
			half4 _third_vert_mode;
			half4 _ThirdMaskRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _third_coord_value;
			half4 _SecondBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _OverlayColor;
			half3 _NormalSphereOffsetValue;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half _MotionHighlightValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _DitherDistanceMinValue;
			half _ThirdAlbedoValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _ThirdMetallicValue;
			half _ThirdOcclusionValue;
			half _ThirdSmoothnessValue;
			half _DitherProximityMaxValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _ThirdMaskValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _ThirdMeshValue;
			half _ThirdMeshMode;
			half _CutoutMeshValue;
			half _ThirdProjValue;
			half _CutoutNoiseValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdNormalValue;
			half _DitherDistanceMaxValue;
			half _SecondMeshMode;
			half _MainAlphaClipValue;
			half _SubsurfaceMultiValue;
			half _SecondAlbedoValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _SecondMetallicValue;
			half _SecondOcclusionValue;
			half _SecondSmoothnessValue;
			half _EmissiveCoordMode;
			half _SecondColorMode;
			half _SecondBlendAlbedoValue;
			half _EmissiveSampleMode;
			half _SecondIntensityValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _SecondMaskValue;
			half _DitherMultiValue;
			half _SecondProjValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _DitherGlancingAngleValue;
			half _SecondMeshValue;
			half _DitherDistanceValue;
			half _OverlaySampleMode;
			half _ThirdBlendShaderValue;
			half _CutoutNoiseTillingValue;
			half _OverlaySmoothnessValue;
			half _TintingLumaValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _OverlayProjValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _OverlayMaskValue;
			half _DrynessIntensityValue;
			half _OverlayMaskCoordMode;
			half _DrynessMultiValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _DrynessLumaValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _OverlayTextureMode;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayCoordMode;
			half _OverlaySubsurfaceValue;
			half _ThirdAlphaClipValue;
			half _TintingMultiValue;
			half _WetnessIntensityValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessDropsMeshMode;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessContrastValue;
			half _VariationIntensityValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _WetnessWaterMeshValue;
			half _TintingGrayValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _TintingIntensityValue;
			half _WetnessWaterIntensityValue;
			half _MainNormalValue;
			half _MainEnd;
			half _MainSmoothnessValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _GlobalCoatLayerValue;
			half _ObjectBoundsInfo;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _ObjectPhaseMode;
			half _GlobalCoatPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionIntensityValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionWindAdvancedInfo;
			half _MotionBaseNoiseValue;
			half _MotionWindOptimizedInfo;
			half _MotionPushElementMode;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _Cutoff;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _MotionWindElementMode;
			half _MotionWindMode;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _IsGeneralShader;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _MotionWindOffInfo;
			half _global_wind_layer_value;
			half _MotionSmallPivotValue;
			half _MotionSmallPhaseValue;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _TintingCategory;
			half _DetailCategory;
			half _DetailEnd;
			half _ThirdSampleMode;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _SubsurfaceThicknessValue;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionPushIntensityValue;
			half _MotionPushPhaseValue;
			half _MotionPushPivotValue;
			half _global_push_layer_value;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionFrontValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _NormalFlattenValue;
			half _MainColorMode;
			half _NormalSphereValue;
			half _NormalMeshValue;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalComputeValue;
			half _SubsurfaceScatteringValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_VERT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170697( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170706( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(PickingSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    surfaceDescription.Alpha = 1.0f;
                }
                #endif

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                //BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);

            }

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170756 = (TVEModelData)0;
				float In_Dummy16_g170756 = 0.0;
				TVEModelData Data16_g170740 = (TVEModelData)0;
				half Dummy1575_g170738 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170740 = Dummy1575_g170738;
				TVEModelData Data16_g170717 = (TVEModelData)0;
				float In_Dummy16_g170717 = 0.0;
				TVEModelData Data16_g170481 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g170481 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170210 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170210 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = PivotOS149_g170196;
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170210 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170210 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170210 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170210 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170210 = BoundsData254_g170196;
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				TVEModelData Data15_g170371 = Data16_g170210;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				TVEModelData Data15_g170477 = Data16_g170431;
				float Out_Dummy15_g170477 = 0;
				float3 Out_PositionOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170477 = float3( 0,0,0 );
				float4 Out_VertexData15_g170477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170477 = float4( 0,0,0,0 );
				Out_Dummy15_g170477 = Data15_g170477.Dummy;
				Out_PositionOS15_g170477 = Data15_g170477.PositionOS;
				Out_PositionWS15_g170477 = Data15_g170477.PositionWS;
				Out_PositionWO15_g170477 = Data15_g170477.PositionWO;
				Out_PositionRawOS15_g170477 = Data15_g170477.PositionRawOS;
				Out_PositionAddOS15_g170477 = Data15_g170477.PositionAddOS;
				Out_PivotOS15_g170477 = Data15_g170477.PivotOS;
				Out_PivotWS15_g170477 = Data15_g170477.PivotWS;
				Out_PivotWO15_g170477 = Data15_g170477.PivotWO;
				Out_NormalOS15_g170477 = Data15_g170477.NormalOS;
				Out_NormalWS15_g170477 = Data15_g170477.NormalWS;
				Out_NormalRawOS15_g170477 = Data15_g170477.NormalRawOS;
				Out_NormalRawWS15_g170477 = Data15_g170477.NormalRawWS;
				Out_TangentOS15_g170477 = Data15_g170477.TangentOS;
				Out_ViewDirWS15_g170477 = Data15_g170477.ViewDirWS;
				Out_VertexData15_g170477 = Data15_g170477.VertexData;
				Out_MotionData15_g170477 = Data15_g170477.MotionData;
				Out_BoundsData15_g170477 = Data15_g170477.BoundsData;
				Out_RotationData15_g170477 = Data15_g170477.RotationData;
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170477;
				float3 In_PositionOS16_g170481 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170477;
				float3 In_PositionWS16_g170481 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170477;
				float3 In_PositionWO16_g170481 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170481 = Out_PositionRawOS15_g170477;
				float3 temp_cast_39 = (0.0).xxx;
				half Small_Value2180_g170467 = _MotionSmallIntensityValue;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170477;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170479 = _motion_small_vert_mode;
				float temp_output_30_0_g170479 = ( break1689_g170467.x * break33_g170479.x );
				float temp_output_29_0_g170479 = ( break1689_g170467.y * break33_g170479.y );
				float temp_output_31_0_g170479 = ( break1689_g170467.z * break33_g170479.z );
				float temp_output_28_0_g170479 = ( temp_output_30_0_g170479 + temp_output_29_0_g170479 + temp_output_31_0_g170479 + ( break1689_g170467.w * break33_g170479.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170479;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170477;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170482 = _motion_small_proc_mode;
				float temp_output_30_0_g170482 = ( (Model_BoundsData1322_g170467).z * break33_g170482.x );
				float temp_output_29_0_g170482 = ( (Model_BoundsData1322_g170467).w * break33_g170482.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170484 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170485 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170485 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170485 );
				float temp_output_6_0_g170503 = saturate( ( ( clampResult17_g170484 - temp_output_7_0_g170485 ) / ( temp_output_10_0_g170485 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170503 = ( temp_output_6_0_g170503 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170503 = temp_output_6_0_g170503;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170503;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170477;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170477;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170510 = Base_Position1394_g170467;
				half Flow_TilllingRT1397_g170467 = _MotionTillingValue;
				half Input_MotionTillingRT670_g170510 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTillingRT670_g170510 * 0.005 );
				half4 Noise_ParamsRT535_g170510 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170510, 0.0 );
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170510 = Flow_Value1855_g170467;
				float2 lerpResult709_g170510 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult712_g170510 = (float3(lerpResult709_g170510 , ( (Noise_ParamsRT535_g170510).b * Input_MotionValue629_g170510 )));
				float4 lerpResult627_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170510 = (lerpResult627_g170510).xy;
				half Input_MotionTilling321_g170510 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170510 = ( -(Input_PositionWO419_g170510).xz * Input_MotionTilling321_g170510 * 0.005 );
				float2 temp_output_3_0_g170511 = Noise_Coord515_g170510;
				float2 temp_output_21_0_g170511 = (Global_WindDirection593_g170510*2.0 + -1.0);
				float lerpResult128_g170516 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170510 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170510 = ( ( lerpResult128_g170516 * Input_MotionSpeed62_g170510 ) * 0.02 );
				float temp_output_15_0_g170511 = Noise_Speed516_g170510;
				float temp_output_23_0_g170511 = frac( temp_output_15_0_g170511 );
				float4 lerpResult39_g170511 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * temp_output_23_0_g170511 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170511 + ( temp_output_21_0_g170511 * frac( ( temp_output_15_0_g170511 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170511 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170510 = lerpResult39_g170511;
				half Input_MotionNoise552_g170510 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g170510 = (lerpResult627_g170510).z;
				half Motion_Intensity720_g170510 = ( Global_WindIntensity576_g170510 * Input_MotionValue629_g170510 );
				float lerpResult701_g170510 = lerp( 1.0 , Input_MotionNoise552_g170510 , Motion_Intensity720_g170510);
				float2 lerpResult646_g170510 = lerp( Global_WindDirection593_g170510 , (Noise_Params685_g170510).rg , lerpResult701_g170510);
				float2 lerpResult724_g170510 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170510 , Motion_Intensity720_g170510);
				float3 appendResult708_g170510 = (float3(lerpResult724_g170510 , ( (Noise_Params685_g170510).a * Motion_Intensity720_g170510 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170510 = appendResult712_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170510 = appendResult708_g170510;
				#else
				float3 staticSwitch673_g170510 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170510 = staticSwitch673_g170510;
				float temp_output_136_0_g170517 = _global_wind_layer_value;
				float temp_output_19_0_g170519 = TVE_WindLayers[(int)temp_output_136_0_g170517];
				half3 Input_Position180_g170520 = Input_PositionWO419_g170510;
				float2 temp_output_75_0_g170520 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_82_0_g170520 = temp_output_136_0_g170517;
				float2 temp_output_119_0_g170520 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170520).xz ) );
				float temp_output_7_0_g170525 = 1.0;
				float temp_output_10_0_g170525 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170525 );
				float4 lerpResult131_g170520 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170520,temp_output_82_0_g170520, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170520,temp_output_82_0_g170520, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170520 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170525 ) / temp_output_10_0_g170525 ) ));
				float4 temp_output_17_0_g170519 = lerpResult131_g170520;
				float4 temp_output_3_0_g170519 = TVE_WindParams;
				float4 ifLocalVar18_g170519 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170519 >= 0.5 )
				ifLocalVar18_g170519 = temp_output_17_0_g170519;
				else
				ifLocalVar18_g170519 = temp_output_3_0_g170519;
				float4 lerpResult22_g170519 = lerp( temp_output_3_0_g170519 , temp_output_17_0_g170519 , temp_output_19_0_g170519);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170519 = lerpResult22_g170519;
				#else
				float4 staticSwitch24_g170519 = ifLocalVar18_g170519;
				#endif
				float4 temp_output_610_0_g170510 = staticSwitch24_g170519;
				float2 lerpResult699_g170510 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170510).rg , Input_MotionValue629_g170510);
				float3 appendResult643_g170510 = (float3(lerpResult699_g170510 , ( (temp_output_610_0_g170510).b * Input_MotionValue629_g170510 )));
				float3 lerpResult623_g170510 = lerp( Motion_Local694_g170510 , appendResult643_g170510 , (temp_output_610_0_g170510).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170510 = lerpResult623_g170510;
				#else
				float3 staticSwitch693_g170510 = appendResult643_g170510;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170510 = staticSwitch693_g170510;
				#else
				float3 staticSwitch612_g170510 = Motion_Local694_g170510;
				#endif
				float3 temp_output_2275_567_g170467 = staticSwitch612_g170510;
				float2 break83_g170499 = ((temp_output_2275_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170499 = (float3(break83_g170499.x , 0.0 , break83_g170499.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170499 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170527 = Small_Position1421_g170467;
				half Input_MotionTillingRT670_g170527 = ( Flow_TilllingRT1397_g170467 + 0.2 );
				half2 Noise_CoordRT668_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTillingRT670_g170527 * 0.005 );
				half4 Noise_ParamsRT535_g170527 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g170527, 0.0 );
				half Input_MotionValue629_g170527 = Flow_Value1855_g170467;
				float2 lerpResult709_g170527 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult712_g170527 = (float3(lerpResult709_g170527 , ( (Noise_ParamsRT535_g170527).b * Input_MotionValue629_g170527 )));
				float4 lerpResult627_g170527 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170527 = (lerpResult627_g170527).xy;
				half Input_MotionTilling321_g170527 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170527 = ( -(Input_PositionWO419_g170527).xz * Input_MotionTilling321_g170527 * 0.005 );
				float2 temp_output_3_0_g170528 = Noise_Coord515_g170527;
				float2 temp_output_21_0_g170528 = (Global_WindDirection593_g170527*2.0 + -1.0);
				float lerpResult128_g170533 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170527 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170527 = ( ( lerpResult128_g170533 * Input_MotionSpeed62_g170527 ) * 0.02 );
				float temp_output_15_0_g170528 = Noise_Speed516_g170527;
				float temp_output_23_0_g170528 = frac( temp_output_15_0_g170528 );
				float4 lerpResult39_g170528 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * temp_output_23_0_g170528 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170528 + ( temp_output_21_0_g170528 * frac( ( temp_output_15_0_g170528 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170528 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g170527 = lerpResult39_g170528;
				half Input_MotionNoise552_g170527 = _MotionSmallNoiseValue;
				half Global_WindIntensity576_g170527 = (lerpResult627_g170527).z;
				half Motion_Intensity720_g170527 = ( Global_WindIntensity576_g170527 * Input_MotionValue629_g170527 );
				float lerpResult701_g170527 = lerp( 1.0 , Input_MotionNoise552_g170527 , Motion_Intensity720_g170527);
				float2 lerpResult646_g170527 = lerp( Global_WindDirection593_g170527 , (Noise_Params685_g170527).rg , lerpResult701_g170527);
				float2 lerpResult724_g170527 = lerp( float2( 0.5,0.5 ) , lerpResult646_g170527 , Motion_Intensity720_g170527);
				float3 appendResult708_g170527 = (float3(lerpResult724_g170527 , ( (Noise_Params685_g170527).a * Motion_Intensity720_g170527 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g170527 = appendResult712_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g170527 = appendResult708_g170527;
				#else
				float3 staticSwitch673_g170527 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g170527 = staticSwitch673_g170527;
				float temp_output_136_0_g170534 = _global_wind_layer_value;
				float temp_output_19_0_g170536 = TVE_WindLayers[(int)temp_output_136_0_g170534];
				half3 Input_Position180_g170537 = Input_PositionWO419_g170527;
				float2 temp_output_75_0_g170537 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_82_0_g170537 = temp_output_136_0_g170534;
				float2 temp_output_119_0_g170537 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170537).xz ) );
				float temp_output_7_0_g170542 = 1.0;
				float temp_output_10_0_g170542 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170542 );
				float4 lerpResult131_g170537 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170537,temp_output_82_0_g170537, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170537,temp_output_82_0_g170537, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170537 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170542 ) / temp_output_10_0_g170542 ) ));
				float4 temp_output_17_0_g170536 = lerpResult131_g170537;
				float4 temp_output_3_0_g170536 = TVE_WindParams;
				float4 ifLocalVar18_g170536 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170536 >= 0.5 )
				ifLocalVar18_g170536 = temp_output_17_0_g170536;
				else
				ifLocalVar18_g170536 = temp_output_3_0_g170536;
				float4 lerpResult22_g170536 = lerp( temp_output_3_0_g170536 , temp_output_17_0_g170536 , temp_output_19_0_g170536);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170536 = lerpResult22_g170536;
				#else
				float4 staticSwitch24_g170536 = ifLocalVar18_g170536;
				#endif
				float4 temp_output_610_0_g170527 = staticSwitch24_g170536;
				float2 lerpResult699_g170527 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g170527).rg , Input_MotionValue629_g170527);
				float3 appendResult643_g170527 = (float3(lerpResult699_g170527 , ( (temp_output_610_0_g170527).b * Input_MotionValue629_g170527 )));
				float3 lerpResult623_g170527 = lerp( Motion_Local694_g170527 , appendResult643_g170527 , (temp_output_610_0_g170527).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g170527 = lerpResult623_g170527;
				#else
				float3 staticSwitch693_g170527 = appendResult643_g170527;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170527 = staticSwitch693_g170527;
				#else
				float3 staticSwitch612_g170527 = Motion_Local694_g170527;
				#endif
				float3 temp_output_2276_567_g170467 = staticSwitch612_g170527;
				float2 break83_g170498 = ((temp_output_2276_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170498 = (float3(break83_g170498.x , 0.0 , break83_g170498.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170498 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wave_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wave_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1939_g170467 = Small_Direction1489_g170467;
				#if defined( TVE_MOTION_WIND_OFF )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float staticSwitch734_g170527 = 4.0;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float staticSwitch734_g170527 = Input_MotionSpeed62_g170527;
				#else
				float staticSwitch734_g170527 = 4.0;
				#endif
				float mulTime113_g170543 = _TimeParameters.x * staticSwitch734_g170527;
				float lerpResult128_g170543 = lerp( mulTime113_g170543 , ( ( mulTime113_g170543 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break726_g170527 = Input_PositionWO419_g170527;
				half Small_Vertical2215_g170467 = ( sin( ( lerpResult128_g170543 + ( ( break726_g170527.x + break726_g170527.y + break726_g170527.z ) * 2.0 ) ) ) * 0.1 );
				half Small_Intensity2047_g170467 = length( Small_Direction1489_g170467 );
				float3 appendResult2056_g170467 = (float3(break1939_g170467.x , ( Small_Vertical2215_g170467 * Small_Intensity2047_g170467 ) , break1939_g170467.y));
				float lerpResult2098_g170467 = lerp( 1.0 , ( Small_Intensity2047_g170467 * Small_Intensity2047_g170467 ) , _MotionSmallDelayValue);
				float3 appendResult2101_g170467 = (float3(lerpResult2098_g170467 , 1.0 , lerpResult2098_g170467));
				half3 Small_Squash789_g170467 = ( Small_Value2180_g170467 * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult2056_g170467 * appendResult2101_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_50 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170480 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170480 = ( break1710_g170467.x * break33_g170480.x );
				float temp_output_29_0_g170480 = ( break1710_g170467.y * break33_g170480.y );
				float temp_output_31_0_g170480 = ( break1710_g170467.z * break33_g170480.z );
				float temp_output_28_0_g170480 = ( temp_output_30_0_g170480 + temp_output_29_0_g170480 + temp_output_31_0_g170480 + ( break1710_g170467.w * break33_g170480.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170480;
				float4 break33_g170483 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170483 = ( (Model_BoundsData1322_g170467).z * break33_g170483.x );
				float temp_output_29_0_g170483 = ( (Model_BoundsData1322_g170467).w * break33_g170483.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170488;
				half3 Input_Position500_g170504 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170504 = _MotionTinyTillingValue;
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170504 = _MotionTinySpeedValue;
				float3 temp_output_519_0_g170504 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170504).xz * Input_MotionTilling321_g170504 * 0.03 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170504 * 0.01 ) ), 0.0 ).rgb*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = temp_output_519_0_g170504;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half Base_Noise1159_g170467 = abs( (temp_output_2275_567_g170467).z );
				half Small_Noise1427_g170467 = (temp_output_2276_567_g170467).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch2013_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch2013_g170467 = Base_Noise1159_g170467;
				#endif
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Push_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Push_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_PushParams214_g170467 = staticSwitch24_g170469;
				half Push_Noise1977_g170467 = (Global_PushParams214_g170467).b;
				half Push_Value1501_g170467 = _MotionPushIntensityValue;
				half Push_Influence1504_g170467 = saturate( ( (Global_PushParams214_g170467).a * Push_Value1501_g170467 ) );
				float lerpResult2016_g170467 = lerp( staticSwitch2013_g170467 , Push_Noise1977_g170467 , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch2012_g170467 = lerpResult2016_g170467;
				#else
				float staticSwitch2012_g170467 = staticSwitch2013_g170467;
				#endif
				half Wave_Noise1475_g170467 = staticSwitch2012_g170467;
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * Motion_FadeMask1820_g170467 * Flow_Value1855_g170467 * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_50;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170481 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170477;
				float3 In_PivotOS16_g170481 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170481 = Out_PivotWS15_g170477;
				float3 In_PivotWO16_g170481 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170477;
				float3 In_NormalOS16_g170481 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170481 = Out_NormalWS15_g170477;
				float3 In_NormalRawOS16_g170481 = Out_NormalRawOS15_g170477;
				float3 In_NormalRawWS16_g170481 = Out_NormalRawWS15_g170477;
				float4 In_TangentOS16_g170481 = Out_TangentOS15_g170477;
				float3 In_ViewDirWS16_g170481 = Out_ViewDirWS15_g170477;
				float4 In_VertexData16_g170481 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170481 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170481 = temp_output_1567_30_g170467;
				float2 temp_cast_54 = (0.0).xx;
				half Base_Value2242_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170491 = _motion_base_vert_mode;
				float temp_output_30_0_g170491 = ( break748_g170467.x * break33_g170491.x );
				float temp_output_29_0_g170491 = ( break748_g170467.y * break33_g170491.y );
				float temp_output_31_0_g170491 = ( break748_g170467.z * break33_g170491.z );
				float temp_output_28_0_g170491 = ( temp_output_30_0_g170491 + temp_output_29_0_g170491 + temp_output_31_0_g170491 + ( break748_g170467.w * break33_g170491.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170491;
				float4 break33_g170492 = _motion_base_proc_mode;
				float temp_output_30_0_g170492 = ( (Model_BoundsData1322_g170467).z * break33_g170492.x );
				float temp_output_29_0_g170492 = ( (Model_BoundsData1322_g170467).w * break33_g170492.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170492 + temp_output_29_0_g170492 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170489 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170502 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170502;
				half Base_Intensity2041_g170467 = length( Base_Direction893_g170467 );
				float lerpResult2090_g170467 = lerp( 1.0 , ( Base_Intensity2041_g170467 * Base_Intensity2041_g170467 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170467 = ( Base_Value2242_g170467 * Base_Mask217_g170467 * Base_Direction893_g170467 * lerpResult2090_g170467 );
				#else
				float2 staticSwitch1573_g170467 = temp_cast_54;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170495 = _motion_push_vert_mode;
				float temp_output_30_0_g170495 = ( break1864_g170467.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break1864_g170467.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break1864_g170467.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break1864_g170467.w * break33_g170495.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_push_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170467).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170467).w * break33_g170496.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170493 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170494 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170494 );
				float temp_output_6_0_g170497 = saturate( ( ( clampResult17_g170493 - temp_output_7_0_g170494 ) / ( temp_output_10_0_g170494 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170497;
				float2 break83_g170500 = ((Global_PushParams214_g170467).rg*2.0 + -1.0);
				float3 appendResult79_g170500 = (float3(break83_g170500.x , 0.0 , break83_g170500.y));
				half2 Push_Direction1972_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170500 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Push_Mask1877_g170467 * Push_Value1501_g170467 * Push_Direction1972_g170467 ) , Push_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1496_g170467;
				#else
				float2 staticSwitch1506_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = staticSwitch1506_g170467;
				float4 appendResult2023_g170467 = (float4(Base_Bending1440_g170467 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170467 = appendResult2023_g170467;
				float4 In_RotationData16_g170481 = Final_RotationData1570_g170467;
				Data16_g170481.Dummy = In_Dummy16_g170481;
				Data16_g170481.PositionOS = In_PositionOS16_g170481;
				Data16_g170481.PositionWS = In_PositionWS16_g170481;
				Data16_g170481.PositionWO = In_PositionWO16_g170481;
				Data16_g170481.PositionRawOS = In_PositionRawOS16_g170481;
				Data16_g170481.PositionAddOS = In_PositionAddOS16_g170481;
				Data16_g170481.PivotOS = In_PivotOS16_g170481;
				Data16_g170481.PivotWS = In_PivotWS16_g170481;
				Data16_g170481.PivotWO = In_PivotWO16_g170481;
				Data16_g170481.NormalOS = In_NormalOS16_g170481;
				Data16_g170481.NormalWS = In_NormalWS16_g170481;
				Data16_g170481.NormalRawOS = In_NormalRawOS16_g170481;
				Data16_g170481.NormalRawWS = In_NormalRawWS16_g170481;
				Data16_g170481.TangentOS = In_TangentOS16_g170481;
				Data16_g170481.ViewDirWS = In_ViewDirWS16_g170481;
				Data16_g170481.VertexData = In_VertexData16_g170481;
				Data16_g170481.MotionData = In_MotionData16_g170481;
				Data16_g170481.BoundsData = In_BoundsData16_g170481;
				Data16_g170481.RotationData = In_RotationData16_g170481;
				TVEModelData Data15_g170716 = Data16_g170481;
				float Out_Dummy15_g170716 = 0;
				float3 Out_PositionOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170716 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170716 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170716 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170716 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170716 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170716 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170716 = float3( 0,0,0 );
				float4 Out_VertexData15_g170716 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170716 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170716 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170716 = float4( 0,0,0,0 );
				Out_Dummy15_g170716 = Data15_g170716.Dummy;
				Out_PositionOS15_g170716 = Data15_g170716.PositionOS;
				Out_PositionWS15_g170716 = Data15_g170716.PositionWS;
				Out_PositionWO15_g170716 = Data15_g170716.PositionWO;
				Out_PositionRawOS15_g170716 = Data15_g170716.PositionRawOS;
				Out_PositionAddOS15_g170716 = Data15_g170716.PositionAddOS;
				Out_PivotOS15_g170716 = Data15_g170716.PivotOS;
				Out_PivotWS15_g170716 = Data15_g170716.PivotWS;
				Out_PivotWO15_g170716 = Data15_g170716.PivotWO;
				Out_NormalOS15_g170716 = Data15_g170716.NormalOS;
				Out_NormalWS15_g170716 = Data15_g170716.NormalWS;
				Out_NormalRawOS15_g170716 = Data15_g170716.NormalRawOS;
				Out_NormalRawWS15_g170716 = Data15_g170716.NormalRawWS;
				Out_TangentOS15_g170716 = Data15_g170716.TangentOS;
				Out_ViewDirWS15_g170716 = Data15_g170716.ViewDirWS;
				Out_VertexData15_g170716 = Data15_g170716.VertexData;
				Out_MotionData15_g170716 = Data15_g170716.MotionData;
				Out_BoundsData15_g170716 = Data15_g170716.BoundsData;
				Out_RotationData15_g170716 = Data15_g170716.RotationData;
				half3 Model_PositionOS147_g170715 = Out_PositionOS15_g170716;
				half3 Input_False58_g170718 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170719 = Model_PositionOS147_g170715;
				half3 VertexPos40_g170720 = VertexPos40_g170719;
				float3 appendResult74_g170720 = (float3(VertexPos40_g170720.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170720 = appendResult74_g170720;
				float3 break84_g170720 = VertexPos40_g170720;
				float3 appendResult81_g170720 = (float3(0.0 , break84_g170720.y , break84_g170720.z));
				half3 VertexPosOtherAxis82_g170720 = appendResult81_g170720;
				float4 temp_output_1567_33_g170715 = Out_RotationData15_g170716;
				half4 Model_VertexBend1569_g170715 = temp_output_1567_33_g170715;
				half2 Angle44_g170719 = (Model_VertexBend1569_g170715).xy;
				half Angle44_g170720 = (Angle44_g170719).y;
				half3 VertexPos40_g170721 = ( VertexPosRotationAxis50_g170720 + ( VertexPosOtherAxis82_g170720 * cos( Angle44_g170720 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170720 ) * sin( Angle44_g170720 ) ) );
				float3 appendResult74_g170721 = (float3(0.0 , 0.0 , VertexPos40_g170721.z));
				half3 VertexPosRotationAxis50_g170721 = appendResult74_g170721;
				float3 break84_g170721 = VertexPos40_g170721;
				float3 appendResult81_g170721 = (float3(break84_g170721.x , break84_g170721.y , 0.0));
				half3 VertexPosOtherAxis82_g170721 = appendResult81_g170721;
				half Angle44_g170721 = -(Angle44_g170719).x;
				half3 Input_True57_g170718 = ( VertexPosRotationAxis50_g170721 + ( VertexPosOtherAxis82_g170721 * cos( Angle44_g170721 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170721 ) * sin( Angle44_g170721 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch65_g170718 = Input_False58_g170718;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch67_g170718 = staticSwitch65_g170718;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170718 = Input_True57_g170718;
				#else
				float3 staticSwitch69_g170718 = staticSwitch67_g170718;
				#endif
				float3 temp_output_1578_0_g170715 = staticSwitch69_g170718;
				float3 temp_output_1567_31_g170715 = Out_PositionAddOS15_g170716;
				half3 Model_PositionADD1568_g170715 = temp_output_1567_31_g170715;
				half3 Final_PositionOS178_g170715 = ( temp_output_1578_0_g170715 + Model_PositionADD1568_g170715 );
				float3 In_PositionOS16_g170717 = Final_PositionOS178_g170715;
				float3 In_PositionWS16_g170717 = Out_PositionWS15_g170716;
				float3 In_PositionWO16_g170717 = Out_PositionWO15_g170716;
				float3 In_PositionRawOS16_g170717 = Out_PositionRawOS15_g170716;
				float3 In_PositionAddOS16_g170717 = temp_output_1567_31_g170715;
				float3 In_PivotOS16_g170717 = Out_PivotOS15_g170716;
				float3 In_PivotWS16_g170717 = Out_PivotWS15_g170716;
				float3 In_PivotWO16_g170717 = Out_PivotWO15_g170716;
				float3 In_NormalOS16_g170717 = Out_NormalOS15_g170716;
				float3 In_NormalWS16_g170717 = Out_NormalWS15_g170716;
				float3 In_NormalRawOS16_g170717 = Out_NormalRawOS15_g170716;
				float3 In_NormalRawWS16_g170717 = Out_NormalRawWS15_g170716;
				float4 In_TangentOS16_g170717 = Out_TangentOS15_g170716;
				float3 In_ViewDirWS16_g170717 = Out_ViewDirWS15_g170716;
				float4 In_VertexData16_g170717 = Out_VertexData15_g170716;
				float4 In_MotionData16_g170717 = Out_MotionData15_g170716;
				float4 In_BoundsData16_g170717 = Out_BoundsData15_g170716;
				float4 In_RotationData16_g170717 = temp_output_1567_33_g170715;
				Data16_g170717.Dummy = In_Dummy16_g170717;
				Data16_g170717.PositionOS = In_PositionOS16_g170717;
				Data16_g170717.PositionWS = In_PositionWS16_g170717;
				Data16_g170717.PositionWO = In_PositionWO16_g170717;
				Data16_g170717.PositionRawOS = In_PositionRawOS16_g170717;
				Data16_g170717.PositionAddOS = In_PositionAddOS16_g170717;
				Data16_g170717.PivotOS = In_PivotOS16_g170717;
				Data16_g170717.PivotWS = In_PivotWS16_g170717;
				Data16_g170717.PivotWO = In_PivotWO16_g170717;
				Data16_g170717.NormalOS = In_NormalOS16_g170717;
				Data16_g170717.NormalWS = In_NormalWS16_g170717;
				Data16_g170717.NormalRawOS = In_NormalRawOS16_g170717;
				Data16_g170717.NormalRawWS = In_NormalRawWS16_g170717;
				Data16_g170717.TangentOS = In_TangentOS16_g170717;
				Data16_g170717.ViewDirWS = In_ViewDirWS16_g170717;
				Data16_g170717.VertexData = In_VertexData16_g170717;
				Data16_g170717.MotionData = In_MotionData16_g170717;
				Data16_g170717.BoundsData = In_BoundsData16_g170717;
				Data16_g170717.RotationData = In_RotationData16_g170717;
				TVEModelData Data15_g170739 = Data16_g170717;
				float Out_Dummy15_g170739 = 0;
				float3 Out_PositionOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170739 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170739 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170739 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170739 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170739 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170739 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170739 = float3( 0,0,0 );
				float4 Out_VertexData15_g170739 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170739 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170739 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170739 = float4( 0,0,0,0 );
				Out_Dummy15_g170739 = Data15_g170739.Dummy;
				Out_PositionOS15_g170739 = Data15_g170739.PositionOS;
				Out_PositionWS15_g170739 = Data15_g170739.PositionWS;
				Out_PositionWO15_g170739 = Data15_g170739.PositionWO;
				Out_PositionRawOS15_g170739 = Data15_g170739.PositionRawOS;
				Out_PositionAddOS15_g170739 = Data15_g170739.PositionAddOS;
				Out_PivotOS15_g170739 = Data15_g170739.PivotOS;
				Out_PivotWS15_g170739 = Data15_g170739.PivotWS;
				Out_PivotWO15_g170739 = Data15_g170739.PivotWO;
				Out_NormalOS15_g170739 = Data15_g170739.NormalOS;
				Out_NormalWS15_g170739 = Data15_g170739.NormalWS;
				Out_NormalRawOS15_g170739 = Data15_g170739.NormalRawOS;
				Out_NormalRawWS15_g170739 = Data15_g170739.NormalRawWS;
				Out_TangentOS15_g170739 = Data15_g170739.TangentOS;
				Out_ViewDirWS15_g170739 = Data15_g170739.ViewDirWS;
				Out_VertexData15_g170739 = Data15_g170739.VertexData;
				Out_MotionData15_g170739 = Data15_g170739.MotionData;
				Out_BoundsData15_g170739 = Data15_g170739.BoundsData;
				Out_RotationData15_g170739 = Data15_g170739.RotationData;
				float3 In_PositionOS16_g170740 = Out_PositionOS15_g170739;
				float3 In_PositionWS16_g170740 = Out_PositionWS15_g170739;
				float3 temp_output_1567_17_g170738 = Out_PositionWO15_g170739;
				float3 In_PositionWO16_g170740 = temp_output_1567_17_g170738;
				float3 temp_output_1567_26_g170738 = Out_PositionRawOS15_g170739;
				float3 In_PositionRawOS16_g170740 = temp_output_1567_26_g170738;
				float3 In_PositionAddOS16_g170740 = Out_PositionAddOS15_g170739;
				float3 In_PivotOS16_g170740 = Out_PivotOS15_g170739;
				float3 In_PivotWS16_g170740 = Out_PivotWS15_g170739;
				float3 In_PivotWO16_g170740 = Out_PivotWO15_g170739;
				half3 Model_NormalOS1568_g170738 = Out_NormalOS15_g170739;
				float3 lerpResult1589_g170738 = lerp( Model_NormalOS1568_g170738 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170738 = temp_output_1567_26_g170738;
				float3 normalizeResult1594_g170738 = ASESafeNormalize( ( Model_PositionRAW1592_g170738 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170738 = lerp( lerpResult1589_g170738 , normalizeResult1594_g170738 , _NormalSphereValue);
				half3 Input_False58_g170753 = lerpResult1585_g170738;
				half3 VertexPos40_g170742 = lerpResult1585_g170738;
				half3 VertexPos40_g170743 = VertexPos40_g170742;
				float3 appendResult74_g170743 = (float3(VertexPos40_g170743.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170743 = appendResult74_g170743;
				float3 break84_g170743 = VertexPos40_g170743;
				float3 appendResult81_g170743 = (float3(0.0 , break84_g170743.y , break84_g170743.z));
				half3 VertexPosOtherAxis82_g170743 = appendResult81_g170743;
				float4 temp_output_1567_33_g170738 = Out_RotationData15_g170739;
				half4 Model_RotationData1583_g170738 = temp_output_1567_33_g170738;
				half2 Angle44_g170742 = Model_RotationData1583_g170738.xy;
				half Angle44_g170743 = (Angle44_g170742).y;
				half3 VertexPos40_g170744 = ( VertexPosRotationAxis50_g170743 + ( VertexPosOtherAxis82_g170743 * cos( Angle44_g170743 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170743 ) * sin( Angle44_g170743 ) ) );
				float3 appendResult74_g170744 = (float3(0.0 , 0.0 , VertexPos40_g170744.z));
				half3 VertexPosRotationAxis50_g170744 = appendResult74_g170744;
				float3 break84_g170744 = VertexPos40_g170744;
				float3 appendResult81_g170744 = (float3(break84_g170744.x , break84_g170744.y , 0.0));
				half3 VertexPosOtherAxis82_g170744 = appendResult81_g170744;
				half Angle44_g170744 = -(Angle44_g170742).x;
				float3 lerpResult1591_g170738 = lerp( lerpResult1585_g170738 , ( VertexPosRotationAxis50_g170744 + ( VertexPosOtherAxis82_g170744 * cos( Angle44_g170744 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170744 ) * sin( Angle44_g170744 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170753 = lerpResult1591_g170738;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch65_g170753 = Input_False58_g170753;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch67_g170753 = staticSwitch65_g170753;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170753 = Input_True57_g170753;
				#else
				float3 staticSwitch69_g170753 = staticSwitch67_g170753;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170738 = staticSwitch69_g170753;
				#else
				float3 staticSwitch1595_g170738 = lerpResult1585_g170738;
				#endif
				float4 temp_output_1567_29_g170738 = Out_VertexData15_g170739;
				half4 Model_VertexData1608_g170738 = temp_output_1567_29_g170738;
				float4 break1683_g170738 = Model_VertexData1608_g170738;
				float4 break33_g170746 = _normal_vert_mode;
				float temp_output_30_0_g170746 = ( break1683_g170738.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break1683_g170738.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break1683_g170738.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break1683_g170738.w * break33_g170746.w ) );
				float clampResult17_g170748 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170747 = _NormalMeshRemap.x;
				float temp_output_10_0_g170747 = ( _NormalMeshRemap.y - temp_output_7_0_g170747 );
				float lerpResult1695_g170738 = lerp( 1.0 , saturate( ( ( clampResult17_g170748 - temp_output_7_0_g170747 ) / ( temp_output_10_0_g170747 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170749 = lerpResult1695_g170738;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170749 = ( temp_output_6_0_g170749 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170749 = temp_output_6_0_g170749;
				#endif
				float temp_output_1690_0_g170738 = staticSwitch14_g170749;
				half Normal_MeskMask1691_g170738 = temp_output_1690_0_g170738;
				half Normal_Proj_Mask1647_g170738 = 1.0;
				float temp_output_1699_0_g170738 = ( Normal_MeskMask1691_g170738 * Normal_Proj_Mask1647_g170738 );
				float3 lerpResult1670_g170738 = lerp( Model_NormalOS1568_g170738 , staticSwitch1595_g170738 , temp_output_1699_0_g170738);
				half3 Final_NormalOS178_g170738 = lerpResult1670_g170738;
				float3 In_NormalOS16_g170740 = Final_NormalOS178_g170738;
				float3 temp_output_1567_21_g170738 = Out_NormalWS15_g170739;
				float3 In_NormalWS16_g170740 = temp_output_1567_21_g170738;
				float3 In_NormalRawOS16_g170740 = Out_NormalRawOS15_g170739;
				float3 In_NormalRawWS16_g170740 = Out_NormalRawWS15_g170739;
				float4 In_TangentOS16_g170740 = Out_TangentOS15_g170739;
				float3 In_ViewDirWS16_g170740 = Out_ViewDirWS15_g170739;
				float4 In_VertexData16_g170740 = temp_output_1567_29_g170738;
				float4 In_MotionData16_g170740 = Out_MotionData15_g170739;
				float4 In_BoundsData16_g170740 = Out_BoundsData15_g170739;
				float4 In_RotationData16_g170740 = temp_output_1567_33_g170738;
				Data16_g170740.Dummy = In_Dummy16_g170740;
				Data16_g170740.PositionOS = In_PositionOS16_g170740;
				Data16_g170740.PositionWS = In_PositionWS16_g170740;
				Data16_g170740.PositionWO = In_PositionWO16_g170740;
				Data16_g170740.PositionRawOS = In_PositionRawOS16_g170740;
				Data16_g170740.PositionAddOS = In_PositionAddOS16_g170740;
				Data16_g170740.PivotOS = In_PivotOS16_g170740;
				Data16_g170740.PivotWS = In_PivotWS16_g170740;
				Data16_g170740.PivotWO = In_PivotWO16_g170740;
				Data16_g170740.NormalOS = In_NormalOS16_g170740;
				Data16_g170740.NormalWS = In_NormalWS16_g170740;
				Data16_g170740.NormalRawOS = In_NormalRawOS16_g170740;
				Data16_g170740.NormalRawWS = In_NormalRawWS16_g170740;
				Data16_g170740.TangentOS = In_TangentOS16_g170740;
				Data16_g170740.ViewDirWS = In_ViewDirWS16_g170740;
				Data16_g170740.VertexData = In_VertexData16_g170740;
				Data16_g170740.MotionData = In_MotionData16_g170740;
				Data16_g170740.BoundsData = In_BoundsData16_g170740;
				Data16_g170740.RotationData = In_RotationData16_g170740;
				TVEModelData Data15_g170755 = Data16_g170740;
				float Out_Dummy15_g170755 = 0;
				float3 Out_PositionOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170755 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170755 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170755 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170755 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170755 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170755 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170755 = float3( 0,0,0 );
				float4 Out_VertexData15_g170755 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170755 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170755 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170755 = float4( 0,0,0,0 );
				Out_Dummy15_g170755 = Data15_g170755.Dummy;
				Out_PositionOS15_g170755 = Data15_g170755.PositionOS;
				Out_PositionWS15_g170755 = Data15_g170755.PositionWS;
				Out_PositionWO15_g170755 = Data15_g170755.PositionWO;
				Out_PositionRawOS15_g170755 = Data15_g170755.PositionRawOS;
				Out_PositionAddOS15_g170755 = Data15_g170755.PositionAddOS;
				Out_PivotOS15_g170755 = Data15_g170755.PivotOS;
				Out_PivotWS15_g170755 = Data15_g170755.PivotWS;
				Out_PivotWO15_g170755 = Data15_g170755.PivotWO;
				Out_NormalOS15_g170755 = Data15_g170755.NormalOS;
				Out_NormalWS15_g170755 = Data15_g170755.NormalWS;
				Out_NormalRawOS15_g170755 = Data15_g170755.NormalRawOS;
				Out_NormalRawWS15_g170755 = Data15_g170755.NormalRawWS;
				Out_TangentOS15_g170755 = Data15_g170755.TangentOS;
				Out_ViewDirWS15_g170755 = Data15_g170755.ViewDirWS;
				Out_VertexData15_g170755 = Data15_g170755.VertexData;
				Out_MotionData15_g170755 = Data15_g170755.MotionData;
				Out_BoundsData15_g170755 = Data15_g170755.BoundsData;
				Out_RotationData15_g170755 = Data15_g170755.RotationData;
				float3 temp_output_217_24_g170754 = Out_PivotOS15_g170755;
				float3 In_PositionOS16_g170756 = ( Out_PositionOS15_g170755 + temp_output_217_24_g170754 );
				float3 In_PositionWS16_g170756 = Out_PositionWS15_g170755;
				float3 In_PositionWO16_g170756 = Out_PositionWO15_g170755;
				float3 In_PositionRawOS16_g170756 = Out_PositionRawOS15_g170755;
				float3 In_PositionAddOS16_g170756 = Out_PositionAddOS15_g170755;
				float3 In_PivotOS16_g170756 = temp_output_217_24_g170754;
				float3 In_PivotWS16_g170756 = Out_PivotWS15_g170755;
				float3 In_PivotWO16_g170756 = Out_PivotWO15_g170755;
				float3 In_NormalOS16_g170756 = Out_NormalOS15_g170755;
				float3 In_NormalWS16_g170756 = Out_NormalWS15_g170755;
				float3 In_NormalRawOS16_g170756 = Out_NormalRawOS15_g170755;
				float3 In_NormalRawWS16_g170756 = Out_NormalRawWS15_g170755;
				float4 In_TangentOS16_g170756 = Out_TangentOS15_g170755;
				float3 In_ViewDirWS16_g170756 = Out_ViewDirWS15_g170755;
				float4 In_VertexData16_g170756 = Out_VertexData15_g170755;
				float4 In_MotionData16_g170756 = Out_MotionData15_g170755;
				float4 In_BoundsData16_g170756 = Out_BoundsData15_g170755;
				float4 In_RotationData16_g170756 = Out_RotationData15_g170755;
				Data16_g170756.Dummy = In_Dummy16_g170756;
				Data16_g170756.PositionOS = In_PositionOS16_g170756;
				Data16_g170756.PositionWS = In_PositionWS16_g170756;
				Data16_g170756.PositionWO = In_PositionWO16_g170756;
				Data16_g170756.PositionRawOS = In_PositionRawOS16_g170756;
				Data16_g170756.PositionAddOS = In_PositionAddOS16_g170756;
				Data16_g170756.PivotOS = In_PivotOS16_g170756;
				Data16_g170756.PivotWS = In_PivotWS16_g170756;
				Data16_g170756.PivotWO = In_PivotWO16_g170756;
				Data16_g170756.NormalOS = In_NormalOS16_g170756;
				Data16_g170756.NormalWS = In_NormalWS16_g170756;
				Data16_g170756.NormalRawOS = In_NormalRawOS16_g170756;
				Data16_g170756.NormalRawWS = In_NormalRawWS16_g170756;
				Data16_g170756.TangentOS = In_TangentOS16_g170756;
				Data16_g170756.ViewDirWS = In_ViewDirWS16_g170756;
				Data16_g170756.VertexData = In_VertexData16_g170756;
				Data16_g170756.MotionData = In_MotionData16_g170756;
				Data16_g170756.BoundsData = In_BoundsData16_g170756;
				Data16_g170756.RotationData = In_RotationData16_g170756;
				TVEModelData Data15_g170768 = Data16_g170756;
				float Out_Dummy15_g170768 = 0;
				float3 Out_PositionOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170768 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170768 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170768 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170768 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170768 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170768 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170768 = float3( 0,0,0 );
				float4 Out_VertexData15_g170768 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170768 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170768 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170768 = float4( 0,0,0,0 );
				Out_Dummy15_g170768 = Data15_g170768.Dummy;
				Out_PositionOS15_g170768 = Data15_g170768.PositionOS;
				Out_PositionWS15_g170768 = Data15_g170768.PositionWS;
				Out_PositionWO15_g170768 = Data15_g170768.PositionWO;
				Out_PositionRawOS15_g170768 = Data15_g170768.PositionRawOS;
				Out_PositionAddOS15_g170768 = Data15_g170768.PositionAddOS;
				Out_PivotOS15_g170768 = Data15_g170768.PivotOS;
				Out_PivotWS15_g170768 = Data15_g170768.PivotWS;
				Out_PivotWO15_g170768 = Data15_g170768.PivotWO;
				Out_NormalOS15_g170768 = Data15_g170768.NormalOS;
				Out_NormalWS15_g170768 = Data15_g170768.NormalWS;
				Out_NormalRawOS15_g170768 = Data15_g170768.NormalRawOS;
				Out_NormalRawWS15_g170768 = Data15_g170768.NormalRawWS;
				Out_TangentOS15_g170768 = Data15_g170768.TangentOS;
				Out_ViewDirWS15_g170768 = Data15_g170768.ViewDirWS;
				Out_VertexData15_g170768 = Data15_g170768.VertexData;
				Out_MotionData15_g170768 = Data15_g170768.MotionData;
				Out_BoundsData15_g170768 = Data15_g170768.BoundsData;
				Out_RotationData15_g170768 = Data15_g170768.RotationData;
				float3 temp_output_31_0_g170765 = Out_PositionOS15_g170768;
				
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 * Wave_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170501;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				outputPackedVaryingsMeshToPS.ase_texcoord11 = vertexToFrag24_g170573;
				
				outputPackedVaryingsMeshToPS.ase_texcoord7 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue =  ( temp_output_31_0_g170765 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170768;
				inputMesh.tangentOS = Out_TangentOS15_g170768;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outputPackedVaryingsMeshToPS.vpassPositionCS = float3(VPASSpositionCS.xyw);
					outputPackedVaryingsMeshToPS.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				PickingSurfaceDescription surfaceDescription = (PickingSurfaceDescription)0;
				float localCustomAlphaClip19_g170772 = ( 0.0 );
				float localBreakData4_g170771 = ( 0.0 );
				float localCompData3_g170759 = ( 0.0 );
				TVEVisualData Data3_g170759 = (TVEVisualData)0;
				half Dummy145_g170757 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170759 = Dummy145_g170757;
				float localBreakData4_g170758 = ( 0.0 );
				float localCompData3_g170733 = ( 0.0 );
				TVEVisualData Data3_g170733 = (TVEVisualData)0;
				half Dummy145_g170723 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170733 = Dummy145_g170723;
				float localBreakData4_g170732 = ( 0.0 );
				float localCompData3_g170705 = ( 0.0 );
				TVEVisualData Data3_g170705 = (TVEVisualData)0;
				half Dummy594_g170702 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170705 = Dummy594_g170702;
				float localBreakData4_g170704 = ( 0.0 );
				float localCompData3_g170690 = ( 0.0 );
				TVEVisualData Data3_g170690 = (TVEVisualData)0;
				half Dummy594_g170689 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170690 = Dummy594_g170689;
				float localBreakData4_g170700 = ( 0.0 );
				float localCompData3_g170662 = ( 0.0 );
				TVEVisualData Data3_g170662 = (TVEVisualData)0;
				half Dummy594_g170660 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170662 = Dummy594_g170660;
				float localBreakData4_g170661 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				half Dummy594_g170624 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170627 = Dummy594_g170624;
				float localBreakData4_g170625 = ( 0.0 );
				float localCompData3_g170623 = ( 0.0 );
				TVEVisualData Data3_g170623 = (TVEVisualData)0;
				float In_Dummy3_g170623 = 0.0;
				float localBreakData4_g170622 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170574;
				float localBreakData4_g170596 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170427 = ( 0.0 );
				TVEVisualData Data3_g170427 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170427 = Dummy946_g170394.x;
				float localBreakData4_g170406 = ( 0.0 );
				float localCompData3_g170388 = ( 0.0 );
				TVEVisualData Data3_g170388 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170388 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170381) = _MainAlbedoTex;
				float localFilterTexture19_g170384 = ( 0.0 );
				SamplerState SamplerDefault19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170384 = SamplerDefault19_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170384 = SamplerDefault19_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170384 = SamplerPoint19_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170384 = SamplerLow19_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170384 = SamplerMedium19_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170384 = SamplerHigh19_g170384;
				#endif
				SamplerState Sampler276_g170381 = SS19_g170384;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainAlbedoTex;
				SamplerState Sampler275_g170381 = SS19_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainAlbedoTex;
				SamplerState Sampler238_g170381 = SS19_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				float In_Dummy16_g170211 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( packedInput.normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170211 = float4( 1,1,1,1 );
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				TVEModelData Data15_g170387 = Data16_g170211;
				float Out_Dummy15_g170387 = 0;
				float3 Out_PositionWS15_g170387 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170387 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170387 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170387 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170387 = float3( 0,0,0 );
				float4 Out_VertexData15_g170387 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170387 = float4( 0,0,0,0 );
				Out_Dummy15_g170387 = Data15_g170387.Dummy;
				Out_PositionWS15_g170387 = Data15_g170387.PositionWS;
				Out_PositionWO15_g170387 = Data15_g170387.PositionWO;
				Out_PivotWS15_g170387 = Data15_g170387.PivotWS;
				Out_PivotWO15_g170387 = Data15_g170387.PivotWO;
				Out_NormalWS15_g170387 = Data15_g170387.NormalWS;
				Out_ViewDirWS15_g170387 = Data15_g170387.ViewDirWS;
				Out_VertexData15_g170387 = Data15_g170387.VertexData;
				Out_BoundsData15_g170387 = Data15_g170387.BoundsData;
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170387;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainAlbedoTex;
				SamplerState Sampler246_g170381 = SS19_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170387;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainAlbedoTex;
				SamplerState Sampler234_g170381 = SS19_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainAlbedoTex;
				SamplerState Sampler263_g170381 = SS19_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170383) = _MainShaderTex;
				float localFilterTexture30_g170386 = ( 0.0 );
				SamplerState SamplerDefault30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170386 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170386 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170386 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170386 = SamplerDefault30_g170386;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170386 = SamplerDefault30_g170386;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170386 = SamplerPoint30_g170386;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170386 = SamplerLow30_g170386;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170386 = SamplerMedium30_g170386;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170386 = SamplerHigh30_g170386;
				#endif
				SamplerState Sampler276_g170383 = SS30_g170386;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainShaderTex;
				SamplerState Sampler275_g170383 = SS30_g170386;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainShaderTex;
				SamplerState Sampler238_g170383 = SS30_g170386;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainShaderTex;
				SamplerState Sampler246_g170383 = SS30_g170386;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainShaderTex;
				SamplerState Sampler234_g170383 = SS30_g170386;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainShaderTex;
				SamplerState Sampler263_g170383 = SS30_g170386;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170378 = _MainMultiRemap.x;
				float temp_output_10_0_g170378 = ( _MainMultiRemap.y - temp_output_7_0_g170378 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170377 - temp_output_7_0_g170378 ) / ( temp_output_10_0_g170378 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170388 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170388 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170382) = _MainNormalTex;
				float localFilterTexture29_g170385 = ( 0.0 );
				SamplerState SamplerDefault29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170385 = SamplerDefault29_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170385 = SamplerDefault29_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170385 = SamplerPoint29_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170385 = SamplerLow29_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170385 = SamplerMedium29_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170385 = SamplerHigh29_g170385;
				#endif
				SamplerState Sampler276_g170382 = SS29_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainNormalTex;
				SamplerState Sampler275_g170382 = SS29_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainNormalTex;
				SamplerState Sampler238_g170382 = SS29_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainNormalTex;
				SamplerState Sampler246_g170382 = SS29_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainNormalTex;
				SamplerState Sampler234_g170382 = SS29_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainNormalTex;
				SamplerState Sampler263_g170382 = SS29_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord10.xyz;
				float3x3 ase_worldToTangent = float3x3(packedInput.tangentWS.xyz,ase_worldBitangent,packedInput.normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170388 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( packedInput.tangentWS.xyz.x, ase_worldBitangent.x, packedInput.normalWS.x );
				float3 tanToWorld1 = float3( packedInput.tangentWS.xyz.y, ase_worldBitangent.y, packedInput.normalWS.y );
				float3 tanToWorld2 = float3( packedInput.tangentWS.xyz.z, ase_worldBitangent.z, packedInput.normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170388 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170388 = Local_Masks109_g170372;
				float4 In_Emissive3_g170388 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170388 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170388 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170388 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170388 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170388 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170388 = temp_cast_4;
				float In_Transmission3_g170388 = 1.0;
				float In_Thickness3_g170388 = 0.0;
				float In_Diffusion3_g170388 = 0.0;
				Data3_g170388.Dummy = In_Dummy3_g170388;
				Data3_g170388.Albedo = In_Albedo3_g170388;
				Data3_g170388.AlbedoRaw = In_AlbedoRaw3_g170388;
				Data3_g170388.NormalTS = In_NormalTS3_g170388;
				Data3_g170388.NormalWS = In_NormalWS3_g170388;
				Data3_g170388.Shader = In_Shader3_g170388;
				Data3_g170388.Emissive= In_Emissive3_g170388;
				Data3_g170388.MultiMask = In_MultiMask3_g170388;
				Data3_g170388.Grayscale = In_Grayscale3_g170388;
				Data3_g170388.Luminosity = In_Luminosity3_g170388;
				Data3_g170388.AlphaClip = In_AlphaClip3_g170388;
				Data3_g170388.AlphaFade = In_AlphaFade3_g170388;
				Data3_g170388.Translucency = In_Translucency3_g170388;
				Data3_g170388.Transmission = In_Transmission3_g170388;
				Data3_g170388.Thickness = In_Thickness3_g170388;
				Data3_g170388.Diffusion = In_Diffusion3_g170388;
				TVEVisualData Data4_g170406 = Data3_g170388;
				float Out_Dummy4_g170406 = 0;
				float3 Out_Albedo4_g170406 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170406 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170406 = float2( 0,0 );
				float3 Out_NormalWS4_g170406 = float3( 0,0,0 );
				float4 Out_Shader4_g170406 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170406 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170406 = 0;
				float Out_Grayscale4_g170406 = 0;
				float Out_Luminosity4_g170406 = 0;
				float Out_AlphaClip4_g170406 = 0;
				float Out_AlphaFade4_g170406 = 0;
				float3 Out_Translucency4_g170406 = float3( 0,0,0 );
				float Out_Transmission4_g170406 = 0;
				float Out_Thickness4_g170406 = 0;
				float Out_Diffusion4_g170406 = 0;
				Out_Dummy4_g170406 = Data4_g170406.Dummy;
				Out_Albedo4_g170406 = Data4_g170406.Albedo;
				Out_AlbedoRaw4_g170406 = Data4_g170406.AlbedoRaw;
				Out_NormalTS4_g170406 = Data4_g170406.NormalTS;
				Out_NormalWS4_g170406 = Data4_g170406.NormalWS;
				Out_Shader4_g170406 = Data4_g170406.Shader;
				Out_Emissive4_g170406= Data4_g170406.Emissive;
				Out_MultiMask4_g170406 = Data4_g170406.MultiMask;
				Out_Grayscale4_g170406 = Data4_g170406.Grayscale;
				Out_Luminosity4_g170406= Data4_g170406.Luminosity;
				Out_AlphaClip4_g170406 = Data4_g170406.AlphaClip;
				Out_AlphaFade4_g170406 = Data4_g170406.AlphaFade;
				Out_Translucency4_g170406 = Data4_g170406.Translucency;
				Out_Transmission4_g170406 = Data4_g170406.Transmission;
				Out_Thickness4_g170406 = Data4_g170406.Thickness;
				Out_Diffusion4_g170406 = Data4_g170406.Diffusion;
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170406;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170423 = ( 0.0 );
				SamplerState SamplerDefault19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170423 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170423 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170423 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170423 = SamplerDefault19_g170423;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170423 = SamplerDefault19_g170423;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170423 = SamplerPoint19_g170423;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170423 = SamplerLow19_g170423;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170423 = SamplerMedium19_g170423;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170423 = SamplerHigh19_g170423;
				#endif
				SamplerState Sampler276_g170395 = SS19_g170423;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170423;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170423;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170426 = Data16_g170211;
				float Out_Dummy15_g170426 = 0;
				float3 Out_PositionWS15_g170426 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170426 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170426 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170426 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170426 = float3( 0,0,0 );
				float4 Out_VertexData15_g170426 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170426 = float4( 0,0,0,0 );
				Out_Dummy15_g170426 = Data15_g170426.Dummy;
				Out_PositionWS15_g170426 = Data15_g170426.PositionWS;
				Out_PositionWO15_g170426 = Data15_g170426.PositionWO;
				Out_PivotWS15_g170426 = Data15_g170426.PivotWS;
				Out_PivotWO15_g170426 = Data15_g170426.PivotWO;
				Out_NormalWS15_g170426 = Data15_g170426.NormalWS;
				Out_ViewDirWS15_g170426 = Data15_g170426.ViewDirWS;
				Out_VertexData15_g170426 = Data15_g170426.VertexData;
				Out_BoundsData15_g170426 = Data15_g170426.BoundsData;
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170426;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170423;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170426;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170423;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170423;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170425 = ( 0.0 );
				SamplerState SamplerDefault30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170425 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170425 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170425 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170425 = SamplerDefault30_g170425;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170425 = SamplerDefault30_g170425;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170425 = SamplerPoint30_g170425;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170425 = SamplerLow30_g170425;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170425 = SamplerMedium30_g170425;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170425 = SamplerHigh30_g170425;
				#endif
				SamplerState Sampler276_g170397 = SS30_g170425;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170425;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170425;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170425;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170425;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170425;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170410 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170409 = _SecondMaskRemap.x;
				float temp_output_10_0_g170409 = ( _SecondMaskRemap.y - temp_output_7_0_g170409 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170410 - temp_output_7_0_g170409 ) / ( temp_output_10_0_g170409 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170406;
				float clampResult17_g170411 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170412 = _SecondProjRemap.x;
				float temp_output_10_0_g170412 = ( _SecondProjRemap.y - temp_output_7_0_g170412 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170412 ) / ( temp_output_10_0_g170412 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170426;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170413 = _second_vert_mode;
				float temp_output_30_0_g170413 = ( break965_g170394.x * break33_g170413.x );
				float temp_output_29_0_g170413 = ( break965_g170394.y * break33_g170413.y );
				float temp_output_31_0_g170413 = ( break965_g170394.z * break33_g170413.z );
				float temp_output_28_0_g170413 = ( temp_output_30_0_g170413 + temp_output_29_0_g170413 + temp_output_31_0_g170413 + ( break965_g170394.w * break33_g170413.w ) );
				float clampResult17_g170407 = clamp( temp_output_28_0_g170413 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170408 = _SecondMeshRemap.x;
				float temp_output_10_0_g170408 = ( _SecondMeshRemap.y - temp_output_7_0_g170408 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170407 - temp_output_7_0_g170408 ) / ( temp_output_10_0_g170408 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170421 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170421;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170222 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170224 = TVE_CoatLayers[(int)temp_output_82_0_g170222];
				TVEModelData Data15_g170294 = Data16_g170211;
				float Out_Dummy15_g170294 = 0;
				float3 Out_PositionWS15_g170294 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170294 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170294 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170294 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170294 = float3( 0,0,0 );
				float4 Out_VertexData15_g170294 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170294 = float4( 0,0,0,0 );
				Out_Dummy15_g170294 = Data15_g170294.Dummy;
				Out_PositionWS15_g170294 = Data15_g170294.PositionWS;
				Out_PositionWO15_g170294 = Data15_g170294.PositionWO;
				Out_PivotWS15_g170294 = Data15_g170294.PivotWS;
				Out_PivotWO15_g170294 = Data15_g170294.PivotWO;
				Out_NormalWS15_g170294 = Data15_g170294.NormalWS;
				Out_ViewDirWS15_g170294 = Data15_g170294.ViewDirWS;
				Out_VertexData15_g170294 = Data15_g170294.VertexData;
				Out_BoundsData15_g170294 = Data15_g170294.BoundsData;
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170294;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170294;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170225 = lerpResult300_g170212;
				float2 temp_output_75_0_g170225 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_82_0_g170225 = temp_output_82_0_g170222;
				float2 temp_output_119_0_g170225 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170225).xz ) );
				float temp_output_7_0_g170230 = 1.0;
				float temp_output_10_0_g170230 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170230 );
				float4 lerpResult131_g170225 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170225,temp_output_82_0_g170225, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170225,temp_output_82_0_g170225, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170225 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170230 ) / temp_output_10_0_g170230 ) ));
				float4 temp_output_17_0_g170224 = lerpResult131_g170225;
				float4 temp_output_3_0_g170224 = TVE_CoatParams;
				float4 ifLocalVar18_g170224 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170224 >= 0.5 )
				ifLocalVar18_g170224 = temp_output_17_0_g170224;
				else
				ifLocalVar18_g170224 = temp_output_3_0_g170224;
				float4 lerpResult22_g170224 = lerp( temp_output_3_0_g170224 , temp_output_17_0_g170224 , temp_output_19_0_g170224);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170224 = lerpResult22_g170224;
				#else
				float4 staticSwitch24_g170224 = ifLocalVar18_g170224;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170224;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170213 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170215 = TVE_PaintLayers[(int)temp_output_82_0_g170213];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170216 = lerpResult85_g170212;
				float2 temp_output_75_0_g170216 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_82_0_g170216 = temp_output_82_0_g170213;
				float2 temp_output_119_0_g170216 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170216).xz ) );
				float temp_output_7_0_g170221 = 1.0;
				float temp_output_10_0_g170221 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170221 );
				float4 lerpResult131_g170216 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170216,temp_output_82_0_g170216, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170216,temp_output_82_0_g170216, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170216 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170221 ) / temp_output_10_0_g170221 ) ));
				float4 temp_output_17_0_g170215 = lerpResult131_g170216;
				float4 temp_output_3_0_g170215 = TVE_PaintParams;
				float4 ifLocalVar18_g170215 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170215 >= 0.5 )
				ifLocalVar18_g170215 = temp_output_17_0_g170215;
				else
				ifLocalVar18_g170215 = temp_output_3_0_g170215;
				float4 lerpResult22_g170215 = lerp( temp_output_3_0_g170215 , temp_output_17_0_g170215 , temp_output_19_0_g170215);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170215 = lerpResult22_g170215;
				#else
				float4 staticSwitch24_g170215 = ifLocalVar18_g170215;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170215;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170231 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170233 = TVE_GlowLayers[(int)temp_output_82_0_g170231];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170234 = lerpResult247_g170212;
				float2 temp_output_75_0_g170234 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_82_0_g170234 = temp_output_82_0_g170231;
				float2 temp_output_119_0_g170234 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170234).xz ) );
				float temp_output_7_0_g170239 = 1.0;
				float temp_output_10_0_g170239 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170239 );
				float4 lerpResult131_g170234 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170234,temp_output_82_0_g170234, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170234,temp_output_82_0_g170234, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170234 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170239 ) / temp_output_10_0_g170239 ) ));
				float4 temp_output_17_0_g170233 = lerpResult131_g170234;
				float4 temp_output_3_0_g170233 = TVE_GlowParams;
				float4 ifLocalVar18_g170233 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170233 >= 0.5 )
				ifLocalVar18_g170233 = temp_output_17_0_g170233;
				else
				ifLocalVar18_g170233 = temp_output_3_0_g170233;
				float4 lerpResult22_g170233 = lerp( temp_output_3_0_g170233 , temp_output_17_0_g170233 , temp_output_19_0_g170233);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170233 = lerpResult22_g170233;
				#else
				float4 staticSwitch24_g170233 = ifLocalVar18_g170233;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170233;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170276 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170278 = TVE_AtmoLayers[(int)temp_output_132_0_g170276];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170279 = lerpResult104_g170212;
				float2 temp_output_75_0_g170279 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_82_0_g170279 = temp_output_132_0_g170276;
				float2 temp_output_119_0_g170279 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170279).xz ) );
				float temp_output_7_0_g170284 = 1.0;
				float temp_output_10_0_g170284 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170284 );
				float4 lerpResult131_g170279 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170279,temp_output_82_0_g170279, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170279,temp_output_82_0_g170279, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170279 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170284 ) / temp_output_10_0_g170284 ) ));
				float4 temp_output_17_0_g170278 = lerpResult131_g170279;
				float4 temp_output_3_0_g170278 = TVE_AtmoParams;
				float4 ifLocalVar18_g170278 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170278 >= 0.5 )
				ifLocalVar18_g170278 = temp_output_17_0_g170278;
				else
				ifLocalVar18_g170278 = temp_output_3_0_g170278;
				float4 lerpResult22_g170278 = lerp( temp_output_3_0_g170278 , temp_output_17_0_g170278 , temp_output_19_0_g170278);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170278 = lerpResult22_g170278;
				#else
				float4 staticSwitch24_g170278 = ifLocalVar18_g170278;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170278;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170285 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170287 = TVE_FadeLayers[(int)temp_output_132_0_g170285];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170288 = lerpResult382_g170212;
				float2 temp_output_75_0_g170288 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_82_0_g170288 = temp_output_132_0_g170285;
				float2 temp_output_119_0_g170288 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170288).xz ) );
				float temp_output_7_0_g170293 = 1.0;
				float temp_output_10_0_g170293 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170293 );
				float4 lerpResult131_g170288 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170288,temp_output_82_0_g170288, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170288,temp_output_82_0_g170288, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170288 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170293 ) / temp_output_10_0_g170293 ) ));
				float4 temp_output_17_0_g170287 = lerpResult131_g170288;
				float4 temp_output_3_0_g170287 = TVE_FadeParams;
				float4 ifLocalVar18_g170287 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170287 >= 0.5 )
				ifLocalVar18_g170287 = temp_output_17_0_g170287;
				else
				ifLocalVar18_g170287 = temp_output_3_0_g170287;
				float4 lerpResult22_g170287 = lerp( temp_output_3_0_g170287 , temp_output_17_0_g170287 , temp_output_19_0_g170287);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170287 = lerpResult22_g170287;
				#else
				float4 staticSwitch24_g170287 = ifLocalVar18_g170287;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170287;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170267 = _GlobalFormLayerValue;
				float temp_output_19_0_g170269 = TVE_FormLayers[(int)temp_output_130_0_g170267];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170270 = lerpResult168_g170212;
				float2 temp_output_75_0_g170270 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_82_0_g170270 = temp_output_130_0_g170267;
				float2 temp_output_119_0_g170270 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170270).xz ) );
				float temp_output_7_0_g170275 = 1.0;
				float temp_output_10_0_g170275 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170275 );
				float4 lerpResult131_g170270 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170270,temp_output_82_0_g170270, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170270,temp_output_82_0_g170270, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170270 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170275 ) / temp_output_10_0_g170275 ) ));
				float4 temp_output_17_0_g170269 = lerpResult131_g170270;
				float4 temp_output_3_0_g170269 = TVE_FormParams;
				float4 ifLocalVar18_g170269 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170269 >= 0.5 )
				ifLocalVar18_g170269 = temp_output_17_0_g170269;
				else
				ifLocalVar18_g170269 = temp_output_3_0_g170269;
				float4 lerpResult22_g170269 = lerp( temp_output_3_0_g170269 , temp_output_17_0_g170269 , temp_output_19_0_g170269);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170269 = lerpResult22_g170269;
				#else
				float4 staticSwitch24_g170269 = ifLocalVar18_g170269;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170269;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170258 = _GlobalWindLayerValue;
				float temp_output_19_0_g170260 = TVE_WindLayers[(int)temp_output_136_0_g170258];
				half3 Input_Position180_g170261 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170261 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_82_0_g170261 = temp_output_136_0_g170258;
				float2 temp_output_119_0_g170261 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170261).xz ) );
				float temp_output_7_0_g170266 = 1.0;
				float temp_output_10_0_g170266 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170266 );
				float4 lerpResult131_g170261 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170261,temp_output_82_0_g170261, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170261,temp_output_82_0_g170261, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170261 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170266 ) / temp_output_10_0_g170266 ) ));
				float4 temp_output_17_0_g170260 = lerpResult131_g170261;
				float4 temp_output_3_0_g170260 = TVE_WindParams;
				float4 ifLocalVar18_g170260 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170260 >= 0.5 )
				ifLocalVar18_g170260 = temp_output_17_0_g170260;
				else
				ifLocalVar18_g170260 = temp_output_3_0_g170260;
				float4 lerpResult22_g170260 = lerp( temp_output_3_0_g170260 , temp_output_17_0_g170260 , temp_output_19_0_g170260);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170260 = lerpResult22_g170260;
				#else
				float4 staticSwitch24_g170260 = ifLocalVar18_g170260;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170260;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170240 = _GlobalPushLayerValue;
				float temp_output_19_0_g170241 = TVE_PushLayers[(int)temp_output_136_0_g170240];
				half3 Input_Position180_g170242 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170242 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_82_0_g170242 = temp_output_136_0_g170240;
				float2 temp_output_119_0_g170242 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170242).xz ) );
				float temp_output_7_0_g170247 = 1.0;
				float temp_output_10_0_g170247 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170247 );
				float4 lerpResult131_g170242 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170242,temp_output_82_0_g170242, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170242,temp_output_82_0_g170242, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170242 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170247 ) / temp_output_10_0_g170247 ) ));
				float4 temp_output_17_0_g170241 = lerpResult131_g170242;
				float4 temp_output_3_0_g170241 = TVE_PushParams;
				float4 ifLocalVar18_g170241 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170241 >= 0.5 )
				ifLocalVar18_g170241 = temp_output_17_0_g170241;
				else
				ifLocalVar18_g170241 = temp_output_3_0_g170241;
				float4 lerpResult22_g170241 = lerp( temp_output_3_0_g170241 , temp_output_17_0_g170241 , temp_output_19_0_g170241);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170241 = lerpResult22_g170241;
				#else
				float4 staticSwitch24_g170241 = ifLocalVar18_g170241;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170241;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				TVEGlobalData Data15_g170405 = Data204_g170212;
				float Out_Dummy15_g170405 = 0;
				float4 Out_CoatParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170405 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170405 = float4( 0,0,0,0 );
				Out_Dummy15_g170405 = Data15_g170405.Dummy;
				Out_CoatParams15_g170405 = Data15_g170405.CoatParams;
				Out_PaintParams15_g170405 = Data15_g170405.PaintParams;
				Out_GlowParams15_g170405 = Data15_g170405.GlowParams;
				Out_AtmoParams15_g170405= Data15_g170405.AtmoParams;
				Out_FadeParams15_g170405= Data15_g170405.FadeParams;
				Out_FormParams15_g170405 = Data15_g170405.FormParams;
				Out_LandParams15_g170405 = Data15_g170405.LandParams;
				Out_WindParams15_g170405 = Data15_g170405.WindParams;
				Out_PushParams15_g170405 = Data15_g170405.PushParams;
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170405;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170415 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondBlendRemap.x;
				float temp_output_10_0_g170414 = ( _SecondBlendRemap.y - temp_output_7_0_g170414 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170415 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170427 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170427 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170406;
				float2 lerpResult40_g170417 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170424 = ( 0.0 );
				SamplerState SamplerDefault29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170424 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170424 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170424 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170424 = SamplerDefault29_g170424;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170424 = SamplerDefault29_g170424;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170424 = SamplerPoint29_g170424;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170424 = SamplerLow29_g170424;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170424 = SamplerMedium29_g170424;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170424 = SamplerHigh29_g170424;
				#endif
				SamplerState Sampler276_g170396 = SS29_g170424;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170424;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170424;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170424;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170424;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170424;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170417 = ( lerpResult40_g170417 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170417 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170427 = Final_NormalTS612_g170394;
				float3 appendResult68_g170418 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170418 = appendResult68_g170418;
				float3 worldNormal74_g170418 = normalize( float3(dot(tanToWorld0,tanNormal74_g170418), dot(tanToWorld1,tanNormal74_g170418), dot(tanToWorld2,tanNormal74_g170418)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170418;
				float3 In_NormalWS3_g170427 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170406;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170427 = Final_Masks613_g170394;
				float4 In_Emissive3_g170427 = Out_Emissive4_g170406;
				float3 temp_output_3_0_g170420 = Final_Albedo601_g170394;
				float dotResult20_g170420 = dot( temp_output_3_0_g170420 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170420;
				float In_Grayscale3_g170427 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170427 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170406;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170427 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170406;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170427 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170406;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170427 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170427 = Out_Translucency4_g170406;
				float In_Transmission3_g170427 = Out_Transmission4_g170406;
				float In_Thickness3_g170427 = Out_Thickness4_g170406;
				float In_Diffusion3_g170427 = Out_Diffusion4_g170406;
				Data3_g170427.Dummy = In_Dummy3_g170427;
				Data3_g170427.Albedo = In_Albedo3_g170427;
				Data3_g170427.AlbedoRaw = In_AlbedoRaw3_g170427;
				Data3_g170427.NormalTS = In_NormalTS3_g170427;
				Data3_g170427.NormalWS = In_NormalWS3_g170427;
				Data3_g170427.Shader = In_Shader3_g170427;
				Data3_g170427.Emissive= In_Emissive3_g170427;
				Data3_g170427.MultiMask = In_MultiMask3_g170427;
				Data3_g170427.Grayscale = In_Grayscale3_g170427;
				Data3_g170427.Luminosity = In_Luminosity3_g170427;
				Data3_g170427.AlphaClip = In_AlphaClip3_g170427;
				Data3_g170427.AlphaFade = In_AlphaFade3_g170427;
				Data3_g170427.Translucency = In_Translucency3_g170427;
				Data3_g170427.Transmission = In_Transmission3_g170427;
				Data3_g170427.Thickness = In_Thickness3_g170427;
				Data3_g170427.Diffusion = In_Diffusion3_g170427;
				TVEVisualData Data4_g170450 = Data3_g170427;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_AlbedoRaw4_g170450 = Data4_g170450.AlbedoRaw;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				float localFilterTexture19_g170463 = ( 0.0 );
				SamplerState SamplerDefault19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170463 = SamplerDefault19_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170463 = SamplerDefault19_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170463 = SamplerPoint19_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170463 = SamplerLow19_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170463 = SamplerMedium19_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170463 = SamplerHigh19_g170463;
				#endif
				SamplerState Sampler276_g170435 = SS19_g170463;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = SS19_g170463;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = SS19_g170463;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170466 = Data16_g170211;
				float Out_Dummy15_g170466 = 0;
				float3 Out_PositionWS15_g170466 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170466 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170466 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170466 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170466 = float3( 0,0,0 );
				float4 Out_VertexData15_g170466 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170466 = float4( 0,0,0,0 );
				Out_Dummy15_g170466 = Data15_g170466.Dummy;
				Out_PositionWS15_g170466 = Data15_g170466.PositionWS;
				Out_PositionWO15_g170466 = Data15_g170466.PositionWO;
				Out_PivotWS15_g170466 = Data15_g170466.PivotWS;
				Out_PivotWO15_g170466 = Data15_g170466.PivotWO;
				Out_NormalWS15_g170466 = Data15_g170466.NormalWS;
				Out_ViewDirWS15_g170466 = Data15_g170466.ViewDirWS;
				Out_VertexData15_g170466 = Data15_g170466.VertexData;
				Out_BoundsData15_g170466 = Data15_g170466.BoundsData;
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170466;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = SS19_g170463;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170466;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = SS19_g170463;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = SS19_g170463;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				float localFilterTexture30_g170465 = ( 0.0 );
				SamplerState SamplerDefault30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170465 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170465 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170465 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170465 = SamplerDefault30_g170465;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170465 = SamplerDefault30_g170465;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170465 = SamplerPoint30_g170465;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170465 = SamplerLow30_g170465;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170465 = SamplerMedium30_g170465;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170465 = SamplerHigh30_g170465;
				#endif
				SamplerState Sampler276_g170437 = SS30_g170465;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = SS30_g170465;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = SS30_g170465;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = SS30_g170465;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = SS30_g170465;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = SS30_g170465;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170466;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				float3 In_AlbedoRaw3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				float localFilterTexture29_g170464 = ( 0.0 );
				SamplerState SamplerDefault29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170464 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170464 = SamplerDefault29_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170464 = SamplerDefault29_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170464 = SamplerPoint29_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170464 = SamplerLow29_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170464 = SamplerMedium29_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170464 = SamplerHigh29_g170464;
				#endif
				SamplerState Sampler276_g170436 = SS29_g170464;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = SS29_g170464;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = SS29_g170464;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = SS29_g170464;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = SS29_g170464;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = SS29_g170464;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.AlbedoRaw = In_AlbedoRaw3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				TVEVisualData Data4_g170545 = Data3_g170451;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170553 = Data16_g170211;
				float Out_Dummy15_g170553 = 0;
				float3 Out_PositionWS15_g170553 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170553 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170553 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170553 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170553 = float3( 0,0,0 );
				float4 Out_VertexData15_g170553 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170553 = float4( 0,0,0,0 );
				Out_Dummy15_g170553 = Data15_g170553.Dummy;
				Out_PositionWS15_g170553 = Data15_g170553.PositionWS;
				Out_PositionWO15_g170553 = Data15_g170553.PositionWO;
				Out_PivotWS15_g170553 = Data15_g170553.PivotWS;
				Out_PivotWO15_g170553 = Data15_g170553.PivotWO;
				Out_NormalWS15_g170553 = Data15_g170553.NormalWS;
				Out_ViewDirWS15_g170553 = Data15_g170553.ViewDirWS;
				Out_VertexData15_g170553 = Data15_g170553.VertexData;
				Out_BoundsData15_g170553 = Data15_g170553.BoundsData;
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170553;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170551 = _occlusion_vert_mode;
				float temp_output_30_0_g170551 = ( break208_g170544.x * break33_g170551.x );
				float temp_output_29_0_g170551 = ( break208_g170544.y * break33_g170551.y );
				float temp_output_31_0_g170551 = ( break208_g170544.z * break33_g170551.z );
				float temp_output_28_0_g170551 = ( temp_output_30_0_g170551 + temp_output_29_0_g170551 + temp_output_31_0_g170551 + ( break208_g170544.w * break33_g170551.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170551;
				float clampResult17_g170549 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170548 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170548 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170548 );
				float temp_output_6_0_g170550 = saturate( ( ( clampResult17_g170549 - temp_output_7_0_g170548 ) / ( temp_output_10_0_g170548 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170550 = ( temp_output_6_0_g170550 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170550 = temp_output_6_0_g170550;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170550;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170563 = Data16_g170211;
				float Out_Dummy15_g170563 = 0;
				float3 Out_PositionWS15_g170563 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170563 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170563 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170563 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170563 = float3( 0,0,0 );
				float4 Out_VertexData15_g170563 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170563 = float4( 0,0,0,0 );
				Out_Dummy15_g170563 = Data15_g170563.Dummy;
				Out_PositionWS15_g170563 = Data15_g170563.PositionWS;
				Out_PositionWO15_g170563 = Data15_g170563.PositionWO;
				Out_PivotWS15_g170563 = Data15_g170563.PivotWS;
				Out_PivotWO15_g170563 = Data15_g170563.PivotWO;
				Out_NormalWS15_g170563 = Data15_g170563.NormalWS;
				Out_ViewDirWS15_g170563 = Data15_g170563.ViewDirWS;
				Out_VertexData15_g170563 = Data15_g170563.VertexData;
				Out_BoundsData15_g170563 = Data15_g170563.BoundsData;
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170563;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170561 = _GradientMeshRemap.x;
				float temp_output_10_0_g170561 = ( _GradientMeshRemap.y - temp_output_7_0_g170561 );
				float temp_output_6_0_g170562 = saturate( ( ( clampResult17_g170560 - temp_output_7_0_g170561 ) / ( temp_output_10_0_g170561 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170562 = ( temp_output_6_0_g170562 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170562 = temp_output_6_0_g170562;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170562;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170572 = Data16_g170211;
				float Out_Dummy15_g170572 = 0;
				float3 Out_PositionWS15_g170572 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170572 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170572 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170572 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170572 = float3( 0,0,0 );
				float4 Out_VertexData15_g170572 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170572 = float4( 0,0,0,0 );
				Out_Dummy15_g170572 = Data15_g170572.Dummy;
				Out_PositionWS15_g170572 = Data15_g170572.PositionWS;
				Out_PositionWO15_g170572 = Data15_g170572.PositionWO;
				Out_PivotWS15_g170572 = Data15_g170572.PivotWS;
				Out_PivotWO15_g170572 = Data15_g170572.PivotWO;
				Out_NormalWS15_g170572 = Data15_g170572.NormalWS;
				Out_ViewDirWS15_g170572 = Data15_g170572.ViewDirWS;
				Out_VertexData15_g170572 = Data15_g170572.VertexData;
				Out_BoundsData15_g170572 = Data15_g170572.BoundsData;
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170572;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170572;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170571 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170571 = ( _VariationNoiseRemap.y - temp_output_7_0_g170571 );
				float temp_output_238_0_g170564 = saturate( ( ( clampResult17_g170570 - temp_output_7_0_g170571 ) / ( temp_output_10_0_g170571 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				TVEVisualData Data4_g170596 = Data3_g170567;
				float Out_Dummy4_g170596 = 0;
				float3 Out_Albedo4_g170596 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170596 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170596 = float2( 0,0 );
				float3 Out_NormalWS4_g170596 = float3( 0,0,0 );
				float4 Out_Shader4_g170596 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170596 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170596 = 0;
				float Out_Grayscale4_g170596 = 0;
				float Out_Luminosity4_g170596 = 0;
				float Out_AlphaClip4_g170596 = 0;
				float Out_AlphaFade4_g170596 = 0;
				float3 Out_Translucency4_g170596 = float3( 0,0,0 );
				float Out_Transmission4_g170596 = 0;
				float Out_Thickness4_g170596 = 0;
				float Out_Diffusion4_g170596 = 0;
				Out_Dummy4_g170596 = Data4_g170596.Dummy;
				Out_Albedo4_g170596 = Data4_g170596.Albedo;
				Out_AlbedoRaw4_g170596 = Data4_g170596.AlbedoRaw;
				Out_NormalTS4_g170596 = Data4_g170596.NormalTS;
				Out_NormalWS4_g170596 = Data4_g170596.NormalWS;
				Out_Shader4_g170596 = Data4_g170596.Shader;
				Out_Emissive4_g170596= Data4_g170596.Emissive;
				Out_MultiMask4_g170596 = Data4_g170596.MultiMask;
				Out_Grayscale4_g170596 = Data4_g170596.Grayscale;
				Out_Luminosity4_g170596= Data4_g170596.Luminosity;
				Out_AlphaClip4_g170596 = Data4_g170596.AlphaClip;
				Out_AlphaFade4_g170596 = Data4_g170596.AlphaFade;
				Out_Translucency4_g170596 = Data4_g170596.Translucency;
				Out_Transmission4_g170596 = Data4_g170596.Transmission;
				Out_Thickness4_g170596 = Data4_g170596.Thickness;
				Out_Diffusion4_g170596 = Data4_g170596.Diffusion;
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170596;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170596;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_37 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170212;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170575 = float4( 0,0,0,0 );
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_LandParams15_g170575 = Data15_g170575.LandParams;
				Out_WindParams15_g170575 = Data15_g170575.WindParams;
				Out_PushParams15_g170575 = Data15_g170575.PushParams;
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float temp_output_6_0_g170576 = ( saturate( (Global_PaintParams209_g170574).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170576 = ( temp_output_6_0_g170576 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170576 = temp_output_6_0_g170576;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170574 = staticSwitch14_g170576;
				#else
				float staticSwitch283_g170574 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170574 = staticSwitch283_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_37 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170574 = (Global_PaintParams209_g170574).xyz;
				#else
				float3 staticSwitch288_g170574 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170574 = staticSwitch288_g170574;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170596;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170596;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170588 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170587 = _TintingLumaRemap.x;
				float temp_output_10_0_g170587 = ( _TintingLumaRemap.y - temp_output_7_0_g170587 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170588 - temp_output_7_0_g170587 ) / ( temp_output_10_0_g170587 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170597 = Data16_g170211;
				float Out_Dummy15_g170597 = 0;
				float3 Out_PositionWS15_g170597 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170597 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170597 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170597 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170597 = float3( 0,0,0 );
				float4 Out_VertexData15_g170597 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170597 = float4( 0,0,0,0 );
				Out_Dummy15_g170597 = Data15_g170597.Dummy;
				Out_PositionWS15_g170597 = Data15_g170597.PositionWS;
				Out_PositionWO15_g170597 = Data15_g170597.PositionWO;
				Out_PivotWS15_g170597 = Data15_g170597.PivotWS;
				Out_PivotWO15_g170597 = Data15_g170597.PivotWO;
				Out_NormalWS15_g170597 = Data15_g170597.NormalWS;
				Out_ViewDirWS15_g170597 = Data15_g170597.ViewDirWS;
				Out_VertexData15_g170597 = Data15_g170597.VertexData;
				Out_BoundsData15_g170597 = Data15_g170597.BoundsData;
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170597;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170580 = _tinting_vert_mode;
				float temp_output_30_0_g170580 = ( break311_g170574.x * break33_g170580.x );
				float temp_output_29_0_g170580 = ( break311_g170574.y * break33_g170580.y );
				float temp_output_31_0_g170580 = ( break311_g170574.z * break33_g170580.z );
				float temp_output_28_0_g170580 = ( temp_output_30_0_g170580 + temp_output_29_0_g170580 + temp_output_31_0_g170580 + ( break311_g170574.w * break33_g170580.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170580 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170585 = _TintingMeshRemap.x;
				float temp_output_10_0_g170585 = ( _TintingMeshRemap.y - temp_output_7_0_g170585 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( clampResult17_g170586 - temp_output_7_0_g170585 ) / ( temp_output_10_0_g170585 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170589 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170589 = ( temp_output_6_0_g170589 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170589 = temp_output_6_0_g170589;
				#endif
				float temp_output_333_0_g170574 = staticSwitch14_g170589;
				half Tinting_VertMask309_g170574 = temp_output_333_0_g170574;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170583 = _TintingBlendRemap.x;
				float temp_output_10_0_g170583 = ( _TintingBlendRemap.y - temp_output_7_0_g170583 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_ColorGlobal290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170595 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170595 = Out_AlbedoRaw4_g170596;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170596;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170596;
				float4 In_Shader3_g170595 = Out_Shader4_g170596;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170596;
				float In_Grayscale3_g170595 = temp_output_200_12_g170574;
				float In_Luminosity3_g170595 = temp_output_200_15_g170574;
				float In_MultiMask3_g170595 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170596;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170596;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170596;
				float In_Transmission3_g170595 = Out_Transmission4_g170596;
				float In_Thickness3_g170595 = Out_Thickness4_g170596;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170596;
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.AlbedoRaw = In_AlbedoRaw3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				TVEVisualData Data4_g170600 = Data3_g170595;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_39 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170212;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170599 = float4( 0,0,0,0 );
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_LandParams15_g170599 = Data15_g170599.LandParams;
				Out_WindParams15_g170599 = Data15_g170599.WindParams;
				Out_PushParams15_g170599 = Data15_g170599.PushParams;
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = ( (Global_AtmoParams314_g170598).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170598 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170598 = staticSwitch351_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_39 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170619 = RGBToHSV( lerpResult485_g170598 );
				half3 hsvTorgb61_g170619 = HSVToRGB( half3(( hsvTorgb58_g170619.x + _DrynessShiftValue ),hsvTorgb58_g170619.y,hsvTorgb58_g170619.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170598 = hsvTorgb61_g170619;
				#else
				float3 staticSwitch499_g170598 = lerpResult485_g170598;
				#endif
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170614 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170613 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170613 = ( _DrynessLumaRemap.y - temp_output_7_0_g170613 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170614 - temp_output_7_0_g170613 ) / ( temp_output_10_0_g170613 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170620 = Data16_g170211;
				float Out_Dummy15_g170620 = 0;
				float3 Out_PositionWS15_g170620 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170620 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170620 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170620 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170620 = float3( 0,0,0 );
				float4 Out_VertexData15_g170620 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170620 = float4( 0,0,0,0 );
				Out_Dummy15_g170620 = Data15_g170620.Dummy;
				Out_PositionWS15_g170620 = Data15_g170620.PositionWS;
				Out_PositionWO15_g170620 = Data15_g170620.PositionWO;
				Out_PivotWS15_g170620 = Data15_g170620.PivotWS;
				Out_PivotWO15_g170620 = Data15_g170620.PivotWO;
				Out_NormalWS15_g170620 = Data15_g170620.NormalWS;
				Out_ViewDirWS15_g170620 = Data15_g170620.ViewDirWS;
				Out_VertexData15_g170620 = Data15_g170620.VertexData;
				Out_BoundsData15_g170620 = Data15_g170620.BoundsData;
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170620;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170609 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170609 = ( _DrynessMeshRemap.y - temp_output_7_0_g170609 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170609 ) / ( temp_output_10_0_g170609 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170615 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170615 = ( temp_output_6_0_g170615 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170615 = temp_output_6_0_g170615;
				#endif
				float temp_output_448_0_g170598 = staticSwitch14_g170615;
				half Dryness_VertMask378_g170598 = temp_output_448_0_g170598;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170612 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170612 = ( _DrynessBlendRemap.y - temp_output_7_0_g170612 );
				half Dryness_Mask329_g170598 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170612 ) / ( temp_output_10_0_g170612 + 0.0001 ) ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( staticSwitch499_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				TVEVisualData Data4_g170622 = Data3_g170601;
				float Out_Dummy4_g170622 = 0;
				float3 Out_Albedo4_g170622 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170622 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170622 = float2( 0,0 );
				float3 Out_NormalWS4_g170622 = float3( 0,0,0 );
				float4 Out_Shader4_g170622 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170622 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170622 = 0;
				float Out_Grayscale4_g170622 = 0;
				float Out_Luminosity4_g170622 = 0;
				float Out_AlphaClip4_g170622 = 0;
				float Out_AlphaFade4_g170622 = 0;
				float3 Out_Translucency4_g170622 = float3( 0,0,0 );
				float Out_Transmission4_g170622 = 0;
				float Out_Thickness4_g170622 = 0;
				float Out_Diffusion4_g170622 = 0;
				Out_Dummy4_g170622 = Data4_g170622.Dummy;
				Out_Albedo4_g170622 = Data4_g170622.Albedo;
				Out_AlbedoRaw4_g170622 = Data4_g170622.AlbedoRaw;
				Out_NormalTS4_g170622 = Data4_g170622.NormalTS;
				Out_NormalWS4_g170622 = Data4_g170622.NormalWS;
				Out_Shader4_g170622 = Data4_g170622.Shader;
				Out_Emissive4_g170622= Data4_g170622.Emissive;
				Out_MultiMask4_g170622 = Data4_g170622.MultiMask;
				Out_Grayscale4_g170622 = Data4_g170622.Grayscale;
				Out_Luminosity4_g170622= Data4_g170622.Luminosity;
				Out_AlphaClip4_g170622 = Data4_g170622.AlphaClip;
				Out_AlphaFade4_g170622 = Data4_g170622.AlphaFade;
				Out_Translucency4_g170622 = Data4_g170622.Translucency;
				Out_Transmission4_g170622 = Data4_g170622.Transmission;
				Out_Thickness4_g170622 = Data4_g170622.Thickness;
				Out_Diffusion4_g170622 = Data4_g170622.Diffusion;
				half3 Visual_Albedo127_g170621 = Out_Albedo4_g170622;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord11;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170621 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170621 = ( Visual_Albedo127_g170621 + ( ( Visual_Albedo127_g170621 * Visual_Albedo127_g170621 * 200.0 * _motion_highlight_color ) * clampResult208_g170621 ) );
				#else
				float3 staticSwitch214_g170621 = Visual_Albedo127_g170621;
				#endif
				half3 Final_Albedo160_g170621 = staticSwitch214_g170621;
				float3 In_Albedo3_g170623 = Final_Albedo160_g170621;
				float3 In_AlbedoRaw3_g170623 = Out_AlbedoRaw4_g170622;
				float2 In_NormalTS3_g170623 = Out_NormalTS4_g170622;
				float3 In_NormalWS3_g170623 = Out_NormalWS4_g170622;
				float4 In_Shader3_g170623 = Out_Shader4_g170622;
				float4 In_Emissive3_g170623 = Out_Emissive4_g170622;
				float In_Grayscale3_g170623 = Out_Grayscale4_g170622;
				float In_Luminosity3_g170623 = Out_Luminosity4_g170622;
				float In_MultiMask3_g170623 = Out_MultiMask4_g170622;
				float In_AlphaClip3_g170623 = Out_AlphaClip4_g170622;
				float In_AlphaFade3_g170623 = Out_AlphaFade4_g170622;
				float3 In_Translucency3_g170623 = Out_Translucency4_g170622;
				float In_Transmission3_g170623 = Out_Transmission4_g170622;
				float In_Thickness3_g170623 = Out_Thickness4_g170622;
				float In_Diffusion3_g170623 = Out_Diffusion4_g170622;
				Data3_g170623.Dummy = In_Dummy3_g170623;
				Data3_g170623.Albedo = In_Albedo3_g170623;
				Data3_g170623.AlbedoRaw = In_AlbedoRaw3_g170623;
				Data3_g170623.NormalTS = In_NormalTS3_g170623;
				Data3_g170623.NormalWS = In_NormalWS3_g170623;
				Data3_g170623.Shader = In_Shader3_g170623;
				Data3_g170623.Emissive= In_Emissive3_g170623;
				Data3_g170623.MultiMask = In_MultiMask3_g170623;
				Data3_g170623.Grayscale = In_Grayscale3_g170623;
				Data3_g170623.Luminosity = In_Luminosity3_g170623;
				Data3_g170623.AlphaClip = In_AlphaClip3_g170623;
				Data3_g170623.AlphaFade = In_AlphaFade3_g170623;
				Data3_g170623.Translucency = In_Translucency3_g170623;
				Data3_g170623.Transmission = In_Transmission3_g170623;
				Data3_g170623.Thickness = In_Thickness3_g170623;
				Data3_g170623.Diffusion = In_Diffusion3_g170623;
				TVEVisualData Data4_g170625 = Data3_g170623;
				float Out_Dummy4_g170625 = 0;
				float3 Out_Albedo4_g170625 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170625 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170625 = float2( 0,0 );
				float3 Out_NormalWS4_g170625 = float3( 0,0,0 );
				float4 Out_Shader4_g170625 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170625 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170625 = 0;
				float Out_Grayscale4_g170625 = 0;
				float Out_Luminosity4_g170625 = 0;
				float Out_AlphaClip4_g170625 = 0;
				float Out_AlphaFade4_g170625 = 0;
				float3 Out_Translucency4_g170625 = float3( 0,0,0 );
				float Out_Transmission4_g170625 = 0;
				float Out_Thickness4_g170625 = 0;
				float Out_Diffusion4_g170625 = 0;
				Out_Dummy4_g170625 = Data4_g170625.Dummy;
				Out_Albedo4_g170625 = Data4_g170625.Albedo;
				Out_AlbedoRaw4_g170625 = Data4_g170625.AlbedoRaw;
				Out_NormalTS4_g170625 = Data4_g170625.NormalTS;
				Out_NormalWS4_g170625 = Data4_g170625.NormalWS;
				Out_Shader4_g170625 = Data4_g170625.Shader;
				Out_Emissive4_g170625= Data4_g170625.Emissive;
				Out_MultiMask4_g170625 = Data4_g170625.MultiMask;
				Out_Grayscale4_g170625 = Data4_g170625.Grayscale;
				Out_Luminosity4_g170625= Data4_g170625.Luminosity;
				Out_AlphaClip4_g170625 = Data4_g170625.AlphaClip;
				Out_AlphaFade4_g170625 = Data4_g170625.AlphaFade;
				Out_Translucency4_g170625 = Data4_g170625.Translucency;
				Out_Transmission4_g170625 = Data4_g170625.Transmission;
				Out_Thickness4_g170625 = Data4_g170625.Thickness;
				Out_Diffusion4_g170625 = Data4_g170625.Diffusion;
				half3 Visual_Albedo127_g170624 = Out_Albedo4_g170625;
				float3 temp_output_622_0_g170624 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170628) = _OverlayAlbedoTex;
				float localFilterTexture19_g170657 = ( 0.0 );
				SamplerState SamplerDefault19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170657 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170657 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170657 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170657 = SamplerDefault19_g170657;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170657 = SamplerDefault19_g170657;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170657 = SamplerPoint19_g170657;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170657 = SamplerLow19_g170657;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170657 = SamplerMedium19_g170657;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170657 = SamplerHigh19_g170657;
				#endif
				SamplerState Sampler238_g170628 = SS19_g170657;
				float4 temp_output_6_0_g170629 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				half4 Overlay_Coords639_g170624 = staticSwitch14_g170629;
				float4 temp_output_37_0_g170628 = Overlay_Coords639_g170624;
				half4 Coords238_g170628 = temp_output_37_0_g170628;
				TVEModelData Data15_g170659 = Data16_g170211;
				float Out_Dummy15_g170659 = 0;
				float3 Out_PositionWS15_g170659 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170659 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170659 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170659 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170659 = float3( 0,0,0 );
				float4 Out_VertexData15_g170659 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170659 = float4( 0,0,0,0 );
				Out_Dummy15_g170659 = Data15_g170659.Dummy;
				Out_PositionWS15_g170659 = Data15_g170659.PositionWS;
				Out_PositionWO15_g170659 = Data15_g170659.PositionWO;
				Out_PivotWS15_g170659 = Data15_g170659.PivotWS;
				Out_PivotWO15_g170659 = Data15_g170659.PivotWO;
				Out_NormalWS15_g170659 = Data15_g170659.NormalWS;
				Out_ViewDirWS15_g170659 = Data15_g170659.ViewDirWS;
				Out_VertexData15_g170659 = Data15_g170659.VertexData;
				Out_BoundsData15_g170659 = Data15_g170659.BoundsData;
				half3 Model_PositionWO602_g170624 = Out_PositionWO15_g170659;
				float3 temp_output_279_0_g170628 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170628 = temp_output_279_0_g170628;
				half4 localSamplePlanar2D238_g170628 = SamplePlanar2D( Texture238_g170628 , Sampler238_g170628 , Coords238_g170628 , WorldPosition238_g170628 );
				TEXTURE2D(Texture246_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170628 = SS19_g170657;
				half4 Coords246_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition246_g170628 = temp_output_279_0_g170628;
				half3 Model_NormalWS712_g170624 = Out_NormalWS15_g170659;
				float3 temp_output_280_0_g170628 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170628 = temp_output_280_0_g170628;
				half4 localSamplePlanar3D246_g170628 = SamplePlanar3D( Texture246_g170628 , Sampler246_g170628 , Coords246_g170628 , WorldPosition246_g170628 , WorldNormal246_g170628 );
				TEXTURE2D(Texture234_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170628 = SS19_g170657;
				float4 Coords234_g170628 = temp_output_37_0_g170628;
				float3 WorldPosition234_g170628 = temp_output_279_0_g170628;
				float4 localSampleStochastic2D234_g170628 = SampleStochastic2D( Texture234_g170628 , Sampler234_g170628 , Coords234_g170628 , WorldPosition234_g170628 );
				TEXTURE2D(Texture263_g170628) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170628 = SS19_g170657;
				half4 Coords263_g170628 = temp_output_37_0_g170628;
				half3 WorldPosition263_g170628 = temp_output_279_0_g170628;
				half3 WorldNormal263_g170628 = temp_output_280_0_g170628;
				half4 localSampleStochastic3D263_g170628 = SampleStochastic3D( Texture263_g170628 , Sampler263_g170628 , Coords263_g170628 , WorldPosition263_g170628 , WorldNormal263_g170628 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170624 = localSamplePlanar3D246_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170624 = localSampleStochastic2D234_g170628;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170624 = localSampleStochastic3D263_g170628;
				#else
				float4 staticSwitch676_g170624 = localSamplePlanar2D238_g170628;
				#endif
				half3 Overlay_Albedo526_g170624 = (staticSwitch676_g170624).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170624 = ( temp_output_622_0_g170624 * Overlay_Albedo526_g170624 );
				#else
				float3 staticSwitch578_g170624 = temp_output_622_0_g170624;
				#endif
				float3 temp_output_6_0_g170635 = staticSwitch578_g170624;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170635 = ( temp_output_6_0_g170635 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170635 = temp_output_6_0_g170635;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170632) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170632 = sampler_Linear_Repeat;
				float4 appendResult863_g170624 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170632 = appendResult863_g170624;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170624;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				half Overlay_GlitterTex854_g170624 = (localSamplePlanar3D246_g170632).x;
				half3 Model_PositionWS879_g170624 = Out_PositionWS15_g170659;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170624 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170624 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170624 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170624 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170624 = staticSwitch868_g170624;
				TEXTURE2D(Texture276_g170649) = _OverlayMaskTex;
				SamplerState Sampler276_g170649 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170650 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170650 = ( temp_output_6_0_g170650 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170650 = temp_output_6_0_g170650;
				#endif
				half4 Local_MaskCoords888_g170624 = staticSwitch14_g170650;
				float4 temp_output_37_0_g170649 = Local_MaskCoords888_g170624;
				half4 Coords276_g170649 = temp_output_37_0_g170649;
				half2 TexCoord276_g170649 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170649 = SampleMain( Texture276_g170649 , Sampler276_g170649 , Coords276_g170649 , TexCoord276_g170649 );
				TEXTURE2D(Texture275_g170649) = _OverlayMaskTex;
				SamplerState Sampler275_g170649 = sampler_Linear_Repeat;
				half4 Coords275_g170649 = temp_output_37_0_g170649;
				half2 TexCoord275_g170649 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170649 = SampleExtra( Texture275_g170649 , Sampler275_g170649 , Coords275_g170649 , TexCoord275_g170649 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170624 = localSampleExtra275_g170649;
				#else
				float4 staticSwitch894_g170624 = localSampleMain276_g170649;
				#endif
				half4 Local_MaskTex887_g170624 = staticSwitch894_g170624;
				float clampResult17_g170651 = clamp( (Local_MaskTex887_g170624).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170652 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170652 = ( _OverlayMaskRemap.y - temp_output_7_0_g170652 );
				float lerpResult900_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170651 - temp_output_7_0_g170652 ) / ( temp_output_10_0_g170652 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170624 = lerpResult900_g170624;
				float3 temp_output_739_21_g170624 = Out_NormalWS4_g170625;
				half3 Visual_NormalWS749_g170624 = temp_output_739_21_g170624;
				float clampResult17_g170645 = clamp( saturate( (Visual_NormalWS749_g170624).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170644 = _OverlayProjRemap.x;
				float temp_output_10_0_g170644 = ( _OverlayProjRemap.y - temp_output_7_0_g170644 );
				float lerpResult842_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170644 ) / ( temp_output_10_0_g170644 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170624 = lerpResult842_g170624;
				float temp_output_739_15_g170624 = Out_Luminosity4_g170625;
				half Visual_Luminosity654_g170624 = temp_output_739_15_g170624;
				float clampResult17_g170647 = clamp( Visual_Luminosity654_g170624 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayLumaRemap.y - temp_output_7_0_g170646 );
				float lerpResult587_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170647 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170624 = lerpResult587_g170624;
				half4 Model_VertexMasks791_g170624 = Out_VertexData15_g170659;
				float4 break792_g170624 = Model_VertexMasks791_g170624;
				float4 break33_g170637 = _overlay_vert_mode;
				float temp_output_30_0_g170637 = ( break792_g170624.x * break33_g170637.x );
				float temp_output_29_0_g170637 = ( break792_g170624.y * break33_g170637.y );
				float temp_output_31_0_g170637 = ( break792_g170624.z * break33_g170637.z );
				float temp_output_28_0_g170637 = ( temp_output_30_0_g170637 + temp_output_29_0_g170637 + temp_output_31_0_g170637 + ( break792_g170624.w * break33_g170637.w ) );
				float clampResult17_g170638 = clamp( temp_output_28_0_g170637 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170641 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170641 = ( _OverlayMeshRemap.y - temp_output_7_0_g170641 );
				float lerpResult881_g170624 = lerp( 1.0 , saturate( ( ( clampResult17_g170638 - temp_output_7_0_g170641 ) / ( temp_output_10_0_g170641 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170648 = lerpResult881_g170624;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170648 = ( temp_output_6_0_g170648 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170648 = temp_output_6_0_g170648;
				#endif
				float temp_output_831_0_g170624 = staticSwitch14_g170648;
				half Overlay_VertMask801_g170624 = temp_output_831_0_g170624;
				half Overlay_MaskNoise427_g170624 = 1.0;
				TVEGlobalData Data15_g170626 = Data204_g170212;
				float Out_Dummy15_g170626 = 0;
				float4 Out_CoatParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170626 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170626 = float4( 0,0,0,0 );
				Out_Dummy15_g170626 = Data15_g170626.Dummy;
				Out_CoatParams15_g170626 = Data15_g170626.CoatParams;
				Out_PaintParams15_g170626 = Data15_g170626.PaintParams;
				Out_GlowParams15_g170626 = Data15_g170626.GlowParams;
				Out_AtmoParams15_g170626= Data15_g170626.AtmoParams;
				Out_FadeParams15_g170626= Data15_g170626.FadeParams;
				Out_FormParams15_g170626 = Data15_g170626.FormParams;
				Out_LandParams15_g170626 = Data15_g170626.LandParams;
				Out_WindParams15_g170626 = Data15_g170626.WindParams;
				Out_PushParams15_g170626 = Data15_g170626.PushParams;
				half4 Global_AtmoParams516_g170624 = Out_AtmoParams15_g170626;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170624 = ( (Global_AtmoParams516_g170624).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170624 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170624 = staticSwitch705_g170624;
				half Custom_Mask646_g170624 = 1.0;
				float temp_output_7_0_g170653 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170653 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170653 );
				half Overlay_Mask494_g170624 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170624 * Overlay_MaskProj457_g170624 * Overlay_MaskLuma438_g170624 * Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 * Custom_Mask646_g170624 ) - temp_output_7_0_g170653 ) / ( temp_output_10_0_g170653 + 0.0001 ) ) );
				float3 lerpResult467_g170624 = lerp( Visual_Albedo127_g170624 , ( staticSwitch14_g170635 + Overlay_GlitterColor865_g170624 ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170624 = lerpResult467_g170624;
				#else
				float3 staticSwitch577_g170624 = Visual_Albedo127_g170624;
				#endif
				half3 Final_Albedo493_g170624 = staticSwitch577_g170624;
				float3 In_Albedo3_g170627 = Final_Albedo493_g170624;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170625;
				half2 Visual_NormalTS535_g170624 = Out_NormalTS4_g170625;
				TEXTURE2D(Texture238_g170630) = _OverlayNormalTex;
				float localFilterTexture29_g170658 = ( 0.0 );
				SamplerState SamplerDefault29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170658 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170658 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170658 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170658 = SamplerDefault29_g170658;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170658 = SamplerDefault29_g170658;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170658 = SamplerPoint29_g170658;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170658 = SamplerLow29_g170658;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170658 = SamplerMedium29_g170658;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170658 = SamplerHigh29_g170658;
				#endif
				SamplerState Sampler238_g170630 = SS29_g170658;
				float4 temp_output_37_0_g170630 = Overlay_Coords639_g170624;
				half4 Coords238_g170630 = temp_output_37_0_g170630;
				float3 temp_output_279_0_g170630 = Model_PositionWO602_g170624;
				half3 WorldPosition238_g170630 = temp_output_279_0_g170630;
				half4 localSamplePlanar2D238_g170630 = SamplePlanar2D( Texture238_g170630 , Sampler238_g170630 , Coords238_g170630 , WorldPosition238_g170630 );
				TEXTURE2D(Texture246_g170630) = _OverlayNormalTex;
				SamplerState Sampler246_g170630 = SS29_g170658;
				half4 Coords246_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition246_g170630 = temp_output_279_0_g170630;
				float3 temp_output_280_0_g170630 = Model_NormalWS712_g170624;
				half3 WorldNormal246_g170630 = temp_output_280_0_g170630;
				half4 localSamplePlanar3D246_g170630 = SamplePlanar3D( Texture246_g170630 , Sampler246_g170630 , Coords246_g170630 , WorldPosition246_g170630 , WorldNormal246_g170630 );
				TEXTURE2D(Texture234_g170630) = _OverlayNormalTex;
				SamplerState Sampler234_g170630 = SS29_g170658;
				float4 Coords234_g170630 = temp_output_37_0_g170630;
				float3 WorldPosition234_g170630 = temp_output_279_0_g170630;
				float4 localSampleStochastic2D234_g170630 = SampleStochastic2D( Texture234_g170630 , Sampler234_g170630 , Coords234_g170630 , WorldPosition234_g170630 );
				TEXTURE2D(Texture263_g170630) = _OverlayNormalTex;
				SamplerState Sampler263_g170630 = SS29_g170658;
				half4 Coords263_g170630 = temp_output_37_0_g170630;
				half3 WorldPosition263_g170630 = temp_output_279_0_g170630;
				half3 WorldNormal263_g170630 = temp_output_280_0_g170630;
				half4 localSampleStochastic3D263_g170630 = SampleStochastic3D( Texture263_g170630 , Sampler263_g170630 , Coords263_g170630 , WorldPosition263_g170630 , WorldNormal263_g170630 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170624 = localSamplePlanar3D246_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170624 = localSampleStochastic2D234_g170630;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170624 = localSampleStochastic3D263_g170630;
				#else
				float4 staticSwitch686_g170624 = localSamplePlanar2D238_g170630;
				#endif
				half4 Normal_Packed45_g170634 = staticSwitch686_g170624;
				float2 appendResult58_g170634 = (float2(( (Normal_Packed45_g170634).x * (Normal_Packed45_g170634).w ) , (Normal_Packed45_g170634).y));
				half2 Normal_Default50_g170634 = appendResult58_g170634;
				half2 Normal_ASTC41_g170634 = (Normal_Packed45_g170634).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170634 = Normal_ASTC41_g170634;
				#else
				float2 staticSwitch38_g170634 = Normal_Default50_g170634;
				#endif
				half2 Normal_NO_DTX544_g170634 = (Normal_Packed45_g170634).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170634 = Normal_NO_DTX544_g170634;
				#else
				float2 staticSwitch37_g170634 = staticSwitch38_g170634;
				#endif
				half2 Normal_Planar45_g170633 = (staticSwitch37_g170634*2.0 + -1.0);
				float2 break71_g170633 = Normal_Planar45_g170633;
				float3 appendResult72_g170633 = (float3(break71_g170633.x , 0.0 , break71_g170633.y));
				half2 Overlay_Normal528_g170624 = (mul( ase_worldToTangent, appendResult72_g170633 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170624 = Overlay_Normal528_g170624;
				#else
				float2 staticSwitch579_g170624 = Visual_NormalTS535_g170624;
				#endif
				float2 lerpResult551_g170624 = lerp( Visual_NormalTS535_g170624 , ( staticSwitch579_g170624 * _OverlayNormalValue ) , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170624 = lerpResult551_g170624;
				#else
				float2 staticSwitch583_g170624 = Visual_NormalTS535_g170624;
				#endif
				half2 Final_NormalTS499_g170624 = staticSwitch583_g170624;
				float2 In_NormalTS3_g170627 = Final_NormalTS499_g170624;
				float3 In_NormalWS3_g170627 = temp_output_739_21_g170624;
				half4 Visual_Masks536_g170624 = Out_Shader4_g170625;
				float4 appendResult585_g170624 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170624 = lerp( Visual_Masks536_g170624 , appendResult585_g170624 , Overlay_Mask494_g170624);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170624 = lerpResult584_g170624;
				#else
				float4 staticSwitch586_g170624 = Visual_Masks536_g170624;
				#endif
				half4 Final_Masks482_g170624 = staticSwitch586_g170624;
				float4 In_Shader3_g170627 = Final_Masks482_g170624;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170625;
				float temp_output_739_12_g170624 = Out_Grayscale4_g170625;
				float In_Grayscale3_g170627 = temp_output_739_12_g170624;
				float In_Luminosity3_g170627 = temp_output_739_15_g170624;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170625;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170625;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170625;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170625;
				half Visual_Transmission699_g170624 = Out_Transmission4_g170625;
				float lerpResult746_g170624 = lerp( Visual_Transmission699_g170624 , ( Visual_Transmission699_g170624 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170624 * Overlay_MaskNoise427_g170624 * Overlay_MaskGlobal429_g170624 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170624 = lerpResult746_g170624;
				#else
				float staticSwitch703_g170624 = Visual_Transmission699_g170624;
				#endif
				half Final_Transmission702_g170624 = staticSwitch703_g170624;
				float In_Transmission3_g170627 = Final_Transmission702_g170624;
				float In_Thickness3_g170627 = Out_Thickness4_g170625;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170625;
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				TVEVisualData Data4_g170661 = Data3_g170627;
				float Out_Dummy4_g170661 = 0;
				float3 Out_Albedo4_g170661 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170661 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170661 = float2( 0,0 );
				float3 Out_NormalWS4_g170661 = float3( 0,0,0 );
				float4 Out_Shader4_g170661 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170661 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170661 = 0;
				float Out_Grayscale4_g170661 = 0;
				float Out_Luminosity4_g170661 = 0;
				float Out_AlphaClip4_g170661 = 0;
				float Out_AlphaFade4_g170661 = 0;
				float3 Out_Translucency4_g170661 = float3( 0,0,0 );
				float Out_Transmission4_g170661 = 0;
				float Out_Thickness4_g170661 = 0;
				float Out_Diffusion4_g170661 = 0;
				Out_Dummy4_g170661 = Data4_g170661.Dummy;
				Out_Albedo4_g170661 = Data4_g170661.Albedo;
				Out_AlbedoRaw4_g170661 = Data4_g170661.AlbedoRaw;
				Out_NormalTS4_g170661 = Data4_g170661.NormalTS;
				Out_NormalWS4_g170661 = Data4_g170661.NormalWS;
				Out_Shader4_g170661 = Data4_g170661.Shader;
				Out_Emissive4_g170661= Data4_g170661.Emissive;
				Out_MultiMask4_g170661 = Data4_g170661.MultiMask;
				Out_Grayscale4_g170661 = Data4_g170661.Grayscale;
				Out_Luminosity4_g170661= Data4_g170661.Luminosity;
				Out_AlphaClip4_g170661 = Data4_g170661.AlphaClip;
				Out_AlphaFade4_g170661 = Data4_g170661.AlphaFade;
				Out_Translucency4_g170661 = Data4_g170661.Translucency;
				Out_Transmission4_g170661 = Data4_g170661.Transmission;
				Out_Thickness4_g170661 = Data4_g170661.Thickness;
				Out_Diffusion4_g170661 = Data4_g170661.Diffusion;
				half3 Visual_Albedo127_g170660 = Out_Albedo4_g170661;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				half4 Global_AtmoParams516_g170660 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170660 = ( (Global_AtmoParams516_g170660).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170660 = 1.0;
				#endif
				half Global_Wetness429_g170660 = staticSwitch663_g170660;
				half Wetness_Value1042_g170660 = ( _WetnessIntensityValue * Global_Wetness429_g170660 );
				TVEModelData Data15_g170674 = Data16_g170211;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				half4 Model_VertexData1030_g170660 = Out_VertexData15_g170674;
				float4 break1019_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170679 = _wetness_vert_mode;
				float temp_output_30_0_g170679 = ( break1019_g170660.x * break33_g170679.x );
				float temp_output_29_0_g170679 = ( break1019_g170660.y * break33_g170679.y );
				float temp_output_31_0_g170679 = ( break1019_g170660.z * break33_g170679.z );
				float temp_output_28_0_g170679 = ( temp_output_30_0_g170679 + temp_output_29_0_g170679 + temp_output_31_0_g170679 + ( break1019_g170660.w * break33_g170679.w ) );
				float clampResult17_g170677 = clamp( temp_output_28_0_g170679 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170678 = _WetnessMeshRemap.x;
				float temp_output_10_0_g170678 = ( _WetnessMeshRemap.y - temp_output_7_0_g170678 );
				float lerpResult1026_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170677 - temp_output_7_0_g170678 ) / ( temp_output_10_0_g170678 + 0.0001 ) ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170680 = lerpResult1026_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1110_g170660 = staticSwitch14_g170680;
				#else
				float staticSwitch1110_g170660 = 1.0;
				#endif
				half Wetness_VertMask1024_g170660 = staticSwitch1110_g170660;
				float temp_output_1043_0_g170660 = ( Wetness_Value1042_g170660 * Wetness_VertMask1024_g170660 );
				half Wetness_Mask866_g170660 = temp_output_1043_0_g170660;
				float4 break1083_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170660.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170660.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170660.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170660.w * break33_g170683.w ) );
				float clampResult17_g170681 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170682 = _WetnessWaterMeshRemap.x;
				float temp_output_10_0_g170682 = ( _WetnessWaterMeshRemap.y - temp_output_7_0_g170682 );
				float lerpResult1089_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170681 - temp_output_7_0_g170682 ) / ( temp_output_10_0_g170682 + 0.0001 ) ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1113_g170660 = staticSwitch14_g170684;
				#else
				float staticSwitch1113_g170660 = 1.0;
				#endif
				half Water_VertMask1094_g170660 = staticSwitch1113_g170660;
				half4 Visual_Masks536_g170660 = Out_Shader4_g170661;
				float lerpResult1013_g170660 = lerp( 1.0 , (Visual_Masks536_g170660).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170660 = lerpResult1013_g170660;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170660 * Water_VertMask1094_g170660 ) - Water_HeightMask782_g170660 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170676 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170676 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170676 );
				half3 Model_NormalWS798_g170660 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170660 = saturate( (Model_NormalWS798_g170660).y );
				half Wetness_ProjMask790_g170660 = temp_output_786_0_g170660;
				half Water_Mask760_g170660 = ( saturate( ( ( clampResult17_g170675 - temp_output_7_0_g170676 ) / ( temp_output_10_0_g170676 + 0.0001 ) ) ) * Wetness_ProjMask790_g170660 );
				float3 lerpResult918_g170660 = lerp( Visual_Albedo127_g170660 , ( Visual_Albedo127_g170660 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170660 = lerpResult918_g170660;
				#else
				float3 staticSwitch946_g170660 = Visual_Albedo127_g170660;
				#endif
				float3 lerpResult768_g170660 = lerp( staticSwitch946_g170660 , ( staticSwitch946_g170660 * staticSwitch946_g170660 ) , _WetnessContrastValue);
				float3 lerpResult651_g170660 = lerp( Visual_Albedo127_g170660 , lerpResult768_g170660 , Wetness_Mask866_g170660);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170660 = lerpResult651_g170660;
				#else
				float3 staticSwitch577_g170660 = Visual_Albedo127_g170660;
				#endif
				half3 Final_Albedo493_g170660 = staticSwitch577_g170660;
				float3 In_Albedo3_g170662 = Final_Albedo493_g170660;
				float3 In_AlbedoRaw3_g170662 = Out_AlbedoRaw4_g170661;
				half2 Visual_Normal535_g170660 = Out_NormalTS4_g170661;
				float lerpResult877_g170660 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170660 = ( Visual_Normal535_g170660 * lerpResult877_g170660 );
				#else
				float2 staticSwitch957_g170660 = Visual_Normal535_g170660;
				#endif
				float2 temp_cast_41 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170660 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170660;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170660 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170660;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170660 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170660 = (temp_output_1010_0_g170660).zw;
				float2 temp_output_903_0_g170660 = (Rain_DropsNormal919_g170660*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170660 = (temp_output_1010_0_g170660).xy;
				float2 lerpResult904_g170660 = lerp( temp_output_903_0_g170660 , (Rain_RingsNormal713_g170660*2.0 + -1.0) , ( Water_Mask760_g170660 * Water_Mask760_g170660 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170660 = lerpResult904_g170660;
				#else
				float2 staticSwitch960_g170660 = temp_output_903_0_g170660;
				#endif
				half2 Rain_Drops1002_g170660 = ( staticSwitch960_g170660 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170660 = Out_PositionWS15_g170674;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170660 = ( (Global_AtmoParams516_g170660).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170660 = 1.0;
				#endif
				half Global_Rain955_g170660 = staticSwitch949_g170660;
				half Rain_Value1067_g170660 = Global_Rain955_g170660;
				float4 break1097_g170660 = Model_VertexData1030_g170660;
				float4 break33_g170687 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170687 = ( break1097_g170660.x * break33_g170687.x );
				float temp_output_29_0_g170687 = ( break1097_g170660.y * break33_g170687.y );
				float temp_output_31_0_g170687 = ( break1097_g170660.z * break33_g170687.z );
				float temp_output_28_0_g170687 = ( temp_output_30_0_g170687 + temp_output_29_0_g170687 + temp_output_31_0_g170687 + ( break1097_g170660.w * break33_g170687.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170687 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessDropsMeshRemap.x;
				float temp_output_10_0_g170686 = ( _WetnessDropsMeshRemap.y - temp_output_7_0_g170686 );
				float lerpResult1100_g170660 = lerp( 1.0 , saturate( ( ( clampResult17_g170685 - temp_output_7_0_g170686 ) / ( temp_output_10_0_g170686 + 0.0001 ) ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170688 = lerpResult1100_g170660;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170688 = ( temp_output_6_0_g170688 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170688 = temp_output_6_0_g170688;
				#endif
				#ifdef TVE_WETNESS_VERT
				float staticSwitch1115_g170660 = staticSwitch14_g170688;
				#else
				float staticSwitch1115_g170660 = 1.0;
				#endif
				half Rain_VertMask1108_g170660 = staticSwitch1115_g170660;
				half Rain_Mask999_g170660 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170660 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170660 * Rain_VertMask1108_g170660 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170660 * Rain_Mask999_g170660 * Wetness_ProjMask790_g170660 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170660 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170660 = Wetness_Normal526_g170660;
				#else
				float2 staticSwitch583_g170660 = temp_cast_41;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170660 = ( staticSwitch957_g170660 + staticSwitch583_g170660 );
				#else
				float2 staticSwitch774_g170660 = Visual_Normal535_g170660;
				#endif
				half2 Final_Normal499_g170660 = staticSwitch774_g170660;
				float2 In_NormalTS3_g170662 = Final_Normal499_g170660;
				float3 In_NormalWS3_g170662 = Out_NormalWS4_g170661;
				float4 break658_g170660 = Visual_Masks536_g170660;
				float temp_output_935_0_g170660 = ( Wetness_Mask866_g170660 * _WetnessSmoothnessValue );
				float lerpResult941_g170660 = lerp( temp_output_935_0_g170660 , 2.0 , Water_Mask760_g170660);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170660 = lerpResult941_g170660;
				#else
				float staticSwitch959_g170660 = temp_output_935_0_g170660;
				#endif
				float4 appendResult661_g170660 = (float4(break658_g170660.x , break658_g170660.y , break658_g170660.z , saturate( ( break658_g170660.w + staticSwitch959_g170660 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170660 = appendResult661_g170660;
				#else
				float4 staticSwitch586_g170660 = Visual_Masks536_g170660;
				#endif
				half4 Final_Masks482_g170660 = staticSwitch586_g170660;
				float4 In_Shader3_g170662 = Final_Masks482_g170660;
				float4 In_Emissive3_g170662 = Out_Emissive4_g170661;
				float In_Grayscale3_g170662 = Out_Grayscale4_g170661;
				float In_Luminosity3_g170662 = Out_Luminosity4_g170661;
				float In_MultiMask3_g170662 = Out_MultiMask4_g170661;
				float In_AlphaClip3_g170662 = Out_AlphaClip4_g170661;
				float In_AlphaFade3_g170662 = Out_AlphaFade4_g170661;
				float3 In_Translucency3_g170662 = Out_Translucency4_g170661;
				float In_Transmission3_g170662 = Out_Transmission4_g170661;
				float In_Thickness3_g170662 = Out_Thickness4_g170661;
				float In_Diffusion3_g170662 = Out_Diffusion4_g170661;
				Data3_g170662.Dummy = In_Dummy3_g170662;
				Data3_g170662.Albedo = In_Albedo3_g170662;
				Data3_g170662.AlbedoRaw = In_AlbedoRaw3_g170662;
				Data3_g170662.NormalTS = In_NormalTS3_g170662;
				Data3_g170662.NormalWS = In_NormalWS3_g170662;
				Data3_g170662.Shader = In_Shader3_g170662;
				Data3_g170662.Emissive= In_Emissive3_g170662;
				Data3_g170662.MultiMask = In_MultiMask3_g170662;
				Data3_g170662.Grayscale = In_Grayscale3_g170662;
				Data3_g170662.Luminosity = In_Luminosity3_g170662;
				Data3_g170662.AlphaClip = In_AlphaClip3_g170662;
				Data3_g170662.AlphaFade = In_AlphaFade3_g170662;
				Data3_g170662.Translucency = In_Translucency3_g170662;
				Data3_g170662.Transmission = In_Transmission3_g170662;
				Data3_g170662.Thickness = In_Thickness3_g170662;
				Data3_g170662.Diffusion = In_Diffusion3_g170662;
				TVEVisualData Data4_g170700 = Data3_g170662;
				float Out_Dummy4_g170700 = 0;
				float3 Out_Albedo4_g170700 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170700 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170700 = float2( 0,0 );
				float3 Out_NormalWS4_g170700 = float3( 0,0,0 );
				float4 Out_Shader4_g170700 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170700 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170700 = 0;
				float Out_Grayscale4_g170700 = 0;
				float Out_Luminosity4_g170700 = 0;
				float Out_AlphaClip4_g170700 = 0;
				float Out_AlphaFade4_g170700 = 0;
				float3 Out_Translucency4_g170700 = float3( 0,0,0 );
				float Out_Transmission4_g170700 = 0;
				float Out_Thickness4_g170700 = 0;
				float Out_Diffusion4_g170700 = 0;
				Out_Dummy4_g170700 = Data4_g170700.Dummy;
				Out_Albedo4_g170700 = Data4_g170700.Albedo;
				Out_AlbedoRaw4_g170700 = Data4_g170700.AlbedoRaw;
				Out_NormalTS4_g170700 = Data4_g170700.NormalTS;
				Out_NormalWS4_g170700 = Data4_g170700.NormalWS;
				Out_Shader4_g170700 = Data4_g170700.Shader;
				Out_Emissive4_g170700= Data4_g170700.Emissive;
				Out_MultiMask4_g170700 = Data4_g170700.MultiMask;
				Out_Grayscale4_g170700 = Data4_g170700.Grayscale;
				Out_Luminosity4_g170700= Data4_g170700.Luminosity;
				Out_AlphaClip4_g170700 = Data4_g170700.AlphaClip;
				Out_AlphaFade4_g170700 = Data4_g170700.AlphaFade;
				Out_Translucency4_g170700 = Data4_g170700.Translucency;
				Out_Transmission4_g170700 = Data4_g170700.Transmission;
				Out_Thickness4_g170700 = Data4_g170700.Thickness;
				Out_Diffusion4_g170700 = Data4_g170700.Diffusion;
				float3 In_Albedo3_g170690 = Out_Albedo4_g170700;
				float3 In_AlbedoRaw3_g170690 = Out_AlbedoRaw4_g170700;
				float2 In_NormalTS3_g170690 = Out_NormalTS4_g170700;
				float3 In_NormalWS3_g170690 = Out_NormalWS4_g170700;
				float4 In_Shader3_g170690 = Out_Shader4_g170700;
				float4 In_Emissive3_g170690 = Out_Emissive4_g170700;
				float In_Grayscale3_g170690 = Out_Grayscale4_g170700;
				float In_Luminosity3_g170690 = Out_Luminosity4_g170700;
				float temp_output_836_11_g170689 = Out_MultiMask4_g170700;
				float In_MultiMask3_g170690 = temp_output_836_11_g170689;
				half Visual_AlphaClip667_g170689 = Out_AlphaClip4_g170700;
				half Input_True57_g170697 = Visual_AlphaClip667_g170689;
				half True36_g170697 = Input_True57_g170697;
				TVEGlobalData Data15_g170699 = Data204_g170212;
				float Out_Dummy15_g170699 = 0;
				float4 Out_CoatParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170699 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170699 = float4( 0,0,0,0 );
				Out_Dummy15_g170699 = Data15_g170699.Dummy;
				Out_CoatParams15_g170699 = Data15_g170699.CoatParams;
				Out_PaintParams15_g170699 = Data15_g170699.PaintParams;
				Out_GlowParams15_g170699 = Data15_g170699.GlowParams;
				Out_AtmoParams15_g170699= Data15_g170699.AtmoParams;
				Out_FadeParams15_g170699= Data15_g170699.FadeParams;
				Out_FormParams15_g170699 = Data15_g170699.FormParams;
				Out_LandParams15_g170699 = Data15_g170699.LandParams;
				Out_WindParams15_g170699 = Data15_g170699.WindParams;
				Out_PushParams15_g170699 = Data15_g170699.PushParams;
				half4 Global_FadeParams516_g170689 = Out_FadeParams15_g170699;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170689 = saturate( (Global_FadeParams516_g170689).w );
				#else
				float staticSwitch663_g170689 = 1.0;
				#endif
				half Local_GlobalMask429_g170689 = staticSwitch663_g170689;
				float lerpResult811_g170689 = lerp( 1.0 , Visual_AlphaClip667_g170689 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170689 = lerpResult811_g170689;
				TVEModelData Data15_g170701 = Data16_g170211;
				float Out_Dummy15_g170701 = 0;
				float3 Out_PositionWS15_g170701 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170701 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170701 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170701 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170701 = float3( 0,0,0 );
				float4 Out_VertexData15_g170701 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170701 = float4( 0,0,0,0 );
				Out_Dummy15_g170701 = Data15_g170701.Dummy;
				Out_PositionWS15_g170701 = Data15_g170701.PositionWS;
				Out_PositionWO15_g170701 = Data15_g170701.PositionWO;
				Out_PivotWS15_g170701 = Data15_g170701.PivotWS;
				Out_PivotWO15_g170701 = Data15_g170701.PivotWO;
				Out_NormalWS15_g170701 = Data15_g170701.NormalWS;
				Out_ViewDirWS15_g170701 = Data15_g170701.ViewDirWS;
				Out_VertexData15_g170701 = Data15_g170701.VertexData;
				Out_BoundsData15_g170701 = Data15_g170701.BoundsData;
				half3 Model_PositionWO602_g170689 = Out_PositionWO15_g170701;
				float4 tex3DNode60_g170693 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170689 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170689 = lerp( 1.0 , tex3DNode60_g170693.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170689 = lerpResult673_g170689;
				half4 Model_VertexMasks752_g170689 = Out_VertexData15_g170701;
				float4 break755_g170689 = Model_VertexMasks752_g170689;
				float4 break33_g170691 = _cutout_vert_mode;
				float temp_output_30_0_g170691 = ( break755_g170689.x * break33_g170691.x );
				float temp_output_29_0_g170691 = ( break755_g170689.y * break33_g170691.y );
				float temp_output_31_0_g170691 = ( break755_g170689.z * break33_g170691.z );
				float temp_output_28_0_g170691 = ( temp_output_30_0_g170691 + temp_output_29_0_g170691 + temp_output_31_0_g170691 + ( break755_g170689.w * break33_g170691.w ) );
				float clampResult17_g170692 = clamp( temp_output_28_0_g170691 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170695 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170695 = ( _CutoutMeshRemap.y - temp_output_7_0_g170695 );
				float lerpResult820_g170689 = lerp( 1.0 , saturate( ( ( clampResult17_g170692 - temp_output_7_0_g170695 ) / ( temp_output_10_0_g170695 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170696 = lerpResult820_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170696 = ( temp_output_6_0_g170696 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170696 = temp_output_6_0_g170696;
				#endif
				float temp_output_801_0_g170689 = staticSwitch14_g170696;
				half Local_VertMask766_g170689 = temp_output_801_0_g170689;
				half Visual_MultiMask671_g170689 = temp_output_836_11_g170689;
				float lerpResult683_g170689 = lerp( 1.0 , Visual_MultiMask671_g170689 , _CutoutMultiValue);
				half Local_MultiMask685_g170689 = lerpResult683_g170689;
				float lerpResult728_g170689 = lerp( Visual_AlphaClip667_g170689 , min( Visual_AlphaClip667_g170689 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170689 ) - ( Local_AlphaMask814_g170689 * Local_NoiseMask678_g170689 * Local_VertMask766_g170689 ) ) ) ) , Local_MultiMask685_g170689);
				half Local_AlphaClip784_g170689 = lerpResult728_g170689;
				half Input_False58_g170697 = Local_AlphaClip784_g170689;
				half False36_g170697 = Input_False58_g170697;
				half localShadowPassCheck36_g170697 = ShadowPassCheck36_g170697( True36_g170697 , False36_g170697 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170689 = Local_AlphaClip784_g170689;
				#else
				float staticSwitch791_g170689 = localShadowPassCheck36_g170697;
				#endif
				float temp_output_6_0_g170698 = staticSwitch791_g170689;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170698 = ( temp_output_6_0_g170698 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170698 = temp_output_6_0_g170698;
				#endif
				float temp_output_798_0_g170689 = staticSwitch14_g170698;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170689 = temp_output_798_0_g170689;
				#else
				float staticSwitch577_g170689 = Visual_AlphaClip667_g170689;
				#endif
				half Final_AlphaClip795_g170689 = staticSwitch577_g170689;
				float In_AlphaClip3_g170690 = Final_AlphaClip795_g170689;
				float In_AlphaFade3_g170690 = Out_AlphaFade4_g170700;
				float3 In_Translucency3_g170690 = Out_Translucency4_g170700;
				float In_Transmission3_g170690 = Out_Transmission4_g170700;
				float In_Thickness3_g170690 = Out_Thickness4_g170700;
				float In_Diffusion3_g170690 = Out_Diffusion4_g170700;
				Data3_g170690.Dummy = In_Dummy3_g170690;
				Data3_g170690.Albedo = In_Albedo3_g170690;
				Data3_g170690.AlbedoRaw = In_AlbedoRaw3_g170690;
				Data3_g170690.NormalTS = In_NormalTS3_g170690;
				Data3_g170690.NormalWS = In_NormalWS3_g170690;
				Data3_g170690.Shader = In_Shader3_g170690;
				Data3_g170690.Emissive= In_Emissive3_g170690;
				Data3_g170690.MultiMask = In_MultiMask3_g170690;
				Data3_g170690.Grayscale = In_Grayscale3_g170690;
				Data3_g170690.Luminosity = In_Luminosity3_g170690;
				Data3_g170690.AlphaClip = In_AlphaClip3_g170690;
				Data3_g170690.AlphaFade = In_AlphaFade3_g170690;
				Data3_g170690.Translucency = In_Translucency3_g170690;
				Data3_g170690.Transmission = In_Transmission3_g170690;
				Data3_g170690.Thickness = In_Thickness3_g170690;
				Data3_g170690.Diffusion = In_Diffusion3_g170690;
				TVEVisualData Data4_g170704 = Data3_g170690;
				float Out_Dummy4_g170704 = 0;
				float3 Out_Albedo4_g170704 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170704 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170704 = float2( 0,0 );
				float3 Out_NormalWS4_g170704 = float3( 0,0,0 );
				float4 Out_Shader4_g170704 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170704 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170704 = 0;
				float Out_Grayscale4_g170704 = 0;
				float Out_Luminosity4_g170704 = 0;
				float Out_AlphaClip4_g170704 = 0;
				float Out_AlphaFade4_g170704 = 0;
				float3 Out_Translucency4_g170704 = float3( 0,0,0 );
				float Out_Transmission4_g170704 = 0;
				float Out_Thickness4_g170704 = 0;
				float Out_Diffusion4_g170704 = 0;
				Out_Dummy4_g170704 = Data4_g170704.Dummy;
				Out_Albedo4_g170704 = Data4_g170704.Albedo;
				Out_AlbedoRaw4_g170704 = Data4_g170704.AlbedoRaw;
				Out_NormalTS4_g170704 = Data4_g170704.NormalTS;
				Out_NormalWS4_g170704 = Data4_g170704.NormalWS;
				Out_Shader4_g170704 = Data4_g170704.Shader;
				Out_Emissive4_g170704= Data4_g170704.Emissive;
				Out_MultiMask4_g170704 = Data4_g170704.MultiMask;
				Out_Grayscale4_g170704 = Data4_g170704.Grayscale;
				Out_Luminosity4_g170704= Data4_g170704.Luminosity;
				Out_AlphaClip4_g170704 = Data4_g170704.AlphaClip;
				Out_AlphaFade4_g170704 = Data4_g170704.AlphaFade;
				Out_Translucency4_g170704 = Data4_g170704.Translucency;
				Out_Transmission4_g170704 = Data4_g170704.Transmission;
				Out_Thickness4_g170704 = Data4_g170704.Thickness;
				Out_Diffusion4_g170704 = Data4_g170704.Diffusion;
				float3 In_Albedo3_g170705 = Out_Albedo4_g170704;
				float3 In_AlbedoRaw3_g170705 = Out_AlbedoRaw4_g170704;
				float2 In_NormalTS3_g170705 = Out_NormalTS4_g170704;
				float3 In_NormalWS3_g170705 = Out_NormalWS4_g170704;
				float4 In_Shader3_g170705 = Out_Shader4_g170704;
				float4 In_Emissive3_g170705 = Out_Emissive4_g170704;
				float In_Grayscale3_g170705 = Out_Grayscale4_g170704;
				float In_Luminosity3_g170705 = Out_Luminosity4_g170704;
				float temp_output_821_11_g170702 = Out_MultiMask4_g170704;
				float In_MultiMask3_g170705 = temp_output_821_11_g170702;
				half Visual_AlphaClip754_g170702 = Out_AlphaClip4_g170704;
				half Input_True57_g170706 = Visual_AlphaClip754_g170702;
				half True36_g170706 = Input_True57_g170706;
				half Dither_Constant768_g170702 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_7_0_g170712 = _DitherProximityMaxValue;
				float temp_output_10_0_g170712 = ( _DitherProximityMinValue - temp_output_7_0_g170712 );
				half Dither_Proximity767_g170702 = ( saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g170712 ) / ( temp_output_10_0_g170712 + 0.0001 ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170711 = Data16_g170211;
				float Out_Dummy15_g170711 = 0;
				float3 Out_PositionWS15_g170711 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170711 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170711 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170711 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170711 = float3( 0,0,0 );
				float4 Out_VertexData15_g170711 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170711 = float4( 0,0,0,0 );
				Out_Dummy15_g170711 = Data15_g170711.Dummy;
				Out_PositionWS15_g170711 = Data15_g170711.PositionWS;
				Out_PositionWO15_g170711 = Data15_g170711.PositionWO;
				Out_PivotWS15_g170711 = Data15_g170711.PivotWS;
				Out_PivotWO15_g170711 = Data15_g170711.PivotWO;
				Out_NormalWS15_g170711 = Data15_g170711.NormalWS;
				Out_ViewDirWS15_g170711 = Data15_g170711.ViewDirWS;
				Out_VertexData15_g170711 = Data15_g170711.VertexData;
				Out_BoundsData15_g170711 = Data15_g170711.BoundsData;
				half3 Model_PositionWS776_g170702 = Out_PositionWS15_g170711;
				float temp_output_7_0_g170710 = _DitherDistanceMinValue;
				float temp_output_10_0_g170710 = ( _DitherDistanceMaxValue - temp_output_7_0_g170710 );
				half Dither_Distance856_g170702 = ( saturate( ( ( distance( Model_PositionWS776_g170702 , _WorldSpaceCameraPos ) - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170702 = Out_ViewDirWS15_g170711;
				float3 normalizeResult792_g170702 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170702 = dot( Model_ViewDirWS845_g170702 , normalizeResult792_g170702 );
				half Dither_Glancing784_g170702 = ( saturate( ( ( 1.0 - abs( dotResult778_g170702 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170702 = max( max( max( Dither_Constant768_g170702 , Dither_Proximity767_g170702 ) , Dither_Distance856_g170702 ) , Dither_Glancing784_g170702 );
				half3 Model_PositionWO602_g170702 = Out_PositionWO15_g170711;
				float4 tex3DNode60_g170708 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170702 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170702 = tex3DNode60_g170708.r;
				half Local_MaskNoise678_g170702 = temp_output_809_0_g170702;
				half Visual_MultiMask671_g170702 = temp_output_821_11_g170702;
				float lerpResult683_g170702 = lerp( 1.0 , Visual_MultiMask671_g170702 , _DitherMultiValue);
				half Local_MaskMulti685_g170702 = lerpResult683_g170702;
				half Custom_Mask826_g170702 = 1.0;
				float lerpResult728_g170702 = lerp( Visual_AlphaClip754_g170702 , min( Visual_AlphaClip754_g170702 , ( -0.001 - ( Dither_Value429_g170702 - Local_MaskNoise678_g170702 ) ) ) , ( Local_MaskMulti685_g170702 * Custom_Mask826_g170702 ));
				half Local_AlphaClip834_g170702 = lerpResult728_g170702;
				half Input_False58_g170706 = Local_AlphaClip834_g170702;
				half False36_g170706 = Input_False58_g170706;
				half localShadowPassCheck36_g170706 = ShadowPassCheck36_g170706( True36_g170706 , False36_g170706 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170702 = Local_AlphaClip834_g170702;
				#else
				float staticSwitch831_g170702 = localShadowPassCheck36_g170706;
				#endif
				float temp_output_6_0_g170707 = staticSwitch831_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170707 = ( temp_output_6_0_g170707 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170707 = temp_output_6_0_g170707;
				#endif
				float temp_output_840_0_g170702 = staticSwitch14_g170707;
				#ifdef TVE_DITHER
				float staticSwitch577_g170702 = temp_output_840_0_g170702;
				#else
				float staticSwitch577_g170702 = Visual_AlphaClip754_g170702;
				#endif
				half Final_AlphaClip493_g170702 = staticSwitch577_g170702;
				float In_AlphaClip3_g170705 = Final_AlphaClip493_g170702;
				float In_AlphaFade3_g170705 = Out_AlphaFade4_g170704;
				float3 In_Translucency3_g170705 = Out_Translucency4_g170704;
				float In_Transmission3_g170705 = Out_Transmission4_g170704;
				float In_Thickness3_g170705 = Out_Thickness4_g170704;
				float In_Diffusion3_g170705 = Out_Diffusion4_g170704;
				Data3_g170705.Dummy = In_Dummy3_g170705;
				Data3_g170705.Albedo = In_Albedo3_g170705;
				Data3_g170705.AlbedoRaw = In_AlbedoRaw3_g170705;
				Data3_g170705.NormalTS = In_NormalTS3_g170705;
				Data3_g170705.NormalWS = In_NormalWS3_g170705;
				Data3_g170705.Shader = In_Shader3_g170705;
				Data3_g170705.Emissive= In_Emissive3_g170705;
				Data3_g170705.MultiMask = In_MultiMask3_g170705;
				Data3_g170705.Grayscale = In_Grayscale3_g170705;
				Data3_g170705.Luminosity = In_Luminosity3_g170705;
				Data3_g170705.AlphaClip = In_AlphaClip3_g170705;
				Data3_g170705.AlphaFade = In_AlphaFade3_g170705;
				Data3_g170705.Translucency = In_Translucency3_g170705;
				Data3_g170705.Transmission = In_Transmission3_g170705;
				Data3_g170705.Thickness = In_Thickness3_g170705;
				Data3_g170705.Diffusion = In_Diffusion3_g170705;
				TVEVisualData Data4_g170732 = Data3_g170705;
				float Out_Dummy4_g170732 = 0;
				float3 Out_Albedo4_g170732 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170732 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170732 = float2( 0,0 );
				float3 Out_NormalWS4_g170732 = float3( 0,0,0 );
				float4 Out_Shader4_g170732 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170732 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170732 = 0;
				float Out_Grayscale4_g170732 = 0;
				float Out_Luminosity4_g170732 = 0;
				float Out_AlphaClip4_g170732 = 0;
				float Out_AlphaFade4_g170732 = 0;
				float3 Out_Translucency4_g170732 = float3( 0,0,0 );
				float Out_Transmission4_g170732 = 0;
				float Out_Thickness4_g170732 = 0;
				float Out_Diffusion4_g170732 = 0;
				Out_Dummy4_g170732 = Data4_g170732.Dummy;
				Out_Albedo4_g170732 = Data4_g170732.Albedo;
				Out_AlbedoRaw4_g170732 = Data4_g170732.AlbedoRaw;
				Out_NormalTS4_g170732 = Data4_g170732.NormalTS;
				Out_NormalWS4_g170732 = Data4_g170732.NormalWS;
				Out_Shader4_g170732 = Data4_g170732.Shader;
				Out_Emissive4_g170732= Data4_g170732.Emissive;
				Out_MultiMask4_g170732 = Data4_g170732.MultiMask;
				Out_Grayscale4_g170732 = Data4_g170732.Grayscale;
				Out_Luminosity4_g170732= Data4_g170732.Luminosity;
				Out_AlphaClip4_g170732 = Data4_g170732.AlphaClip;
				Out_AlphaFade4_g170732 = Data4_g170732.AlphaFade;
				Out_Translucency4_g170732 = Data4_g170732.Translucency;
				Out_Transmission4_g170732 = Data4_g170732.Transmission;
				Out_Thickness4_g170732 = Data4_g170732.Thickness;
				Out_Diffusion4_g170732 = Data4_g170732.Diffusion;
				float3 temp_output_297_0_g170723 = Out_Albedo4_g170732;
				float3 In_Albedo3_g170733 = temp_output_297_0_g170723;
				float3 temp_output_297_23_g170723 = Out_AlbedoRaw4_g170732;
				float3 In_AlbedoRaw3_g170733 = temp_output_297_23_g170723;
				float2 In_NormalTS3_g170733 = Out_NormalTS4_g170732;
				float3 In_NormalWS3_g170733 = Out_NormalWS4_g170732;
				float4 In_Shader3_g170733 = Out_Shader4_g170732;
				float4 temp_cast_42 = (0.0).xxxx;
				half4 Visual_Emissive255_g170723 = Out_Emissive4_g170732;
				TVEModelData Data15_g170736 = Data16_g170211;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				half4 Model_VertexMasks216_g170723 = Out_VertexData15_g170736;
				float4 break251_g170723 = Model_VertexMasks216_g170723;
				float4 break33_g170727 = _emissive_vert_mode;
				float temp_output_30_0_g170727 = ( break251_g170723.x * break33_g170727.x );
				float temp_output_29_0_g170727 = ( break251_g170723.y * break33_g170727.y );
				float temp_output_31_0_g170727 = ( break251_g170723.z * break33_g170727.z );
				float temp_output_28_0_g170727 = ( temp_output_30_0_g170727 + temp_output_29_0_g170727 + temp_output_31_0_g170727 + ( break251_g170723.w * break33_g170727.w ) );
				float clampResult17_g170726 = clamp( temp_output_28_0_g170727 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170730 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170730 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170730 );
				float lerpResult303_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170726 - temp_output_7_0_g170730 ) / ( temp_output_10_0_g170730 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170735 = lerpResult303_g170723;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				float temp_output_263_0_g170723 = staticSwitch14_g170735;
				half Emissive_MeshMask221_g170723 = temp_output_263_0_g170723;
				TEXTURE2D(Texture276_g170725) = _EmissiveMaskTex;
				SamplerState Sampler276_g170725 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170731 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170731 = ( temp_output_6_0_g170731 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170731 = temp_output_6_0_g170731;
				#endif
				half4 Emissive_Coords167_g170723 = staticSwitch14_g170731;
				float4 temp_output_37_0_g170725 = Emissive_Coords167_g170723;
				half4 Coords276_g170725 = temp_output_37_0_g170725;
				half2 TexCoord276_g170725 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170725 = SampleMain( Texture276_g170725 , Sampler276_g170725 , Coords276_g170725 , TexCoord276_g170725 );
				TEXTURE2D(Texture275_g170725) = _EmissiveMaskTex;
				SamplerState Sampler275_g170725 = sampler_Linear_Repeat;
				half4 Coords275_g170725 = temp_output_37_0_g170725;
				half2 TexCoord275_g170725 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170725 = SampleExtra( Texture275_g170725 , Sampler275_g170725 , Coords275_g170725 , TexCoord275_g170725 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170723 = localSampleExtra275_g170725;
				#else
				float4 staticSwitch176_g170723 = localSampleMain276_g170725;
				#endif
				half4 Emissive_MaskTex201_g170723 = staticSwitch176_g170723;
				float clampResult17_g170729 = clamp( (Emissive_MaskTex201_g170723).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170728 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170728 );
				float lerpResult302_g170723 = lerp( 1.0 , saturate( ( ( clampResult17_g170729 - temp_output_7_0_g170728 ) / ( temp_output_10_0_g170728 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170723 = lerpResult302_g170723;
				float temp_output_279_0_g170723 = ( Emissive_MeshMask221_g170723 * Emissive_Mask103_g170723 );
				float3 appendResult293_g170723 = (float3(temp_output_279_0_g170723 , temp_output_279_0_g170723 , temp_output_279_0_g170723));
				half3 Local_EmissiveColor278_g170723 = appendResult293_g170723;
				float3 temp_cast_43 = (1.0).xxx;
				TVEGlobalData Data15_g170724 = Data204_g170212;
				float Out_Dummy15_g170724 = 0;
				float4 Out_CoatParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170724 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170724 = float4( 0,0,0,0 );
				Out_Dummy15_g170724 = Data15_g170724.Dummy;
				Out_CoatParams15_g170724 = Data15_g170724.CoatParams;
				Out_PaintParams15_g170724 = Data15_g170724.PaintParams;
				Out_GlowParams15_g170724 = Data15_g170724.GlowParams;
				Out_AtmoParams15_g170724= Data15_g170724.AtmoParams;
				Out_FadeParams15_g170724= Data15_g170724.FadeParams;
				Out_FormParams15_g170724 = Data15_g170724.FormParams;
				Out_LandParams15_g170724 = Data15_g170724.LandParams;
				Out_WindParams15_g170724 = Data15_g170724.WindParams;
				Out_PushParams15_g170724 = Data15_g170724.PushParams;
				half4 Global_GlowParams179_g170723 = Out_GlowParams15_g170724;
				float3 lerpResult299_g170723 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170723).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170723 = lerpResult299_g170723;
				#else
				float3 staticSwitch228_g170723 = temp_cast_43;
				#endif
				half3 Emissive_GlobalMask248_g170723 = staticSwitch228_g170723;
				half3 Visual_AlbedoRaw306_g170723 = temp_output_297_23_g170723;
				float3 lerpResult307_g170723 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170723 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170723 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170723 * lerpResult307_g170723 );
				half3 Emissive_Blend260_g170723 = ( ( (Visual_Emissive255_g170723).xyz * Local_EmissiveColor278_g170723 ) * Local_EmissiveValue88_g170723 );
				float3 temp_output_3_0_g170737 = Emissive_Blend260_g170723;
				float temp_output_15_0_g170737 = _emissive_power_value;
				float3 hdEmission22_g170737 = ASEGetEmissionHDRColor(temp_output_3_0_g170737,temp_output_15_0_g170737,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170723 = temp_output_279_0_g170723;
				float4 appendResult295_g170723 = (float4(hdEmission22_g170737 , Local_EmissiveMask294_g170723));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170723 = appendResult295_g170723;
				#else
				float4 staticSwitch129_g170723 = temp_cast_42;
				#endif
				half4 Final_Emissive184_g170723 = staticSwitch129_g170723;
				float4 In_Emissive3_g170733 = Final_Emissive184_g170723;
				float In_Grayscale3_g170733 = Out_Grayscale4_g170732;
				float In_Luminosity3_g170733 = Out_Luminosity4_g170732;
				float temp_output_297_11_g170723 = Out_MultiMask4_g170732;
				float In_MultiMask3_g170733 = temp_output_297_11_g170723;
				float In_AlphaClip3_g170733 = Out_AlphaClip4_g170732;
				float In_AlphaFade3_g170733 = Out_AlphaFade4_g170732;
				float3 In_Translucency3_g170733 = Out_Translucency4_g170732;
				float In_Transmission3_g170733 = Out_Transmission4_g170732;
				float In_Thickness3_g170733 = Out_Thickness4_g170732;
				float In_Diffusion3_g170733 = Out_Diffusion4_g170732;
				Data3_g170733.Dummy = In_Dummy3_g170733;
				Data3_g170733.Albedo = In_Albedo3_g170733;
				Data3_g170733.AlbedoRaw = In_AlbedoRaw3_g170733;
				Data3_g170733.NormalTS = In_NormalTS3_g170733;
				Data3_g170733.NormalWS = In_NormalWS3_g170733;
				Data3_g170733.Shader = In_Shader3_g170733;
				Data3_g170733.Emissive= In_Emissive3_g170733;
				Data3_g170733.MultiMask = In_MultiMask3_g170733;
				Data3_g170733.Grayscale = In_Grayscale3_g170733;
				Data3_g170733.Luminosity = In_Luminosity3_g170733;
				Data3_g170733.AlphaClip = In_AlphaClip3_g170733;
				Data3_g170733.AlphaFade = In_AlphaFade3_g170733;
				Data3_g170733.Translucency = In_Translucency3_g170733;
				Data3_g170733.Transmission = In_Transmission3_g170733;
				Data3_g170733.Thickness = In_Thickness3_g170733;
				Data3_g170733.Diffusion = In_Diffusion3_g170733;
				TVEVisualData Data4_g170758 = Data3_g170733;
				float Out_Dummy4_g170758 = 0;
				float3 Out_Albedo4_g170758 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170758 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170758 = float2( 0,0 );
				float3 Out_NormalWS4_g170758 = float3( 0,0,0 );
				float4 Out_Shader4_g170758 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170758 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170758 = 0;
				float Out_Grayscale4_g170758 = 0;
				float Out_Luminosity4_g170758 = 0;
				float Out_AlphaClip4_g170758 = 0;
				float Out_AlphaFade4_g170758 = 0;
				float3 Out_Translucency4_g170758 = float3( 0,0,0 );
				float Out_Transmission4_g170758 = 0;
				float Out_Thickness4_g170758 = 0;
				float Out_Diffusion4_g170758 = 0;
				Out_Dummy4_g170758 = Data4_g170758.Dummy;
				Out_Albedo4_g170758 = Data4_g170758.Albedo;
				Out_AlbedoRaw4_g170758 = Data4_g170758.AlbedoRaw;
				Out_NormalTS4_g170758 = Data4_g170758.NormalTS;
				Out_NormalWS4_g170758 = Data4_g170758.NormalWS;
				Out_Shader4_g170758 = Data4_g170758.Shader;
				Out_Emissive4_g170758= Data4_g170758.Emissive;
				Out_MultiMask4_g170758 = Data4_g170758.MultiMask;
				Out_Grayscale4_g170758 = Data4_g170758.Grayscale;
				Out_Luminosity4_g170758= Data4_g170758.Luminosity;
				Out_AlphaClip4_g170758 = Data4_g170758.AlphaClip;
				Out_AlphaFade4_g170758 = Data4_g170758.AlphaFade;
				Out_Translucency4_g170758 = Data4_g170758.Translucency;
				Out_Transmission4_g170758 = Data4_g170758.Transmission;
				Out_Thickness4_g170758 = Data4_g170758.Thickness;
				Out_Diffusion4_g170758 = Data4_g170758.Diffusion;
				half3 Visual_Albedo199_g170757 = Out_Albedo4_g170758;
				half3 Final_Albedo312_g170757 = Visual_Albedo199_g170757;
				float3 In_Albedo3_g170759 = Final_Albedo312_g170757;
				float3 In_AlbedoRaw3_g170759 = Out_AlbedoRaw4_g170758;
				float2 In_NormalTS3_g170759 = Out_NormalTS4_g170758;
				float3 In_NormalWS3_g170759 = Out_NormalWS4_g170758;
				float4 In_Shader3_g170759 = Out_Shader4_g170758;
				float4 In_Emissive3_g170759 = Out_Emissive4_g170758;
				float In_Grayscale3_g170759 = Out_Grayscale4_g170758;
				float In_Luminosity3_g170759 = Out_Luminosity4_g170758;
				float temp_output_301_11_g170757 = Out_MultiMask4_g170758;
				float In_MultiMask3_g170759 = temp_output_301_11_g170757;
				float In_AlphaClip3_g170759 = Out_AlphaClip4_g170758;
				float In_AlphaFade3_g170759 = Out_AlphaFade4_g170758;
				float3 temp_cast_44 = (0.0).xxx;
				half3 Subsurface_Color264_g170757 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170757 );
				half Visual_Transmission138_g170757 = Out_Transmission4_g170758;
				half Subsurface_Value268_g170757 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170760 = Data204_g170212;
				float Out_Dummy15_g170760 = 0;
				float4 Out_CoatParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170760 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170760 = float4( 0,0,0,0 );
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_CoatParams15_g170760 = Data15_g170760.CoatParams;
				Out_PaintParams15_g170760 = Data15_g170760.PaintParams;
				Out_GlowParams15_g170760 = Data15_g170760.GlowParams;
				Out_AtmoParams15_g170760= Data15_g170760.AtmoParams;
				Out_FadeParams15_g170760= Data15_g170760.FadeParams;
				Out_FormParams15_g170760 = Data15_g170760.FormParams;
				Out_LandParams15_g170760 = Data15_g170760.LandParams;
				Out_WindParams15_g170760 = Data15_g170760.WindParams;
				Out_PushParams15_g170760 = Data15_g170760.PushParams;
				half4 Global_GlowParams373_g170757 = Out_GlowParams15_g170760;
				float lerpResult403_g170757 = lerp( 1.0 , saturate( (Global_GlowParams373_g170757).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170757 = lerpResult403_g170757;
				#else
				float staticSwitch367_g170757 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170757 = staticSwitch367_g170757;
				half Visual_MultiMask292_g170757 = temp_output_301_11_g170757;
				float lerpResult293_g170757 = lerp( 1.0 , Visual_MultiMask292_g170757 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170757 = lerpResult293_g170757;
				half Custom_Mask363_g170757 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170757 = ( Visual_Transmission138_g170757 * Subsurface_Value268_g170757 * Subsurface_GlobalMask369_g170757 * Subsurface_MultiMask296_g170757 * Custom_Mask363_g170757 );
				#else
				float staticSwitch345_g170757 = 0.0;
				#endif
				half Final_Transmission269_g170757 = staticSwitch345_g170757;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170757 = ( Subsurface_Color264_g170757 * Final_Transmission269_g170757 * 10.0 );
				#else
				float3 staticSwitch348_g170757 = temp_cast_44;
				#endif
				half3 Final_Translucency254_g170757 = staticSwitch348_g170757;
				float3 In_Translucency3_g170759 = Final_Translucency254_g170757;
				float In_Transmission3_g170759 = Final_Transmission269_g170757;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170757 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170757 = 1.0;
				#endif
				half Final_Thickness275_g170757 = staticSwitch351_g170757;
				float In_Thickness3_g170759 = Final_Thickness275_g170757;
				float Final_Diffusion340_g170757 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170759 = Final_Diffusion340_g170757;
				Data3_g170759.Dummy = In_Dummy3_g170759;
				Data3_g170759.Albedo = In_Albedo3_g170759;
				Data3_g170759.AlbedoRaw = In_AlbedoRaw3_g170759;
				Data3_g170759.NormalTS = In_NormalTS3_g170759;
				Data3_g170759.NormalWS = In_NormalWS3_g170759;
				Data3_g170759.Shader = In_Shader3_g170759;
				Data3_g170759.Emissive= In_Emissive3_g170759;
				Data3_g170759.MultiMask = In_MultiMask3_g170759;
				Data3_g170759.Grayscale = In_Grayscale3_g170759;
				Data3_g170759.Luminosity = In_Luminosity3_g170759;
				Data3_g170759.AlphaClip = In_AlphaClip3_g170759;
				Data3_g170759.AlphaFade = In_AlphaFade3_g170759;
				Data3_g170759.Translucency = In_Translucency3_g170759;
				Data3_g170759.Transmission = In_Transmission3_g170759;
				Data3_g170759.Thickness = In_Thickness3_g170759;
				Data3_g170759.Diffusion = In_Diffusion3_g170759;
				TVEVisualData Data4_g170771 = Data3_g170759;
				float Out_Dummy4_g170771 = 0;
				float3 Out_Albedo4_g170771 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170771 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170771 = float2( 0,0 );
				float3 Out_NormalWS4_g170771 = float3( 0,0,0 );
				float4 Out_Shader4_g170771 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170771 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170771 = 0;
				float Out_Grayscale4_g170771 = 0;
				float Out_Luminosity4_g170771 = 0;
				float Out_AlphaClip4_g170771 = 0;
				float Out_AlphaFade4_g170771 = 0;
				float3 Out_Translucency4_g170771 = float3( 0,0,0 );
				float Out_Transmission4_g170771 = 0;
				float Out_Thickness4_g170771 = 0;
				float Out_Diffusion4_g170771 = 0;
				Out_Dummy4_g170771 = Data4_g170771.Dummy;
				Out_Albedo4_g170771 = Data4_g170771.Albedo;
				Out_AlbedoRaw4_g170771 = Data4_g170771.AlbedoRaw;
				Out_NormalTS4_g170771 = Data4_g170771.NormalTS;
				Out_NormalWS4_g170771 = Data4_g170771.NormalWS;
				Out_Shader4_g170771 = Data4_g170771.Shader;
				Out_Emissive4_g170771= Data4_g170771.Emissive;
				Out_MultiMask4_g170771 = Data4_g170771.MultiMask;
				Out_Grayscale4_g170771 = Data4_g170771.Grayscale;
				Out_Luminosity4_g170771= Data4_g170771.Luminosity;
				Out_AlphaClip4_g170771 = Data4_g170771.AlphaClip;
				Out_AlphaFade4_g170771 = Data4_g170771.AlphaFade;
				Out_Translucency4_g170771 = Data4_g170771.Translucency;
				Out_Transmission4_g170771 = Data4_g170771.Transmission;
				Out_Thickness4_g170771 = Data4_g170771.Thickness;
				Out_Diffusion4_g170771 = Data4_g170771.Diffusion;
				float temp_output_3_0_g170772 = Out_AlphaClip4_g170771;
				float Alpha19_g170772 = temp_output_3_0_g170772;
				float temp_output_15_0_g170772 = 0.0;
				float Treshold19_g170772 = temp_output_15_0_g170772;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#else
				clip(Alpha19_g170772 - Treshold19_g170772);
				#endif
				#endif
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170772 * Out_AlphaFade4_g170771 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold =  _AlphaCutoff;
				#endif

				outColor = _SelectionID;
			}

            ENDHLSL
		}

        Pass
        {

            Name "FullScreenDebug"
            Tags 
			{ 
				"LightMode" = "FullScreenDebug" 
            }

            Cull [_CullMode]
			ZTest LEqual
			ZWrite Off

            HLSLPROGRAM
            /*ase_pragma_before*/
            #pragma multi_compile _ DOTS_INSTANCING_ON

			#pragma vertex Vert
			#pragma fragment Frag

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

			#ifndef SHADER_UNLIT
			#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
			#define VARYINGS_NEED_CULLFACE
			#endif
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
		    #define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

			#if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
			#if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
				#define WRITE_NORMAL_BUFFER
			#endif
			#endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

			#ifndef DEBUG_DISPLAY
				#if !defined(_SURFACE_TYPE_TRANSPARENT)
					#if SHADERPASS == SHADERPASS_FORWARD
					#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
					#elif SHADERPASS == SHADERPASS_GBUFFER
					#define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
					#endif
				#endif
			#endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : INSTANCEID_SEMANTIC;
				#endif
			};

			struct VaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

			struct VertexDescriptionInputs
			{
				 float3 ObjectSpaceNormal;
				 float3 ObjectSpaceTangent;
				 float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				 float3 TangentSpaceNormal;
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
			{
				PackedVaryingsMeshToPS output;
				ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

			VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
			{
				VaryingsMeshToPS output;
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

            struct VertexDescription
			{
				float3 Position;
				float3 Normal;
				float3 Tangent;
			};

			VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				description.Normal = IN.ObjectSpaceNormal;
				description.Tangent = IN.ObjectSpaceTangent;
				return description;
			}

            struct SurfaceDescription
			{
				float3 BaseColor;
				float3 Emission;
				float Alpha;
				float3 BentNormal;
				float Smoothness;
				float Occlusion;
				float3 NormalTS;
				float Metallic;
			};

			SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				surface.BaseColor = IsGammaSpace() ? float3(0.5, 0.5, 0.5) : SRGBToLinear(float3(0.5, 0.5, 0.5));
				surface.Emission = float3(0, 0, 0);
				surface.Alpha = 1;
				surface.BentNormal = IN.TangentSpaceNormal;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.NormalTS = IN.TangentSpaceNormal;
				surface.Metallic = 0;
				return surface;
			}

			VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
			{
				VertexDescriptionInputs output;
				ZERO_INITIALIZE(VertexDescriptionInputs, output);

				output.ObjectSpaceNormal =                          input.normalOS;
				output.ObjectSpaceTangent =                         input.tangentOS.xyz;
				output.ObjectSpacePosition =                        input.positionOS;
				#if UNITY_ANY_INSTANCING_ENABLED
                #else
                #endif

				return output;
			}

			AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters  )
			{
				VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);

				VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);

				input.positionOS = vertexDescription.Position;
				input.normalOS = vertexDescription.Normal;
				input.tangentOS.xyz = vertexDescription.Tangent;
				return input;
			}

			FragInputs BuildFragInputs(VaryingsMeshToPS input)
			{
				FragInputs output;
				ZERO_INITIALIZE(FragInputs, output);

				output.tangentToWorld = k_identity3x3;
				output.positionSS = input.positionCS; // input.positionCS is SV_Position
				#if UNITY_ANY_INSTANCING_ENABLED
                #else
                #endif

				return output;
			}

			FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
			{
				UNITY_SETUP_INSTANCE_ID(input);
				VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
				return BuildFragInputs(unpacked);
			}

			#define DEBUG_DISPLAY
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/FullScreenDebug.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

			PackedVaryingsType Vert(AttributesMesh inputMesh)
			{
				VaryingsType varyingsType;
				varyingsType.vmesh = VertMesh(inputMesh);
				return PackVaryingsType(varyingsType);
			}

			#if !defined(_DEPTHOFFSET_ON)
			[earlydepthstencil]
			#endif
			void Frag(PackedVaryingsToPS packedInput)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				FragInputs input = UnpackVaryingsToFragInputs(packedInput);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz);

			#ifdef PLATFORM_SUPPORTS_PRIMITIVE_ID_IN_PIXEL_SHADER
				if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_QUAD_OVERDRAW)
				{
					IncrementQuadOverdrawCounter(posInput.positionSS.xy, input.primitiveID);
				}
			#endif
			}
            ENDHLSL
        }
		
	}
	
	CustomEditor "TVEShaderGUICore"
	
	Fallback Off
}
/*ASEBEGIN
Version=19603
Node;AmplifyShaderEditor.FunctionNode;4301;-10256,-256;Inherit;False;Block Model;46;;170196;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;4302;-9936,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4303;-9488,-256;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;4304;-9936,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4305;-9232,-256;Inherit;False;Block Global;56;;170212;212e17d4006dc88449d56ce0340cb5ff;20,315,1,311,1,388,1,317,1,321,1,319,1,376,0,323,1,337,1,282,1,371,1,349,1,385,1,287,1,285,1,276,1,283,1,308,1,348,1,289,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;4306;-8464,-256;Inherit;False;4304;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4307;-4240,-256;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;4308;-8912,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4309;-8208,-256;Inherit;False;Block Pivots Sub;-1;;170369;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;4310;-3984,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4311;-3984,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4312;-3984,-256;Inherit;False;Block Main;105;;170372;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode;4313;-7824,-128;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4314;-7824,-256;Inherit;False;Block Perspective;490;;170390;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;4315;-3600,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4316;-3600,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4317;-3600,-256;Inherit;False;Block Layer;131;;170394;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;4318;-7440,-256;Inherit;False;Block Size Fade;495;;170428;467c36a7402d0274b9ad844bbc95de33;0;2;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;4319;-3216,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4320;-3216,-256;Inherit;False;Block Detail;178;;170434;a5b52fdec7b855a4fba859a90e837892;7,1013,0,990,1,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;4321;-7056,-256;Inherit;False;Block Motion;504;;170467;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode;4322;-2832,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4323;-2832,-256;Inherit;False;Block Occlusion;223;;170544;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;4324;-6608,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4325;-2448,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4326;-2448,-256;Inherit;False;Block Gradient;235;;170554;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;4327;-5136,-256;Inherit;False;4324;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4328;-2064,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4329;-2064,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4330;-2064,-256;Inherit;False;Block Variation;248;;170564;f25afe21028a28a4e8dee6f6da7bc1a5;0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;4331;-4880,-256;Inherit;False;Block Interp;-1;;170573;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;4332;-1680,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4333;-1680,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4334;-1680,-256;Inherit;False;Block Tinting;261;;170574;9f39e156ea8d89e4997ea2a1e194137e;7,352,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode;4335;-4560,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;4336;-1296,-256;Inherit;False;Block Dryness;290;;170598;f05795de23f951c45bb73c8b4321e4b7;7,398,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode;4337;-1296,-128;Inherit;False;4335;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;4338;-912,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4339;-912,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4340;-912,-256;Inherit;False;Block Highlight;0;;170621;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;4341;-528,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4342;-528,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4343;-528,-256;Inherit;False;Block Overlay;322;;170624;8ae9c8285a7817844a51243251284d21;9,821,1,819,1,813,1,910,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4344;-144,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4345;-144,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4346;-144,-256;Inherit;False;Block Wetness;368;;170660;52c5a1f52507fc44e926833b126e7855;8,850,1,1075,1,857,1,945,1,930,1,1092,1,851,1,1107,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4347;240,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4348;240,-256;Inherit;False;Block Cutout;409;;170689;866b4a5fe67e7f34085520e1bb5be2b7;5,775,1,777,1,815,1,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4349;624,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4350;624,-256;Inherit;False;Block Dithering;427;;170702;c7e02d28445e979479d493926695e6f3;6,843,1,859,1,844,1,827,1,879,0,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4351;624,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4352;-6672,-256;Inherit;False;Block Transform;-1;;170715;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;4353;1008,-256;Inherit;False;Block Emissive;447;;170723;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode;4354;1008,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4356;-6288,-256;Inherit;False;Block Normal;582;;170738;87f7defafe56dbf4b954caf5efc3f5ca;4,1713,0,1693,1,1638,0,1700,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;4357;-5904,-256;Inherit;False;Block Pivots Add;-1;;170754;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;4360;1392,-256;Inherit;False;Block Subsurface;471;;170757;d738d295ada6b1f409db6776b5efe789;3,315,0,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.RegisterLocalVarNode;4358;1712,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;4359;-5584,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2214;2432,-192;Inherit;False;4359;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2213;2432,-256;Inherit;False;4358;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode;20;2608,-640;Half;False;Property;_render_src;_render_src;602;1;[HideInInspector];Create;True;0;0;0;True;0;False;5;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;10;2432,-640;Half;False;Property;_render_cull;_render_cull;601;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;7;2784,-640;Half;False;Property;_render_dst;_render_dst;603;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;17;2960,-640;Half;False;Property;_render_zw;_render_zw;604;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1355;3136,-640;Half;False;Property;_render_coverage;_render_coverage;605;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1087;3712,-640;Inherit;False;Base Compile;-1;;170764;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;4154;2688,-256;Inherit;False;Block Render;2;;170765;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.RangedFloatNode;2267;2432,-768;Half;False;Property;_IsGeneralShader;_IsGeneralShader;606;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;4258;2656,-768;Half;False;Property;_IsSubsurfaceShader;_IsSubsurfaceShader;607;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4355;1008,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4290;3232,-256;Float;False;True;-1;2;TVEShaderGUICore;0;16;BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit;28cd5599e02859647ae1798e4fcaef6c;True;GBuffer;0;0;GBuffer;34;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefGBuffer;255;False;;255;True;_StencilWriteMaskGBuffer;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;False;True;0;True;_ZTestGBuffer;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;38;Surface Type;0;0;  Rendering Pass;1;0;  Refraction Model;0;0;    Blending Mode;0;0;    Blend Preserves Specular;1;0;  Back Then Front Rendering;0;0;  Transparent Depth Prepass;0;0;  Transparent Depth Postpass;0;0;  ZWrite;0;0;  Z Test;4;0;Double-Sided;0;0;Alpha Clipping;0;0;  Use Shadow Threshold;0;0;Material Type,InvertActionOnDeselection;5;638504303166630831;  Energy Conserving Specular;1;0;  Transmission,InvertActionOnDeselection;0;0;Receive Decals;1;0;Receive SSR;1;0;Receive SSR Transparent;0;0;Motion Vectors;1;0;  Add Precomputed Velocity;0;0;Specular AA;0;0;Specular Occlusion Mode;1;0;Override Baked GI;0;0;Depth Offset;0;0;  Conserative;1;0;GPU Instancing;1;0;LOD CrossFade;1;638504303211660206;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Vertex Position;0;638504303223830404;0;11;True;True;True;True;True;True;False;False;False;True;True;False;;True;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4291;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;META;0;1;META;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4292;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4293;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;SceneSelectionPass;0;3;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4294;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;DepthOnly;0;4;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4295;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;MotionVectors;0;5;MotionVectors;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefMV;255;False;;255;True;_StencilWriteMaskMV;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=MotionVectors;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4296;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentBackface;0;6;TransparentBackface;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;False;True;1;False;;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;False;False;True;0;True;_ZWrite;True;0;True;_ZTestTransparent;False;True;1;LightMode=TransparentBackface;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4297;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPrepass;0;7;TransparentDepthPrepass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPrepass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4298;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPostpass;0;8;TransparentDepthPostpass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPostpass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4299;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Forward;0;9;Forward;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;False;True;0;True;_CullModeForward;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;0;True;_StencilRef;255;False;;255;True;_StencilWriteMask;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;0;True;_ZWrite;True;0;True;_ZTestDepthEqualForOpaque;False;True;1;LightMode=Forward;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4300;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ScenePickingPass;0;10;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
WireConnection;4302;0;4301;314
WireConnection;4304;0;4301;128
WireConnection;4305;206;4303;0
WireConnection;4308;0;4305;151
WireConnection;4309;146;4306;0
WireConnection;4312;225;4307;0
WireConnection;4314;146;4309;128
WireConnection;4317;585;4312;106
WireConnection;4317;633;4310;0
WireConnection;4317;974;4311;0
WireConnection;4318;146;4314;128
WireConnection;4318;186;4313;0
WireConnection;4320;585;4317;552
WireConnection;4320;633;4315;0
WireConnection;4320;971;4316;0
WireConnection;4321;146;4318;128
WireConnection;4323;144;4320;552
WireConnection;4323;204;4319;0
WireConnection;4324;0;4321;1903
WireConnection;4326;144;4323;116
WireConnection;4326;222;4322;0
WireConnection;4330;144;4326;116
WireConnection;4330;222;4325;0
WireConnection;4331;22;4327;0
WireConnection;4334;198;4330;116
WireConnection;4334;223;4329;0
WireConnection;4334;207;4328;0
WireConnection;4335;0;4331;0
WireConnection;4336;279;4334;204
WireConnection;4336;297;4333;0
WireConnection;4336;281;4332;0
WireConnection;4340;144;4336;346
WireConnection;4340;212;4337;0
WireConnection;4343;572;4340;116
WireConnection;4343;596;4338;0
WireConnection;4343;600;4339;0
WireConnection;4346;572;4343;566
WireConnection;4346;596;4342;0
WireConnection;4346;600;4341;0
WireConnection;4348;572;4346;566
WireConnection;4348;596;4345;0
WireConnection;4348;600;4344;0
WireConnection;4350;572;4348;566
WireConnection;4350;596;4347;0
WireConnection;4352;146;4321;128
WireConnection;4353;146;4350;566
WireConnection;4353;148;4351;0
WireConnection;4353;178;4349;0
WireConnection;4356;146;4352;128
WireConnection;4357;146;4356;128
WireConnection;4360;146;4353;183
WireConnection;4360;371;4354;0
WireConnection;4358;0;4360;183
WireConnection;4359;0;4357;128
WireConnection;4154;17;2213;0
WireConnection;4154;19;2214;0
WireConnection;4290;0;4154;21
WireConnection;4290;1;4154;22
WireConnection;4290;6;4154;34
WireConnection;4290;7;4154;27
WireConnection;4290;8;4154;26
WireConnection;4290;9;4154;28
WireConnection;4290;16;4154;67
WireConnection;4290;61;4154;66
WireConnection;4290;62;4154;68
WireConnection;4290;11;4154;30
WireConnection;4290;12;4154;32
WireConnection;4290;27;4154;33
ASEEND*/
//CHKSM=F80FD2663CDF00D85C4CC728883FE7F232E0AA02
