// Made with Amplify Shader Editor v1.9.6.3
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Impostors/Hemi Subsurface Lit"
{
	Properties
	{
		[HideInInspector] _EmissionColor("Emission Color", Color) = (1,1,1,1)
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2040
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_IsInitialized("_IsInitialized", Float) = 0
		[StyledCategory(Render Settings, true, 0, 10)]_CategoryRender("[ Category Render ]", Float) = 1
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[StyledSpace(10)]_EndRender("[ End Render ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTexSS("Noise Mask SS", 2D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPaintLayerValue("Global Paint Layer", Float) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalAtmoLayerValue("Global Atmo Layer", Float) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFadeLayerValue("Global Fade Layer", Float) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalGlowLayerValue("Global Glow Layer", Float) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFormLayerValue("Global Form Layer", Float) = 0
		[StyledEnum(Wind Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalWindLayerValue("Global Wind Layer", Float) = 0
		[StyledEnum(Push Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPushLayerValue("Global Push Layer", Float) = 0
		_GlobalPaintPivotValue("Global Paint Pivots", Range( 0 , 1)) = 0
		_GlobalAtmoPivotValue("Global Atmo Pivots", Range( 0 , 1)) = 0
		_GlobalFadePivotValue("Global Fade Pivots", Range( 0 , 1)) = 0
		_GlobalGlowPivotValue("Global Glow Pivots", Range( 0 , 1)) = 0
		_GlobalFormPivotValue("Global Form Pivots", Range( 0 , 1)) = 1
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Impostor Settings, true, 0, 10)]_ImpostorCategory("[ Impostor Category ]", Float) = 1
		[StyledMessage(Warning, When the Maps option is disabled__ only the Albedo and Normal textures are used. Metallic__ Emissive__ Multi Mask__ Smoothness and Vertex Color masks are not supported., 0, 10)]_ImpostorMaskOffInfo("_ImpostorMaskOffInfo", Float) = 0
		[StyledMessage(Info, The Default maps mode uses the Shader texture for Metallic R__ Occlusion or Emissive G__ Multi Mask B__ and Smoothness A and the Vertex texture for Vertex Color used for mesh masks. Confider using the Packed option if Metallic__ Emissive__ Vertex B and Vertex A masks are not used to save performance and texture memory., 0, 10)]_ImpostorMaskDefaultInfo("_ImpostorMaskDefaultInfo", Float) = 0
		[StyledMessage(Info, The Packed maps mode uses the Packed texture for Vertex R__ Vertex G__ Multi Mask B__ and Smoothness A. The packed texture stores the most common masks used for vegetation assets., 0, 10)]_ImpostorMaskPackedInfo("_ImpostorMaskPackedInfo", Float) = 0
		[StyledMessage(Info, The Shading maps mode uses the Shader texture for Metallic R__ Occlusion or Emissive G__ Multi Mask B__ and Smoothness A. Using the mesh masks for globals will have no effect on the shading., 0, 10)]_ImpostorMaskShadingInfo("_ImpostorMaskShadingInfo", Float) = 0
		_Albedo("Impostor Albedo & Alpha", 2D) = "white" {}
		_Normals("Impostor Normal & Depth", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_Shader("Impostor Shader", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_Packed("Impostor Packed", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_Vertex("Impostor Vertex", 2D) = "white" {}
		_AI_Parallax("Impostor Parallax", Range( 0 , 1)) = 1
		[HideInInspector]_AI_SizeOffset("Impostor Size Offset", Vector) = (0,0,0,0)
		_AI_ShadowView("Impostor Shadow View", Range( 0 , 1)) = 1
		_AI_ShadowBias("Impostor Shadow Bias", Range( 0 , 2)) = 0.25
		[HideInInspector]_AI_DepthSize("Impostor Depth Size", Float) = 0
		_AI_TextureBias("Impostor Texture Bias", Float) = -1
		[HideInInspector]_AI_Offset("Impostor Offset", Vector) = (0,0,0,0)
		[HideInInspector]_AI_ImpostorSize("Impostor Size", Float) = 0
		[HideInInspector]_AI_FramesY("Impostor Frames Y", Float) = 0
		[HideInInspector]_AI_FramesX("Impostor Frames X", Float) = 0
		[HideInInspector]_AI_Frames("Impostor Frames", Float) = 0
		_AI_Clip("Impostor Clip", Range( 0 , 1)) = 0.5
		[Enum(Off,0,Default,1,Packed,2,Shading,3)][Space(10)]_ImpostorMaskMode("Impostor Maps", Float) = 2
		[Enum(Constant,0,Dual Colors,1)]_ImpostorColorMode("Impostor Color", Float) = 0
		[HDR]_ImpostorColor("Impostor Color", Color) = (1,1,1,1)
		[HDR]_ImpostorColorTwo("Impostor ColorB", Color) = (1,1,1,1)
		_ImpostorAlphaClipValue("Impostor Alpha", Range( 0 , 1)) = 0.5
		_ImpostorMetallicValue("Impostor Metallic", Range( 0 , 1)) = 0
		_ImpostorOcclusionValue("Impostor Occlusion", Range( 0 , 1)) = 1
		_ImpostorSmoothnessValue("Impostor Smoothness", Range( 0 , 1)) = 1
		[StyledSpace(10)]_ImpostorEnd("[ Impostor End ]", Float) = 1
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider()]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 100)) = 10
		_VariationNoisePivotValue("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)]_TintingBakeInfo("Tinting Baking Info", Float) = 0
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[HideInInspector]_tinting_vert_mode("_tinting_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)]_DrynessBakeInfo("Dryness Baking Info", Float) = 0
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[HideInInspector]_dryness_vert_mode("_dryness_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)]_OverlayBakeInfo("Overlay Baking Info", Float) = 0
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap1("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)]_WetnessBakeInfo("Wetness Baking Info", Float) = 0
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)]_CutoutBakeInfo("Cutout Baking Info", Float) = 0
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Affect Shadow Pass,1)]_CutoutShadowMode("Cutout Shadow", Float) = 1
		[Space(10)]_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 100)) = 10
		[Space(10)][StyledToggle]_CutoutElementMode("Use Fade Globals / Elements", Float) = 1
		[HideInInspector]_cutout_vert_mode("_cutout_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		[Enum(Off,0,Affect Shadow Pass,1)]_DitherShadowMode("Dither Shadow", Float) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 100)) = 50
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)]_EmissiveColorMode("Emissive Color", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		_EmissiveExposureValue("Emissive Weight", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		_SubsurfaceThicknessValue("Subsurface Thickness", Range( 0 , 1)) = 0
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Value", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[StyledMessage(Info, Use the disabled Wind mode when the wind flow is controlled exclusivly by global elements. , 0, 10)]_MotionWindOffInfo("# Message Off", Float) = 0
		[StyledMessage(Info, The Optimized wind mode uses the precomputed Motion Texture RT which is only calculated once and reused for all materials. , 0, 10)]_MotionWindOptimizedInfo("# Message Optimized", Float) = 0
		[StyledMessage(Info, The Advanced wind mode allows the setting of the wind Noise__ Tilling__ and Speed per motion layer for advanced control. Use the Noise value to randomize the wind direction., 0, 10)]_MotionWindAdvancedInfo("# Message Advanced", Float) = 0
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTexRT("Motion Texture RT", 2D) = "white" {}
		[Space(10)]_MotionBaseIntensityValue("Motion LayerA Intensity", Range( 0 , 10)) = 0.2
		_MotionBasePivotValue("Motion LayerA Pivots", Range( 0 , 1)) = 0.8
		_MotionBaseNoiseValue("Motion LayerA Noise", Range( 0 , 1)) = 0.5
		_MotionBaseTillingValue("Motion LayerA Tilling", Range( 0 , 100)) = 5
		_MotionBaseSpeedValue("Motion LayerA Speed", Range( 0 , 50)) = 5
		_MotionBaseDelayValue("Motion LayerA Wind Delay", Range( 0 , 1)) = 0
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		[Enum(Off,0,Optimized,1,Advanced,2)]_MotionWindMode("Motion Wind Mode", Float) = 1
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 100)) = 5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[StyledSpace(10)]_InteractionInteractionEnd("[ Interaction Interaction End ]", Float) = 1
		[HideInInspector]_AI_Offset("_AI_Offset", Vector) = (0,0,0,0)
		[HideInInspector]_global_push_layer_value("_global_push_layer_value", Float) = 0
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[HideInInspector]_IsImpostorShader("_IsImpostorShader", Float) = 1
		[HideInInspector]_IsSubsurfaceShader("_IsSubsurfaceShader", Float) = 1


		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
	}

	SubShader
	{
		LOD 0

		
		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }

		Cull Back
		Blend One Zero
		ZTest LEqual
		ZWrite On
		ZClip [_ZClip]

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 
		#pragma multi_compile_instancing
		#pragma instancing_options renderinglayer
		#pragma multi_compile _ DOTS_INSTANCING_ON
		#pragma multi_compile _ LOD_FADE_CROSSFADE
		#define AI_RENDERPIPELINE

		struct GlobalSurfaceDescription
		{
			float3 Albedo;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float SpecularOcclusion;
			//Refraction
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			//SSS/Translucent
			float Thickness;
			float SubsurfaceMask;
			float TransmissionMask;
			float DiffusionProfile;
			//Anisotropy
			float Anisotropy;
			float3 Tangent;
			//Iridescent
			float IridescenceMask;
			float IridescenceThickness;
		};

		struct SurfaceOutput
		{
			half3 Albedo;
			half3 Specular;
			half Metallic;
			float3 Normal;
			half3 Emission;
			half Smoothness;
			half Occlusion;
			half Alpha;
		};

		struct AlphaSurfaceDescription
		{
			float Alpha;
			float AlphaClipThreshold;
		};

		struct SmoothSurfaceDescription
		{
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
		};

		struct DistortionSurfaceDescription
		{
			float Alpha;
			float2 Distortion;
			float DistortionBlur;
			float AlphaClipThreshold;
		};
		ENDHLSL

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Stencil
			{
				Ref 10
				WriteMask 14
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM

			#pragma shader_feature_local_fragment _DISABLE_DECALS
			#pragma shader_feature_local_fragment _DISABLE_SSR
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define _AMBIENT_OCCLUSION 1
			#define ASE_SRP_VERSION 170003
			#ifdef UNITY_COLORSPACE_GAMMA//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301)//AI_SRP
			#else//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.04, 0.04, 0.04, 1.0 - 0.04) //AI_SRP
			#endif//AI_SRP
			#define ASE_USING_SAMPLING_MACROS 1


			#pragma vertex Vert
			#pragma fragment Frag

			#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Wind.hlsl"
			//#endif
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

			#define SHADERPASS SHADERPASS_GBUFFER
			//#pragma multi_compile _ LIGHTMAP_ON
			//#pragma multi_compile _ DIRLIGHTMAP_COMBINED
			//#pragma multi_compile _ DYNAMICLIGHTMAP_ON
			//#pragma multi_compile _ SHADOWS_SHADOWMASK
			//#pragma multi_compile DECALS_OFF DECALS_3RT DECALS_4RT
			#pragma multi_compile_fragment _ RENDERING_LAYERS
			#pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2

			#define VARYINGS_NEED_POSITION_WS
			#define VARYINGS_NEED_TANGENT_TO_WORLD
			#define VARYINGS_NEED_TEXCOORD1
			#define VARYINGS_NEED_TEXCOORD2

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#define T2W(var, index) var.worldToTangent[index]
			//#else
			#define T2W(var, index) var.tangentToWorld[index]
			//#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ai_ObjectToWorld GetObjectToWorldMatrix()
			#define ai_WorldToObject GetWorldToObjectMatrix()
			#define AI_INV_TWO_PI  INV_TWO_PI
			#define AI_PI          PI
			#define AI_INV_PI      INV_PI
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_fragment TVE_IMPOSTOR_MASK_OFF TVE_IMPOSTOR_MASK_DEFAULT TVE_IMPOSTOR_MASK_PACKED TVE_IMPOSTOR_MASK_SHADING
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID

			};

			struct PackedVaryingsMeshToPS
			{
				float4 positionCS : SV_Position;
				float3 interp00 : TEXCOORD0;
				float3 interp01 : TEXCOORD1;
				float4 interp02 : TEXCOORD2;
				float4 interp03 : TEXCOORD3;
				float4 interp04 : TEXCOORD4;
				float4 UVsFrame122_g151868 : TEXCOORD5;
				float4 UVsFrame222_g151868 : TEXCOORD6;
				float4 UVsFrame322_g151868 : TEXCOORD7;
				float4 octaframe22_g151868 : TEXCOORD8;
				float4 viewPos22_g151868 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START( UnityPerMaterial )
			float4 _AI_SizeOffset;
			half4 _TintingBlendRemap;
			half4 _OverlayBlendRemap1;
			half4 _VariationColorTwo;
			half4 _VariationColorOne;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _ImpostorColor;
			half4 _VariationNoiseRemap;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _dryness_vert_mode;
			float4 _TintingColor;
			half4 _DrynessLumaRemap;
			half4 _TintingLumaRemap;
			float4 _DrynessColor;
			half4 _tinting_vert_mode;
			half4 _OverlayColor;
			half4 _ImpostorColorTwo;
			half4 _TintingMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _SubsurfaceColor;
			float3 _AI_Offset;
			half _TintingMultiValue;
			half _WetnessBakeInfo;
			half _TintingIntensityValue;
			half _TintingLumaValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _OverlayEnd;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _OverlaySpace;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _WetnessElementMode;
			half _TintingBakeInfo;
			half _OverlayElementMode;
			half _VariationNoiseTillingValue;
			half _VariationCategory;
			half _VariationEnd;
			half _TintingSpace;
			half _ImpostorColorMode;
			half _ImpostorMetallicValue;
			half _TintingEnd;
			half _OverlayBakeInfo;
			half _ImpostorSmoothnessValue;
			half _DrynessBakeInfo;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _VariationNoisePivotValue;
			half _DrynessCategory;
			half _TintingCategory;
			half _ImpostorOcclusionValue;
			half _ImpostorMaskOffInfo;
			half _TintingMeshMode;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutMeshValue;
			half _CutoutMeshMode;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _DitherConstantValue;
			half _DitherDistanceMinValue;
			half _CutoutIntensityValue;
			half _DitherDistanceMaxValue;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _EmissiveIntensityValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _SubsurfaceIntensityValue;
			half _DitherDistanceValue;
			half _TintingMeshValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessCategory;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _WetnessIntensityValue;
			half _DrynessSmoothnessValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayNormalValue;
			half _OverlaySmoothnessValue;
			half _OverlaySubsurfaceValue;
			half _DrynessSubsurfaceValue;
			half _CutoutBakeInfo;
			half _CutoutEnd;
			half _SubsurfaceMultiValue;
			half _ImpostorCategory;
			half _ImpostorEnd;
			half _IsImpostorShader;
			half _IsSubsurfaceShader;
			half _MotionWindCategory;
			half _MotionWindEnd;
			half _MotionInteractionCategory;
			half _InteractionInteractionEnd;
			half _MotionWindMode;
			half _MotionWindElementMode;
			half _MotionPushElementMode;
			half _MotionWindOffInfo;
			half _MotionWindOptimizedInfo;
			half _MotionWindAdvancedInfo;
			half _SizeFadeCategory;
			half _SizeFadeEnd;
			half _SizeFadeElementMode;
			float _AI_Frames;
			float _AI_FramesX;
			float _AI_FramesY;
			float _AI_ImpostorSize;
			half _RenderShadow;
			half _RenderMotion;
			half _IsIdentifier;
			half _IsConverted;
			half _ImpostorMaskDefaultInfo;
			half _ImpostorMaskPackedInfo;
			half _ImpostorMaskShadingInfo;
			half _ImpostorMaskMode;
			half _ImpostorAlphaClipValue;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceAngleValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceSpace;
			half _IsVersion;
			float _AI_Parallax;
			half _RenderDecals;
			half _CategoryRender;
			half _EndRender;
			half _NoiseCategory;
			half _NoiseEnd;
			half _IsInitialized;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _HasDefaultTextures;
			half _IsCollected;
			half _RenderSSR;
			float _AI_TextureBias;
			float _AI_DepthSize;
			float _AI_ShadowBias;
			half _MotionBaseSpeedValue;
			half _MotionBaseNoiseValue;
			half _global_wind_layer_value;
			half _MotionBaseDelayValue;
			half _global_push_layer_value;
			half _MotionPushPivotValue;
			half _MotionPushIntensityValue;
			half _SubsurfaceCategory;
			half _SubsurfaceEnd;
			half _SubsurfaceDirectValue;
			half _MotionBaseTillingValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceShadowValue;
			half _SubsurfaceElementMode;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DitherCategory;
			half _DitherEnd;
			half _CutoutCategory;
			half _SubsurfaceAmbientValue;
			half _CutoutElementMode;
			half _MotionIntensityValue;
			half _MotionBasePivotValue;
			float _AI_ShadowView;
			float _AI_Clip;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionTillingValue;
			half _GlobalGlowPivotValue;
			half _GlobalAtmoPivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalWindLayerValue;
			half _GlobalPushLayerValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _MotionBaseIntensityValue;
			half _GlobalAtmoLayerValue;
			half _SubsurfaceThicknessValue;
			float _BlendMode;
			CBUFFER_END

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_Albedo);
			SAMPLER(sampler_Albedo);
			TEXTURE2D(_Normals);
			SAMPLER(sampler_Normals);
			float3 TVE_WorldOrigin;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_Shader);
			TEXTURE2D(_Packed);
			TEXTURE2D(_Vertex);
			SAMPLER(sampler_Shader);
			SAMPLER(sampler_Packed);
			SAMPLER(sampler_Vertex);


			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			float2 VectortoHemiOctahedron( float3 N )
			{
				N.xy /= dot( 1.0, abs( N ) );
				return float2( N.x + N.y, N.x - N.y );
			}
			
			float3 HemiOctahedronToVector( float2 Oct )
			{
				Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y ) * 0.5;
				float3 N = float3( Oct, 1 - dot( 1.0, abs( Oct ) ) );
				return normalize( N );
			}
			
			inline void RayPlaneIntersectionUV( float3 normalOS, float3 rayPosition, float3 rayDirection, inout float2 uvs, inout float3 localNormal )
			{
				float lDotN = dot( rayDirection, normalOS ); 
				float p0l0DotN = dot( -rayPosition, normalOS );
				float t = p0l0DotN / lDotN;
				float3 p = rayDirection * t + rayPosition;
				float3 upVector = float3( 0, 1, 0 );
				float3 tangent = normalize( cross( upVector, normalOS ) + float3( -0.001, 0, 0 ) );
				float3 bitangent = cross( tangent, normalOS );
				float frameX = dot( p, tangent );
				float frameZ = dot( p, bitangent );
				uvs = -float2( frameX, frameZ );
				if( t <= 0.0 )
				uvs = 0;
				float3x3 worldToLocal = float3x3( tangent, bitangent, normalOS );
				localNormal = normalize( mul( worldToLocal, rayDirection ) );
			}
			
			inline void OctaImpostorVertex( inout float4 positionOS, inout float3 normalOS, inout float4 uvsFrame1, inout float4 uvsFrame2, inout float4 uvsFrame3, inout float4 octaFrame, inout float4 viewPos )
			{
				float2 uvOffset = _AI_SizeOffset.zw;
				float parallax = -_AI_Parallax; 
				float UVscale = _AI_ImpostorSize;
				float framesXY = _AI_Frames;
				float prevFrame = framesXY - 1;
				float3 fractions = 1.0 / float3( framesXY, prevFrame, UVscale );
				float fractionsFrame = fractions.x;
				float fractionsPrevFrame = fractions.y;
				float fractionsUVscale = fractions.z;
				float3 worldCameraPos;
				#if defined(UNITY_PASS_SHADOWCASTER)
				float3 worldOrigin = 0;
				float4 perspective = float4( 0, 0, 0, 1 );
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				perspective = float4( 0, 0, 5000, 0 );
				worldOrigin = ai_ObjectToWorld._m03_m13_m23;
				}
				worldCameraPos = worldOrigin + mul( UNITY_MATRIX_I_V, perspective ).xyz;
				#else
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				worldCameraPos = ai_ObjectToWorld._m03_m13_m23 + UNITY_MATRIX_I_V._m02_m12_m22 * 5000;
				}
				else
				{
				worldCameraPos = GetCameraRelativePositionWS( _WorldSpaceCameraPos );
				}
				#endif
				float3 objectCameraPosition = mul( ai_WorldToObject, float4( worldCameraPos, 1 ) ).xyz - _AI_Offset.xyz; 
				float3 objectCameraDirection = normalize( objectCameraPosition );
				float3 upVector = float3( 0,1,0 );
				float3 objectHorizontalVector = normalize( cross( objectCameraDirection, upVector ) );
				float3 objectVerticalVector = cross( objectHorizontalVector, objectCameraDirection );
				float2 uvExpansion = positionOS.xy;
				float3 billboard = objectHorizontalVector * uvExpansion.x + objectVerticalVector * uvExpansion.y;
				float3 localDir = billboard - objectCameraPosition; 
				objectCameraDirection = trunc( objectCameraDirection * 65536.0 ) / 65536.0;
				objectCameraDirection.y = max(0.001, objectCameraDirection.y);
				float2 frameOcta = VectortoHemiOctahedron( objectCameraDirection.xzy ) * 0.5 + 0.5;
				float2 prevOctaFrame = frameOcta * prevFrame;
				float2 baseOctaFrame = floor( prevOctaFrame );
				float2 fractionOctaFrame = ( baseOctaFrame * fractionsFrame );
				float2 octaFrame1 = ( baseOctaFrame * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa1WorldY = HemiOctahedronToVector( octaFrame1 ).xzy;
				float3 octa1LocalY;
				float2 uvFrame1;
				RayPlaneIntersectionUV( octa1WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame1, /*inout*/ octa1LocalY );
				float2 uvParallax1 = octa1LocalY.xy * fractionsFrame * parallax;
				uvFrame1 = ( uvFrame1 * fractionsUVscale + 0.5 ) * fractionsFrame + fractionOctaFrame;
				uvsFrame1 = float4( uvParallax1, uvFrame1) - float4( 0, 0, uvOffset );
				float2 fractPrevOctaFrame = frac( prevOctaFrame );
				float2 cornerDifference = lerp( float2( 0,1 ) , float2( 1,0 ) , saturate( ceil( ( fractPrevOctaFrame.x - fractPrevOctaFrame.y ) ) ));
				float2 octaFrame2 = ( ( baseOctaFrame + cornerDifference ) * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa2WorldY = HemiOctahedronToVector( octaFrame2 ).xzy;
				float3 octa2LocalY;
				float2 uvFrame2;
				RayPlaneIntersectionUV( octa2WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame2, /*inout*/ octa2LocalY );
				float2 uvParallax2 = octa2LocalY.xy * fractionsFrame * parallax;
				uvFrame2 = ( uvFrame2 * fractionsUVscale + 0.5 ) * fractionsFrame + ( ( cornerDifference * fractionsFrame ) + fractionOctaFrame );
				uvsFrame2 = float4( uvParallax2, uvFrame2) - float4( 0, 0, uvOffset );
				float2 octaFrame3 = ( ( baseOctaFrame + 1 ) * fractionsPrevFrame  ) * 2.0 - 1.0;
				float3 octa3WorldY = HemiOctahedronToVector( octaFrame3 ).xzy;
				float3 octa3LocalY;
				float2 uvFrame3;
				RayPlaneIntersectionUV( octa3WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame3, /*inout*/ octa3LocalY );
				float2 uvParallax3 = octa3LocalY.xy * fractionsFrame * parallax;
				uvFrame3 = ( uvFrame3 * fractionsUVscale + 0.5 ) * fractionsFrame + ( fractionOctaFrame + fractionsFrame );
				uvsFrame3 = float4( uvParallax3, uvFrame3) - float4( 0, 0, uvOffset );
				octaFrame = 0;
				octaFrame.xy = prevOctaFrame;
				octaFrame.zw = fractionOctaFrame;
				positionOS.xyz = billboard + _AI_Offset.xyz;
				normalOS.xyz = objectCameraDirection;
				viewPos = 0;
				viewPos.xyz = TransformWorldToView( TransformObjectToWorld( positionOS.xyz ) );
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			inline void OctaImpostorFragment( inout SurfaceOutput o, out float4 positionCS, out float3 positionWS, float4 uvsFrame1, float4 uvsFrame2, float4 uvsFrame3, float4 octaFrame, float4 interpViewPos, out float4 output0, out float4 output1, out float4 output2 )
			{
				float depthBias = -1.0;
				float textureBias = _AI_TextureBias;
				float2 fraction = frac( octaFrame.xy );
				float2 invFraction = 1 - fraction;
				float3 weights;
				weights.x = min( invFraction.x, invFraction.y );
				weights.y = abs( fraction.x - fraction.y );
				weights.z = min( fraction.x, fraction.y );
				float4 parallaxSample1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame1.zw, depthBias );
				float2 parallax1 = ( ( 0.5 - parallaxSample1.a ) * uvsFrame1.xy ) + uvsFrame1.zw;
				float4 parallaxSample2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame2.zw, depthBias );
				float2 parallax2 = ( ( 0.5 - parallaxSample2.a ) * uvsFrame2.xy ) + uvsFrame2.zw;
				float4 parallaxSample3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame3.zw, depthBias );
				float2 parallax3 = ( ( 0.5 - parallaxSample3.a ) * uvsFrame3.xy ) + uvsFrame3.zw;
				float4 albedo1 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax1, textureBias );
				float4 albedo2 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax2, textureBias );
				float4 albedo3 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax3, textureBias );
				float4 blendedAlbedo = albedo1 * weights.x + albedo2 * weights.y + albedo3 * weights.z;
				o.Alpha = ( blendedAlbedo.a - _AI_Clip );
				clip( o.Alpha );
				float t = ceil( fraction.x - fraction.y );
				float4 cornerDifference = float4( t, 1 - t, 1, 1 );
				float2 step_1 = ( parallax1 - octaFrame.zw ) * _AI_Frames;
				float4 step23 = ( float4( parallax2, parallax3 ) -  octaFrame.zwzw ) * _AI_Frames - cornerDifference;
				step_1 = step_1 * (1-step_1);
				step23 = step23 * (1-step23);
				float3 steps;
				steps.x = step_1.x * step_1.y;
				steps.y = step23.x * step23.y;
				steps.z = step23.z * step23.w;
				steps = step(-steps, 0);
				float final = dot( steps, weights );
				clip( final - 0.5 );
				o.Albedo = blendedAlbedo.rgb;
				#if defined(AI_HD_RENDERPIPELINE)
				float4 feat1 = _Features.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.Diffusion = feat1.rgb;
				o.Features = feat1.a;
				float4 test1 = _Specular.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.MetalTangent = test1.b;
				#endif
				float4 normals1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax1, textureBias );
				float4 normals2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax2, textureBias );
				float4 normals3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax3, textureBias );
				float4 blendedNormal = normals1 * weights.x  + normals2 * weights.y + normals3 * weights.z;
				float4 output0a = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax1, textureBias );
				float4 output0b = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax2, textureBias );
				float4 output0c = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax3, textureBias );
				output0 = output0a * weights.x  + output0b * weights.y + output0c * weights.z; 
				float4 output1a = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax1, textureBias );
				float4 output1b = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax2, textureBias );
				float4 output1c = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax3, textureBias );
				output1 = output1a * weights.x  + output1b * weights.y + output1c * weights.z; 
				float4 output2a = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax1, textureBias );
				float4 output2b = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax2, textureBias );
				float4 output2c = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax3, textureBias );
				output2 = output2a * weights.x  + output2b * weights.y + output2c * weights.z; 
				float3 localNormal = blendedNormal.rgb * 2.0 - 1.0;
				float3 worldNormal = normalize( mul( (float3x3)ai_ObjectToWorld, localNormal ) );
				o.Normal = worldNormal;
				float3 viewPos = interpViewPos.xyz;
				float depthOffset = ( ( parallaxSample1.a * weights.x + parallaxSample2.a * weights.y + parallaxSample3.a * weights.z ) - 0.5 /** 2.0 - 1.0*/ ) /** 0.5*/ * _AI_DepthSize * length( ai_ObjectToWorld[ 2 ].xyz );
				#if ( defined(SHADERPASS) && ((defined(SHADERPASS_SHADOWS) && SHADERPASS == SHADERPASS_SHADOWS) || (defined(SHADERPASS_SHADOWCASTER) && SHADERPASS == SHADERPASS_SHADOWCASTER)) ) || defined(UNITY_PASS_SHADOWCASTER)
				viewPos.z += depthOffset * _AI_ShadowView;
				viewPos.z += -_AI_ShadowBias;
				#else 
				viewPos.z += depthOffset;
				#endif
				positionWS = mul( UNITY_MATRIX_I_V, float4( viewPos.xyz, 1 ) ).xyz;
				positionCS = mul( UNITY_MATRIX_P, float4( viewPos, 1 ) );
				#if defined(UNITY_PASS_SHADOWCASTER) && !defined(SHADERPASS)
				#if UNITY_REVERSED_Z
				positionCS.z = min( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#else
				positionCS.z = max( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#endif
				#endif
				positionCS.xyz /= positionCS.w;
				if( UNITY_NEAR_CLIP_VALUE < 0 )
				positionCS = positionCS * 0.5 + 0.5;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g153365( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g153374( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.baseColor =                 surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
				#ifdef _SPECULAR_OCCLUSION_CUSTOM
					surfaceData.specularOcclusion =         surfaceDescription.SpecularOcclusion;
				#endif
				surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
				surfaceData.metallic =                  surfaceDescription.Metallic;
				surfaceData.coatMask =                  surfaceDescription.CoatMask;

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
					surfaceData.diffusionProfileHash = asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.iridescenceMask =           surfaceDescription.IridescenceMask;
					surfaceData.iridescenceThickness =      surfaceDescription.IridescenceThickness;
				#endif

					surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif
				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				#endif

				#ifdef ASE_LIT_CLEAR_COAT
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif
				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.specularColor = surfaceDescription.Specular;
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
					surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
				#endif

					GetNormalWS( fragInputs, float3( 0.0, 0.0, 1.0 ), surfaceData.normalWS, float3( 1.0, 1.0, 1.0 ) );

					bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
					GetNormalWS(fragInputs, surfaceDescription.BentNormal, bentNormalWS, float3( 1, 1, 1 ) );
				#endif

				surfaceData.geomNormalWS = T2W(fragInputs, 2);

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
					surfaceData.thickness =	                 surfaceDescription.Thickness;
				#endif

				#ifdef _HAS_REFRACTION
					if (_EnableSSRefraction)
					{
						surfaceData.ior =                       surfaceDescription.RefractionIndex;
						surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
						surfaceData.atDistance =                surfaceDescription.RefractionDistance;

						surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
						surfaceDescription.Alpha = 1.0;
					}
					else
					{
						surfaceData.ior = 1.0;
						surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
						surfaceData.atDistance = 1.0;
						surfaceData.transmittanceMask = 0.0;
						surfaceDescription.Alpha = 1.0;
					}
				#else
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
					surfaceData.atDistance = 1.0;
					surfaceData.transmittanceMask = 0.0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
					surfaceData.thickness =	surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.transmissionMask = surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
					surfaceData.diffusionProfileHash = asuint(surfaceDescription.DiffusionProfile);					
				#endif

					surfaceData.tangentWS = normalize(T2W(fragInputs, 0).xyz);    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.anisotropy = surfaceDescription.Anisotropy;
					surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.worldToTangent);
				#endif
					surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				#if defined(_SPECULAR_OCCLUSION_CUSTOM)
				#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
				#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
				#else
					surfaceData.specularOcclusion = 1.0;
				#endif
				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
					surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, T2W(fragInputs, 2), surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
				#endif
			}

			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				//#ifdef LOD_FADE_CROSSFADE
				//	uint3 fadeMaskSeed = asuint((int3)(V * _ScreenSize.xyx));
				//	LODDitheringTransition(fadeMaskSeed, unity_LODFade.x);
				//#endif

				#ifdef _ALPHATEST_ON
					DoAlphaTest(surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold);
				#endif

				float3 bentNormalWS;
				BuildSurfaceData(fragInputs, surfaceDescription, V, surfaceData, bentNormalWS);

				#if HAVE_DECALS
				if( _EnableDecals )
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif

				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
					//InitBuiltinData( surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.positionRWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				//#else
					InitBuiltinData( posInput, surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				//#endif

				builtinData.emissiveColor = surfaceDescription.Emission;

				builtinData.depthOffset = 0.0;

				#if (SHADERPASS == SHADERPASS_DISTORTION)
					builtinData.distortion = surfaceDescription.Distortion;
					builtinData.distortionBlur = surfaceDescription.DistortionBlur;
				#else
					builtinData.distortion = float2(0.0, 0.0);
					builtinData.distortionBlur = 0.0;
				#endif

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID( inputMesh, outputPackedVaryingsMeshToPS );
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g153438 = (TVEModelData)0;
				float In_Dummy16_g153438 = 0.0;
				TVEModelData Data16_g153406 = (TVEModelData)0;
				half Dummy181_g153404 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _InteractionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g153406 = Dummy181_g153404;
				TVEModelData Data16_g153386 = (TVEModelData)0;
				half Dummy181_g153383 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g153386 = Dummy181_g153383;
				TVEModelData Data16_g153150 = (TVEModelData)0;
				float In_Dummy16_g153150 = 0.0;
				OctaImpostorVertex( inputMesh.positionOS, inputMesh.normalOS, outputPackedVaryingsMeshToPS.UVsFrame122_g151868, outputPackedVaryingsMeshToPS.UVsFrame222_g151868, outputPackedVaryingsMeshToPS.UVsFrame322_g151868, outputPackedVaryingsMeshToPS.octaframe22_g151868, outputPackedVaryingsMeshToPS.viewPos22_g151868 );
				float3 worldPosOut22_g151868 = GetAbsolutePositionWS( mul( UNITY_MATRIX_I_V, float4( outputPackedVaryingsMeshToPS.viewPos22_g151868.xyz, 1.0 ) ).xyz );
				half3 Input_PositionWS319_g153142 = worldPosOut22_g151868;
				float3 worldToObj315_g153142 = mul( GetWorldToObjectMatrix(), float4( GetCameraRelativePositionWS(Input_PositionWS319_g153142), 1 ) ).xyz;
				half3 Model_PositionOS316_g153142 = worldToObj315_g153142;
				float3 In_PositionOS16_g153150 = Model_PositionOS316_g153142;
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153150 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153150 = Model_PositionWO311_g153142;
				float3 In_PositionRawOS16_g153150 = Model_PositionOS316_g153142;
				float3 In_PositionAddOS16_g153150 = float3( 0,0,0 );
				float3 In_PivotOS16_g153150 = float3( 0,0,0 );
				float3 localObjectPosition_UNITY_MATRIX_M14_g153145 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g153145 = ( localObjectPosition_UNITY_MATRIX_M14_g153145 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g153145 = localObjectPosition_UNITY_MATRIX_M14_g153145;
				#endif
				half3 ObjectData20_g153147 = staticSwitch13_g153145;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				half3 WorldData19_g153147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g153147 = WorldData19_g153147;
				#else
				float3 staticSwitch14_g153147 = ObjectData20_g153147;
				#endif
				float3 temp_output_124_0_g153145 = staticSwitch14_g153147;
				float3 vertexToFrag305_g153142 = temp_output_124_0_g153145;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153150 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153150 = Model_PivotWO312_g153142;
				half3 Model_NormalOS313_g153142 = inputMesh.normalOS;
				float3 In_NormalOS16_g153150 = Model_NormalOS313_g153142;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153150 = Model_Normal_WS314_g153142;
				float3 In_NormalRawOS16_g153150 = Model_NormalOS313_g153142;
				float3 In_NormalRawWS16_g153150 = Model_Normal_WS314_g153142;
				float4 In_TangentOS16_g153150 = float4( 0,1,0,1 );
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153150 = Model_ViewDirWS347_g153142;
				float4 In_VertexData16_g153150 = float4( 1,1,1,1 );
				float4 In_MotionData16_g153150 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g153150 = float4( 1,1,1,1 );
				float4 In_RotationData16_g153150 = float4( 0,0,0,0 );
				Data16_g153150.Dummy = In_Dummy16_g153150;
				Data16_g153150.PositionOS = In_PositionOS16_g153150;
				Data16_g153150.PositionWS = In_PositionWS16_g153150;
				Data16_g153150.PositionWO = In_PositionWO16_g153150;
				Data16_g153150.PositionRawOS = In_PositionRawOS16_g153150;
				Data16_g153150.PositionAddOS = In_PositionAddOS16_g153150;
				Data16_g153150.PivotOS = In_PivotOS16_g153150;
				Data16_g153150.PivotWS = In_PivotWS16_g153150;
				Data16_g153150.PivotWO = In_PivotWO16_g153150;
				Data16_g153150.NormalOS = In_NormalOS16_g153150;
				Data16_g153150.NormalWS = In_NormalWS16_g153150;
				Data16_g153150.NormalRawOS = In_NormalRawOS16_g153150;
				Data16_g153150.NormalRawWS = In_NormalRawWS16_g153150;
				Data16_g153150.TangentOS = In_TangentOS16_g153150;
				Data16_g153150.ViewDirWS = In_ViewDirWS16_g153150;
				Data16_g153150.VertexData = In_VertexData16_g153150;
				Data16_g153150.MotionData = In_MotionData16_g153150;
				Data16_g153150.BoundsData = In_BoundsData16_g153150;
				Data16_g153150.RotationData = In_RotationData16_g153150;
				TVEModelData Data15_g153385 = Data16_g153150;
				float Out_Dummy15_g153385 = 0;
				float3 Out_PositionOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153385 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153385 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153385 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153385 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153385 = float3( 0,0,0 );
				float4 Out_VertexData15_g153385 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153385 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153385 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153385 = float4( 0,0,0,0 );
				Out_Dummy15_g153385 = Data15_g153385.Dummy;
				Out_PositionOS15_g153385 = Data15_g153385.PositionOS;
				Out_PositionWS15_g153385 = Data15_g153385.PositionWS;
				Out_PositionWO15_g153385 = Data15_g153385.PositionWO;
				Out_PositionRawOS15_g153385 = Data15_g153385.PositionRawOS;
				Out_PositionAddOS15_g153385 = Data15_g153385.PositionAddOS;
				Out_PivotOS15_g153385 = Data15_g153385.PivotOS;
				Out_PivotWS15_g153385 = Data15_g153385.PivotWS;
				Out_PivotWO15_g153385 = Data15_g153385.PivotWO;
				Out_NormalOS15_g153385 = Data15_g153385.NormalOS;
				Out_NormalWS15_g153385 = Data15_g153385.NormalWS;
				Out_NormalRawOS15_g153385 = Data15_g153385.NormalRawOS;
				Out_NormalRawWS15_g153385 = Data15_g153385.NormalRawWS;
				Out_TangentOS15_g153385 = Data15_g153385.TangentOS;
				Out_ViewDirWS15_g153385 = Data15_g153385.ViewDirWS;
				Out_VertexData15_g153385 = Data15_g153385.VertexData;
				Out_MotionData15_g153385 = Data15_g153385.MotionData;
				Out_BoundsData15_g153385 = Data15_g153385.BoundsData;
				Out_RotationData15_g153385 = Data15_g153385.RotationData;
				half3 Model_PositionOS147_g153383 = Out_PositionOS15_g153385;
				float3 temp_cast_0 = (1.0).xxx;
				float3 temp_output_210_19_g153383 = Out_PivotWO15_g153385;
				half3 Model_PivotWO162_g153383 = temp_output_210_19_g153383;
				float temp_output_7_0_g153384 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g153384 = ( _SizeFadeDistMinValue - temp_output_7_0_g153384 );
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_2 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = 0;
				half4 Input_Tex1379_g153142 = 0;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_6;
				#else
				float4 staticSwitch414_g153142 = temp_cast_7;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153387 = Data204_g153153;
				float Out_Dummy15_g153387 = 0;
				float4 Out_CoatParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153387 = float4( 0,0,0,0 );
				Out_Dummy15_g153387 = Data15_g153387.Dummy;
				Out_CoatParams15_g153387 = Data15_g153387.CoatParams;
				Out_PaintParams15_g153387 = Data15_g153387.PaintParams;
				Out_GlowParams15_g153387 = Data15_g153387.GlowParams;
				Out_AtmoParams15_g153387= Data15_g153387.AtmoParams;
				Out_FadeParams15_g153387= Data15_g153387.FadeParams;
				Out_FormParams15_g153387 = Data15_g153387.FormParams;
				Out_LandParams15_g153387 = Data15_g153387.LandParams;
				Out_WindParams15_g153387 = Data15_g153387.WindParams;
				Out_PushParams15_g153387 = Data15_g153387.PushParams;
				half4 Input_FormParams188_g153383 = Out_FormParams15_g153387;
				float lerpResult213_g153383 = lerp( 1.0 , (Input_FormParams188_g153383).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g153383 = lerpResult213_g153383;
				#else
				float staticSwitch194_g153383 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g153383 = staticSwitch194_g153383;
				float temp_output_189_0_g153383 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g153383 ) - temp_output_7_0_g153384 ) / ( temp_output_10_0_g153384 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g153383 );
				float3 appendResult200_g153383 = (float3(temp_output_189_0_g153383 , temp_output_189_0_g153383 , temp_output_189_0_g153383));
				float3 appendResult201_g153383 = (float3(1.0 , temp_output_189_0_g153383 , 1.0));
				float3 lerpResult202_g153383 = lerp( appendResult200_g153383 , appendResult201_g153383 , _SizeFadeScaleMode);
				float3 lerpResult184_g153383 = lerp( temp_cast_0 , lerpResult202_g153383 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g153383 = ( lerpResult184_g153383 * Model_PositionOS147_g153383 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g153383 = temp_output_167_0_g153383;
				#else
				float3 staticSwitch199_g153383 = Model_PositionOS147_g153383;
				#endif
				half3 Final_Position178_g153383 = staticSwitch199_g153383;
				float3 In_PositionOS16_g153386 = Final_Position178_g153383;
				float3 In_PositionWS16_g153386 = Out_PositionWS15_g153385;
				float3 In_PositionWO16_g153386 = Out_PositionWO15_g153385;
				float3 In_PositionRawOS16_g153386 = Out_PositionRawOS15_g153385;
				float3 In_PositionAddOS16_g153386 = Out_PositionAddOS15_g153385;
				float3 temp_output_210_24_g153383 = Out_PivotOS15_g153385;
				float3 In_PivotOS16_g153386 = temp_output_210_24_g153383;
				float3 In_PivotWS16_g153386 = Out_PivotWS15_g153385;
				float3 In_PivotWO16_g153386 = temp_output_210_19_g153383;
				float3 In_NormalOS16_g153386 = Out_NormalOS15_g153385;
				float3 In_NormalWS16_g153386 = Out_NormalWS15_g153385;
				float3 In_NormalRawOS16_g153386 = Out_NormalRawOS15_g153385;
				float3 In_NormalRawWS16_g153386 = Out_NormalRawWS15_g153385;
				float4 In_TangentOS16_g153386 = Out_TangentOS15_g153385;
				float3 In_ViewDirWS16_g153386 = Out_ViewDirWS15_g153385;
				float4 In_VertexData16_g153386 = Out_VertexData15_g153385;
				float4 In_MotionData16_g153386 = Out_MotionData15_g153385;
				float4 In_BoundsData16_g153386 = Out_BoundsData15_g153385;
				float4 In_RotationData16_g153386 = Out_RotationData15_g153385;
				Data16_g153386.Dummy = In_Dummy16_g153386;
				Data16_g153386.PositionOS = In_PositionOS16_g153386;
				Data16_g153386.PositionWS = In_PositionWS16_g153386;
				Data16_g153386.PositionWO = In_PositionWO16_g153386;
				Data16_g153386.PositionRawOS = In_PositionRawOS16_g153386;
				Data16_g153386.PositionAddOS = In_PositionAddOS16_g153386;
				Data16_g153386.PivotOS = In_PivotOS16_g153386;
				Data16_g153386.PivotWS = In_PivotWS16_g153386;
				Data16_g153386.PivotWO = In_PivotWO16_g153386;
				Data16_g153386.NormalOS = In_NormalOS16_g153386;
				Data16_g153386.NormalWS = In_NormalWS16_g153386;
				Data16_g153386.NormalRawOS = In_NormalRawOS16_g153386;
				Data16_g153386.NormalRawWS = In_NormalRawWS16_g153386;
				Data16_g153386.TangentOS = In_TangentOS16_g153386;
				Data16_g153386.ViewDirWS = In_ViewDirWS16_g153386;
				Data16_g153386.VertexData = In_VertexData16_g153386;
				Data16_g153386.MotionData = In_MotionData16_g153386;
				Data16_g153386.BoundsData = In_BoundsData16_g153386;
				Data16_g153386.RotationData = In_RotationData16_g153386;
				TVEModelData Data15_g153405 = Data16_g153386;
				float Out_Dummy15_g153405 = 0;
				float3 Out_PositionOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153405 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153405 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153405 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153405 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153405 = float3( 0,0,0 );
				float4 Out_VertexData15_g153405 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153405 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153405 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153405 = float4( 0,0,0,0 );
				Out_Dummy15_g153405 = Data15_g153405.Dummy;
				Out_PositionOS15_g153405 = Data15_g153405.PositionOS;
				Out_PositionWS15_g153405 = Data15_g153405.PositionWS;
				Out_PositionWO15_g153405 = Data15_g153405.PositionWO;
				Out_PositionRawOS15_g153405 = Data15_g153405.PositionRawOS;
				Out_PositionAddOS15_g153405 = Data15_g153405.PositionAddOS;
				Out_PivotOS15_g153405 = Data15_g153405.PivotOS;
				Out_PivotWS15_g153405 = Data15_g153405.PivotWS;
				Out_PivotWO15_g153405 = Data15_g153405.PivotWO;
				Out_NormalOS15_g153405 = Data15_g153405.NormalOS;
				Out_NormalWS15_g153405 = Data15_g153405.NormalWS;
				Out_NormalRawOS15_g153405 = Data15_g153405.NormalRawOS;
				Out_NormalRawWS15_g153405 = Data15_g153405.NormalRawWS;
				Out_TangentOS15_g153405 = Data15_g153405.TangentOS;
				Out_ViewDirWS15_g153405 = Data15_g153405.ViewDirWS;
				Out_VertexData15_g153405 = Data15_g153405.VertexData;
				Out_MotionData15_g153405 = Data15_g153405.MotionData;
				Out_BoundsData15_g153405 = Data15_g153405.BoundsData;
				Out_RotationData15_g153405 = Data15_g153405.RotationData;
				float3 temp_output_1567_0_g153404 = Out_PositionOS15_g153405;
				float3 In_PositionOS16_g153406 = temp_output_1567_0_g153404;
				float3 In_PositionWS16_g153406 = Out_PositionWS15_g153405;
				float3 temp_output_1567_17_g153404 = Out_PositionWO15_g153405;
				float3 In_PositionWO16_g153406 = temp_output_1567_17_g153404;
				float3 In_PositionRawOS16_g153406 = Out_PositionRawOS15_g153405;
				float3 In_PositionAddOS16_g153406 = Out_PositionAddOS15_g153405;
				float3 In_PivotOS16_g153406 = Out_PivotOS15_g153405;
				float3 In_PivotWS16_g153406 = Out_PivotWS15_g153405;
				float3 temp_output_1567_19_g153404 = Out_PivotWO15_g153405;
				float3 In_PivotWO16_g153406 = temp_output_1567_19_g153404;
				float3 In_NormalOS16_g153406 = Out_NormalOS15_g153405;
				float3 In_NormalWS16_g153406 = Out_NormalWS15_g153405;
				float3 In_NormalRawOS16_g153406 = Out_NormalRawOS15_g153405;
				float3 In_NormalRawWS16_g153406 = Out_NormalRawWS15_g153405;
				float4 In_TangentOS16_g153406 = Out_TangentOS15_g153405;
				float3 In_ViewDirWS16_g153406 = Out_ViewDirWS15_g153405;
				float4 In_VertexData16_g153406 = Out_VertexData15_g153405;
				float4 In_MotionData16_g153406 = Out_MotionData15_g153405;
				float4 In_BoundsData16_g153406 = Out_BoundsData15_g153405;
				float2 temp_cast_36 = (0.0).xx;
				half3 Model_PositionOS147_g153404 = temp_output_1567_0_g153404;
				half Base_Mask217_g153404 = saturate( ( Model_PositionOS147_g153404.y / _AI_Offset.y ) );
				half3 Model_PositionWO162_g153404 = temp_output_1567_17_g153404;
				half3 Model_PivotWO402_g153404 = temp_output_1567_19_g153404;
				float3 lerpResult829_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionBasePivotValue);
				half3 Base_Position1394_g153404 = lerpResult829_g153404;
				half3 Input_PositionWO419_g153419 = Base_Position1394_g153404;
				half Flow_Tillling1397_g153404 = _MotionTillingValue;
				half Input_MotionTillingRT670_g153419 = ( Flow_Tillling1397_g153404 + 0.2 );
				half2 Noise_CoordRT668_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTillingRT670_g153419 * 0.005 );
				half4 Noise_ParamsRT535_g153419 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g153419, 0.0 );
				half Flow_Value1599_g153404 = _MotionIntensityValue;
				half Input_MotionValue629_g153419 = Flow_Value1599_g153404;
				float2 lerpResult709_g153419 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult712_g153419 = (float3(lerpResult709_g153419 , ( (Noise_ParamsRT535_g153419).b * Input_MotionValue629_g153419 )));
				float4 lerpResult627_g153419 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g153419 = (lerpResult627_g153419).xy;
				half Input_MotionTilling321_g153419 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTilling321_g153419 * 0.005 );
				float2 temp_output_3_0_g153420 = Noise_Coord515_g153419;
				float2 temp_output_21_0_g153420 = (Global_WindDirection593_g153419*2.0 + -1.0);
				float lerpResult128_g153425 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g153419 = _MotionBaseSpeedValue;
				half Noise_Speed516_g153419 = ( ( lerpResult128_g153425 * Input_MotionSpeed62_g153419 ) * 0.02 );
				float temp_output_15_0_g153420 = Noise_Speed516_g153419;
				float temp_output_23_0_g153420 = frac( temp_output_15_0_g153420 );
				float4 lerpResult39_g153420 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * temp_output_23_0_g153420 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * frac( ( temp_output_15_0_g153420 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g153420 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g153419 = lerpResult39_g153420;
				half Input_MotionNoise552_g153419 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g153419 = (lerpResult627_g153419).z;
				half Motion_Intensity720_g153419 = ( Global_WindIntensity576_g153419 * Input_MotionValue629_g153419 );
				float lerpResult701_g153419 = lerp( 1.0 , Input_MotionNoise552_g153419 , Motion_Intensity720_g153419);
				float2 lerpResult646_g153419 = lerp( Global_WindDirection593_g153419 , (Noise_Params685_g153419).rg , lerpResult701_g153419);
				float2 lerpResult724_g153419 = lerp( float2( 0.5,0.5 ) , lerpResult646_g153419 , Motion_Intensity720_g153419);
				float3 appendResult708_g153419 = (float3(lerpResult724_g153419 , ( (Noise_Params685_g153419).a * Motion_Intensity720_g153419 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g153419 = appendResult712_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g153419 = appendResult708_g153419;
				#else
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g153419 = staticSwitch673_g153419;
				float temp_output_136_0_g153426 = _global_wind_layer_value;
				float temp_output_19_0_g153428 = TVE_WindLayers[(int)temp_output_136_0_g153426];
				half3 Input_Position180_g153429 = Input_PositionWO419_g153419;
				float2 temp_output_75_0_g153429 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_82_0_g153429 = temp_output_136_0_g153426;
				float2 temp_output_119_0_g153429 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_7_0_g153434 = 1.0;
				float temp_output_10_0_g153434 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153434 );
				float4 lerpResult131_g153429 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153429,temp_output_82_0_g153429, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153429,temp_output_82_0_g153429, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153429 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153434 ) / temp_output_10_0_g153434 ) ));
				float4 temp_output_17_0_g153428 = lerpResult131_g153429;
				float4 temp_output_3_0_g153428 = TVE_WindParams;
				float4 ifLocalVar18_g153428 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153428 >= 0.5 )
				ifLocalVar18_g153428 = temp_output_17_0_g153428;
				else
				ifLocalVar18_g153428 = temp_output_3_0_g153428;
				float4 lerpResult22_g153428 = lerp( temp_output_3_0_g153428 , temp_output_17_0_g153428 , temp_output_19_0_g153428);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153428 = lerpResult22_g153428;
				#else
				float4 staticSwitch24_g153428 = ifLocalVar18_g153428;
				#endif
				float4 temp_output_610_0_g153419 = staticSwitch24_g153428;
				float2 lerpResult699_g153419 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult643_g153419 = (float3(lerpResult699_g153419 , ( (temp_output_610_0_g153419).b * Input_MotionValue629_g153419 )));
				float3 lerpResult623_g153419 = lerp( Motion_Local694_g153419 , appendResult643_g153419 , (temp_output_610_0_g153419).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#else
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g153419 = staticSwitch693_g153419;
				#else
				float3 staticSwitch612_g153419 = Motion_Local694_g153419;
				#endif
				float3 temp_output_1628_567_g153404 = staticSwitch612_g153419;
				float2 break83_g153418 = ((temp_output_1628_567_g153404).xy*2.0 + -1.0);
				float3 appendResult79_g153418 = (float3(break83_g153418.x , 0.0 , break83_g153418.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153418 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Base_Intensity1623_g153404 = length( Base_Direction893_g153404 );
				float lerpResult1631_g153404 = lerp( 1.0 , ( Base_Intensity1623_g153404 * Base_Intensity1623_g153404 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g153404 = ( _MotionBaseIntensityValue * Base_Mask217_g153404 * Base_Direction893_g153404 * lerpResult1631_g153404 );
				#else
				float2 staticSwitch1573_g153404 = temp_cast_36;
				#endif
				float temp_output_136_0_g153408 = _global_push_layer_value;
				float temp_output_19_0_g153409 = TVE_PushLayers[(int)temp_output_136_0_g153408];
				float3 lerpResult1547_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionPushPivotValue);
				half3 Push_Position1549_g153404 = lerpResult1547_g153404;
				half3 Input_Position180_g153410 = Push_Position1549_g153404;
				float2 temp_output_75_0_g153410 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_82_0_g153410 = temp_output_136_0_g153408;
				float2 temp_output_119_0_g153410 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_7_0_g153415 = 1.0;
				float temp_output_10_0_g153415 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153415 );
				float4 lerpResult131_g153410 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153410,temp_output_82_0_g153410, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153410,temp_output_82_0_g153410, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153410 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153415 ) / temp_output_10_0_g153415 ) ));
				float4 temp_output_17_0_g153409 = lerpResult131_g153410;
				float4 temp_output_3_0_g153409 = TVE_PushParams;
				float4 ifLocalVar18_g153409 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153409 >= 0.5 )
				ifLocalVar18_g153409 = temp_output_17_0_g153409;
				else
				ifLocalVar18_g153409 = temp_output_3_0_g153409;
				float4 lerpResult22_g153409 = lerp( temp_output_3_0_g153409 , temp_output_17_0_g153409 , temp_output_19_0_g153409);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153409 = lerpResult22_g153409;
				#else
				float4 staticSwitch24_g153409 = ifLocalVar18_g153409;
				#endif
				half4 Global_PushParams214_g153404 = staticSwitch24_g153409;
				float2 break83_g153417 = ((Global_PushParams214_g153404).rg*2.0 + -1.0);
				float3 appendResult79_g153417 = (float3(break83_g153417.x , 0.0 , break83_g153417.y));
				half2 Push_Direction1608_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153417 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Push_Intensity1501_g153404 = _MotionPushIntensityValue;
				half Push_Influence1504_g153404 = saturate( ( (Global_PushParams214_g153404).a * Push_Intensity1501_g153404 ) );
				float2 lerpResult1496_g153404 = lerp( staticSwitch1573_g153404 , ( Push_Direction1608_g153404 * Push_Intensity1501_g153404 * Base_Mask217_g153404 ) , Push_Influence1504_g153404);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g153404 = lerpResult1496_g153404;
				#else
				float2 staticSwitch1506_g153404 = staticSwitch1573_g153404;
				#endif
				half2 Base_Motion1440_g153404 = staticSwitch1506_g153404;
				half2 Final_RoationData1570_g153404 = Base_Motion1440_g153404;
				float4 In_RotationData16_g153406 = float4( Final_RoationData1570_g153404, 0.0 , 0.0 );
				Data16_g153406.Dummy = In_Dummy16_g153406;
				Data16_g153406.PositionOS = In_PositionOS16_g153406;
				Data16_g153406.PositionWS = In_PositionWS16_g153406;
				Data16_g153406.PositionWO = In_PositionWO16_g153406;
				Data16_g153406.PositionRawOS = In_PositionRawOS16_g153406;
				Data16_g153406.PositionAddOS = In_PositionAddOS16_g153406;
				Data16_g153406.PivotOS = In_PivotOS16_g153406;
				Data16_g153406.PivotWS = In_PivotWS16_g153406;
				Data16_g153406.PivotWO = In_PivotWO16_g153406;
				Data16_g153406.NormalOS = In_NormalOS16_g153406;
				Data16_g153406.NormalWS = In_NormalWS16_g153406;
				Data16_g153406.NormalRawOS = In_NormalRawOS16_g153406;
				Data16_g153406.NormalRawWS = In_NormalRawWS16_g153406;
				Data16_g153406.TangentOS = In_TangentOS16_g153406;
				Data16_g153406.ViewDirWS = In_ViewDirWS16_g153406;
				Data16_g153406.VertexData = In_VertexData16_g153406;
				Data16_g153406.MotionData = In_MotionData16_g153406;
				Data16_g153406.BoundsData = In_BoundsData16_g153406;
				Data16_g153406.RotationData = In_RotationData16_g153406;
				TVEModelData Data15_g153437 = Data16_g153406;
				float Out_Dummy15_g153437 = 0;
				float3 Out_PositionOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153437 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153437 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153437 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153437 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153437 = float3( 0,0,0 );
				float4 Out_VertexData15_g153437 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153437 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153437 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153437 = float4( 0,0,0,0 );
				Out_Dummy15_g153437 = Data15_g153437.Dummy;
				Out_PositionOS15_g153437 = Data15_g153437.PositionOS;
				Out_PositionWS15_g153437 = Data15_g153437.PositionWS;
				Out_PositionWO15_g153437 = Data15_g153437.PositionWO;
				Out_PositionRawOS15_g153437 = Data15_g153437.PositionRawOS;
				Out_PositionAddOS15_g153437 = Data15_g153437.PositionAddOS;
				Out_PivotOS15_g153437 = Data15_g153437.PivotOS;
				Out_PivotWS15_g153437 = Data15_g153437.PivotWS;
				Out_PivotWO15_g153437 = Data15_g153437.PivotWO;
				Out_NormalOS15_g153437 = Data15_g153437.NormalOS;
				Out_NormalWS15_g153437 = Data15_g153437.NormalWS;
				Out_NormalRawOS15_g153437 = Data15_g153437.NormalRawOS;
				Out_NormalRawWS15_g153437 = Data15_g153437.NormalRawWS;
				Out_TangentOS15_g153437 = Data15_g153437.TangentOS;
				Out_ViewDirWS15_g153437 = Data15_g153437.ViewDirWS;
				Out_VertexData15_g153437 = Data15_g153437.VertexData;
				Out_MotionData15_g153437 = Data15_g153437.MotionData;
				Out_BoundsData15_g153437 = Data15_g153437.BoundsData;
				Out_RotationData15_g153437 = Data15_g153437.RotationData;
				half3 Model_PositionOS147_g153436 = Out_PositionOS15_g153437;
				half3 Input_False58_g153439 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153440 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153441 = VertexPos40_g153440;
				float3 appendResult74_g153441 = (float3(VertexPos40_g153441.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g153441 = appendResult74_g153441;
				float3 break84_g153441 = VertexPos40_g153441;
				float3 appendResult81_g153441 = (float3(0.0 , break84_g153441.y , break84_g153441.z));
				half3 VertexPosOtherAxis82_g153441 = appendResult81_g153441;
				float4 temp_output_1567_33_g153436 = Out_RotationData15_g153437;
				half4 Model_VertexBend1569_g153436 = temp_output_1567_33_g153436;
				half2 Angle44_g153440 = (Model_VertexBend1569_g153436).xy;
				half Angle44_g153441 = (Angle44_g153440).y;
				half3 VertexPos40_g153442 = ( VertexPosRotationAxis50_g153441 + ( VertexPosOtherAxis82_g153441 * cos( Angle44_g153441 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g153441 ) * sin( Angle44_g153441 ) ) );
				float3 appendResult74_g153442 = (float3(0.0 , 0.0 , VertexPos40_g153442.z));
				half3 VertexPosRotationAxis50_g153442 = appendResult74_g153442;
				float3 break84_g153442 = VertexPos40_g153442;
				float3 appendResult81_g153442 = (float3(break84_g153442.x , break84_g153442.y , 0.0));
				half3 VertexPosOtherAxis82_g153442 = appendResult81_g153442;
				half Angle44_g153442 = -(Angle44_g153440).x;
				half3 Input_True57_g153439 = ( VertexPosRotationAxis50_g153442 + ( VertexPosOtherAxis82_g153442 * cos( Angle44_g153442 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g153442 ) * sin( Angle44_g153442 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch65_g153439 = Input_False58_g153439;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch67_g153439 = staticSwitch65_g153439;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch69_g153439 = staticSwitch67_g153439;
				#endif
				float3 temp_output_1578_0_g153436 = staticSwitch69_g153439;
				float3 temp_output_1567_31_g153436 = Out_PositionAddOS15_g153437;
				half3 Model_PositionADD1568_g153436 = temp_output_1567_31_g153436;
				half3 Final_PositionOS178_g153436 = ( temp_output_1578_0_g153436 + Model_PositionADD1568_g153436 );
				float3 In_PositionOS16_g153438 = Final_PositionOS178_g153436;
				float3 In_PositionWS16_g153438 = Out_PositionWS15_g153437;
				float3 In_PositionWO16_g153438 = Out_PositionWO15_g153437;
				float3 In_PositionRawOS16_g153438 = Out_PositionRawOS15_g153437;
				float3 In_PositionAddOS16_g153438 = temp_output_1567_31_g153436;
				float3 In_PivotOS16_g153438 = Out_PivotOS15_g153437;
				float3 In_PivotWS16_g153438 = Out_PivotWS15_g153437;
				float3 In_PivotWO16_g153438 = Out_PivotWO15_g153437;
				float3 In_NormalOS16_g153438 = Out_NormalOS15_g153437;
				float3 In_NormalWS16_g153438 = Out_NormalWS15_g153437;
				float3 In_NormalRawOS16_g153438 = Out_NormalRawOS15_g153437;
				float3 In_NormalRawWS16_g153438 = Out_NormalRawWS15_g153437;
				float4 In_TangentOS16_g153438 = Out_TangentOS15_g153437;
				float3 In_ViewDirWS16_g153438 = Out_ViewDirWS15_g153437;
				float4 In_VertexData16_g153438 = Out_VertexData15_g153437;
				float4 In_MotionData16_g153438 = Out_MotionData15_g153437;
				float4 In_BoundsData16_g153438 = Out_BoundsData15_g153437;
				float4 In_RotationData16_g153438 = temp_output_1567_33_g153436;
				Data16_g153438.Dummy = In_Dummy16_g153438;
				Data16_g153438.PositionOS = In_PositionOS16_g153438;
				Data16_g153438.PositionWS = In_PositionWS16_g153438;
				Data16_g153438.PositionWO = In_PositionWO16_g153438;
				Data16_g153438.PositionRawOS = In_PositionRawOS16_g153438;
				Data16_g153438.PositionAddOS = In_PositionAddOS16_g153438;
				Data16_g153438.PivotOS = In_PivotOS16_g153438;
				Data16_g153438.PivotWS = In_PivotWS16_g153438;
				Data16_g153438.PivotWO = In_PivotWO16_g153438;
				Data16_g153438.NormalOS = In_NormalOS16_g153438;
				Data16_g153438.NormalWS = In_NormalWS16_g153438;
				Data16_g153438.NormalRawOS = In_NormalRawOS16_g153438;
				Data16_g153438.NormalRawWS = In_NormalRawWS16_g153438;
				Data16_g153438.TangentOS = In_TangentOS16_g153438;
				Data16_g153438.ViewDirWS = In_ViewDirWS16_g153438;
				Data16_g153438.VertexData = In_VertexData16_g153438;
				Data16_g153438.MotionData = In_MotionData16_g153438;
				Data16_g153438.BoundsData = In_BoundsData16_g153438;
				Data16_g153438.RotationData = In_RotationData16_g153438;
				TVEModelData Data15_g153458 = Data16_g153438;
				float Out_Dummy15_g153458 = 0;
				float3 Out_PositionOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153458 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153458 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153458 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153458 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153458 = float3( 0,0,0 );
				float4 Out_VertexData15_g153458 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153458 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153458 = float4( 0,0,0,0 );
				Out_Dummy15_g153458 = Data15_g153458.Dummy;
				Out_PositionOS15_g153458 = Data15_g153458.PositionOS;
				Out_PositionWS15_g153458 = Data15_g153458.PositionWS;
				Out_PositionWO15_g153458 = Data15_g153458.PositionWO;
				Out_PositionRawOS15_g153458 = Data15_g153458.PositionRawOS;
				Out_PositionAddOS15_g153458 = Data15_g153458.PositionAddOS;
				Out_PivotOS15_g153458 = Data15_g153458.PivotOS;
				Out_PivotWS15_g153458 = Data15_g153458.PivotWS;
				Out_PivotWO15_g153458 = Data15_g153458.PivotWO;
				Out_NormalOS15_g153458 = Data15_g153458.NormalOS;
				Out_NormalWS15_g153458 = Data15_g153458.NormalWS;
				Out_NormalRawOS15_g153458 = Data15_g153458.NormalRawOS;
				Out_NormalRawWS15_g153458 = Data15_g153458.NormalRawWS;
				Out_TangentOS15_g153458 = Data15_g153458.TangentOS;
				Out_ViewDirWS15_g153458 = Data15_g153458.ViewDirWS;
				Out_VertexData15_g153458 = Data15_g153458.VertexData;
				Out_MotionData15_g153458 = Data15_g153458.MotionData;
				Out_BoundsData15_g153458 = Data15_g153458.BoundsData;
				Out_RotationData15_g153458 = Data15_g153458.RotationData;
				float3 temp_output_31_0_g153451 = Out_PositionOS15_g153458;
				
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = vertexToFrag305_g153142;
				
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;
				inputMesh.positionOS.xyz += ( ( temp_output_31_0_g153451 - Out_PositionRawOS15_g153458 ) + _DisableSRPBatcher );

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS.xyz );
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS );
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.interp00.xyz =	positionRWS;
				outputPackedVaryingsMeshToPS.interp01.xyz =	normalWS;
				outputPackedVaryingsMeshToPS.interp02.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.interp03.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.interp04.xyzw = inputMesh.uv2;

				return outputPackedVaryingsMeshToPS;
			}

			void Frag(  PackedVaryingsMeshToPS packedInput,	OUTPUT_GBUFFER(outGBuffer), out float outputDepth : SV_Depth  )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				#ifdef LOD_FADE_CROSSFADE
				float3 VC = GetWorldSpaceNormalizeViewDir(packedInput.interp00.xyz);
				LODDitheringTransition(ComputeFadeMaskSeed(VC, packedInput.positionCS.xy), unity_LODFade.x);
				#endif

				FragInputs input;

				ZERO_INITIALIZE( FragInputs, input );
				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				SurfaceOutput o = (SurfaceOutput)0;

				o.Normal = float3( 0, 0, 1 );
				float4 positionCS = 0;
				float3 positionWS = 0;

				float localBreakData4_g153454 = ( 0.0 );
				float localCompData3_g153446 = ( 0.0 );
				TVEVisualData Data3_g153446 = (TVEVisualData)0;
				half Dummy145_g153444 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g153446 = Dummy145_g153444;
				float localBreakData4_g153445 = ( 0.0 );
				float localCompData3_g153399 = ( 0.0 );
				TVEVisualData Data3_g153399 = (TVEVisualData)0;
				half Dummy145_g153389 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + 0.0 );
				float In_Dummy3_g153399 = Dummy145_g153389;
				float localBreakData4_g153398 = ( 0.0 );
				float localCompData3_g153373 = ( 0.0 );
				TVEVisualData Data3_g153373 = (TVEVisualData)0;
				half Dummy594_g153370 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g153373 = Dummy594_g153370;
				float localBreakData4_g153372 = ( 0.0 );
				float localCompData3_g153358 = ( 0.0 );
				TVEVisualData Data3_g153358 = (TVEVisualData)0;
				half Dummy594_g153357 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeInfo );
				float In_Dummy3_g153358 = Dummy594_g153357;
				float localBreakData4_g153368 = ( 0.0 );
				float localCompData3_g153330 = ( 0.0 );
				TVEVisualData Data3_g153330 = (TVEVisualData)0;
				half Dummy594_g153328 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeInfo );
				float In_Dummy3_g153330 = Dummy594_g153328;
				float localBreakData4_g153329 = ( 0.0 );
				float localCompData3_g153295 = ( 0.0 );
				TVEVisualData Data3_g153295 = (TVEVisualData)0;
				half Dummy594_g153292 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeInfo );
				float In_Dummy3_g153295 = Dummy594_g153292;
				float localBreakData4_g153293 = ( 0.0 );
				float localCompData3_g153272 = ( 0.0 );
				TVEVisualData Data3_g153272 = (TVEVisualData)0;
				half Dummy205_g153269 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeInfo );
				float In_Dummy3_g153272 = Dummy205_g153269;
				float localBreakData4_g153271 = ( 0.0 );
				float localCompData3_g153266 = ( 0.0 );
				TVEVisualData Data3_g153266 = (TVEVisualData)0;
				half Dummy205_g153245 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g153266 = Dummy205_g153245;
				float localBreakData4_g153267 = ( 0.0 );
				float localCompData3_g153239 = ( 0.0 );
				TVEVisualData Data3_g153239 = (TVEVisualData)0;
				half Dummy220_g153236 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g153239 = Dummy220_g153236;
				float localBreakData4_g153238 = ( 0.0 );
				float localCompData3_g153152 = ( 0.0 );
				TVEVisualData Data3_g153152 = (TVEVisualData)0;
				float In_Dummy3_g153152 = 0.0;
				float4 output0 = 0;
				float4 output1 = 0;
				float4 output2 = 0;
				OctaImpostorFragment( o, positionCS, positionWS, packedInput.UVsFrame122_g151868, packedInput.UVsFrame222_g151868, packedInput.UVsFrame322_g151868, packedInput.octaframe22_g151868, packedInput.viewPos22_g151868, output0, output1, output2 );
				float4 temp_cast_0 = (1.0).xxxx;
				half4 Input_Tex0377_g153142 = output0;
				half4 Input_Tex1379_g153142 = output1;
				float4 temp_cast_3 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch403_g153142 = temp_cast_3;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch403_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch403_g153142 = temp_cast_3;
				#endif
				half Local_MultiMask249_g153142 = (staticSwitch403_g153142).b;
				float lerpResult289_g153142 = lerp( 1.0 , Local_MultiMask249_g153142 , _ImpostorColorMode);
				float3 lerpResult292_g153142 = lerp( (_ImpostorColorTwo).rgb , (_ImpostorColor).rgb , lerpResult289_g153142);
				half3 Local_Albedo239_g153142 = ( o.Albedo * lerpResult292_g153142 );
				float3 In_Albedo3_g153152 = Local_Albedo239_g153142;
				float3 In_AlbedoRaw3_g153152 = Local_Albedo239_g153142;
				float2 temp_cast_4 = (0.5).xx;
				float2 In_NormalTS3_g153152 = temp_cast_4;
				float3 In_NormalWS3_g153152 = o.Normal;
				float4 temp_cast_5 = (1.0).xxxx;
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch385_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch385_g153142 = temp_cast_6;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch385_g153142 = temp_cast_7;
				#endif
				half Local_Metallic247_g153142 = (staticSwitch385_g153142).r;
				half Final_Metallic238_g153142 = ( Local_Metallic247_g153142 * _ImpostorMetallicValue );
				float4 temp_cast_8 = (1.0).xxxx;
				float4 temp_cast_9 = (1.0).xxxx;
				float4 temp_cast_10 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch392_g153142 = temp_cast_10;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch392_g153142 = temp_cast_9;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch392_g153142 = temp_cast_10;
				#endif
				half Local_OcclusionOrEmissive248_g153142 = (staticSwitch392_g153142).g;
				float lerpResult431_g153142 = lerp( 1.0 , Local_OcclusionOrEmissive248_g153142 , _ImpostorOcclusionValue);
				#ifdef TVE_EMISSIVE
				float staticSwitch428_g153142 = 1.0;
				#else
				float staticSwitch428_g153142 = lerpResult431_g153142;
				#endif
				half Final_Occlusion424_g153142 = staticSwitch428_g153142;
				float4 temp_cast_11 = (1.0).xxxx;
				float4 temp_cast_12 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch408_g153142 = temp_cast_12;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch408_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch408_g153142 = temp_cast_12;
				#endif
				half Local_Smoothness250_g153142 = (staticSwitch408_g153142).a;
				half Final_Smoothness233_g153142 = ( Local_Smoothness250_g153142 * _ImpostorSmoothnessValue );
				float4 appendResult257_g153142 = (float4(Final_Metallic238_g153142 , Final_Occlusion424_g153142 , 1.0 , Final_Smoothness233_g153142));
				float4 In_Shader3_g153152 = appendResult257_g153142;
				float4 appendResult286_g153142 = (float4(Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , 1.0));
				float4 In_Emissive3_g153152 = appendResult286_g153142;
				float3 temp_output_3_0_g153143 = Local_Albedo239_g153142;
				float dotResult20_g153143 = dot( temp_output_3_0_g153143 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale268_g153142 = dotResult20_g153143;
				float In_Grayscale3_g153152 = Local_Grayscale268_g153142;
				float clampResult267_g153142 = clamp( saturate( ( Local_Grayscale268_g153142 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity269_g153142 = clampResult267_g153142;
				float In_Luminosity3_g153152 = Local_Luminosity269_g153142;
				float In_MultiMask3_g153152 = Local_MultiMask249_g153142;
				float In_AlphaClip3_g153152 = 0.0;
				float In_AlphaFade3_g153152 = 1.0;
				float3 temp_cast_13 = (1.0).xxx;
				float3 In_Translucency3_g153152 = temp_cast_13;
				float In_Transmission3_g153152 = 1.0;
				float In_Thickness3_g153152 = 0.0;
				float In_Diffusion3_g153152 = 0.0;
				Data3_g153152.Dummy = In_Dummy3_g153152;
				Data3_g153152.Albedo = In_Albedo3_g153152;
				Data3_g153152.AlbedoRaw = In_AlbedoRaw3_g153152;
				Data3_g153152.NormalTS = In_NormalTS3_g153152;
				Data3_g153152.NormalWS = In_NormalWS3_g153152;
				Data3_g153152.Shader = In_Shader3_g153152;
				Data3_g153152.Emissive= In_Emissive3_g153152;
				Data3_g153152.MultiMask = In_MultiMask3_g153152;
				Data3_g153152.Grayscale = In_Grayscale3_g153152;
				Data3_g153152.Luminosity = In_Luminosity3_g153152;
				Data3_g153152.AlphaClip = In_AlphaClip3_g153152;
				Data3_g153152.AlphaFade = In_AlphaFade3_g153152;
				Data3_g153152.Translucency = In_Translucency3_g153152;
				Data3_g153152.Transmission = In_Transmission3_g153152;
				Data3_g153152.Thickness = In_Thickness3_g153152;
				Data3_g153152.Diffusion = In_Diffusion3_g153152;
				TVEVisualData Data4_g153238 = Data3_g153152;
				float Out_Dummy4_g153238 = 0;
				float3 Out_Albedo4_g153238 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153238 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153238 = float2( 0,0 );
				float3 Out_NormalWS4_g153238 = float3( 0,0,0 );
				float4 Out_Shader4_g153238 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153238 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153238 = 0;
				float Out_Grayscale4_g153238 = 0;
				float Out_Luminosity4_g153238 = 0;
				float Out_AlphaClip4_g153238 = 0;
				float Out_AlphaFade4_g153238 = 0;
				float3 Out_Translucency4_g153238 = float3( 0,0,0 );
				float Out_Transmission4_g153238 = 0;
				float Out_Thickness4_g153238 = 0;
				float Out_Diffusion4_g153238 = 0;
				Out_Dummy4_g153238 = Data4_g153238.Dummy;
				Out_Albedo4_g153238 = Data4_g153238.Albedo;
				Out_AlbedoRaw4_g153238 = Data4_g153238.AlbedoRaw;
				Out_NormalTS4_g153238 = Data4_g153238.NormalTS;
				Out_NormalWS4_g153238 = Data4_g153238.NormalWS;
				Out_Shader4_g153238 = Data4_g153238.Shader;
				Out_Emissive4_g153238= Data4_g153238.Emissive;
				Out_MultiMask4_g153238 = Data4_g153238.MultiMask;
				Out_Grayscale4_g153238 = Data4_g153238.Grayscale;
				Out_Luminosity4_g153238= Data4_g153238.Luminosity;
				Out_AlphaClip4_g153238 = Data4_g153238.AlphaClip;
				Out_AlphaFade4_g153238 = Data4_g153238.AlphaFade;
				Out_Translucency4_g153238 = Data4_g153238.Translucency;
				Out_Transmission4_g153238 = Data4_g153238.Transmission;
				Out_Thickness4_g153238 = Data4_g153238.Thickness;
				Out_Diffusion4_g153238 = Data4_g153238.Diffusion;
				half3 Visual_Albedo127_g153236 = Out_Albedo4_g153238;
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				half3 Input_PositionWS319_g153142 = GetAbsolutePositionWS( positionWS );
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 vertexToFrag305_g153142 = packedInput.ase_texcoord10.xyz;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				half3 Model_Normal_WS314_g153142 = packedInput.interp01;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_14 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = output2;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_17 = (1.0).xxxx;
				float4 temp_cast_18 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_18;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_17;
				#else
				float4 staticSwitch414_g153142 = temp_cast_18;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153244 = Data16_g153151;
				float Out_Dummy15_g153244 = 0;
				float3 Out_PositionWS15_g153244 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153244 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153244 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153244 = float3( 0,0,0 );
				float4 Out_VertexData15_g153244 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153244 = float4( 0,0,0,0 );
				Out_Dummy15_g153244 = Data15_g153244.Dummy;
				Out_PositionWS15_g153244 = Data15_g153244.PositionWS;
				Out_PositionWO15_g153244 = Data15_g153244.PositionWO;
				Out_PivotWS15_g153244 = Data15_g153244.PivotWS;
				Out_PivotWO15_g153244 = Data15_g153244.PivotWO;
				Out_NormalWS15_g153244 = Data15_g153244.NormalWS;
				Out_ViewDirWS15_g153244 = Data15_g153244.ViewDirWS;
				Out_VertexData15_g153244 = Data15_g153244.VertexData;
				Out_BoundsData15_g153244 = Data15_g153244.BoundsData;
				half3 Model_PositionWO224_g153236 = Out_PositionWO15_g153244;
				half3 Model_PivotWO239_g153236 = Out_PivotWO15_g153244;
				float3 lerpResult242_g153236 = lerp( Model_PositionWO224_g153236 , Model_PivotWO239_g153236 , _VariationNoisePivotValue);
				float4 tex3DNode60_g153240 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g153236 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g153242 = clamp( tex3DNode60_g153240.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g153243 = _VariationNoiseRemap.x;
				float temp_output_10_0_g153243 = ( _VariationNoiseRemap.y - temp_output_7_0_g153243 );
				float temp_output_238_0_g153236 = saturate( ( ( clampResult17_g153242 - temp_output_7_0_g153243 ) / ( temp_output_10_0_g153243 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g153236 = temp_output_238_0_g153236;
				half Variaton_Mask200_g153236 = Variaton_NoiseMask82_g153236;
				float3 lerpResult75_g153236 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g153236);
				float temp_output_162_11_g153236 = Out_MultiMask4_g153238;
				half Visual_MultiMask196_g153236 = temp_output_162_11_g153236;
				float lerpResult190_g153236 = lerp( 1.0 , Visual_MultiMask196_g153236 , _VariationMultiValue);
				half Variaton_MultiMask194_g153236 = lerpResult190_g153236;
				float3 lerpResult186_g153236 = lerp( Visual_Albedo127_g153236 , ( Visual_Albedo127_g153236 * lerpResult75_g153236 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g153236 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g153236 = lerpResult186_g153236;
				#else
				float3 staticSwitch171_g153236 = Visual_Albedo127_g153236;
				#endif
				half3 Final_Albedo160_g153236 = staticSwitch171_g153236;
				float3 In_Albedo3_g153239 = Final_Albedo160_g153236;
				float3 In_AlbedoRaw3_g153239 = Final_Albedo160_g153236;
				float2 In_NormalTS3_g153239 = Out_NormalTS4_g153238;
				float3 In_NormalWS3_g153239 = Out_NormalWS4_g153238;
				float4 In_Shader3_g153239 = Out_Shader4_g153238;
				float4 In_Emissive3_g153239 = Out_Emissive4_g153238;
				float3 temp_output_3_0_g153237 = Final_Albedo160_g153236;
				float dotResult20_g153237 = dot( temp_output_3_0_g153237 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g153236 = dotResult20_g153237;
				float In_Grayscale3_g153239 = Final_Grayscale164_g153236;
				float clampResult180_g153236 = clamp( saturate( ( Final_Grayscale164_g153236 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g153236 = clampResult180_g153236;
				float In_Luminosity3_g153239 = Final_Luminosity181_g153236;
				float In_MultiMask3_g153239 = temp_output_162_11_g153236;
				float In_AlphaClip3_g153239 = Out_AlphaClip4_g153238;
				float In_AlphaFade3_g153239 = Out_AlphaFade4_g153238;
				float3 In_Translucency3_g153239 = Out_Translucency4_g153238;
				float In_Transmission3_g153239 = Out_Transmission4_g153238;
				float In_Thickness3_g153239 = Out_Thickness4_g153238;
				float In_Diffusion3_g153239 = Out_Diffusion4_g153238;
				Data3_g153239.Dummy = In_Dummy3_g153239;
				Data3_g153239.Albedo = In_Albedo3_g153239;
				Data3_g153239.AlbedoRaw = In_AlbedoRaw3_g153239;
				Data3_g153239.NormalTS = In_NormalTS3_g153239;
				Data3_g153239.NormalWS = In_NormalWS3_g153239;
				Data3_g153239.Shader = In_Shader3_g153239;
				Data3_g153239.Emissive= In_Emissive3_g153239;
				Data3_g153239.MultiMask = In_MultiMask3_g153239;
				Data3_g153239.Grayscale = In_Grayscale3_g153239;
				Data3_g153239.Luminosity = In_Luminosity3_g153239;
				Data3_g153239.AlphaClip = In_AlphaClip3_g153239;
				Data3_g153239.AlphaFade = In_AlphaFade3_g153239;
				Data3_g153239.Translucency = In_Translucency3_g153239;
				Data3_g153239.Transmission = In_Transmission3_g153239;
				Data3_g153239.Thickness = In_Thickness3_g153239;
				Data3_g153239.Diffusion = In_Diffusion3_g153239;
				TVEVisualData Data4_g153267 = Data3_g153239;
				float Out_Dummy4_g153267 = 0;
				float3 Out_Albedo4_g153267 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153267 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153267 = float2( 0,0 );
				float3 Out_NormalWS4_g153267 = float3( 0,0,0 );
				float4 Out_Shader4_g153267 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153267 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153267 = 0;
				float Out_Grayscale4_g153267 = 0;
				float Out_Luminosity4_g153267 = 0;
				float Out_AlphaClip4_g153267 = 0;
				float Out_AlphaFade4_g153267 = 0;
				float3 Out_Translucency4_g153267 = float3( 0,0,0 );
				float Out_Transmission4_g153267 = 0;
				float Out_Thickness4_g153267 = 0;
				float Out_Diffusion4_g153267 = 0;
				Out_Dummy4_g153267 = Data4_g153267.Dummy;
				Out_Albedo4_g153267 = Data4_g153267.Albedo;
				Out_AlbedoRaw4_g153267 = Data4_g153267.AlbedoRaw;
				Out_NormalTS4_g153267 = Data4_g153267.NormalTS;
				Out_NormalWS4_g153267 = Data4_g153267.NormalWS;
				Out_Shader4_g153267 = Data4_g153267.Shader;
				Out_Emissive4_g153267= Data4_g153267.Emissive;
				Out_MultiMask4_g153267 = Data4_g153267.MultiMask;
				Out_Grayscale4_g153267 = Data4_g153267.Grayscale;
				Out_Luminosity4_g153267= Data4_g153267.Luminosity;
				Out_AlphaClip4_g153267 = Data4_g153267.AlphaClip;
				Out_AlphaFade4_g153267 = Data4_g153267.AlphaFade;
				Out_Translucency4_g153267 = Data4_g153267.Translucency;
				Out_Transmission4_g153267 = Data4_g153267.Transmission;
				Out_Thickness4_g153267 = Data4_g153267.Thickness;
				Out_Diffusion4_g153267 = Data4_g153267.Diffusion;
				half3 Visual_Albedo139_g153245 = Out_Albedo4_g153267;
				float temp_output_200_12_g153245 = Out_Grayscale4_g153267;
				half Visual_Grayscale150_g153245 = temp_output_200_12_g153245;
				float3 temp_cast_20 = (Visual_Grayscale150_g153245).xxx;
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153246 = Data204_g153153;
				float Out_Dummy15_g153246 = 0;
				float4 Out_CoatParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153246 = float4( 0,0,0,0 );
				Out_Dummy15_g153246 = Data15_g153246.Dummy;
				Out_CoatParams15_g153246 = Data15_g153246.CoatParams;
				Out_PaintParams15_g153246 = Data15_g153246.PaintParams;
				Out_GlowParams15_g153246 = Data15_g153246.GlowParams;
				Out_AtmoParams15_g153246= Data15_g153246.AtmoParams;
				Out_FadeParams15_g153246= Data15_g153246.FadeParams;
				Out_FormParams15_g153246 = Data15_g153246.FormParams;
				Out_LandParams15_g153246 = Data15_g153246.LandParams;
				Out_WindParams15_g153246 = Data15_g153246.WindParams;
				Out_PushParams15_g153246 = Data15_g153246.PushParams;
				half4 Global_PaintParams209_g153245 = Out_PaintParams15_g153246;
				float temp_output_6_0_g153247 = ( saturate( (Global_PaintParams209_g153245).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g153247 = ( temp_output_6_0_g153247 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g153247 = temp_output_6_0_g153247;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g153245 = staticSwitch14_g153247;
				#else
				float staticSwitch283_g153245 = 1.0;
				#endif
				half Tinting_GlobalValue285_g153245 = staticSwitch283_g153245;
				float3 lerpResult368_g153245 = lerp( Visual_Albedo139_g153245 , temp_cast_20 , ( Tinting_GlobalValue285_g153245 * _TintingGrayValue ));
				float3 temp_cast_49 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g153245 = (Global_PaintParams209_g153245).xyz;
				#else
				float3 staticSwitch288_g153245 = temp_cast_49;
				#endif
				half3 Tinting_ColorGlobal290_g153245 = staticSwitch288_g153245;
				float temp_output_200_11_g153245 = Out_MultiMask4_g153267;
				half Visual_MultiMask181_g153245 = temp_output_200_11_g153245;
				float lerpResult147_g153245 = lerp( 1.0 , Visual_MultiMask181_g153245 , _TintingMultiValue);
				half Tinting_MutiMask121_g153245 = lerpResult147_g153245;
				half Tinting_TexMask385_g153245 = 1.0;
				float temp_output_200_15_g153245 = Out_Luminosity4_g153267;
				half Visual_Luminosity257_g153245 = temp_output_200_15_g153245;
				float clampResult17_g153259 = clamp( Visual_Luminosity257_g153245 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153258 = _TintingLumaRemap.x;
				float temp_output_10_0_g153258 = ( _TintingLumaRemap.y - temp_output_7_0_g153258 );
				float lerpResult228_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153259 - temp_output_7_0_g153258 ) / ( temp_output_10_0_g153258 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g153245 = lerpResult228_g153245;
				TVEModelData Data15_g153268 = Data16_g153151;
				float Out_Dummy15_g153268 = 0;
				float3 Out_PositionWS15_g153268 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153268 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153268 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153268 = float3( 0,0,0 );
				float4 Out_VertexData15_g153268 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153268 = float4( 0,0,0,0 );
				Out_Dummy15_g153268 = Data15_g153268.Dummy;
				Out_PositionWS15_g153268 = Data15_g153268.PositionWS;
				Out_PositionWO15_g153268 = Data15_g153268.PositionWO;
				Out_PivotWS15_g153268 = Data15_g153268.PivotWS;
				Out_PivotWO15_g153268 = Data15_g153268.PivotWO;
				Out_NormalWS15_g153268 = Data15_g153268.NormalWS;
				Out_ViewDirWS15_g153268 = Data15_g153268.ViewDirWS;
				Out_VertexData15_g153268 = Data15_g153268.VertexData;
				Out_BoundsData15_g153268 = Data15_g153268.BoundsData;
				half4 Model_VertexMasks307_g153245 = Out_VertexData15_g153268;
				float4 break311_g153245 = Model_VertexMasks307_g153245;
				float4 break33_g153251 = _tinting_vert_mode;
				float temp_output_30_0_g153251 = ( break311_g153245.x * break33_g153251.x );
				float temp_output_29_0_g153251 = ( break311_g153245.y * break33_g153251.y );
				float temp_output_31_0_g153251 = ( break311_g153245.z * break33_g153251.z );
				float temp_output_28_0_g153251 = ( temp_output_30_0_g153251 + temp_output_29_0_g153251 + temp_output_31_0_g153251 + ( break311_g153245.w * break33_g153251.w ) );
				float clampResult17_g153257 = clamp( temp_output_28_0_g153251 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153256 = _TintingMeshRemap.x;
				float temp_output_10_0_g153256 = ( _TintingMeshRemap.y - temp_output_7_0_g153256 );
				float lerpResult370_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153257 - temp_output_7_0_g153256 ) / ( temp_output_10_0_g153256 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g153260 = lerpResult370_g153245;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153260 = ( temp_output_6_0_g153260 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153260 = temp_output_6_0_g153260;
				#endif
				float temp_output_333_0_g153245 = staticSwitch14_g153260;
				half Tinting_VertMask309_g153245 = temp_output_333_0_g153245;
				half Tinting_NoiseMask213_g153245 = 1.0;
				half Custom_Mask345_g153245 = 1.0;
				float temp_output_7_0_g153254 = _TintingBlendRemap.x;
				float temp_output_10_0_g153254 = ( _TintingBlendRemap.y - temp_output_7_0_g153254 );
				half Tinting_Mask242_g153245 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g153245 * Tinting_TexMask385_g153245 * Tinting_LumaMask153_g153245 * Tinting_VertMask309_g153245 * Tinting_NoiseMask213_g153245 * Tinting_GlobalValue285_g153245 * Custom_Mask345_g153245 ) - temp_output_7_0_g153254 ) / ( temp_output_10_0_g153254 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g153245 = lerp( Visual_Albedo139_g153245 , ( lerpResult368_g153245 * 4.594794 * Tinting_ColorGlobal290_g153245 * (_TintingColor).rgb ) , Tinting_Mask242_g153245);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g153245 = lerpResult90_g153245;
				#else
				float3 staticSwitch286_g153245 = Visual_Albedo139_g153245;
				#endif
				half3 Final_Albedo97_g153245 = staticSwitch286_g153245;
				float3 In_Albedo3_g153266 = Final_Albedo97_g153245;
				float3 In_AlbedoRaw3_g153266 = Out_AlbedoRaw4_g153267;
				float2 In_NormalTS3_g153266 = Out_NormalTS4_g153267;
				float3 In_NormalWS3_g153266 = Out_NormalWS4_g153267;
				float4 In_Shader3_g153266 = Out_Shader4_g153267;
				float4 In_Emissive3_g153266 = Out_Emissive4_g153267;
				float In_Grayscale3_g153266 = temp_output_200_12_g153245;
				float In_Luminosity3_g153266 = temp_output_200_15_g153245;
				float In_MultiMask3_g153266 = temp_output_200_11_g153245;
				float In_AlphaClip3_g153266 = Out_AlphaClip4_g153267;
				float In_AlphaFade3_g153266 = Out_AlphaFade4_g153267;
				float3 In_Translucency3_g153266 = Out_Translucency4_g153267;
				float In_Transmission3_g153266 = Out_Transmission4_g153267;
				float In_Thickness3_g153266 = Out_Thickness4_g153267;
				float In_Diffusion3_g153266 = Out_Diffusion4_g153267;
				Data3_g153266.Dummy = In_Dummy3_g153266;
				Data3_g153266.Albedo = In_Albedo3_g153266;
				Data3_g153266.AlbedoRaw = In_AlbedoRaw3_g153266;
				Data3_g153266.NormalTS = In_NormalTS3_g153266;
				Data3_g153266.NormalWS = In_NormalWS3_g153266;
				Data3_g153266.Shader = In_Shader3_g153266;
				Data3_g153266.Emissive= In_Emissive3_g153266;
				Data3_g153266.MultiMask = In_MultiMask3_g153266;
				Data3_g153266.Grayscale = In_Grayscale3_g153266;
				Data3_g153266.Luminosity = In_Luminosity3_g153266;
				Data3_g153266.AlphaClip = In_AlphaClip3_g153266;
				Data3_g153266.AlphaFade = In_AlphaFade3_g153266;
				Data3_g153266.Translucency = In_Translucency3_g153266;
				Data3_g153266.Transmission = In_Transmission3_g153266;
				Data3_g153266.Thickness = In_Thickness3_g153266;
				Data3_g153266.Diffusion = In_Diffusion3_g153266;
				TVEVisualData Data4_g153271 = Data3_g153266;
				float Out_Dummy4_g153271 = 0;
				float3 Out_Albedo4_g153271 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153271 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153271 = float2( 0,0 );
				float3 Out_NormalWS4_g153271 = float3( 0,0,0 );
				float4 Out_Shader4_g153271 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153271 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153271 = 0;
				float Out_Grayscale4_g153271 = 0;
				float Out_Luminosity4_g153271 = 0;
				float Out_AlphaClip4_g153271 = 0;
				float Out_AlphaFade4_g153271 = 0;
				float3 Out_Translucency4_g153271 = float3( 0,0,0 );
				float Out_Transmission4_g153271 = 0;
				float Out_Thickness4_g153271 = 0;
				float Out_Diffusion4_g153271 = 0;
				Out_Dummy4_g153271 = Data4_g153271.Dummy;
				Out_Albedo4_g153271 = Data4_g153271.Albedo;
				Out_AlbedoRaw4_g153271 = Data4_g153271.AlbedoRaw;
				Out_NormalTS4_g153271 = Data4_g153271.NormalTS;
				Out_NormalWS4_g153271 = Data4_g153271.NormalWS;
				Out_Shader4_g153271 = Data4_g153271.Shader;
				Out_Emissive4_g153271= Data4_g153271.Emissive;
				Out_MultiMask4_g153271 = Data4_g153271.MultiMask;
				Out_Grayscale4_g153271 = Data4_g153271.Grayscale;
				Out_Luminosity4_g153271= Data4_g153271.Luminosity;
				Out_AlphaClip4_g153271 = Data4_g153271.AlphaClip;
				Out_AlphaFade4_g153271 = Data4_g153271.AlphaFade;
				Out_Translucency4_g153271 = Data4_g153271.Translucency;
				Out_Transmission4_g153271 = Data4_g153271.Transmission;
				Out_Thickness4_g153271 = Data4_g153271.Thickness;
				Out_Diffusion4_g153271 = Data4_g153271.Diffusion;
				half3 Visual_Albedo292_g153269 = Out_Albedo4_g153271;
				float temp_output_280_12_g153269 = Out_Grayscale4_g153271;
				half Visual_Grayscale308_g153269 = temp_output_280_12_g153269;
				float3 temp_cast_50 = (Visual_Grayscale308_g153269).xxx;
				TVEGlobalData Data15_g153270 = Data204_g153153;
				float Out_Dummy15_g153270 = 0;
				float4 Out_CoatParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153270 = float4( 0,0,0,0 );
				Out_Dummy15_g153270 = Data15_g153270.Dummy;
				Out_CoatParams15_g153270 = Data15_g153270.CoatParams;
				Out_PaintParams15_g153270 = Data15_g153270.PaintParams;
				Out_GlowParams15_g153270 = Data15_g153270.GlowParams;
				Out_AtmoParams15_g153270= Data15_g153270.AtmoParams;
				Out_FadeParams15_g153270= Data15_g153270.FadeParams;
				Out_FormParams15_g153270 = Data15_g153270.FormParams;
				Out_LandParams15_g153270 = Data15_g153270.LandParams;
				Out_WindParams15_g153270 = Data15_g153270.WindParams;
				Out_PushParams15_g153270 = Data15_g153270.PushParams;
				half4 Global_AtmoParams314_g153269 = Out_AtmoParams15_g153270;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g153269 = ( (Global_AtmoParams314_g153269).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g153269 = 1.0;
				#endif
				half Dryness_GlobalMask352_g153269 = staticSwitch351_g153269;
				float3 lerpResult485_g153269 = lerp( Visual_Albedo292_g153269 , temp_cast_50 , ( Dryness_GlobalMask352_g153269 * _DrynessGrayValue ));
				half3 hsvTorgb58_g153290 = RGBToHSV( lerpResult485_g153269 );
				half3 hsvTorgb61_g153290 = HSVToRGB( half3(( hsvTorgb58_g153290.x + _DrynessShiftValue ),hsvTorgb58_g153290.y,hsvTorgb58_g153290.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g153269 = hsvTorgb61_g153290;
				#else
				float3 staticSwitch499_g153269 = lerpResult485_g153269;
				#endif
				half Dryness_TexMask478_g153269 = 1.0;
				float temp_output_280_11_g153269 = Out_MultiMask4_g153271;
				half Visual_MultiMask310_g153269 = temp_output_280_11_g153269;
				float lerpResult283_g153269 = lerp( 1.0 , Visual_MultiMask310_g153269 , _DrynessMultiValue);
				half Dryness_MultiMask302_g153269 = lerpResult283_g153269;
				float temp_output_280_15_g153269 = Out_Luminosity4_g153271;
				half Visual_Luminosity309_g153269 = temp_output_280_15_g153269;
				float clampResult17_g153285 = clamp( Visual_Luminosity309_g153269 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153284 = _DrynessLumaRemap.x;
				float temp_output_10_0_g153284 = ( _DrynessLumaRemap.y - temp_output_7_0_g153284 );
				float lerpResult295_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153285 - temp_output_7_0_g153284 ) / ( temp_output_10_0_g153284 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g153269 = lerpResult295_g153269;
				TVEModelData Data15_g153291 = Data16_g153151;
				float Out_Dummy15_g153291 = 0;
				float3 Out_PositionWS15_g153291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153291 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153291 = float3( 0,0,0 );
				float4 Out_VertexData15_g153291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153291 = float4( 0,0,0,0 );
				Out_Dummy15_g153291 = Data15_g153291.Dummy;
				Out_PositionWS15_g153291 = Data15_g153291.PositionWS;
				Out_PositionWO15_g153291 = Data15_g153291.PositionWO;
				Out_PivotWS15_g153291 = Data15_g153291.PivotWS;
				Out_PivotWO15_g153291 = Data15_g153291.PivotWO;
				Out_NormalWS15_g153291 = Data15_g153291.NormalWS;
				Out_ViewDirWS15_g153291 = Data15_g153291.ViewDirWS;
				Out_VertexData15_g153291 = Data15_g153291.VertexData;
				Out_BoundsData15_g153291 = Data15_g153291.BoundsData;
				half4 Model_VertexMasks386_g153269 = Out_VertexData15_g153291;
				float4 break375_g153269 = Model_VertexMasks386_g153269;
				float4 break33_g153278 = _dryness_vert_mode;
				float temp_output_30_0_g153278 = ( break375_g153269.x * break33_g153278.x );
				float temp_output_29_0_g153278 = ( break375_g153269.y * break33_g153278.y );
				float temp_output_31_0_g153278 = ( break375_g153269.z * break33_g153278.z );
				float temp_output_28_0_g153278 = ( temp_output_30_0_g153278 + temp_output_29_0_g153278 + temp_output_31_0_g153278 + ( break375_g153269.w * break33_g153278.w ) );
				float clampResult17_g153279 = clamp( temp_output_28_0_g153278 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153280 = _DrynessMeshRemap.x;
				float temp_output_10_0_g153280 = ( _DrynessMeshRemap.y - temp_output_7_0_g153280 );
				float lerpResult452_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153279 - temp_output_7_0_g153280 ) / ( temp_output_10_0_g153280 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g153286 = lerpResult452_g153269;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153286 = ( temp_output_6_0_g153286 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153286 = temp_output_6_0_g153286;
				#endif
				float temp_output_448_0_g153269 = staticSwitch14_g153286;
				half Dryness_VertMask378_g153269 = temp_output_448_0_g153269;
				half Dryness_MaskNoise291_g153269 = 1.0;
				half Custom_Mask411_g153269 = 1.0;
				float temp_output_7_0_g153283 = _DrynessBlendRemap.x;
				float temp_output_10_0_g153283 = ( _DrynessBlendRemap.y - temp_output_7_0_g153283 );
				half Dryness_Mask329_g153269 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g153269 * Dryness_MultiMask302_g153269 * Dryness_LumaMask301_g153269 * Dryness_VertMask378_g153269 * Dryness_MaskNoise291_g153269 * Dryness_GlobalMask352_g153269 * Custom_Mask411_g153269 ) - temp_output_7_0_g153283 ) / ( temp_output_10_0_g153283 + 0.0001 ) ) );
				float3 lerpResult336_g153269 = lerp( Visual_Albedo292_g153269 , ( staticSwitch499_g153269 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g153269 = lerpResult336_g153269;
				#else
				float3 staticSwitch356_g153269 = Visual_Albedo292_g153269;
				#endif
				half3 Final_Albedo331_g153269 = staticSwitch356_g153269;
				float3 In_Albedo3_g153272 = Final_Albedo331_g153269;
				float3 In_AlbedoRaw3_g153272 = Out_AlbedoRaw4_g153271;
				float2 In_NormalTS3_g153272 = Out_NormalTS4_g153271;
				float3 In_NormalWS3_g153272 = Out_NormalWS4_g153271;
				half4 Visual_Shader415_g153269 = Out_Shader4_g153271;
				float4 break438_g153269 = Visual_Shader415_g153269;
				float4 appendResult439_g153269 = (float4(break438_g153269.x , break438_g153269.y , break438_g153269.z , ( break438_g153269.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g153269 = lerp( Visual_Shader415_g153269 , appendResult439_g153269 , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g153269 = lerpResult427_g153269;
				#else
				float4 staticSwitch426_g153269 = Visual_Shader415_g153269;
				#endif
				half4 Final_Shader433_g153269 = staticSwitch426_g153269;
				float4 In_Shader3_g153272 = Final_Shader433_g153269;
				float4 In_Emissive3_g153272 = Out_Emissive4_g153271;
				float In_Grayscale3_g153272 = temp_output_280_12_g153269;
				float In_Luminosity3_g153272 = temp_output_280_15_g153269;
				float In_MultiMask3_g153272 = temp_output_280_11_g153269;
				float In_AlphaClip3_g153272 = Out_AlphaClip4_g153271;
				float In_AlphaFade3_g153272 = Out_AlphaFade4_g153271;
				float3 In_Translucency3_g153272 = Out_Translucency4_g153271;
				half Visual_Transmission416_g153269 = Out_Transmission4_g153271;
				float lerpResult421_g153269 = lerp( Visual_Transmission416_g153269 , ( Visual_Transmission416_g153269 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g153269 = lerpResult421_g153269;
				#else
				float staticSwitch418_g153269 = Visual_Transmission416_g153269;
				#endif
				half Final_Transmission425_g153269 = staticSwitch418_g153269;
				float In_Transmission3_g153272 = Final_Transmission425_g153269;
				float In_Thickness3_g153272 = Out_Thickness4_g153271;
				float In_Diffusion3_g153272 = Out_Diffusion4_g153271;
				Data3_g153272.Dummy = In_Dummy3_g153272;
				Data3_g153272.Albedo = In_Albedo3_g153272;
				Data3_g153272.AlbedoRaw = In_AlbedoRaw3_g153272;
				Data3_g153272.NormalTS = In_NormalTS3_g153272;
				Data3_g153272.NormalWS = In_NormalWS3_g153272;
				Data3_g153272.Shader = In_Shader3_g153272;
				Data3_g153272.Emissive= In_Emissive3_g153272;
				Data3_g153272.MultiMask = In_MultiMask3_g153272;
				Data3_g153272.Grayscale = In_Grayscale3_g153272;
				Data3_g153272.Luminosity = In_Luminosity3_g153272;
				Data3_g153272.AlphaClip = In_AlphaClip3_g153272;
				Data3_g153272.AlphaFade = In_AlphaFade3_g153272;
				Data3_g153272.Translucency = In_Translucency3_g153272;
				Data3_g153272.Transmission = In_Transmission3_g153272;
				Data3_g153272.Thickness = In_Thickness3_g153272;
				Data3_g153272.Diffusion = In_Diffusion3_g153272;
				TVEVisualData Data4_g153293 = Data3_g153272;
				float Out_Dummy4_g153293 = 0;
				float3 Out_Albedo4_g153293 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153293 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153293 = float2( 0,0 );
				float3 Out_NormalWS4_g153293 = float3( 0,0,0 );
				float4 Out_Shader4_g153293 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153293 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153293 = 0;
				float Out_Grayscale4_g153293 = 0;
				float Out_Luminosity4_g153293 = 0;
				float Out_AlphaClip4_g153293 = 0;
				float Out_AlphaFade4_g153293 = 0;
				float3 Out_Translucency4_g153293 = float3( 0,0,0 );
				float Out_Transmission4_g153293 = 0;
				float Out_Thickness4_g153293 = 0;
				float Out_Diffusion4_g153293 = 0;
				Out_Dummy4_g153293 = Data4_g153293.Dummy;
				Out_Albedo4_g153293 = Data4_g153293.Albedo;
				Out_AlbedoRaw4_g153293 = Data4_g153293.AlbedoRaw;
				Out_NormalTS4_g153293 = Data4_g153293.NormalTS;
				Out_NormalWS4_g153293 = Data4_g153293.NormalWS;
				Out_Shader4_g153293 = Data4_g153293.Shader;
				Out_Emissive4_g153293= Data4_g153293.Emissive;
				Out_MultiMask4_g153293 = Data4_g153293.MultiMask;
				Out_Grayscale4_g153293 = Data4_g153293.Grayscale;
				Out_Luminosity4_g153293= Data4_g153293.Luminosity;
				Out_AlphaClip4_g153293 = Data4_g153293.AlphaClip;
				Out_AlphaFade4_g153293 = Data4_g153293.AlphaFade;
				Out_Translucency4_g153293 = Data4_g153293.Translucency;
				Out_Transmission4_g153293 = Data4_g153293.Transmission;
				Out_Thickness4_g153293 = Data4_g153293.Thickness;
				Out_Diffusion4_g153293 = Data4_g153293.Diffusion;
				half3 Visual_Albedo127_g153292 = Out_Albedo4_g153293;
				float3 temp_output_622_0_g153292 = (_OverlayColor).rgb;
				half Overlay_TexMask908_g153292 = 1.0;
				float3 temp_output_739_21_g153292 = Out_NormalWS4_g153293;
				half3 Visual_NormalWS749_g153292 = temp_output_739_21_g153292;
				float clampResult17_g153313 = clamp( saturate( (Visual_NormalWS749_g153292).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g153312 = _OverlayProjRemap.x;
				float temp_output_10_0_g153312 = ( _OverlayProjRemap.y - temp_output_7_0_g153312 );
				float lerpResult842_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153313 - temp_output_7_0_g153312 ) / ( temp_output_10_0_g153312 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g153292 = lerpResult842_g153292;
				float temp_output_739_15_g153292 = Out_Luminosity4_g153293;
				half Visual_Luminosity654_g153292 = temp_output_739_15_g153292;
				float clampResult17_g153315 = clamp( Visual_Luminosity654_g153292 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153314 = _OverlayLumaRemap.x;
				float temp_output_10_0_g153314 = ( _OverlayLumaRemap.y - temp_output_7_0_g153314 );
				float lerpResult587_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153315 - temp_output_7_0_g153314 ) / ( temp_output_10_0_g153314 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g153292 = lerpResult587_g153292;
				TVEModelData Data15_g153327 = Data16_g153151;
				float Out_Dummy15_g153327 = 0;
				float3 Out_PositionWS15_g153327 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153327 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153327 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153327 = float3( 0,0,0 );
				float4 Out_VertexData15_g153327 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153327 = float4( 0,0,0,0 );
				Out_Dummy15_g153327 = Data15_g153327.Dummy;
				Out_PositionWS15_g153327 = Data15_g153327.PositionWS;
				Out_PositionWO15_g153327 = Data15_g153327.PositionWO;
				Out_PivotWS15_g153327 = Data15_g153327.PivotWS;
				Out_PivotWO15_g153327 = Data15_g153327.PivotWO;
				Out_NormalWS15_g153327 = Data15_g153327.NormalWS;
				Out_ViewDirWS15_g153327 = Data15_g153327.ViewDirWS;
				Out_VertexData15_g153327 = Data15_g153327.VertexData;
				Out_BoundsData15_g153327 = Data15_g153327.BoundsData;
				half4 Model_VertexMasks791_g153292 = Out_VertexData15_g153327;
				float4 break792_g153292 = Model_VertexMasks791_g153292;
				float4 break33_g153305 = _overlay_vert_mode;
				float temp_output_30_0_g153305 = ( break792_g153292.x * break33_g153305.x );
				float temp_output_29_0_g153305 = ( break792_g153292.y * break33_g153305.y );
				float temp_output_31_0_g153305 = ( break792_g153292.z * break33_g153305.z );
				float temp_output_28_0_g153305 = ( temp_output_30_0_g153305 + temp_output_29_0_g153305 + temp_output_31_0_g153305 + ( break792_g153292.w * break33_g153305.w ) );
				float clampResult17_g153306 = clamp( temp_output_28_0_g153305 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153309 = _OverlayMeshRemap.x;
				float temp_output_10_0_g153309 = ( _OverlayMeshRemap.y - temp_output_7_0_g153309 );
				float lerpResult881_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153306 - temp_output_7_0_g153309 ) / ( temp_output_10_0_g153309 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g153316 = lerpResult881_g153292;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153316 = ( temp_output_6_0_g153316 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153316 = temp_output_6_0_g153316;
				#endif
				float temp_output_831_0_g153292 = staticSwitch14_g153316;
				half Overlay_VertMask801_g153292 = temp_output_831_0_g153292;
				half Overlay_MaskNoise427_g153292 = 1.0;
				TVEGlobalData Data15_g153294 = Data204_g153153;
				float Out_Dummy15_g153294 = 0;
				float4 Out_CoatParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153294 = float4( 0,0,0,0 );
				Out_Dummy15_g153294 = Data15_g153294.Dummy;
				Out_CoatParams15_g153294 = Data15_g153294.CoatParams;
				Out_PaintParams15_g153294 = Data15_g153294.PaintParams;
				Out_GlowParams15_g153294 = Data15_g153294.GlowParams;
				Out_AtmoParams15_g153294= Data15_g153294.AtmoParams;
				Out_FadeParams15_g153294= Data15_g153294.FadeParams;
				Out_FormParams15_g153294 = Data15_g153294.FormParams;
				Out_LandParams15_g153294 = Data15_g153294.LandParams;
				Out_WindParams15_g153294 = Data15_g153294.WindParams;
				Out_PushParams15_g153294 = Data15_g153294.PushParams;
				half4 Global_AtmoParams516_g153292 = Out_AtmoParams15_g153294;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g153292 = ( (Global_AtmoParams516_g153292).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g153292 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g153292 = staticSwitch705_g153292;
				half Custom_Mask646_g153292 = 1.0;
				float temp_output_7_0_g153321 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g153321 = ( _OverlayBlendRemap1.y - temp_output_7_0_g153321 );
				half Overlay_Mask494_g153292 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g153292 * Overlay_MaskProj457_g153292 * Overlay_MaskLuma438_g153292 * Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 * Custom_Mask646_g153292 ) - temp_output_7_0_g153321 ) / ( temp_output_10_0_g153321 + 0.0001 ) ) );
				float3 lerpResult467_g153292 = lerp( Visual_Albedo127_g153292 , temp_output_622_0_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g153292 = lerpResult467_g153292;
				#else
				float3 staticSwitch577_g153292 = Visual_Albedo127_g153292;
				#endif
				half3 Final_Albedo493_g153292 = staticSwitch577_g153292;
				float3 In_Albedo3_g153295 = Final_Albedo493_g153292;
				float3 In_AlbedoRaw3_g153295 = Out_AlbedoRaw4_g153293;
				half2 Visual_NormalTS535_g153292 = Out_NormalTS4_g153293;
				float2 lerpResult551_g153292 = lerp( Visual_NormalTS535_g153292 , ( Visual_NormalTS535_g153292 * _OverlayNormalValue ) , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g153292 = lerpResult551_g153292;
				#else
				float2 staticSwitch583_g153292 = Visual_NormalTS535_g153292;
				#endif
				half2 Final_NormalTS499_g153292 = staticSwitch583_g153292;
				float2 In_NormalTS3_g153295 = Final_NormalTS499_g153292;
				float3 In_NormalWS3_g153295 = temp_output_739_21_g153292;
				half4 Visual_Masks536_g153292 = Out_Shader4_g153293;
				float4 appendResult585_g153292 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g153292 = lerp( Visual_Masks536_g153292 , appendResult585_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g153292 = lerpResult584_g153292;
				#else
				float4 staticSwitch586_g153292 = Visual_Masks536_g153292;
				#endif
				half4 Final_Masks482_g153292 = staticSwitch586_g153292;
				float4 In_Shader3_g153295 = Final_Masks482_g153292;
				float4 In_Emissive3_g153295 = Out_Emissive4_g153293;
				float temp_output_739_12_g153292 = Out_Grayscale4_g153293;
				float In_Grayscale3_g153295 = temp_output_739_12_g153292;
				float In_Luminosity3_g153295 = temp_output_739_15_g153292;
				float In_MultiMask3_g153295 = Out_MultiMask4_g153293;
				float In_AlphaClip3_g153295 = Out_AlphaClip4_g153293;
				float In_AlphaFade3_g153295 = Out_AlphaFade4_g153293;
				float3 In_Translucency3_g153295 = Out_Translucency4_g153293;
				half Visual_Transmission699_g153292 = Out_Transmission4_g153293;
				float lerpResult746_g153292 = lerp( Visual_Transmission699_g153292 , ( Visual_Transmission699_g153292 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g153292 = lerpResult746_g153292;
				#else
				float staticSwitch703_g153292 = Visual_Transmission699_g153292;
				#endif
				half Final_Transmission702_g153292 = staticSwitch703_g153292;
				float In_Transmission3_g153295 = Final_Transmission702_g153292;
				float In_Thickness3_g153295 = Out_Thickness4_g153293;
				float In_Diffusion3_g153295 = Out_Diffusion4_g153293;
				Data3_g153295.Dummy = In_Dummy3_g153295;
				Data3_g153295.Albedo = In_Albedo3_g153295;
				Data3_g153295.AlbedoRaw = In_AlbedoRaw3_g153295;
				Data3_g153295.NormalTS = In_NormalTS3_g153295;
				Data3_g153295.NormalWS = In_NormalWS3_g153295;
				Data3_g153295.Shader = In_Shader3_g153295;
				Data3_g153295.Emissive= In_Emissive3_g153295;
				Data3_g153295.MultiMask = In_MultiMask3_g153295;
				Data3_g153295.Grayscale = In_Grayscale3_g153295;
				Data3_g153295.Luminosity = In_Luminosity3_g153295;
				Data3_g153295.AlphaClip = In_AlphaClip3_g153295;
				Data3_g153295.AlphaFade = In_AlphaFade3_g153295;
				Data3_g153295.Translucency = In_Translucency3_g153295;
				Data3_g153295.Transmission = In_Transmission3_g153295;
				Data3_g153295.Thickness = In_Thickness3_g153295;
				Data3_g153295.Diffusion = In_Diffusion3_g153295;
				TVEVisualData Data4_g153329 = Data3_g153295;
				float Out_Dummy4_g153329 = 0;
				float3 Out_Albedo4_g153329 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153329 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153329 = float2( 0,0 );
				float3 Out_NormalWS4_g153329 = float3( 0,0,0 );
				float4 Out_Shader4_g153329 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153329 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153329 = 0;
				float Out_Grayscale4_g153329 = 0;
				float Out_Luminosity4_g153329 = 0;
				float Out_AlphaClip4_g153329 = 0;
				float Out_AlphaFade4_g153329 = 0;
				float3 Out_Translucency4_g153329 = float3( 0,0,0 );
				float Out_Transmission4_g153329 = 0;
				float Out_Thickness4_g153329 = 0;
				float Out_Diffusion4_g153329 = 0;
				Out_Dummy4_g153329 = Data4_g153329.Dummy;
				Out_Albedo4_g153329 = Data4_g153329.Albedo;
				Out_AlbedoRaw4_g153329 = Data4_g153329.AlbedoRaw;
				Out_NormalTS4_g153329 = Data4_g153329.NormalTS;
				Out_NormalWS4_g153329 = Data4_g153329.NormalWS;
				Out_Shader4_g153329 = Data4_g153329.Shader;
				Out_Emissive4_g153329= Data4_g153329.Emissive;
				Out_MultiMask4_g153329 = Data4_g153329.MultiMask;
				Out_Grayscale4_g153329 = Data4_g153329.Grayscale;
				Out_Luminosity4_g153329= Data4_g153329.Luminosity;
				Out_AlphaClip4_g153329 = Data4_g153329.AlphaClip;
				Out_AlphaFade4_g153329 = Data4_g153329.AlphaFade;
				Out_Translucency4_g153329 = Data4_g153329.Translucency;
				Out_Transmission4_g153329 = Data4_g153329.Transmission;
				Out_Thickness4_g153329 = Data4_g153329.Thickness;
				Out_Diffusion4_g153329 = Data4_g153329.Diffusion;
				half3 Visual_Albedo127_g153328 = Out_Albedo4_g153329;
				float3 lerpResult768_g153328 = lerp( Visual_Albedo127_g153328 , ( Visual_Albedo127_g153328 * Visual_Albedo127_g153328 ) , _WetnessContrastValue);
				TVEGlobalData Data15_g153334 = Data204_g153153;
				float Out_Dummy15_g153334 = 0;
				float4 Out_CoatParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153334 = float4( 0,0,0,0 );
				Out_Dummy15_g153334 = Data15_g153334.Dummy;
				Out_CoatParams15_g153334 = Data15_g153334.CoatParams;
				Out_PaintParams15_g153334 = Data15_g153334.PaintParams;
				Out_GlowParams15_g153334 = Data15_g153334.GlowParams;
				Out_AtmoParams15_g153334= Data15_g153334.AtmoParams;
				Out_FadeParams15_g153334= Data15_g153334.FadeParams;
				Out_FormParams15_g153334 = Data15_g153334.FormParams;
				Out_LandParams15_g153334 = Data15_g153334.LandParams;
				Out_WindParams15_g153334 = Data15_g153334.WindParams;
				Out_PushParams15_g153334 = Data15_g153334.PushParams;
				half4 Global_AtmoParams516_g153328 = Out_AtmoParams15_g153334;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g153328 = ( (Global_AtmoParams516_g153328).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g153328 = 1.0;
				#endif
				half Global_Wetness429_g153328 = staticSwitch663_g153328;
				half Wetness_Value1042_g153328 = ( _WetnessIntensityValue * Global_Wetness429_g153328 );
				half Wetness_VertMask1024_g153328 = 1.0;
				float temp_output_1043_0_g153328 = ( Wetness_Value1042_g153328 * Wetness_VertMask1024_g153328 );
				half Wetness_Mask866_g153328 = temp_output_1043_0_g153328;
				float3 lerpResult651_g153328 = lerp( Visual_Albedo127_g153328 , lerpResult768_g153328 , Wetness_Mask866_g153328);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g153328 = lerpResult651_g153328;
				#else
				float3 staticSwitch577_g153328 = Visual_Albedo127_g153328;
				#endif
				half3 Final_Albedo493_g153328 = staticSwitch577_g153328;
				float3 In_Albedo3_g153330 = Final_Albedo493_g153328;
				float3 In_AlbedoRaw3_g153330 = Out_AlbedoRaw4_g153329;
				half2 Visual_Normal535_g153328 = Out_NormalTS4_g153329;
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#else
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#endif
				half2 Final_Normal499_g153328 = staticSwitch774_g153328;
				float2 In_NormalTS3_g153330 = Final_Normal499_g153328;
				float3 In_NormalWS3_g153330 = Out_NormalWS4_g153329;
				half4 Visual_Masks536_g153328 = Out_Shader4_g153329;
				float4 break658_g153328 = Visual_Masks536_g153328;
				float temp_output_935_0_g153328 = ( Wetness_Mask866_g153328 * _WetnessSmoothnessValue );
				float4 appendResult661_g153328 = (float4(break658_g153328.x , break658_g153328.y , break658_g153328.z , saturate( ( break658_g153328.w + temp_output_935_0_g153328 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g153328 = appendResult661_g153328;
				#else
				float4 staticSwitch586_g153328 = Visual_Masks536_g153328;
				#endif
				half4 Final_Masks482_g153328 = staticSwitch586_g153328;
				float4 In_Shader3_g153330 = Final_Masks482_g153328;
				float4 In_Emissive3_g153330 = Out_Emissive4_g153329;
				float In_Grayscale3_g153330 = Out_Grayscale4_g153329;
				float In_Luminosity3_g153330 = Out_Luminosity4_g153329;
				float In_MultiMask3_g153330 = Out_MultiMask4_g153329;
				float In_AlphaClip3_g153330 = Out_AlphaClip4_g153329;
				float In_AlphaFade3_g153330 = Out_AlphaFade4_g153329;
				float3 In_Translucency3_g153330 = Out_Translucency4_g153329;
				float In_Transmission3_g153330 = Out_Transmission4_g153329;
				float In_Thickness3_g153330 = Out_Thickness4_g153329;
				float In_Diffusion3_g153330 = Out_Diffusion4_g153329;
				Data3_g153330.Dummy = In_Dummy3_g153330;
				Data3_g153330.Albedo = In_Albedo3_g153330;
				Data3_g153330.AlbedoRaw = In_AlbedoRaw3_g153330;
				Data3_g153330.NormalTS = In_NormalTS3_g153330;
				Data3_g153330.NormalWS = In_NormalWS3_g153330;
				Data3_g153330.Shader = In_Shader3_g153330;
				Data3_g153330.Emissive= In_Emissive3_g153330;
				Data3_g153330.MultiMask = In_MultiMask3_g153330;
				Data3_g153330.Grayscale = In_Grayscale3_g153330;
				Data3_g153330.Luminosity = In_Luminosity3_g153330;
				Data3_g153330.AlphaClip = In_AlphaClip3_g153330;
				Data3_g153330.AlphaFade = In_AlphaFade3_g153330;
				Data3_g153330.Translucency = In_Translucency3_g153330;
				Data3_g153330.Transmission = In_Transmission3_g153330;
				Data3_g153330.Thickness = In_Thickness3_g153330;
				Data3_g153330.Diffusion = In_Diffusion3_g153330;
				TVEVisualData Data4_g153368 = Data3_g153330;
				float Out_Dummy4_g153368 = 0;
				float3 Out_Albedo4_g153368 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153368 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153368 = float2( 0,0 );
				float3 Out_NormalWS4_g153368 = float3( 0,0,0 );
				float4 Out_Shader4_g153368 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153368 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153368 = 0;
				float Out_Grayscale4_g153368 = 0;
				float Out_Luminosity4_g153368 = 0;
				float Out_AlphaClip4_g153368 = 0;
				float Out_AlphaFade4_g153368 = 0;
				float3 Out_Translucency4_g153368 = float3( 0,0,0 );
				float Out_Transmission4_g153368 = 0;
				float Out_Thickness4_g153368 = 0;
				float Out_Diffusion4_g153368 = 0;
				Out_Dummy4_g153368 = Data4_g153368.Dummy;
				Out_Albedo4_g153368 = Data4_g153368.Albedo;
				Out_AlbedoRaw4_g153368 = Data4_g153368.AlbedoRaw;
				Out_NormalTS4_g153368 = Data4_g153368.NormalTS;
				Out_NormalWS4_g153368 = Data4_g153368.NormalWS;
				Out_Shader4_g153368 = Data4_g153368.Shader;
				Out_Emissive4_g153368= Data4_g153368.Emissive;
				Out_MultiMask4_g153368 = Data4_g153368.MultiMask;
				Out_Grayscale4_g153368 = Data4_g153368.Grayscale;
				Out_Luminosity4_g153368= Data4_g153368.Luminosity;
				Out_AlphaClip4_g153368 = Data4_g153368.AlphaClip;
				Out_AlphaFade4_g153368 = Data4_g153368.AlphaFade;
				Out_Translucency4_g153368 = Data4_g153368.Translucency;
				Out_Transmission4_g153368 = Data4_g153368.Transmission;
				Out_Thickness4_g153368 = Data4_g153368.Thickness;
				Out_Diffusion4_g153368 = Data4_g153368.Diffusion;
				float3 In_Albedo3_g153358 = Out_Albedo4_g153368;
				float3 In_AlbedoRaw3_g153358 = Out_AlbedoRaw4_g153368;
				float2 In_NormalTS3_g153358 = Out_NormalTS4_g153368;
				float3 In_NormalWS3_g153358 = Out_NormalWS4_g153368;
				float4 In_Shader3_g153358 = Out_Shader4_g153368;
				float4 In_Emissive3_g153358 = Out_Emissive4_g153368;
				float In_Grayscale3_g153358 = Out_Grayscale4_g153368;
				float In_Luminosity3_g153358 = Out_Luminosity4_g153368;
				float temp_output_836_11_g153357 = Out_MultiMask4_g153368;
				float In_MultiMask3_g153358 = temp_output_836_11_g153357;
				half Visual_AlphaClip667_g153357 = Out_AlphaClip4_g153368;
				half Input_True57_g153365 = Visual_AlphaClip667_g153357;
				half True36_g153365 = Input_True57_g153365;
				TVEGlobalData Data15_g153367 = Data204_g153153;
				float Out_Dummy15_g153367 = 0;
				float4 Out_CoatParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153367 = float4( 0,0,0,0 );
				Out_Dummy15_g153367 = Data15_g153367.Dummy;
				Out_CoatParams15_g153367 = Data15_g153367.CoatParams;
				Out_PaintParams15_g153367 = Data15_g153367.PaintParams;
				Out_GlowParams15_g153367 = Data15_g153367.GlowParams;
				Out_AtmoParams15_g153367= Data15_g153367.AtmoParams;
				Out_FadeParams15_g153367= Data15_g153367.FadeParams;
				Out_FormParams15_g153367 = Data15_g153367.FormParams;
				Out_LandParams15_g153367 = Data15_g153367.LandParams;
				Out_WindParams15_g153367 = Data15_g153367.WindParams;
				Out_PushParams15_g153367 = Data15_g153367.PushParams;
				half4 Global_FadeParams516_g153357 = Out_FadeParams15_g153367;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g153357 = saturate( (Global_FadeParams516_g153357).w );
				#else
				float staticSwitch663_g153357 = 1.0;
				#endif
				half Local_GlobalMask429_g153357 = staticSwitch663_g153357;
				half Local_AlphaMask814_g153357 = 1.0;
				TVEModelData Data15_g153369 = Data16_g153151;
				float Out_Dummy15_g153369 = 0;
				float3 Out_PositionWS15_g153369 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153369 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153369 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153369 = float3( 0,0,0 );
				float4 Out_VertexData15_g153369 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153369 = float4( 0,0,0,0 );
				Out_Dummy15_g153369 = Data15_g153369.Dummy;
				Out_PositionWS15_g153369 = Data15_g153369.PositionWS;
				Out_PositionWO15_g153369 = Data15_g153369.PositionWO;
				Out_PivotWS15_g153369 = Data15_g153369.PivotWS;
				Out_PivotWO15_g153369 = Data15_g153369.PivotWO;
				Out_NormalWS15_g153369 = Data15_g153369.NormalWS;
				Out_ViewDirWS15_g153369 = Data15_g153369.ViewDirWS;
				Out_VertexData15_g153369 = Data15_g153369.VertexData;
				Out_BoundsData15_g153369 = Data15_g153369.BoundsData;
				half3 Model_PositionWO602_g153357 = Out_PositionWO15_g153369;
				float4 tex3DNode60_g153361 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g153357 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g153357 = lerp( 1.0 , tex3DNode60_g153361.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g153357 = lerpResult673_g153357;
				half4 Model_VertexMasks752_g153357 = Out_VertexData15_g153369;
				float4 break755_g153357 = Model_VertexMasks752_g153357;
				float4 break33_g153359 = _cutout_vert_mode;
				float temp_output_30_0_g153359 = ( break755_g153357.x * break33_g153359.x );
				float temp_output_29_0_g153359 = ( break755_g153357.y * break33_g153359.y );
				float temp_output_31_0_g153359 = ( break755_g153357.z * break33_g153359.z );
				float temp_output_28_0_g153359 = ( temp_output_30_0_g153359 + temp_output_29_0_g153359 + temp_output_31_0_g153359 + ( break755_g153357.w * break33_g153359.w ) );
				float clampResult17_g153360 = clamp( temp_output_28_0_g153359 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153363 = _CutoutMeshRemap.x;
				float temp_output_10_0_g153363 = ( _CutoutMeshRemap.y - temp_output_7_0_g153363 );
				float lerpResult820_g153357 = lerp( 1.0 , saturate( ( ( clampResult17_g153360 - temp_output_7_0_g153363 ) / ( temp_output_10_0_g153363 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g153364 = lerpResult820_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153364 = ( temp_output_6_0_g153364 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153364 = temp_output_6_0_g153364;
				#endif
				float temp_output_801_0_g153357 = staticSwitch14_g153364;
				half Local_VertMask766_g153357 = temp_output_801_0_g153357;
				half Visual_MultiMask671_g153357 = temp_output_836_11_g153357;
				float lerpResult683_g153357 = lerp( 1.0 , Visual_MultiMask671_g153357 , _CutoutMultiValue);
				half Local_MultiMask685_g153357 = lerpResult683_g153357;
				float lerpResult728_g153357 = lerp( Visual_AlphaClip667_g153357 , min( Visual_AlphaClip667_g153357 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g153357 ) - ( Local_AlphaMask814_g153357 * Local_NoiseMask678_g153357 * Local_VertMask766_g153357 ) ) ) ) , Local_MultiMask685_g153357);
				half Local_AlphaClip784_g153357 = lerpResult728_g153357;
				half Input_False58_g153365 = Local_AlphaClip784_g153357;
				half False36_g153365 = Input_False58_g153365;
				half localShadowPassCheck36_g153365 = ShadowPassCheck36_g153365( True36_g153365 , False36_g153365 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g153357 = Local_AlphaClip784_g153357;
				#else
				float staticSwitch791_g153357 = localShadowPassCheck36_g153365;
				#endif
				float temp_output_6_0_g153366 = staticSwitch791_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153366 = ( temp_output_6_0_g153366 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153366 = temp_output_6_0_g153366;
				#endif
				float temp_output_798_0_g153357 = staticSwitch14_g153366;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g153357 = temp_output_798_0_g153357;
				#else
				float staticSwitch577_g153357 = Visual_AlphaClip667_g153357;
				#endif
				half Final_AlphaClip795_g153357 = staticSwitch577_g153357;
				float In_AlphaClip3_g153358 = Final_AlphaClip795_g153357;
				float In_AlphaFade3_g153358 = Out_AlphaFade4_g153368;
				float3 In_Translucency3_g153358 = Out_Translucency4_g153368;
				float In_Transmission3_g153358 = Out_Transmission4_g153368;
				float In_Thickness3_g153358 = Out_Thickness4_g153368;
				float In_Diffusion3_g153358 = Out_Diffusion4_g153368;
				Data3_g153358.Dummy = In_Dummy3_g153358;
				Data3_g153358.Albedo = In_Albedo3_g153358;
				Data3_g153358.AlbedoRaw = In_AlbedoRaw3_g153358;
				Data3_g153358.NormalTS = In_NormalTS3_g153358;
				Data3_g153358.NormalWS = In_NormalWS3_g153358;
				Data3_g153358.Shader = In_Shader3_g153358;
				Data3_g153358.Emissive= In_Emissive3_g153358;
				Data3_g153358.MultiMask = In_MultiMask3_g153358;
				Data3_g153358.Grayscale = In_Grayscale3_g153358;
				Data3_g153358.Luminosity = In_Luminosity3_g153358;
				Data3_g153358.AlphaClip = In_AlphaClip3_g153358;
				Data3_g153358.AlphaFade = In_AlphaFade3_g153358;
				Data3_g153358.Translucency = In_Translucency3_g153358;
				Data3_g153358.Transmission = In_Transmission3_g153358;
				Data3_g153358.Thickness = In_Thickness3_g153358;
				Data3_g153358.Diffusion = In_Diffusion3_g153358;
				TVEVisualData Data4_g153372 = Data3_g153358;
				float Out_Dummy4_g153372 = 0;
				float3 Out_Albedo4_g153372 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153372 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153372 = float2( 0,0 );
				float3 Out_NormalWS4_g153372 = float3( 0,0,0 );
				float4 Out_Shader4_g153372 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153372 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153372 = 0;
				float Out_Grayscale4_g153372 = 0;
				float Out_Luminosity4_g153372 = 0;
				float Out_AlphaClip4_g153372 = 0;
				float Out_AlphaFade4_g153372 = 0;
				float3 Out_Translucency4_g153372 = float3( 0,0,0 );
				float Out_Transmission4_g153372 = 0;
				float Out_Thickness4_g153372 = 0;
				float Out_Diffusion4_g153372 = 0;
				Out_Dummy4_g153372 = Data4_g153372.Dummy;
				Out_Albedo4_g153372 = Data4_g153372.Albedo;
				Out_AlbedoRaw4_g153372 = Data4_g153372.AlbedoRaw;
				Out_NormalTS4_g153372 = Data4_g153372.NormalTS;
				Out_NormalWS4_g153372 = Data4_g153372.NormalWS;
				Out_Shader4_g153372 = Data4_g153372.Shader;
				Out_Emissive4_g153372= Data4_g153372.Emissive;
				Out_MultiMask4_g153372 = Data4_g153372.MultiMask;
				Out_Grayscale4_g153372 = Data4_g153372.Grayscale;
				Out_Luminosity4_g153372= Data4_g153372.Luminosity;
				Out_AlphaClip4_g153372 = Data4_g153372.AlphaClip;
				Out_AlphaFade4_g153372 = Data4_g153372.AlphaFade;
				Out_Translucency4_g153372 = Data4_g153372.Translucency;
				Out_Transmission4_g153372 = Data4_g153372.Transmission;
				Out_Thickness4_g153372 = Data4_g153372.Thickness;
				Out_Diffusion4_g153372 = Data4_g153372.Diffusion;
				float3 In_Albedo3_g153373 = Out_Albedo4_g153372;
				float3 In_AlbedoRaw3_g153373 = Out_AlbedoRaw4_g153372;
				float2 In_NormalTS3_g153373 = Out_NormalTS4_g153372;
				float3 In_NormalWS3_g153373 = Out_NormalWS4_g153372;
				float4 In_Shader3_g153373 = Out_Shader4_g153372;
				float4 In_Emissive3_g153373 = Out_Emissive4_g153372;
				float In_Grayscale3_g153373 = Out_Grayscale4_g153372;
				float In_Luminosity3_g153373 = Out_Luminosity4_g153372;
				float temp_output_821_11_g153370 = Out_MultiMask4_g153372;
				float In_MultiMask3_g153373 = temp_output_821_11_g153370;
				half Visual_AlphaClip754_g153370 = Out_AlphaClip4_g153372;
				half Input_True57_g153374 = Visual_AlphaClip754_g153370;
				half True36_g153374 = Input_True57_g153374;
				half Dither_Constant768_g153370 = _DitherConstantValue;
				TVEModelData Data15_g153379 = Data16_g153151;
				float Out_Dummy15_g153379 = 0;
				float3 Out_PositionWS15_g153379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153379 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153379 = float3( 0,0,0 );
				float4 Out_VertexData15_g153379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153379 = float4( 0,0,0,0 );
				Out_Dummy15_g153379 = Data15_g153379.Dummy;
				Out_PositionWS15_g153379 = Data15_g153379.PositionWS;
				Out_PositionWO15_g153379 = Data15_g153379.PositionWO;
				Out_PivotWS15_g153379 = Data15_g153379.PivotWS;
				Out_PivotWO15_g153379 = Data15_g153379.PivotWO;
				Out_NormalWS15_g153379 = Data15_g153379.NormalWS;
				Out_ViewDirWS15_g153379 = Data15_g153379.ViewDirWS;
				Out_VertexData15_g153379 = Data15_g153379.VertexData;
				Out_BoundsData15_g153379 = Data15_g153379.BoundsData;
				half3 Model_PositionWS776_g153370 = Out_PositionWS15_g153379;
				float temp_output_7_0_g153378 = _DitherDistanceMinValue;
				float temp_output_10_0_g153378 = ( _DitherDistanceMaxValue - temp_output_7_0_g153378 );
				half Dither_Distance856_g153370 = ( saturate( ( ( distance( Model_PositionWS776_g153370 , _WorldSpaceCameraPos ) - temp_output_7_0_g153378 ) / ( temp_output_10_0_g153378 + 0.0001 ) ) ) * _DitherDistanceValue );
				half Dither_Value429_g153370 = max( Dither_Constant768_g153370 , Dither_Distance856_g153370 );
				half3 Model_PositionWO602_g153370 = Out_PositionWO15_g153379;
				float4 tex3DNode60_g153376 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g153370 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g153370 = tex3DNode60_g153376.r;
				half Local_MaskNoise678_g153370 = temp_output_809_0_g153370;
				half Visual_MultiMask671_g153370 = temp_output_821_11_g153370;
				float lerpResult683_g153370 = lerp( 1.0 , Visual_MultiMask671_g153370 , _DitherMultiValue);
				half Local_MaskMulti685_g153370 = lerpResult683_g153370;
				half Custom_Mask826_g153370 = 1.0;
				float lerpResult728_g153370 = lerp( Visual_AlphaClip754_g153370 , min( Visual_AlphaClip754_g153370 , ( -0.001 - ( Dither_Value429_g153370 - Local_MaskNoise678_g153370 ) ) ) , ( Local_MaskMulti685_g153370 * Custom_Mask826_g153370 ));
				half Local_AlphaClip834_g153370 = lerpResult728_g153370;
				half Input_False58_g153374 = Local_AlphaClip834_g153370;
				half False36_g153374 = Input_False58_g153374;
				half localShadowPassCheck36_g153374 = ShadowPassCheck36_g153374( True36_g153374 , False36_g153374 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g153370 = Local_AlphaClip834_g153370;
				#else
				float staticSwitch831_g153370 = localShadowPassCheck36_g153374;
				#endif
				float temp_output_6_0_g153375 = staticSwitch831_g153370;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153375 = ( temp_output_6_0_g153375 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153375 = temp_output_6_0_g153375;
				#endif
				float temp_output_840_0_g153370 = staticSwitch14_g153375;
				#ifdef TVE_DITHER
				float staticSwitch577_g153370 = temp_output_840_0_g153370;
				#else
				float staticSwitch577_g153370 = Visual_AlphaClip754_g153370;
				#endif
				half Final_AlphaClip493_g153370 = staticSwitch577_g153370;
				float In_AlphaClip3_g153373 = Final_AlphaClip493_g153370;
				float In_AlphaFade3_g153373 = Out_AlphaFade4_g153372;
				float3 In_Translucency3_g153373 = Out_Translucency4_g153372;
				float In_Transmission3_g153373 = Out_Transmission4_g153372;
				float In_Thickness3_g153373 = Out_Thickness4_g153372;
				float In_Diffusion3_g153373 = Out_Diffusion4_g153372;
				Data3_g153373.Dummy = In_Dummy3_g153373;
				Data3_g153373.Albedo = In_Albedo3_g153373;
				Data3_g153373.AlbedoRaw = In_AlbedoRaw3_g153373;
				Data3_g153373.NormalTS = In_NormalTS3_g153373;
				Data3_g153373.NormalWS = In_NormalWS3_g153373;
				Data3_g153373.Shader = In_Shader3_g153373;
				Data3_g153373.Emissive= In_Emissive3_g153373;
				Data3_g153373.MultiMask = In_MultiMask3_g153373;
				Data3_g153373.Grayscale = In_Grayscale3_g153373;
				Data3_g153373.Luminosity = In_Luminosity3_g153373;
				Data3_g153373.AlphaClip = In_AlphaClip3_g153373;
				Data3_g153373.AlphaFade = In_AlphaFade3_g153373;
				Data3_g153373.Translucency = In_Translucency3_g153373;
				Data3_g153373.Transmission = In_Transmission3_g153373;
				Data3_g153373.Thickness = In_Thickness3_g153373;
				Data3_g153373.Diffusion = In_Diffusion3_g153373;
				TVEVisualData Data4_g153398 = Data3_g153373;
				float Out_Dummy4_g153398 = 0;
				float3 Out_Albedo4_g153398 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153398 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153398 = float2( 0,0 );
				float3 Out_NormalWS4_g153398 = float3( 0,0,0 );
				float4 Out_Shader4_g153398 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153398 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153398 = 0;
				float Out_Grayscale4_g153398 = 0;
				float Out_Luminosity4_g153398 = 0;
				float Out_AlphaClip4_g153398 = 0;
				float Out_AlphaFade4_g153398 = 0;
				float3 Out_Translucency4_g153398 = float3( 0,0,0 );
				float Out_Transmission4_g153398 = 0;
				float Out_Thickness4_g153398 = 0;
				float Out_Diffusion4_g153398 = 0;
				Out_Dummy4_g153398 = Data4_g153398.Dummy;
				Out_Albedo4_g153398 = Data4_g153398.Albedo;
				Out_AlbedoRaw4_g153398 = Data4_g153398.AlbedoRaw;
				Out_NormalTS4_g153398 = Data4_g153398.NormalTS;
				Out_NormalWS4_g153398 = Data4_g153398.NormalWS;
				Out_Shader4_g153398 = Data4_g153398.Shader;
				Out_Emissive4_g153398= Data4_g153398.Emissive;
				Out_MultiMask4_g153398 = Data4_g153398.MultiMask;
				Out_Grayscale4_g153398 = Data4_g153398.Grayscale;
				Out_Luminosity4_g153398= Data4_g153398.Luminosity;
				Out_AlphaClip4_g153398 = Data4_g153398.AlphaClip;
				Out_AlphaFade4_g153398 = Data4_g153398.AlphaFade;
				Out_Translucency4_g153398 = Data4_g153398.Translucency;
				Out_Transmission4_g153398 = Data4_g153398.Transmission;
				Out_Thickness4_g153398 = Data4_g153398.Thickness;
				Out_Diffusion4_g153398 = Data4_g153398.Diffusion;
				float3 temp_output_297_0_g153389 = Out_Albedo4_g153398;
				float3 In_Albedo3_g153399 = temp_output_297_0_g153389;
				float3 temp_output_297_23_g153389 = Out_AlbedoRaw4_g153398;
				float3 In_AlbedoRaw3_g153399 = temp_output_297_23_g153389;
				float2 In_NormalTS3_g153399 = Out_NormalTS4_g153398;
				float3 In_NormalWS3_g153399 = Out_NormalWS4_g153398;
				float4 In_Shader3_g153399 = Out_Shader4_g153398;
				float4 temp_cast_51 = (0.0).xxxx;
				half4 Visual_Emissive255_g153389 = Out_Emissive4_g153398;
				half Emissive_MeshMask221_g153389 = 1.0;
				half Emissive_Mask103_g153389 = 1.0;
				float temp_output_279_0_g153389 = ( Emissive_MeshMask221_g153389 * Emissive_Mask103_g153389 );
				float3 appendResult293_g153389 = (float3(temp_output_279_0_g153389 , temp_output_279_0_g153389 , temp_output_279_0_g153389));
				half3 Local_EmissiveColor278_g153389 = appendResult293_g153389;
				float3 temp_cast_52 = (1.0).xxx;
				TVEGlobalData Data15_g153390 = Data204_g153153;
				float Out_Dummy15_g153390 = 0;
				float4 Out_CoatParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153390 = float4( 0,0,0,0 );
				Out_Dummy15_g153390 = Data15_g153390.Dummy;
				Out_CoatParams15_g153390 = Data15_g153390.CoatParams;
				Out_PaintParams15_g153390 = Data15_g153390.PaintParams;
				Out_GlowParams15_g153390 = Data15_g153390.GlowParams;
				Out_AtmoParams15_g153390= Data15_g153390.AtmoParams;
				Out_FadeParams15_g153390= Data15_g153390.FadeParams;
				Out_FormParams15_g153390 = Data15_g153390.FormParams;
				Out_LandParams15_g153390 = Data15_g153390.LandParams;
				Out_WindParams15_g153390 = Data15_g153390.WindParams;
				Out_PushParams15_g153390 = Data15_g153390.PushParams;
				half4 Global_GlowParams179_g153389 = Out_GlowParams15_g153390;
				float3 lerpResult299_g153389 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g153389).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g153389 = lerpResult299_g153389;
				#else
				float3 staticSwitch228_g153389 = temp_cast_52;
				#endif
				half3 Emissive_GlobalMask248_g153389 = staticSwitch228_g153389;
				half3 Visual_AlbedoRaw306_g153389 = temp_output_297_23_g153389;
				float3 lerpResult307_g153389 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g153389 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g153389 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g153389 * lerpResult307_g153389 );
				half3 Emissive_Blend260_g153389 = ( ( (Visual_Emissive255_g153389).xyz * Local_EmissiveColor278_g153389 ) * Local_EmissiveValue88_g153389 );
				float3 temp_output_3_0_g153403 = Emissive_Blend260_g153389;
				float temp_output_15_0_g153403 = _emissive_power_value;
				float3 hdEmission22_g153403 = ASEGetEmissionHDRColor(temp_output_3_0_g153403,temp_output_15_0_g153403,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g153389 = temp_output_279_0_g153389;
				float4 appendResult295_g153389 = (float4(hdEmission22_g153403 , Local_EmissiveMask294_g153389));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g153389 = appendResult295_g153389;
				#else
				float4 staticSwitch129_g153389 = temp_cast_51;
				#endif
				half4 Final_Emissive184_g153389 = staticSwitch129_g153389;
				float4 In_Emissive3_g153399 = Final_Emissive184_g153389;
				float In_Grayscale3_g153399 = Out_Grayscale4_g153398;
				float In_Luminosity3_g153399 = Out_Luminosity4_g153398;
				float temp_output_297_11_g153389 = Out_MultiMask4_g153398;
				float In_MultiMask3_g153399 = temp_output_297_11_g153389;
				float In_AlphaClip3_g153399 = Out_AlphaClip4_g153398;
				float In_AlphaFade3_g153399 = Out_AlphaFade4_g153398;
				float3 In_Translucency3_g153399 = Out_Translucency4_g153398;
				float In_Transmission3_g153399 = Out_Transmission4_g153398;
				float In_Thickness3_g153399 = Out_Thickness4_g153398;
				float In_Diffusion3_g153399 = Out_Diffusion4_g153398;
				Data3_g153399.Dummy = In_Dummy3_g153399;
				Data3_g153399.Albedo = In_Albedo3_g153399;
				Data3_g153399.AlbedoRaw = In_AlbedoRaw3_g153399;
				Data3_g153399.NormalTS = In_NormalTS3_g153399;
				Data3_g153399.NormalWS = In_NormalWS3_g153399;
				Data3_g153399.Shader = In_Shader3_g153399;
				Data3_g153399.Emissive= In_Emissive3_g153399;
				Data3_g153399.MultiMask = In_MultiMask3_g153399;
				Data3_g153399.Grayscale = In_Grayscale3_g153399;
				Data3_g153399.Luminosity = In_Luminosity3_g153399;
				Data3_g153399.AlphaClip = In_AlphaClip3_g153399;
				Data3_g153399.AlphaFade = In_AlphaFade3_g153399;
				Data3_g153399.Translucency = In_Translucency3_g153399;
				Data3_g153399.Transmission = In_Transmission3_g153399;
				Data3_g153399.Thickness = In_Thickness3_g153399;
				Data3_g153399.Diffusion = In_Diffusion3_g153399;
				TVEVisualData Data4_g153445 = Data3_g153399;
				float Out_Dummy4_g153445 = 0;
				float3 Out_Albedo4_g153445 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153445 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153445 = float2( 0,0 );
				float3 Out_NormalWS4_g153445 = float3( 0,0,0 );
				float4 Out_Shader4_g153445 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153445 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153445 = 0;
				float Out_Grayscale4_g153445 = 0;
				float Out_Luminosity4_g153445 = 0;
				float Out_AlphaClip4_g153445 = 0;
				float Out_AlphaFade4_g153445 = 0;
				float3 Out_Translucency4_g153445 = float3( 0,0,0 );
				float Out_Transmission4_g153445 = 0;
				float Out_Thickness4_g153445 = 0;
				float Out_Diffusion4_g153445 = 0;
				Out_Dummy4_g153445 = Data4_g153445.Dummy;
				Out_Albedo4_g153445 = Data4_g153445.Albedo;
				Out_AlbedoRaw4_g153445 = Data4_g153445.AlbedoRaw;
				Out_NormalTS4_g153445 = Data4_g153445.NormalTS;
				Out_NormalWS4_g153445 = Data4_g153445.NormalWS;
				Out_Shader4_g153445 = Data4_g153445.Shader;
				Out_Emissive4_g153445= Data4_g153445.Emissive;
				Out_MultiMask4_g153445 = Data4_g153445.MultiMask;
				Out_Grayscale4_g153445 = Data4_g153445.Grayscale;
				Out_Luminosity4_g153445= Data4_g153445.Luminosity;
				Out_AlphaClip4_g153445 = Data4_g153445.AlphaClip;
				Out_AlphaFade4_g153445 = Data4_g153445.AlphaFade;
				Out_Translucency4_g153445 = Data4_g153445.Translucency;
				Out_Transmission4_g153445 = Data4_g153445.Transmission;
				Out_Thickness4_g153445 = Data4_g153445.Thickness;
				Out_Diffusion4_g153445 = Data4_g153445.Diffusion;
				half3 Visual_Albedo199_g153444 = Out_Albedo4_g153445;
				half3 Final_Albedo312_g153444 = Visual_Albedo199_g153444;
				float3 In_Albedo3_g153446 = Final_Albedo312_g153444;
				float3 In_AlbedoRaw3_g153446 = Out_AlbedoRaw4_g153445;
				float2 In_NormalTS3_g153446 = Out_NormalTS4_g153445;
				float3 In_NormalWS3_g153446 = Out_NormalWS4_g153445;
				float4 In_Shader3_g153446 = Out_Shader4_g153445;
				float4 In_Emissive3_g153446 = Out_Emissive4_g153445;
				float In_Grayscale3_g153446 = Out_Grayscale4_g153445;
				float In_Luminosity3_g153446 = Out_Luminosity4_g153445;
				float temp_output_301_11_g153444 = Out_MultiMask4_g153445;
				float In_MultiMask3_g153446 = temp_output_301_11_g153444;
				float In_AlphaClip3_g153446 = Out_AlphaClip4_g153445;
				float In_AlphaFade3_g153446 = Out_AlphaFade4_g153445;
				float3 temp_cast_53 = (0.0).xxx;
				half3 Subsurface_Color264_g153444 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g153444 );
				half Visual_Transmission138_g153444 = Out_Transmission4_g153445;
				half Subsurface_Value268_g153444 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g153447 = Data204_g153153;
				float Out_Dummy15_g153447 = 0;
				float4 Out_CoatParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153447 = float4( 0,0,0,0 );
				Out_Dummy15_g153447 = Data15_g153447.Dummy;
				Out_CoatParams15_g153447 = Data15_g153447.CoatParams;
				Out_PaintParams15_g153447 = Data15_g153447.PaintParams;
				Out_GlowParams15_g153447 = Data15_g153447.GlowParams;
				Out_AtmoParams15_g153447= Data15_g153447.AtmoParams;
				Out_FadeParams15_g153447= Data15_g153447.FadeParams;
				Out_FormParams15_g153447 = Data15_g153447.FormParams;
				Out_LandParams15_g153447 = Data15_g153447.LandParams;
				Out_WindParams15_g153447 = Data15_g153447.WindParams;
				Out_PushParams15_g153447 = Data15_g153447.PushParams;
				half4 Global_GlowParams373_g153444 = Out_GlowParams15_g153447;
				float lerpResult403_g153444 = lerp( 1.0 , saturate( (Global_GlowParams373_g153444).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g153444 = lerpResult403_g153444;
				#else
				float staticSwitch367_g153444 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g153444 = staticSwitch367_g153444;
				half Visual_MultiMask292_g153444 = temp_output_301_11_g153444;
				float lerpResult293_g153444 = lerp( 1.0 , Visual_MultiMask292_g153444 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g153444 = lerpResult293_g153444;
				half Custom_Mask363_g153444 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g153444 = ( Visual_Transmission138_g153444 * Subsurface_Value268_g153444 * Subsurface_GlobalMask369_g153444 * Subsurface_MultiMask296_g153444 * Custom_Mask363_g153444 );
				#else
				float staticSwitch345_g153444 = 0.0;
				#endif
				half Final_Transmission269_g153444 = staticSwitch345_g153444;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g153444 = ( Subsurface_Color264_g153444 * Final_Transmission269_g153444 * 10.0 );
				#else
				float3 staticSwitch348_g153444 = temp_cast_53;
				#endif
				half3 Final_Translucency254_g153444 = staticSwitch348_g153444;
				float3 In_Translucency3_g153446 = Final_Translucency254_g153444;
				float In_Transmission3_g153446 = Final_Transmission269_g153444;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g153444 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g153444 = 1.0;
				#endif
				half Final_Thickness275_g153444 = staticSwitch351_g153444;
				float In_Thickness3_g153446 = Final_Thickness275_g153444;
				float Final_Diffusion340_g153444 = _SubsurfaceDiffusion;
				float In_Diffusion3_g153446 = Final_Diffusion340_g153444;
				Data3_g153446.Dummy = In_Dummy3_g153446;
				Data3_g153446.Albedo = In_Albedo3_g153446;
				Data3_g153446.AlbedoRaw = In_AlbedoRaw3_g153446;
				Data3_g153446.NormalTS = In_NormalTS3_g153446;
				Data3_g153446.NormalWS = In_NormalWS3_g153446;
				Data3_g153446.Shader = In_Shader3_g153446;
				Data3_g153446.Emissive= In_Emissive3_g153446;
				Data3_g153446.MultiMask = In_MultiMask3_g153446;
				Data3_g153446.Grayscale = In_Grayscale3_g153446;
				Data3_g153446.Luminosity = In_Luminosity3_g153446;
				Data3_g153446.AlphaClip = In_AlphaClip3_g153446;
				Data3_g153446.AlphaFade = In_AlphaFade3_g153446;
				Data3_g153446.Translucency = In_Translucency3_g153446;
				Data3_g153446.Transmission = In_Transmission3_g153446;
				Data3_g153446.Thickness = In_Thickness3_g153446;
				Data3_g153446.Diffusion = In_Diffusion3_g153446;
				TVEVisualData Data4_g153454 = Data3_g153446;
				float Out_Dummy4_g153454 = 0;
				float3 Out_Albedo4_g153454 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153454 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153454 = float2( 0,0 );
				float3 Out_NormalWS4_g153454 = float3( 0,0,0 );
				float4 Out_Shader4_g153454 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153454 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153454 = 0;
				float Out_Grayscale4_g153454 = 0;
				float Out_Luminosity4_g153454 = 0;
				float Out_AlphaClip4_g153454 = 0;
				float Out_AlphaFade4_g153454 = 0;
				float3 Out_Translucency4_g153454 = float3( 0,0,0 );
				float Out_Transmission4_g153454 = 0;
				float Out_Thickness4_g153454 = 0;
				float Out_Diffusion4_g153454 = 0;
				Out_Dummy4_g153454 = Data4_g153454.Dummy;
				Out_Albedo4_g153454 = Data4_g153454.Albedo;
				Out_AlbedoRaw4_g153454 = Data4_g153454.AlbedoRaw;
				Out_NormalTS4_g153454 = Data4_g153454.NormalTS;
				Out_NormalWS4_g153454 = Data4_g153454.NormalWS;
				Out_Shader4_g153454 = Data4_g153454.Shader;
				Out_Emissive4_g153454= Data4_g153454.Emissive;
				Out_MultiMask4_g153454 = Data4_g153454.MultiMask;
				Out_Grayscale4_g153454 = Data4_g153454.Grayscale;
				Out_Luminosity4_g153454= Data4_g153454.Luminosity;
				Out_AlphaClip4_g153454 = Data4_g153454.AlphaClip;
				Out_AlphaFade4_g153454 = Data4_g153454.AlphaFade;
				Out_Translucency4_g153454 = Data4_g153454.Translucency;
				Out_Transmission4_g153454 = Data4_g153454.Transmission;
				Out_Thickness4_g153454 = Data4_g153454.Thickness;
				Out_Diffusion4_g153454 = Data4_g153454.Diffusion;
				half3 Input_Albedo24_g153452 = Out_Albedo4_g153454;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g153452 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g153452 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g153452 = staticSwitch22_g153452;
				float4 break24_g153451 = Out_Shader4_g153454;
				half Metallic117_g153451 = break24_g153451.x;
				half Input_Metallic25_g153452 = Metallic117_g153451;
				half OneMinusReflectivity31_g153452 = ( (ColorSpaceDielectricSpec23_g153452).w - ( (ColorSpaceDielectricSpec23_g153452).w * Input_Metallic25_g153452 ) );
				float3 lerpResult87_g153451 = lerp( half3(1,0,0) , ( Input_Albedo24_g153452 * OneMinusReflectivity31_g153452 ) , _IsInitialized);
				
				float localCustomAlphaClip19_g153463 = ( 0.0 );
				float temp_output_3_0_g153463 = Out_AlphaClip4_g153454;
				float Alpha19_g153463 = temp_output_3_0_g153463;
				float temp_output_15_0_g153463 = 0.0;
				float Treshold19_g153463 = temp_output_15_0_g153463;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#else
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#endif
				

				surfaceDescription.Albedo = lerpResult87_g153451;
				o.Normal = Out_NormalWS4_g153454;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g153454).xyz;
				surfaceDescription.Smoothness = break24_g153451.w;
				surfaceDescription.Occlusion = break24_g153451.y;
				surfaceDescription.Alpha = Alpha19_g153463;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g153454;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3(1,1,1);
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g153454;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g153454;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3(1,0,0);
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				float4 bakedGI = float4( 0, 0, 0, 0 );

				packedInput.positionCS.zw = positionCS.zw;
				float3 positionRWS = positionWS;
				float3 normalWS = o.Normal;
				float4 tangentWS = packedInput.interp02.xyzw;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//input.worldToTangent = BuildWorldToTangent( tangentWS, normalWS );
				//#else
				input.tangentToWorld = BuildTangentToWorld( tangentWS, normalWS );
				//#endif
				input.texCoord1 = packedInput.interp03.xyzw;
				input.texCoord2 = packedInput.interp04.xyzw;

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );
				SurfaceData surfaceData;
				BuiltinData builtinData;

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir( input.positionRWS );

				GetSurfaceAndBuiltinData(surfaceDescription,input, normalizedWorldViewDir, posInput, surfaceData, builtinData);

				#ifdef CUSTOM_BAKED_GI
					BSDFData bsdfData = ConvertSurfaceDataToBSDFData( posInput.positionSS, surfaceData );
					half4 decodeInstructions = half4( LIGHTMAP_HDR_MULTIPLIER, LIGHTMAP_HDR_EXPONENT, 0.0h, 0.0h );
					builtinData.bakeDiffuseLighting = UnpackLightmapRGBM( bakedGI, decodeInstructions ) * EMISSIVE_RGBM_SCALE * bsdfData.diffuseColor;
				#endif

				ENCODE_INTO_GBUFFER(surfaceData, builtinData, posInput.positionSS, outGBuffer);

				outputDepth = posInput.deviceDepth;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }
			ColorMask 0

			HLSLPROGRAM
			#pragma shader_feature_local_fragment _DISABLE_DECALS
			#pragma shader_feature_local_fragment _DISABLE_SSR
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define _AMBIENT_OCCLUSION 1
			#define ASE_SRP_VERSION 170003
			#ifdef UNITY_COLORSPACE_GAMMA//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301)//AI_SRP
			#else//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.04, 0.04, 0.04, 1.0 - 0.04) //AI_SRP
			#endif//AI_SRP
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex Vert
			#pragma fragment Frag

			#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Wind.hlsl"
			//#endif
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"


			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#define T2W(var, index) var.worldToTangent[index]
			//#else
			#define T2W(var, index) var.tangentToWorld[index]
			//#endif

			int _ObjectId;
			int _PassValue;

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ai_ObjectToWorld GetObjectToWorldMatrix()
			#define ai_WorldToObject GetWorldToObjectMatrix()
			#define AI_INV_TWO_PI  INV_TWO_PI
			#define AI_PI          PI
			#define AI_INV_PI      INV_PI
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_fragment TVE_IMPOSTOR_MASK_OFF TVE_IMPOSTOR_MASK_DEFAULT TVE_IMPOSTOR_MASK_PACKED TVE_IMPOSTOR_MASK_SHADING
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				
			};

			struct PackedVaryingsMeshToPS
			{
				float4 positionCS : SV_Position;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				float4 UVsFrame122_g151868 : TEXCOORD0;
				float4 UVsFrame222_g151868 : TEXCOORD1;
				float4 UVsFrame322_g151868 : TEXCOORD2;
				float4 octaframe22_g151868 : TEXCOORD3;
				float4 viewPos22_g151868 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
			};

			CBUFFER_START( UnityPerMaterial )
			float4 _AI_SizeOffset;
			half4 _TintingBlendRemap;
			half4 _OverlayBlendRemap1;
			half4 _VariationColorTwo;
			half4 _VariationColorOne;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _ImpostorColor;
			half4 _VariationNoiseRemap;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _dryness_vert_mode;
			float4 _TintingColor;
			half4 _DrynessLumaRemap;
			half4 _TintingLumaRemap;
			float4 _DrynessColor;
			half4 _tinting_vert_mode;
			half4 _OverlayColor;
			half4 _ImpostorColorTwo;
			half4 _TintingMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _SubsurfaceColor;
			float3 _AI_Offset;
			half _TintingMultiValue;
			half _WetnessBakeInfo;
			half _TintingIntensityValue;
			half _TintingLumaValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _OverlayEnd;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _OverlaySpace;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _WetnessElementMode;
			half _TintingBakeInfo;
			half _OverlayElementMode;
			half _VariationNoiseTillingValue;
			half _VariationCategory;
			half _VariationEnd;
			half _TintingSpace;
			half _ImpostorColorMode;
			half _ImpostorMetallicValue;
			half _TintingEnd;
			half _OverlayBakeInfo;
			half _ImpostorSmoothnessValue;
			half _DrynessBakeInfo;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _VariationNoisePivotValue;
			half _DrynessCategory;
			half _TintingCategory;
			half _ImpostorOcclusionValue;
			half _ImpostorMaskOffInfo;
			half _TintingMeshMode;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutMeshValue;
			half _CutoutMeshMode;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _DitherConstantValue;
			half _DitherDistanceMinValue;
			half _CutoutIntensityValue;
			half _DitherDistanceMaxValue;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _EmissiveIntensityValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _SubsurfaceIntensityValue;
			half _DitherDistanceValue;
			half _TintingMeshValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessCategory;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _WetnessIntensityValue;
			half _DrynessSmoothnessValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayNormalValue;
			half _OverlaySmoothnessValue;
			half _OverlaySubsurfaceValue;
			half _DrynessSubsurfaceValue;
			half _CutoutBakeInfo;
			half _CutoutEnd;
			half _SubsurfaceMultiValue;
			half _ImpostorCategory;
			half _ImpostorEnd;
			half _IsImpostorShader;
			half _IsSubsurfaceShader;
			half _MotionWindCategory;
			half _MotionWindEnd;
			half _MotionInteractionCategory;
			half _InteractionInteractionEnd;
			half _MotionWindMode;
			half _MotionWindElementMode;
			half _MotionPushElementMode;
			half _MotionWindOffInfo;
			half _MotionWindOptimizedInfo;
			half _MotionWindAdvancedInfo;
			half _SizeFadeCategory;
			half _SizeFadeEnd;
			half _SizeFadeElementMode;
			float _AI_Frames;
			float _AI_FramesX;
			float _AI_FramesY;
			float _AI_ImpostorSize;
			half _RenderShadow;
			half _RenderMotion;
			half _IsIdentifier;
			half _IsConverted;
			half _ImpostorMaskDefaultInfo;
			half _ImpostorMaskPackedInfo;
			half _ImpostorMaskShadingInfo;
			half _ImpostorMaskMode;
			half _ImpostorAlphaClipValue;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceAngleValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceSpace;
			half _IsVersion;
			float _AI_Parallax;
			half _RenderDecals;
			half _CategoryRender;
			half _EndRender;
			half _NoiseCategory;
			half _NoiseEnd;
			half _IsInitialized;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _HasDefaultTextures;
			half _IsCollected;
			half _RenderSSR;
			float _AI_TextureBias;
			float _AI_DepthSize;
			float _AI_ShadowBias;
			half _MotionBaseSpeedValue;
			half _MotionBaseNoiseValue;
			half _global_wind_layer_value;
			half _MotionBaseDelayValue;
			half _global_push_layer_value;
			half _MotionPushPivotValue;
			half _MotionPushIntensityValue;
			half _SubsurfaceCategory;
			half _SubsurfaceEnd;
			half _SubsurfaceDirectValue;
			half _MotionBaseTillingValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceShadowValue;
			half _SubsurfaceElementMode;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DitherCategory;
			half _DitherEnd;
			half _CutoutCategory;
			half _SubsurfaceAmbientValue;
			half _CutoutElementMode;
			half _MotionIntensityValue;
			half _MotionBasePivotValue;
			float _AI_ShadowView;
			float _AI_Clip;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionTillingValue;
			half _GlobalGlowPivotValue;
			half _GlobalAtmoPivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalWindLayerValue;
			half _GlobalPushLayerValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _MotionBaseIntensityValue;
			half _GlobalAtmoLayerValue;
			half _SubsurfaceThicknessValue;
			float _BlendMode;
			CBUFFER_END

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_Albedo);
			SAMPLER(sampler_Albedo);
			TEXTURE2D(_Normals);
			SAMPLER(sampler_Normals);
			float3 TVE_WorldOrigin;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_Shader);
			TEXTURE2D(_Packed);
			TEXTURE2D(_Vertex);
			SAMPLER(sampler_Shader);
			SAMPLER(sampler_Packed);
			SAMPLER(sampler_Vertex);


			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			float2 VectortoHemiOctahedron( float3 N )
			{
				N.xy /= dot( 1.0, abs( N ) );
				return float2( N.x + N.y, N.x - N.y );
			}
			
			float3 HemiOctahedronToVector( float2 Oct )
			{
				Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y ) * 0.5;
				float3 N = float3( Oct, 1 - dot( 1.0, abs( Oct ) ) );
				return normalize( N );
			}
			
			inline void RayPlaneIntersectionUV( float3 normalOS, float3 rayPosition, float3 rayDirection, inout float2 uvs, inout float3 localNormal )
			{
				float lDotN = dot( rayDirection, normalOS ); 
				float p0l0DotN = dot( -rayPosition, normalOS );
				float t = p0l0DotN / lDotN;
				float3 p = rayDirection * t + rayPosition;
				float3 upVector = float3( 0, 1, 0 );
				float3 tangent = normalize( cross( upVector, normalOS ) + float3( -0.001, 0, 0 ) );
				float3 bitangent = cross( tangent, normalOS );
				float frameX = dot( p, tangent );
				float frameZ = dot( p, bitangent );
				uvs = -float2( frameX, frameZ );
				if( t <= 0.0 )
				uvs = 0;
				float3x3 worldToLocal = float3x3( tangent, bitangent, normalOS );
				localNormal = normalize( mul( worldToLocal, rayDirection ) );
			}
			
			inline void OctaImpostorVertex( inout float4 positionOS, inout float3 normalOS, inout float4 uvsFrame1, inout float4 uvsFrame2, inout float4 uvsFrame3, inout float4 octaFrame, inout float4 viewPos )
			{
				float2 uvOffset = _AI_SizeOffset.zw;
				float parallax = -_AI_Parallax; 
				float UVscale = _AI_ImpostorSize;
				float framesXY = _AI_Frames;
				float prevFrame = framesXY - 1;
				float3 fractions = 1.0 / float3( framesXY, prevFrame, UVscale );
				float fractionsFrame = fractions.x;
				float fractionsPrevFrame = fractions.y;
				float fractionsUVscale = fractions.z;
				float3 worldCameraPos;
				#if defined(UNITY_PASS_SHADOWCASTER)
				float3 worldOrigin = 0;
				float4 perspective = float4( 0, 0, 0, 1 );
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				perspective = float4( 0, 0, 5000, 0 );
				worldOrigin = ai_ObjectToWorld._m03_m13_m23;
				}
				worldCameraPos = worldOrigin + mul( UNITY_MATRIX_I_V, perspective ).xyz;
				#else
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				worldCameraPos = ai_ObjectToWorld._m03_m13_m23 + UNITY_MATRIX_I_V._m02_m12_m22 * 5000;
				}
				else
				{
				worldCameraPos = GetCameraRelativePositionWS( _WorldSpaceCameraPos );
				}
				#endif
				float3 objectCameraPosition = mul( ai_WorldToObject, float4( worldCameraPos, 1 ) ).xyz - _AI_Offset.xyz; 
				float3 objectCameraDirection = normalize( objectCameraPosition );
				float3 upVector = float3( 0,1,0 );
				float3 objectHorizontalVector = normalize( cross( objectCameraDirection, upVector ) );
				float3 objectVerticalVector = cross( objectHorizontalVector, objectCameraDirection );
				float2 uvExpansion = positionOS.xy;
				float3 billboard = objectHorizontalVector * uvExpansion.x + objectVerticalVector * uvExpansion.y;
				float3 localDir = billboard - objectCameraPosition; 
				objectCameraDirection = trunc( objectCameraDirection * 65536.0 ) / 65536.0;
				objectCameraDirection.y = max(0.001, objectCameraDirection.y);
				float2 frameOcta = VectortoHemiOctahedron( objectCameraDirection.xzy ) * 0.5 + 0.5;
				float2 prevOctaFrame = frameOcta * prevFrame;
				float2 baseOctaFrame = floor( prevOctaFrame );
				float2 fractionOctaFrame = ( baseOctaFrame * fractionsFrame );
				float2 octaFrame1 = ( baseOctaFrame * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa1WorldY = HemiOctahedronToVector( octaFrame1 ).xzy;
				float3 octa1LocalY;
				float2 uvFrame1;
				RayPlaneIntersectionUV( octa1WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame1, /*inout*/ octa1LocalY );
				float2 uvParallax1 = octa1LocalY.xy * fractionsFrame * parallax;
				uvFrame1 = ( uvFrame1 * fractionsUVscale + 0.5 ) * fractionsFrame + fractionOctaFrame;
				uvsFrame1 = float4( uvParallax1, uvFrame1) - float4( 0, 0, uvOffset );
				float2 fractPrevOctaFrame = frac( prevOctaFrame );
				float2 cornerDifference = lerp( float2( 0,1 ) , float2( 1,0 ) , saturate( ceil( ( fractPrevOctaFrame.x - fractPrevOctaFrame.y ) ) ));
				float2 octaFrame2 = ( ( baseOctaFrame + cornerDifference ) * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa2WorldY = HemiOctahedronToVector( octaFrame2 ).xzy;
				float3 octa2LocalY;
				float2 uvFrame2;
				RayPlaneIntersectionUV( octa2WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame2, /*inout*/ octa2LocalY );
				float2 uvParallax2 = octa2LocalY.xy * fractionsFrame * parallax;
				uvFrame2 = ( uvFrame2 * fractionsUVscale + 0.5 ) * fractionsFrame + ( ( cornerDifference * fractionsFrame ) + fractionOctaFrame );
				uvsFrame2 = float4( uvParallax2, uvFrame2) - float4( 0, 0, uvOffset );
				float2 octaFrame3 = ( ( baseOctaFrame + 1 ) * fractionsPrevFrame  ) * 2.0 - 1.0;
				float3 octa3WorldY = HemiOctahedronToVector( octaFrame3 ).xzy;
				float3 octa3LocalY;
				float2 uvFrame3;
				RayPlaneIntersectionUV( octa3WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame3, /*inout*/ octa3LocalY );
				float2 uvParallax3 = octa3LocalY.xy * fractionsFrame * parallax;
				uvFrame3 = ( uvFrame3 * fractionsUVscale + 0.5 ) * fractionsFrame + ( fractionOctaFrame + fractionsFrame );
				uvsFrame3 = float4( uvParallax3, uvFrame3) - float4( 0, 0, uvOffset );
				octaFrame = 0;
				octaFrame.xy = prevOctaFrame;
				octaFrame.zw = fractionOctaFrame;
				positionOS.xyz = billboard + _AI_Offset.xyz;
				normalOS.xyz = objectCameraDirection;
				viewPos = 0;
				viewPos.xyz = TransformWorldToView( TransformObjectToWorld( positionOS.xyz ) );
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			inline void OctaImpostorFragment( inout SurfaceOutput o, out float4 positionCS, out float3 positionWS, float4 uvsFrame1, float4 uvsFrame2, float4 uvsFrame3, float4 octaFrame, float4 interpViewPos, out float4 output0, out float4 output1, out float4 output2 )
			{
				float depthBias = -1.0;
				float textureBias = _AI_TextureBias;
				float2 fraction = frac( octaFrame.xy );
				float2 invFraction = 1 - fraction;
				float3 weights;
				weights.x = min( invFraction.x, invFraction.y );
				weights.y = abs( fraction.x - fraction.y );
				weights.z = min( fraction.x, fraction.y );
				float4 parallaxSample1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame1.zw, depthBias );
				float2 parallax1 = ( ( 0.5 - parallaxSample1.a ) * uvsFrame1.xy ) + uvsFrame1.zw;
				float4 parallaxSample2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame2.zw, depthBias );
				float2 parallax2 = ( ( 0.5 - parallaxSample2.a ) * uvsFrame2.xy ) + uvsFrame2.zw;
				float4 parallaxSample3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame3.zw, depthBias );
				float2 parallax3 = ( ( 0.5 - parallaxSample3.a ) * uvsFrame3.xy ) + uvsFrame3.zw;
				float4 albedo1 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax1, textureBias );
				float4 albedo2 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax2, textureBias );
				float4 albedo3 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax3, textureBias );
				float4 blendedAlbedo = albedo1 * weights.x + albedo2 * weights.y + albedo3 * weights.z;
				o.Alpha = ( blendedAlbedo.a - _AI_Clip );
				clip( o.Alpha );
				float t = ceil( fraction.x - fraction.y );
				float4 cornerDifference = float4( t, 1 - t, 1, 1 );
				float2 step_1 = ( parallax1 - octaFrame.zw ) * _AI_Frames;
				float4 step23 = ( float4( parallax2, parallax3 ) -  octaFrame.zwzw ) * _AI_Frames - cornerDifference;
				step_1 = step_1 * (1-step_1);
				step23 = step23 * (1-step23);
				float3 steps;
				steps.x = step_1.x * step_1.y;
				steps.y = step23.x * step23.y;
				steps.z = step23.z * step23.w;
				steps = step(-steps, 0);
				float final = dot( steps, weights );
				clip( final - 0.5 );
				o.Albedo = blendedAlbedo.rgb;
				#if defined(AI_HD_RENDERPIPELINE)
				float4 feat1 = _Features.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.Diffusion = feat1.rgb;
				o.Features = feat1.a;
				float4 test1 = _Specular.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.MetalTangent = test1.b;
				#endif
				float4 normals1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax1, textureBias );
				float4 normals2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax2, textureBias );
				float4 normals3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax3, textureBias );
				float4 blendedNormal = normals1 * weights.x  + normals2 * weights.y + normals3 * weights.z;
				float4 output0a = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax1, textureBias );
				float4 output0b = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax2, textureBias );
				float4 output0c = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax3, textureBias );
				output0 = output0a * weights.x  + output0b * weights.y + output0c * weights.z; 
				float4 output1a = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax1, textureBias );
				float4 output1b = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax2, textureBias );
				float4 output1c = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax3, textureBias );
				output1 = output1a * weights.x  + output1b * weights.y + output1c * weights.z; 
				float4 output2a = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax1, textureBias );
				float4 output2b = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax2, textureBias );
				float4 output2c = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax3, textureBias );
				output2 = output2a * weights.x  + output2b * weights.y + output2c * weights.z; 
				float3 localNormal = blendedNormal.rgb * 2.0 - 1.0;
				float3 worldNormal = normalize( mul( (float3x3)ai_ObjectToWorld, localNormal ) );
				o.Normal = worldNormal;
				float3 viewPos = interpViewPos.xyz;
				float depthOffset = ( ( parallaxSample1.a * weights.x + parallaxSample2.a * weights.y + parallaxSample3.a * weights.z ) - 0.5 /** 2.0 - 1.0*/ ) /** 0.5*/ * _AI_DepthSize * length( ai_ObjectToWorld[ 2 ].xyz );
				#if ( defined(SHADERPASS) && ((defined(SHADERPASS_SHADOWS) && SHADERPASS == SHADERPASS_SHADOWS) || (defined(SHADERPASS_SHADOWCASTER) && SHADERPASS == SHADERPASS_SHADOWCASTER)) ) || defined(UNITY_PASS_SHADOWCASTER)
				viewPos.z += depthOffset * _AI_ShadowView;
				viewPos.z += -_AI_ShadowBias;
				#else 
				viewPos.z += depthOffset;
				#endif
				positionWS = mul( UNITY_MATRIX_I_V, float4( viewPos.xyz, 1 ) ).xyz;
				positionCS = mul( UNITY_MATRIX_P, float4( viewPos, 1 ) );
				#if defined(UNITY_PASS_SHADOWCASTER) && !defined(SHADERPASS)
				#if UNITY_REVERSED_Z
				positionCS.z = min( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#else
				positionCS.z = max( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#endif
				#endif
				positionCS.xyz /= positionCS.w;
				if( UNITY_NEAR_CLIP_VALUE < 0 )
				positionCS = positionCS * 0.5 + 0.5;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g153365( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g153374( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif
				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif
				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
					surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
				#endif

				GetNormalWS( fragInputs, float3( 0.0f, 0.0f, 1.0f ), surfaceData.normalWS, float3( 1.0, 1.0, 1.0 ) );

				bentNormalWS = surfaceData.normalWS;

				#ifdef _HAS_REFRACTION
					if (_EnableSSRefraction)
					{

						surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
						surfaceDescription.Alpha = 1.0;
					}
					else
					{
						surfaceData.ior = 1.0;
						surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
						surfaceData.atDistance = 1.0;
						surfaceData.transmittanceMask = 0.0;
						surfaceDescription.Alpha = 1.0;
					}
				#else
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
					surfaceData.atDistance = 1.0;
					surfaceData.transmittanceMask = 0.0;
				#endif

				surfaceData.tangentWS = normalize(T2W(fragInputs, 0).xyz);    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
				surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				#if defined(_SPECULAR_OCCLUSION_CUSTOM)
				#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
				#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
				#else
					surfaceData.specularOcclusion = 1.0;
				#endif
				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
					surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, T2W(fragInputs, 2), surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
				#endif
			}

			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				//#ifdef LOD_FADE_CROSSFADE
				//	uint3 fadeMaskSeed = asuint((int3)(V * _ScreenSize.xyx));
				//	LODDitheringTransition(fadeMaskSeed, unity_LODFade.x);
				//#endif

				#ifdef _ALPHATEST_ON
					DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				float3 bentNormalWS;
				BuildSurfaceData(fragInputs, surfaceDescription, V, surfaceData, bentNormalWS);

				#if HAVE_DECALS
				if( _EnableDecals )
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif

				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
					//InitBuiltinData( surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.positionRWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				//#else
					InitBuiltinData( posInput, surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				//#endif

				builtinData.depthOffset = 0.0;

				#if (SHADERPASS == SHADERPASS_DISTORTION)
					builtinData.distortion = surfaceDescription.Distortion;
					builtinData.distortionBlur = surfaceDescription.DistortionBlur;
				#else
					builtinData.distortion = float2(0.0, 0.0);
					builtinData.distortionBlur = 0.0;
				#endif

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh  )
			{
				UNITY_SETUP_INSTANCE_ID( inputMesh );
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_TRANSFER_INSTANCE_ID( inputMesh, outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g153438 = (TVEModelData)0;
				float In_Dummy16_g153438 = 0.0;
				TVEModelData Data16_g153406 = (TVEModelData)0;
				half Dummy181_g153404 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _InteractionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g153406 = Dummy181_g153404;
				TVEModelData Data16_g153386 = (TVEModelData)0;
				half Dummy181_g153383 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g153386 = Dummy181_g153383;
				TVEModelData Data16_g153150 = (TVEModelData)0;
				float In_Dummy16_g153150 = 0.0;
				OctaImpostorVertex( inputMesh.positionOS, inputMesh.normalOS, outputPackedVaryingsMeshToPS.UVsFrame122_g151868, outputPackedVaryingsMeshToPS.UVsFrame222_g151868, outputPackedVaryingsMeshToPS.UVsFrame322_g151868, outputPackedVaryingsMeshToPS.octaframe22_g151868, outputPackedVaryingsMeshToPS.viewPos22_g151868 );
				float3 worldPosOut22_g151868 = GetAbsolutePositionWS( mul( UNITY_MATRIX_I_V, float4( outputPackedVaryingsMeshToPS.viewPos22_g151868.xyz, 1.0 ) ).xyz );
				half3 Input_PositionWS319_g153142 = worldPosOut22_g151868;
				float3 worldToObj315_g153142 = mul( GetWorldToObjectMatrix(), float4( GetCameraRelativePositionWS(Input_PositionWS319_g153142), 1 ) ).xyz;
				half3 Model_PositionOS316_g153142 = worldToObj315_g153142;
				float3 In_PositionOS16_g153150 = Model_PositionOS316_g153142;
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153150 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153150 = Model_PositionWO311_g153142;
				float3 In_PositionRawOS16_g153150 = Model_PositionOS316_g153142;
				float3 In_PositionAddOS16_g153150 = float3( 0,0,0 );
				float3 In_PivotOS16_g153150 = float3( 0,0,0 );
				float3 localObjectPosition_UNITY_MATRIX_M14_g153145 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g153145 = ( localObjectPosition_UNITY_MATRIX_M14_g153145 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g153145 = localObjectPosition_UNITY_MATRIX_M14_g153145;
				#endif
				half3 ObjectData20_g153147 = staticSwitch13_g153145;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				half3 WorldData19_g153147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g153147 = WorldData19_g153147;
				#else
				float3 staticSwitch14_g153147 = ObjectData20_g153147;
				#endif
				float3 temp_output_124_0_g153145 = staticSwitch14_g153147;
				float3 vertexToFrag305_g153142 = temp_output_124_0_g153145;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153150 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153150 = Model_PivotWO312_g153142;
				half3 Model_NormalOS313_g153142 = inputMesh.normalOS;
				float3 In_NormalOS16_g153150 = Model_NormalOS313_g153142;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153150 = Model_Normal_WS314_g153142;
				float3 In_NormalRawOS16_g153150 = Model_NormalOS313_g153142;
				float3 In_NormalRawWS16_g153150 = Model_Normal_WS314_g153142;
				float4 In_TangentOS16_g153150 = float4( 0,1,0,1 );
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153150 = Model_ViewDirWS347_g153142;
				float4 In_VertexData16_g153150 = float4( 1,1,1,1 );
				float4 In_MotionData16_g153150 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g153150 = float4( 1,1,1,1 );
				float4 In_RotationData16_g153150 = float4( 0,0,0,0 );
				Data16_g153150.Dummy = In_Dummy16_g153150;
				Data16_g153150.PositionOS = In_PositionOS16_g153150;
				Data16_g153150.PositionWS = In_PositionWS16_g153150;
				Data16_g153150.PositionWO = In_PositionWO16_g153150;
				Data16_g153150.PositionRawOS = In_PositionRawOS16_g153150;
				Data16_g153150.PositionAddOS = In_PositionAddOS16_g153150;
				Data16_g153150.PivotOS = In_PivotOS16_g153150;
				Data16_g153150.PivotWS = In_PivotWS16_g153150;
				Data16_g153150.PivotWO = In_PivotWO16_g153150;
				Data16_g153150.NormalOS = In_NormalOS16_g153150;
				Data16_g153150.NormalWS = In_NormalWS16_g153150;
				Data16_g153150.NormalRawOS = In_NormalRawOS16_g153150;
				Data16_g153150.NormalRawWS = In_NormalRawWS16_g153150;
				Data16_g153150.TangentOS = In_TangentOS16_g153150;
				Data16_g153150.ViewDirWS = In_ViewDirWS16_g153150;
				Data16_g153150.VertexData = In_VertexData16_g153150;
				Data16_g153150.MotionData = In_MotionData16_g153150;
				Data16_g153150.BoundsData = In_BoundsData16_g153150;
				Data16_g153150.RotationData = In_RotationData16_g153150;
				TVEModelData Data15_g153385 = Data16_g153150;
				float Out_Dummy15_g153385 = 0;
				float3 Out_PositionOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153385 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153385 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153385 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153385 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153385 = float3( 0,0,0 );
				float4 Out_VertexData15_g153385 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153385 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153385 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153385 = float4( 0,0,0,0 );
				Out_Dummy15_g153385 = Data15_g153385.Dummy;
				Out_PositionOS15_g153385 = Data15_g153385.PositionOS;
				Out_PositionWS15_g153385 = Data15_g153385.PositionWS;
				Out_PositionWO15_g153385 = Data15_g153385.PositionWO;
				Out_PositionRawOS15_g153385 = Data15_g153385.PositionRawOS;
				Out_PositionAddOS15_g153385 = Data15_g153385.PositionAddOS;
				Out_PivotOS15_g153385 = Data15_g153385.PivotOS;
				Out_PivotWS15_g153385 = Data15_g153385.PivotWS;
				Out_PivotWO15_g153385 = Data15_g153385.PivotWO;
				Out_NormalOS15_g153385 = Data15_g153385.NormalOS;
				Out_NormalWS15_g153385 = Data15_g153385.NormalWS;
				Out_NormalRawOS15_g153385 = Data15_g153385.NormalRawOS;
				Out_NormalRawWS15_g153385 = Data15_g153385.NormalRawWS;
				Out_TangentOS15_g153385 = Data15_g153385.TangentOS;
				Out_ViewDirWS15_g153385 = Data15_g153385.ViewDirWS;
				Out_VertexData15_g153385 = Data15_g153385.VertexData;
				Out_MotionData15_g153385 = Data15_g153385.MotionData;
				Out_BoundsData15_g153385 = Data15_g153385.BoundsData;
				Out_RotationData15_g153385 = Data15_g153385.RotationData;
				half3 Model_PositionOS147_g153383 = Out_PositionOS15_g153385;
				float3 temp_cast_0 = (1.0).xxx;
				float3 temp_output_210_19_g153383 = Out_PivotWO15_g153385;
				half3 Model_PivotWO162_g153383 = temp_output_210_19_g153383;
				float temp_output_7_0_g153384 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g153384 = ( _SizeFadeDistMinValue - temp_output_7_0_g153384 );
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_2 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = 0;
				half4 Input_Tex1379_g153142 = 0;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_6;
				#else
				float4 staticSwitch414_g153142 = temp_cast_7;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153387 = Data204_g153153;
				float Out_Dummy15_g153387 = 0;
				float4 Out_CoatParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153387 = float4( 0,0,0,0 );
				Out_Dummy15_g153387 = Data15_g153387.Dummy;
				Out_CoatParams15_g153387 = Data15_g153387.CoatParams;
				Out_PaintParams15_g153387 = Data15_g153387.PaintParams;
				Out_GlowParams15_g153387 = Data15_g153387.GlowParams;
				Out_AtmoParams15_g153387= Data15_g153387.AtmoParams;
				Out_FadeParams15_g153387= Data15_g153387.FadeParams;
				Out_FormParams15_g153387 = Data15_g153387.FormParams;
				Out_LandParams15_g153387 = Data15_g153387.LandParams;
				Out_WindParams15_g153387 = Data15_g153387.WindParams;
				Out_PushParams15_g153387 = Data15_g153387.PushParams;
				half4 Input_FormParams188_g153383 = Out_FormParams15_g153387;
				float lerpResult213_g153383 = lerp( 1.0 , (Input_FormParams188_g153383).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g153383 = lerpResult213_g153383;
				#else
				float staticSwitch194_g153383 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g153383 = staticSwitch194_g153383;
				float temp_output_189_0_g153383 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g153383 ) - temp_output_7_0_g153384 ) / ( temp_output_10_0_g153384 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g153383 );
				float3 appendResult200_g153383 = (float3(temp_output_189_0_g153383 , temp_output_189_0_g153383 , temp_output_189_0_g153383));
				float3 appendResult201_g153383 = (float3(1.0 , temp_output_189_0_g153383 , 1.0));
				float3 lerpResult202_g153383 = lerp( appendResult200_g153383 , appendResult201_g153383 , _SizeFadeScaleMode);
				float3 lerpResult184_g153383 = lerp( temp_cast_0 , lerpResult202_g153383 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g153383 = ( lerpResult184_g153383 * Model_PositionOS147_g153383 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g153383 = temp_output_167_0_g153383;
				#else
				float3 staticSwitch199_g153383 = Model_PositionOS147_g153383;
				#endif
				half3 Final_Position178_g153383 = staticSwitch199_g153383;
				float3 In_PositionOS16_g153386 = Final_Position178_g153383;
				float3 In_PositionWS16_g153386 = Out_PositionWS15_g153385;
				float3 In_PositionWO16_g153386 = Out_PositionWO15_g153385;
				float3 In_PositionRawOS16_g153386 = Out_PositionRawOS15_g153385;
				float3 In_PositionAddOS16_g153386 = Out_PositionAddOS15_g153385;
				float3 temp_output_210_24_g153383 = Out_PivotOS15_g153385;
				float3 In_PivotOS16_g153386 = temp_output_210_24_g153383;
				float3 In_PivotWS16_g153386 = Out_PivotWS15_g153385;
				float3 In_PivotWO16_g153386 = temp_output_210_19_g153383;
				float3 In_NormalOS16_g153386 = Out_NormalOS15_g153385;
				float3 In_NormalWS16_g153386 = Out_NormalWS15_g153385;
				float3 In_NormalRawOS16_g153386 = Out_NormalRawOS15_g153385;
				float3 In_NormalRawWS16_g153386 = Out_NormalRawWS15_g153385;
				float4 In_TangentOS16_g153386 = Out_TangentOS15_g153385;
				float3 In_ViewDirWS16_g153386 = Out_ViewDirWS15_g153385;
				float4 In_VertexData16_g153386 = Out_VertexData15_g153385;
				float4 In_MotionData16_g153386 = Out_MotionData15_g153385;
				float4 In_BoundsData16_g153386 = Out_BoundsData15_g153385;
				float4 In_RotationData16_g153386 = Out_RotationData15_g153385;
				Data16_g153386.Dummy = In_Dummy16_g153386;
				Data16_g153386.PositionOS = In_PositionOS16_g153386;
				Data16_g153386.PositionWS = In_PositionWS16_g153386;
				Data16_g153386.PositionWO = In_PositionWO16_g153386;
				Data16_g153386.PositionRawOS = In_PositionRawOS16_g153386;
				Data16_g153386.PositionAddOS = In_PositionAddOS16_g153386;
				Data16_g153386.PivotOS = In_PivotOS16_g153386;
				Data16_g153386.PivotWS = In_PivotWS16_g153386;
				Data16_g153386.PivotWO = In_PivotWO16_g153386;
				Data16_g153386.NormalOS = In_NormalOS16_g153386;
				Data16_g153386.NormalWS = In_NormalWS16_g153386;
				Data16_g153386.NormalRawOS = In_NormalRawOS16_g153386;
				Data16_g153386.NormalRawWS = In_NormalRawWS16_g153386;
				Data16_g153386.TangentOS = In_TangentOS16_g153386;
				Data16_g153386.ViewDirWS = In_ViewDirWS16_g153386;
				Data16_g153386.VertexData = In_VertexData16_g153386;
				Data16_g153386.MotionData = In_MotionData16_g153386;
				Data16_g153386.BoundsData = In_BoundsData16_g153386;
				Data16_g153386.RotationData = In_RotationData16_g153386;
				TVEModelData Data15_g153405 = Data16_g153386;
				float Out_Dummy15_g153405 = 0;
				float3 Out_PositionOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153405 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153405 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153405 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153405 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153405 = float3( 0,0,0 );
				float4 Out_VertexData15_g153405 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153405 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153405 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153405 = float4( 0,0,0,0 );
				Out_Dummy15_g153405 = Data15_g153405.Dummy;
				Out_PositionOS15_g153405 = Data15_g153405.PositionOS;
				Out_PositionWS15_g153405 = Data15_g153405.PositionWS;
				Out_PositionWO15_g153405 = Data15_g153405.PositionWO;
				Out_PositionRawOS15_g153405 = Data15_g153405.PositionRawOS;
				Out_PositionAddOS15_g153405 = Data15_g153405.PositionAddOS;
				Out_PivotOS15_g153405 = Data15_g153405.PivotOS;
				Out_PivotWS15_g153405 = Data15_g153405.PivotWS;
				Out_PivotWO15_g153405 = Data15_g153405.PivotWO;
				Out_NormalOS15_g153405 = Data15_g153405.NormalOS;
				Out_NormalWS15_g153405 = Data15_g153405.NormalWS;
				Out_NormalRawOS15_g153405 = Data15_g153405.NormalRawOS;
				Out_NormalRawWS15_g153405 = Data15_g153405.NormalRawWS;
				Out_TangentOS15_g153405 = Data15_g153405.TangentOS;
				Out_ViewDirWS15_g153405 = Data15_g153405.ViewDirWS;
				Out_VertexData15_g153405 = Data15_g153405.VertexData;
				Out_MotionData15_g153405 = Data15_g153405.MotionData;
				Out_BoundsData15_g153405 = Data15_g153405.BoundsData;
				Out_RotationData15_g153405 = Data15_g153405.RotationData;
				float3 temp_output_1567_0_g153404 = Out_PositionOS15_g153405;
				float3 In_PositionOS16_g153406 = temp_output_1567_0_g153404;
				float3 In_PositionWS16_g153406 = Out_PositionWS15_g153405;
				float3 temp_output_1567_17_g153404 = Out_PositionWO15_g153405;
				float3 In_PositionWO16_g153406 = temp_output_1567_17_g153404;
				float3 In_PositionRawOS16_g153406 = Out_PositionRawOS15_g153405;
				float3 In_PositionAddOS16_g153406 = Out_PositionAddOS15_g153405;
				float3 In_PivotOS16_g153406 = Out_PivotOS15_g153405;
				float3 In_PivotWS16_g153406 = Out_PivotWS15_g153405;
				float3 temp_output_1567_19_g153404 = Out_PivotWO15_g153405;
				float3 In_PivotWO16_g153406 = temp_output_1567_19_g153404;
				float3 In_NormalOS16_g153406 = Out_NormalOS15_g153405;
				float3 In_NormalWS16_g153406 = Out_NormalWS15_g153405;
				float3 In_NormalRawOS16_g153406 = Out_NormalRawOS15_g153405;
				float3 In_NormalRawWS16_g153406 = Out_NormalRawWS15_g153405;
				float4 In_TangentOS16_g153406 = Out_TangentOS15_g153405;
				float3 In_ViewDirWS16_g153406 = Out_ViewDirWS15_g153405;
				float4 In_VertexData16_g153406 = Out_VertexData15_g153405;
				float4 In_MotionData16_g153406 = Out_MotionData15_g153405;
				float4 In_BoundsData16_g153406 = Out_BoundsData15_g153405;
				float2 temp_cast_36 = (0.0).xx;
				half3 Model_PositionOS147_g153404 = temp_output_1567_0_g153404;
				half Base_Mask217_g153404 = saturate( ( Model_PositionOS147_g153404.y / _AI_Offset.y ) );
				half3 Model_PositionWO162_g153404 = temp_output_1567_17_g153404;
				half3 Model_PivotWO402_g153404 = temp_output_1567_19_g153404;
				float3 lerpResult829_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionBasePivotValue);
				half3 Base_Position1394_g153404 = lerpResult829_g153404;
				half3 Input_PositionWO419_g153419 = Base_Position1394_g153404;
				half Flow_Tillling1397_g153404 = _MotionTillingValue;
				half Input_MotionTillingRT670_g153419 = ( Flow_Tillling1397_g153404 + 0.2 );
				half2 Noise_CoordRT668_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTillingRT670_g153419 * 0.005 );
				half4 Noise_ParamsRT535_g153419 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g153419, 0.0 );
				half Flow_Value1599_g153404 = _MotionIntensityValue;
				half Input_MotionValue629_g153419 = Flow_Value1599_g153404;
				float2 lerpResult709_g153419 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult712_g153419 = (float3(lerpResult709_g153419 , ( (Noise_ParamsRT535_g153419).b * Input_MotionValue629_g153419 )));
				float4 lerpResult627_g153419 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g153419 = (lerpResult627_g153419).xy;
				half Input_MotionTilling321_g153419 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTilling321_g153419 * 0.005 );
				float2 temp_output_3_0_g153420 = Noise_Coord515_g153419;
				float2 temp_output_21_0_g153420 = (Global_WindDirection593_g153419*2.0 + -1.0);
				float lerpResult128_g153425 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g153419 = _MotionBaseSpeedValue;
				half Noise_Speed516_g153419 = ( ( lerpResult128_g153425 * Input_MotionSpeed62_g153419 ) * 0.02 );
				float temp_output_15_0_g153420 = Noise_Speed516_g153419;
				float temp_output_23_0_g153420 = frac( temp_output_15_0_g153420 );
				float4 lerpResult39_g153420 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * temp_output_23_0_g153420 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * frac( ( temp_output_15_0_g153420 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g153420 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g153419 = lerpResult39_g153420;
				half Input_MotionNoise552_g153419 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g153419 = (lerpResult627_g153419).z;
				half Motion_Intensity720_g153419 = ( Global_WindIntensity576_g153419 * Input_MotionValue629_g153419 );
				float lerpResult701_g153419 = lerp( 1.0 , Input_MotionNoise552_g153419 , Motion_Intensity720_g153419);
				float2 lerpResult646_g153419 = lerp( Global_WindDirection593_g153419 , (Noise_Params685_g153419).rg , lerpResult701_g153419);
				float2 lerpResult724_g153419 = lerp( float2( 0.5,0.5 ) , lerpResult646_g153419 , Motion_Intensity720_g153419);
				float3 appendResult708_g153419 = (float3(lerpResult724_g153419 , ( (Noise_Params685_g153419).a * Motion_Intensity720_g153419 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g153419 = appendResult712_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g153419 = appendResult708_g153419;
				#else
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g153419 = staticSwitch673_g153419;
				float temp_output_136_0_g153426 = _global_wind_layer_value;
				float temp_output_19_0_g153428 = TVE_WindLayers[(int)temp_output_136_0_g153426];
				half3 Input_Position180_g153429 = Input_PositionWO419_g153419;
				float2 temp_output_75_0_g153429 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_82_0_g153429 = temp_output_136_0_g153426;
				float2 temp_output_119_0_g153429 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_7_0_g153434 = 1.0;
				float temp_output_10_0_g153434 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153434 );
				float4 lerpResult131_g153429 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153429,temp_output_82_0_g153429, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153429,temp_output_82_0_g153429, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153429 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153434 ) / temp_output_10_0_g153434 ) ));
				float4 temp_output_17_0_g153428 = lerpResult131_g153429;
				float4 temp_output_3_0_g153428 = TVE_WindParams;
				float4 ifLocalVar18_g153428 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153428 >= 0.5 )
				ifLocalVar18_g153428 = temp_output_17_0_g153428;
				else
				ifLocalVar18_g153428 = temp_output_3_0_g153428;
				float4 lerpResult22_g153428 = lerp( temp_output_3_0_g153428 , temp_output_17_0_g153428 , temp_output_19_0_g153428);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153428 = lerpResult22_g153428;
				#else
				float4 staticSwitch24_g153428 = ifLocalVar18_g153428;
				#endif
				float4 temp_output_610_0_g153419 = staticSwitch24_g153428;
				float2 lerpResult699_g153419 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult643_g153419 = (float3(lerpResult699_g153419 , ( (temp_output_610_0_g153419).b * Input_MotionValue629_g153419 )));
				float3 lerpResult623_g153419 = lerp( Motion_Local694_g153419 , appendResult643_g153419 , (temp_output_610_0_g153419).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#else
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g153419 = staticSwitch693_g153419;
				#else
				float3 staticSwitch612_g153419 = Motion_Local694_g153419;
				#endif
				float3 temp_output_1628_567_g153404 = staticSwitch612_g153419;
				float2 break83_g153418 = ((temp_output_1628_567_g153404).xy*2.0 + -1.0);
				float3 appendResult79_g153418 = (float3(break83_g153418.x , 0.0 , break83_g153418.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153418 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Base_Intensity1623_g153404 = length( Base_Direction893_g153404 );
				float lerpResult1631_g153404 = lerp( 1.0 , ( Base_Intensity1623_g153404 * Base_Intensity1623_g153404 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g153404 = ( _MotionBaseIntensityValue * Base_Mask217_g153404 * Base_Direction893_g153404 * lerpResult1631_g153404 );
				#else
				float2 staticSwitch1573_g153404 = temp_cast_36;
				#endif
				float temp_output_136_0_g153408 = _global_push_layer_value;
				float temp_output_19_0_g153409 = TVE_PushLayers[(int)temp_output_136_0_g153408];
				float3 lerpResult1547_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionPushPivotValue);
				half3 Push_Position1549_g153404 = lerpResult1547_g153404;
				half3 Input_Position180_g153410 = Push_Position1549_g153404;
				float2 temp_output_75_0_g153410 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_82_0_g153410 = temp_output_136_0_g153408;
				float2 temp_output_119_0_g153410 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_7_0_g153415 = 1.0;
				float temp_output_10_0_g153415 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153415 );
				float4 lerpResult131_g153410 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153410,temp_output_82_0_g153410, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153410,temp_output_82_0_g153410, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153410 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153415 ) / temp_output_10_0_g153415 ) ));
				float4 temp_output_17_0_g153409 = lerpResult131_g153410;
				float4 temp_output_3_0_g153409 = TVE_PushParams;
				float4 ifLocalVar18_g153409 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153409 >= 0.5 )
				ifLocalVar18_g153409 = temp_output_17_0_g153409;
				else
				ifLocalVar18_g153409 = temp_output_3_0_g153409;
				float4 lerpResult22_g153409 = lerp( temp_output_3_0_g153409 , temp_output_17_0_g153409 , temp_output_19_0_g153409);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153409 = lerpResult22_g153409;
				#else
				float4 staticSwitch24_g153409 = ifLocalVar18_g153409;
				#endif
				half4 Global_PushParams214_g153404 = staticSwitch24_g153409;
				float2 break83_g153417 = ((Global_PushParams214_g153404).rg*2.0 + -1.0);
				float3 appendResult79_g153417 = (float3(break83_g153417.x , 0.0 , break83_g153417.y));
				half2 Push_Direction1608_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153417 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Push_Intensity1501_g153404 = _MotionPushIntensityValue;
				half Push_Influence1504_g153404 = saturate( ( (Global_PushParams214_g153404).a * Push_Intensity1501_g153404 ) );
				float2 lerpResult1496_g153404 = lerp( staticSwitch1573_g153404 , ( Push_Direction1608_g153404 * Push_Intensity1501_g153404 * Base_Mask217_g153404 ) , Push_Influence1504_g153404);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g153404 = lerpResult1496_g153404;
				#else
				float2 staticSwitch1506_g153404 = staticSwitch1573_g153404;
				#endif
				half2 Base_Motion1440_g153404 = staticSwitch1506_g153404;
				half2 Final_RoationData1570_g153404 = Base_Motion1440_g153404;
				float4 In_RotationData16_g153406 = float4( Final_RoationData1570_g153404, 0.0 , 0.0 );
				Data16_g153406.Dummy = In_Dummy16_g153406;
				Data16_g153406.PositionOS = In_PositionOS16_g153406;
				Data16_g153406.PositionWS = In_PositionWS16_g153406;
				Data16_g153406.PositionWO = In_PositionWO16_g153406;
				Data16_g153406.PositionRawOS = In_PositionRawOS16_g153406;
				Data16_g153406.PositionAddOS = In_PositionAddOS16_g153406;
				Data16_g153406.PivotOS = In_PivotOS16_g153406;
				Data16_g153406.PivotWS = In_PivotWS16_g153406;
				Data16_g153406.PivotWO = In_PivotWO16_g153406;
				Data16_g153406.NormalOS = In_NormalOS16_g153406;
				Data16_g153406.NormalWS = In_NormalWS16_g153406;
				Data16_g153406.NormalRawOS = In_NormalRawOS16_g153406;
				Data16_g153406.NormalRawWS = In_NormalRawWS16_g153406;
				Data16_g153406.TangentOS = In_TangentOS16_g153406;
				Data16_g153406.ViewDirWS = In_ViewDirWS16_g153406;
				Data16_g153406.VertexData = In_VertexData16_g153406;
				Data16_g153406.MotionData = In_MotionData16_g153406;
				Data16_g153406.BoundsData = In_BoundsData16_g153406;
				Data16_g153406.RotationData = In_RotationData16_g153406;
				TVEModelData Data15_g153437 = Data16_g153406;
				float Out_Dummy15_g153437 = 0;
				float3 Out_PositionOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153437 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153437 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153437 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153437 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153437 = float3( 0,0,0 );
				float4 Out_VertexData15_g153437 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153437 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153437 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153437 = float4( 0,0,0,0 );
				Out_Dummy15_g153437 = Data15_g153437.Dummy;
				Out_PositionOS15_g153437 = Data15_g153437.PositionOS;
				Out_PositionWS15_g153437 = Data15_g153437.PositionWS;
				Out_PositionWO15_g153437 = Data15_g153437.PositionWO;
				Out_PositionRawOS15_g153437 = Data15_g153437.PositionRawOS;
				Out_PositionAddOS15_g153437 = Data15_g153437.PositionAddOS;
				Out_PivotOS15_g153437 = Data15_g153437.PivotOS;
				Out_PivotWS15_g153437 = Data15_g153437.PivotWS;
				Out_PivotWO15_g153437 = Data15_g153437.PivotWO;
				Out_NormalOS15_g153437 = Data15_g153437.NormalOS;
				Out_NormalWS15_g153437 = Data15_g153437.NormalWS;
				Out_NormalRawOS15_g153437 = Data15_g153437.NormalRawOS;
				Out_NormalRawWS15_g153437 = Data15_g153437.NormalRawWS;
				Out_TangentOS15_g153437 = Data15_g153437.TangentOS;
				Out_ViewDirWS15_g153437 = Data15_g153437.ViewDirWS;
				Out_VertexData15_g153437 = Data15_g153437.VertexData;
				Out_MotionData15_g153437 = Data15_g153437.MotionData;
				Out_BoundsData15_g153437 = Data15_g153437.BoundsData;
				Out_RotationData15_g153437 = Data15_g153437.RotationData;
				half3 Model_PositionOS147_g153436 = Out_PositionOS15_g153437;
				half3 Input_False58_g153439 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153440 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153441 = VertexPos40_g153440;
				float3 appendResult74_g153441 = (float3(VertexPos40_g153441.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g153441 = appendResult74_g153441;
				float3 break84_g153441 = VertexPos40_g153441;
				float3 appendResult81_g153441 = (float3(0.0 , break84_g153441.y , break84_g153441.z));
				half3 VertexPosOtherAxis82_g153441 = appendResult81_g153441;
				float4 temp_output_1567_33_g153436 = Out_RotationData15_g153437;
				half4 Model_VertexBend1569_g153436 = temp_output_1567_33_g153436;
				half2 Angle44_g153440 = (Model_VertexBend1569_g153436).xy;
				half Angle44_g153441 = (Angle44_g153440).y;
				half3 VertexPos40_g153442 = ( VertexPosRotationAxis50_g153441 + ( VertexPosOtherAxis82_g153441 * cos( Angle44_g153441 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g153441 ) * sin( Angle44_g153441 ) ) );
				float3 appendResult74_g153442 = (float3(0.0 , 0.0 , VertexPos40_g153442.z));
				half3 VertexPosRotationAxis50_g153442 = appendResult74_g153442;
				float3 break84_g153442 = VertexPos40_g153442;
				float3 appendResult81_g153442 = (float3(break84_g153442.x , break84_g153442.y , 0.0));
				half3 VertexPosOtherAxis82_g153442 = appendResult81_g153442;
				half Angle44_g153442 = -(Angle44_g153440).x;
				half3 Input_True57_g153439 = ( VertexPosRotationAxis50_g153442 + ( VertexPosOtherAxis82_g153442 * cos( Angle44_g153442 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g153442 ) * sin( Angle44_g153442 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch65_g153439 = Input_False58_g153439;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch67_g153439 = staticSwitch65_g153439;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch69_g153439 = staticSwitch67_g153439;
				#endif
				float3 temp_output_1578_0_g153436 = staticSwitch69_g153439;
				float3 temp_output_1567_31_g153436 = Out_PositionAddOS15_g153437;
				half3 Model_PositionADD1568_g153436 = temp_output_1567_31_g153436;
				half3 Final_PositionOS178_g153436 = ( temp_output_1578_0_g153436 + Model_PositionADD1568_g153436 );
				float3 In_PositionOS16_g153438 = Final_PositionOS178_g153436;
				float3 In_PositionWS16_g153438 = Out_PositionWS15_g153437;
				float3 In_PositionWO16_g153438 = Out_PositionWO15_g153437;
				float3 In_PositionRawOS16_g153438 = Out_PositionRawOS15_g153437;
				float3 In_PositionAddOS16_g153438 = temp_output_1567_31_g153436;
				float3 In_PivotOS16_g153438 = Out_PivotOS15_g153437;
				float3 In_PivotWS16_g153438 = Out_PivotWS15_g153437;
				float3 In_PivotWO16_g153438 = Out_PivotWO15_g153437;
				float3 In_NormalOS16_g153438 = Out_NormalOS15_g153437;
				float3 In_NormalWS16_g153438 = Out_NormalWS15_g153437;
				float3 In_NormalRawOS16_g153438 = Out_NormalRawOS15_g153437;
				float3 In_NormalRawWS16_g153438 = Out_NormalRawWS15_g153437;
				float4 In_TangentOS16_g153438 = Out_TangentOS15_g153437;
				float3 In_ViewDirWS16_g153438 = Out_ViewDirWS15_g153437;
				float4 In_VertexData16_g153438 = Out_VertexData15_g153437;
				float4 In_MotionData16_g153438 = Out_MotionData15_g153437;
				float4 In_BoundsData16_g153438 = Out_BoundsData15_g153437;
				float4 In_RotationData16_g153438 = temp_output_1567_33_g153436;
				Data16_g153438.Dummy = In_Dummy16_g153438;
				Data16_g153438.PositionOS = In_PositionOS16_g153438;
				Data16_g153438.PositionWS = In_PositionWS16_g153438;
				Data16_g153438.PositionWO = In_PositionWO16_g153438;
				Data16_g153438.PositionRawOS = In_PositionRawOS16_g153438;
				Data16_g153438.PositionAddOS = In_PositionAddOS16_g153438;
				Data16_g153438.PivotOS = In_PivotOS16_g153438;
				Data16_g153438.PivotWS = In_PivotWS16_g153438;
				Data16_g153438.PivotWO = In_PivotWO16_g153438;
				Data16_g153438.NormalOS = In_NormalOS16_g153438;
				Data16_g153438.NormalWS = In_NormalWS16_g153438;
				Data16_g153438.NormalRawOS = In_NormalRawOS16_g153438;
				Data16_g153438.NormalRawWS = In_NormalRawWS16_g153438;
				Data16_g153438.TangentOS = In_TangentOS16_g153438;
				Data16_g153438.ViewDirWS = In_ViewDirWS16_g153438;
				Data16_g153438.VertexData = In_VertexData16_g153438;
				Data16_g153438.MotionData = In_MotionData16_g153438;
				Data16_g153438.BoundsData = In_BoundsData16_g153438;
				Data16_g153438.RotationData = In_RotationData16_g153438;
				TVEModelData Data15_g153458 = Data16_g153438;
				float Out_Dummy15_g153458 = 0;
				float3 Out_PositionOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153458 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153458 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153458 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153458 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153458 = float3( 0,0,0 );
				float4 Out_VertexData15_g153458 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153458 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153458 = float4( 0,0,0,0 );
				Out_Dummy15_g153458 = Data15_g153458.Dummy;
				Out_PositionOS15_g153458 = Data15_g153458.PositionOS;
				Out_PositionWS15_g153458 = Data15_g153458.PositionWS;
				Out_PositionWO15_g153458 = Data15_g153458.PositionWO;
				Out_PositionRawOS15_g153458 = Data15_g153458.PositionRawOS;
				Out_PositionAddOS15_g153458 = Data15_g153458.PositionAddOS;
				Out_PivotOS15_g153458 = Data15_g153458.PivotOS;
				Out_PivotWS15_g153458 = Data15_g153458.PivotWS;
				Out_PivotWO15_g153458 = Data15_g153458.PivotWO;
				Out_NormalOS15_g153458 = Data15_g153458.NormalOS;
				Out_NormalWS15_g153458 = Data15_g153458.NormalWS;
				Out_NormalRawOS15_g153458 = Data15_g153458.NormalRawOS;
				Out_NormalRawWS15_g153458 = Data15_g153458.NormalRawWS;
				Out_TangentOS15_g153458 = Data15_g153458.TangentOS;
				Out_ViewDirWS15_g153458 = Data15_g153458.ViewDirWS;
				Out_VertexData15_g153458 = Data15_g153458.VertexData;
				Out_MotionData15_g153458 = Data15_g153458.MotionData;
				Out_BoundsData15_g153458 = Data15_g153458.BoundsData;
				Out_RotationData15_g153458 = Data15_g153458.RotationData;
				float3 temp_output_31_0_g153451 = Out_PositionOS15_g153458;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag305_g153142;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldNormal;
				
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				inputMesh.positionOS.xyz += ( ( temp_output_31_0_g153451 - Out_PositionRawOS15_g153458 ) + _DisableSRPBatcher );

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS.xyz );
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				return outputPackedVaryingsMeshToPS;
			}

			void Frag(  PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_NORMAL_BUFFER
				, out float4 outNormalBuffer : SV_Target0
					#ifdef WRITE_MSAA_DEPTH
				, out float1 depthColor : SV_Target1
					#endif
				#elif defined(SCENESELECTIONPASS)
				, out float4 outColor : SV_Target0
				#endif
				, out float outputDepth : SV_Depth
				
			)
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );

				//#ifdef LOD_FADE_CROSSFADE
				//float3 VC = GetWorldSpaceNormalizeViewDir(packedInput.interp00.xyz);
				//LODDitheringTransition(ComputeFadeMaskSeed(VC, packedInput.positionCS.xy), unity_LODFade.x);
				//#endif

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;
				SurfaceOutput o = (SurfaceOutput)0;

				o.Normal = float3( 0, 0, 1 );
				float4 positionCS = 0;
				float3 positionWS = 0;
				float localCustomAlphaClip19_g153463 = ( 0.0 );
				float localBreakData4_g153454 = ( 0.0 );
				float localCompData3_g153446 = ( 0.0 );
				TVEVisualData Data3_g153446 = (TVEVisualData)0;
				half Dummy145_g153444 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g153446 = Dummy145_g153444;
				float localBreakData4_g153445 = ( 0.0 );
				float localCompData3_g153399 = ( 0.0 );
				TVEVisualData Data3_g153399 = (TVEVisualData)0;
				half Dummy145_g153389 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + 0.0 );
				float In_Dummy3_g153399 = Dummy145_g153389;
				float localBreakData4_g153398 = ( 0.0 );
				float localCompData3_g153373 = ( 0.0 );
				TVEVisualData Data3_g153373 = (TVEVisualData)0;
				half Dummy594_g153370 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g153373 = Dummy594_g153370;
				float localBreakData4_g153372 = ( 0.0 );
				float localCompData3_g153358 = ( 0.0 );
				TVEVisualData Data3_g153358 = (TVEVisualData)0;
				half Dummy594_g153357 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeInfo );
				float In_Dummy3_g153358 = Dummy594_g153357;
				float localBreakData4_g153368 = ( 0.0 );
				float localCompData3_g153330 = ( 0.0 );
				TVEVisualData Data3_g153330 = (TVEVisualData)0;
				half Dummy594_g153328 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeInfo );
				float In_Dummy3_g153330 = Dummy594_g153328;
				float localBreakData4_g153329 = ( 0.0 );
				float localCompData3_g153295 = ( 0.0 );
				TVEVisualData Data3_g153295 = (TVEVisualData)0;
				half Dummy594_g153292 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeInfo );
				float In_Dummy3_g153295 = Dummy594_g153292;
				float localBreakData4_g153293 = ( 0.0 );
				float localCompData3_g153272 = ( 0.0 );
				TVEVisualData Data3_g153272 = (TVEVisualData)0;
				half Dummy205_g153269 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeInfo );
				float In_Dummy3_g153272 = Dummy205_g153269;
				float localBreakData4_g153271 = ( 0.0 );
				float localCompData3_g153266 = ( 0.0 );
				TVEVisualData Data3_g153266 = (TVEVisualData)0;
				half Dummy205_g153245 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g153266 = Dummy205_g153245;
				float localBreakData4_g153267 = ( 0.0 );
				float localCompData3_g153239 = ( 0.0 );
				TVEVisualData Data3_g153239 = (TVEVisualData)0;
				half Dummy220_g153236 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g153239 = Dummy220_g153236;
				float localBreakData4_g153238 = ( 0.0 );
				float localCompData3_g153152 = ( 0.0 );
				TVEVisualData Data3_g153152 = (TVEVisualData)0;
				float In_Dummy3_g153152 = 0.0;
				float4 output0 = 0;
				float4 output1 = 0;
				float4 output2 = 0;
				OctaImpostorFragment( o, positionCS, positionWS, packedInput.UVsFrame122_g151868, packedInput.UVsFrame222_g151868, packedInput.UVsFrame322_g151868, packedInput.octaframe22_g151868, packedInput.viewPos22_g151868, output0, output1, output2 );
				float4 temp_cast_0 = (1.0).xxxx;
				half4 Input_Tex0377_g153142 = output0;
				half4 Input_Tex1379_g153142 = output1;
				float4 temp_cast_3 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch403_g153142 = temp_cast_3;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch403_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch403_g153142 = temp_cast_3;
				#endif
				half Local_MultiMask249_g153142 = (staticSwitch403_g153142).b;
				float lerpResult289_g153142 = lerp( 1.0 , Local_MultiMask249_g153142 , _ImpostorColorMode);
				float3 lerpResult292_g153142 = lerp( (_ImpostorColorTwo).rgb , (_ImpostorColor).rgb , lerpResult289_g153142);
				half3 Local_Albedo239_g153142 = ( o.Albedo * lerpResult292_g153142 );
				float3 In_Albedo3_g153152 = Local_Albedo239_g153142;
				float3 In_AlbedoRaw3_g153152 = Local_Albedo239_g153142;
				float2 temp_cast_4 = (0.5).xx;
				float2 In_NormalTS3_g153152 = temp_cast_4;
				float3 In_NormalWS3_g153152 = o.Normal;
				float4 temp_cast_5 = (1.0).xxxx;
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch385_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch385_g153142 = temp_cast_6;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch385_g153142 = temp_cast_7;
				#endif
				half Local_Metallic247_g153142 = (staticSwitch385_g153142).r;
				half Final_Metallic238_g153142 = ( Local_Metallic247_g153142 * _ImpostorMetallicValue );
				float4 temp_cast_8 = (1.0).xxxx;
				float4 temp_cast_9 = (1.0).xxxx;
				float4 temp_cast_10 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch392_g153142 = temp_cast_10;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch392_g153142 = temp_cast_9;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch392_g153142 = temp_cast_10;
				#endif
				half Local_OcclusionOrEmissive248_g153142 = (staticSwitch392_g153142).g;
				float lerpResult431_g153142 = lerp( 1.0 , Local_OcclusionOrEmissive248_g153142 , _ImpostorOcclusionValue);
				#ifdef TVE_EMISSIVE
				float staticSwitch428_g153142 = 1.0;
				#else
				float staticSwitch428_g153142 = lerpResult431_g153142;
				#endif
				half Final_Occlusion424_g153142 = staticSwitch428_g153142;
				float4 temp_cast_11 = (1.0).xxxx;
				float4 temp_cast_12 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch408_g153142 = temp_cast_12;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch408_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch408_g153142 = temp_cast_12;
				#endif
				half Local_Smoothness250_g153142 = (staticSwitch408_g153142).a;
				half Final_Smoothness233_g153142 = ( Local_Smoothness250_g153142 * _ImpostorSmoothnessValue );
				float4 appendResult257_g153142 = (float4(Final_Metallic238_g153142 , Final_Occlusion424_g153142 , 1.0 , Final_Smoothness233_g153142));
				float4 In_Shader3_g153152 = appendResult257_g153142;
				float4 appendResult286_g153142 = (float4(Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , 1.0));
				float4 In_Emissive3_g153152 = appendResult286_g153142;
				float3 temp_output_3_0_g153143 = Local_Albedo239_g153142;
				float dotResult20_g153143 = dot( temp_output_3_0_g153143 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale268_g153142 = dotResult20_g153143;
				float In_Grayscale3_g153152 = Local_Grayscale268_g153142;
				float clampResult267_g153142 = clamp( saturate( ( Local_Grayscale268_g153142 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity269_g153142 = clampResult267_g153142;
				float In_Luminosity3_g153152 = Local_Luminosity269_g153142;
				float In_MultiMask3_g153152 = Local_MultiMask249_g153142;
				float In_AlphaClip3_g153152 = 0.0;
				float In_AlphaFade3_g153152 = 1.0;
				float3 temp_cast_13 = (1.0).xxx;
				float3 In_Translucency3_g153152 = temp_cast_13;
				float In_Transmission3_g153152 = 1.0;
				float In_Thickness3_g153152 = 0.0;
				float In_Diffusion3_g153152 = 0.0;
				Data3_g153152.Dummy = In_Dummy3_g153152;
				Data3_g153152.Albedo = In_Albedo3_g153152;
				Data3_g153152.AlbedoRaw = In_AlbedoRaw3_g153152;
				Data3_g153152.NormalTS = In_NormalTS3_g153152;
				Data3_g153152.NormalWS = In_NormalWS3_g153152;
				Data3_g153152.Shader = In_Shader3_g153152;
				Data3_g153152.Emissive= In_Emissive3_g153152;
				Data3_g153152.MultiMask = In_MultiMask3_g153152;
				Data3_g153152.Grayscale = In_Grayscale3_g153152;
				Data3_g153152.Luminosity = In_Luminosity3_g153152;
				Data3_g153152.AlphaClip = In_AlphaClip3_g153152;
				Data3_g153152.AlphaFade = In_AlphaFade3_g153152;
				Data3_g153152.Translucency = In_Translucency3_g153152;
				Data3_g153152.Transmission = In_Transmission3_g153152;
				Data3_g153152.Thickness = In_Thickness3_g153152;
				Data3_g153152.Diffusion = In_Diffusion3_g153152;
				TVEVisualData Data4_g153238 = Data3_g153152;
				float Out_Dummy4_g153238 = 0;
				float3 Out_Albedo4_g153238 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153238 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153238 = float2( 0,0 );
				float3 Out_NormalWS4_g153238 = float3( 0,0,0 );
				float4 Out_Shader4_g153238 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153238 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153238 = 0;
				float Out_Grayscale4_g153238 = 0;
				float Out_Luminosity4_g153238 = 0;
				float Out_AlphaClip4_g153238 = 0;
				float Out_AlphaFade4_g153238 = 0;
				float3 Out_Translucency4_g153238 = float3( 0,0,0 );
				float Out_Transmission4_g153238 = 0;
				float Out_Thickness4_g153238 = 0;
				float Out_Diffusion4_g153238 = 0;
				Out_Dummy4_g153238 = Data4_g153238.Dummy;
				Out_Albedo4_g153238 = Data4_g153238.Albedo;
				Out_AlbedoRaw4_g153238 = Data4_g153238.AlbedoRaw;
				Out_NormalTS4_g153238 = Data4_g153238.NormalTS;
				Out_NormalWS4_g153238 = Data4_g153238.NormalWS;
				Out_Shader4_g153238 = Data4_g153238.Shader;
				Out_Emissive4_g153238= Data4_g153238.Emissive;
				Out_MultiMask4_g153238 = Data4_g153238.MultiMask;
				Out_Grayscale4_g153238 = Data4_g153238.Grayscale;
				Out_Luminosity4_g153238= Data4_g153238.Luminosity;
				Out_AlphaClip4_g153238 = Data4_g153238.AlphaClip;
				Out_AlphaFade4_g153238 = Data4_g153238.AlphaFade;
				Out_Translucency4_g153238 = Data4_g153238.Translucency;
				Out_Transmission4_g153238 = Data4_g153238.Transmission;
				Out_Thickness4_g153238 = Data4_g153238.Thickness;
				Out_Diffusion4_g153238 = Data4_g153238.Diffusion;
				half3 Visual_Albedo127_g153236 = Out_Albedo4_g153238;
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				half3 Input_PositionWS319_g153142 = GetAbsolutePositionWS( positionWS );
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 vertexToFrag305_g153142 = packedInput.ase_texcoord5.xyz;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 ase_worldNormal = packedInput.ase_texcoord6.xyz;
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_14 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = output2;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_17 = (1.0).xxxx;
				float4 temp_cast_18 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_18;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_17;
				#else
				float4 staticSwitch414_g153142 = temp_cast_18;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153244 = Data16_g153151;
				float Out_Dummy15_g153244 = 0;
				float3 Out_PositionWS15_g153244 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153244 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153244 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153244 = float3( 0,0,0 );
				float4 Out_VertexData15_g153244 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153244 = float4( 0,0,0,0 );
				Out_Dummy15_g153244 = Data15_g153244.Dummy;
				Out_PositionWS15_g153244 = Data15_g153244.PositionWS;
				Out_PositionWO15_g153244 = Data15_g153244.PositionWO;
				Out_PivotWS15_g153244 = Data15_g153244.PivotWS;
				Out_PivotWO15_g153244 = Data15_g153244.PivotWO;
				Out_NormalWS15_g153244 = Data15_g153244.NormalWS;
				Out_ViewDirWS15_g153244 = Data15_g153244.ViewDirWS;
				Out_VertexData15_g153244 = Data15_g153244.VertexData;
				Out_BoundsData15_g153244 = Data15_g153244.BoundsData;
				half3 Model_PositionWO224_g153236 = Out_PositionWO15_g153244;
				half3 Model_PivotWO239_g153236 = Out_PivotWO15_g153244;
				float3 lerpResult242_g153236 = lerp( Model_PositionWO224_g153236 , Model_PivotWO239_g153236 , _VariationNoisePivotValue);
				float4 tex3DNode60_g153240 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g153236 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g153242 = clamp( tex3DNode60_g153240.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g153243 = _VariationNoiseRemap.x;
				float temp_output_10_0_g153243 = ( _VariationNoiseRemap.y - temp_output_7_0_g153243 );
				float temp_output_238_0_g153236 = saturate( ( ( clampResult17_g153242 - temp_output_7_0_g153243 ) / ( temp_output_10_0_g153243 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g153236 = temp_output_238_0_g153236;
				half Variaton_Mask200_g153236 = Variaton_NoiseMask82_g153236;
				float3 lerpResult75_g153236 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g153236);
				float temp_output_162_11_g153236 = Out_MultiMask4_g153238;
				half Visual_MultiMask196_g153236 = temp_output_162_11_g153236;
				float lerpResult190_g153236 = lerp( 1.0 , Visual_MultiMask196_g153236 , _VariationMultiValue);
				half Variaton_MultiMask194_g153236 = lerpResult190_g153236;
				float3 lerpResult186_g153236 = lerp( Visual_Albedo127_g153236 , ( Visual_Albedo127_g153236 * lerpResult75_g153236 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g153236 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g153236 = lerpResult186_g153236;
				#else
				float3 staticSwitch171_g153236 = Visual_Albedo127_g153236;
				#endif
				half3 Final_Albedo160_g153236 = staticSwitch171_g153236;
				float3 In_Albedo3_g153239 = Final_Albedo160_g153236;
				float3 In_AlbedoRaw3_g153239 = Final_Albedo160_g153236;
				float2 In_NormalTS3_g153239 = Out_NormalTS4_g153238;
				float3 In_NormalWS3_g153239 = Out_NormalWS4_g153238;
				float4 In_Shader3_g153239 = Out_Shader4_g153238;
				float4 In_Emissive3_g153239 = Out_Emissive4_g153238;
				float3 temp_output_3_0_g153237 = Final_Albedo160_g153236;
				float dotResult20_g153237 = dot( temp_output_3_0_g153237 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g153236 = dotResult20_g153237;
				float In_Grayscale3_g153239 = Final_Grayscale164_g153236;
				float clampResult180_g153236 = clamp( saturate( ( Final_Grayscale164_g153236 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g153236 = clampResult180_g153236;
				float In_Luminosity3_g153239 = Final_Luminosity181_g153236;
				float In_MultiMask3_g153239 = temp_output_162_11_g153236;
				float In_AlphaClip3_g153239 = Out_AlphaClip4_g153238;
				float In_AlphaFade3_g153239 = Out_AlphaFade4_g153238;
				float3 In_Translucency3_g153239 = Out_Translucency4_g153238;
				float In_Transmission3_g153239 = Out_Transmission4_g153238;
				float In_Thickness3_g153239 = Out_Thickness4_g153238;
				float In_Diffusion3_g153239 = Out_Diffusion4_g153238;
				Data3_g153239.Dummy = In_Dummy3_g153239;
				Data3_g153239.Albedo = In_Albedo3_g153239;
				Data3_g153239.AlbedoRaw = In_AlbedoRaw3_g153239;
				Data3_g153239.NormalTS = In_NormalTS3_g153239;
				Data3_g153239.NormalWS = In_NormalWS3_g153239;
				Data3_g153239.Shader = In_Shader3_g153239;
				Data3_g153239.Emissive= In_Emissive3_g153239;
				Data3_g153239.MultiMask = In_MultiMask3_g153239;
				Data3_g153239.Grayscale = In_Grayscale3_g153239;
				Data3_g153239.Luminosity = In_Luminosity3_g153239;
				Data3_g153239.AlphaClip = In_AlphaClip3_g153239;
				Data3_g153239.AlphaFade = In_AlphaFade3_g153239;
				Data3_g153239.Translucency = In_Translucency3_g153239;
				Data3_g153239.Transmission = In_Transmission3_g153239;
				Data3_g153239.Thickness = In_Thickness3_g153239;
				Data3_g153239.Diffusion = In_Diffusion3_g153239;
				TVEVisualData Data4_g153267 = Data3_g153239;
				float Out_Dummy4_g153267 = 0;
				float3 Out_Albedo4_g153267 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153267 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153267 = float2( 0,0 );
				float3 Out_NormalWS4_g153267 = float3( 0,0,0 );
				float4 Out_Shader4_g153267 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153267 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153267 = 0;
				float Out_Grayscale4_g153267 = 0;
				float Out_Luminosity4_g153267 = 0;
				float Out_AlphaClip4_g153267 = 0;
				float Out_AlphaFade4_g153267 = 0;
				float3 Out_Translucency4_g153267 = float3( 0,0,0 );
				float Out_Transmission4_g153267 = 0;
				float Out_Thickness4_g153267 = 0;
				float Out_Diffusion4_g153267 = 0;
				Out_Dummy4_g153267 = Data4_g153267.Dummy;
				Out_Albedo4_g153267 = Data4_g153267.Albedo;
				Out_AlbedoRaw4_g153267 = Data4_g153267.AlbedoRaw;
				Out_NormalTS4_g153267 = Data4_g153267.NormalTS;
				Out_NormalWS4_g153267 = Data4_g153267.NormalWS;
				Out_Shader4_g153267 = Data4_g153267.Shader;
				Out_Emissive4_g153267= Data4_g153267.Emissive;
				Out_MultiMask4_g153267 = Data4_g153267.MultiMask;
				Out_Grayscale4_g153267 = Data4_g153267.Grayscale;
				Out_Luminosity4_g153267= Data4_g153267.Luminosity;
				Out_AlphaClip4_g153267 = Data4_g153267.AlphaClip;
				Out_AlphaFade4_g153267 = Data4_g153267.AlphaFade;
				Out_Translucency4_g153267 = Data4_g153267.Translucency;
				Out_Transmission4_g153267 = Data4_g153267.Transmission;
				Out_Thickness4_g153267 = Data4_g153267.Thickness;
				Out_Diffusion4_g153267 = Data4_g153267.Diffusion;
				half3 Visual_Albedo139_g153245 = Out_Albedo4_g153267;
				float temp_output_200_12_g153245 = Out_Grayscale4_g153267;
				half Visual_Grayscale150_g153245 = temp_output_200_12_g153245;
				float3 temp_cast_20 = (Visual_Grayscale150_g153245).xxx;
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153246 = Data204_g153153;
				float Out_Dummy15_g153246 = 0;
				float4 Out_CoatParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153246 = float4( 0,0,0,0 );
				Out_Dummy15_g153246 = Data15_g153246.Dummy;
				Out_CoatParams15_g153246 = Data15_g153246.CoatParams;
				Out_PaintParams15_g153246 = Data15_g153246.PaintParams;
				Out_GlowParams15_g153246 = Data15_g153246.GlowParams;
				Out_AtmoParams15_g153246= Data15_g153246.AtmoParams;
				Out_FadeParams15_g153246= Data15_g153246.FadeParams;
				Out_FormParams15_g153246 = Data15_g153246.FormParams;
				Out_LandParams15_g153246 = Data15_g153246.LandParams;
				Out_WindParams15_g153246 = Data15_g153246.WindParams;
				Out_PushParams15_g153246 = Data15_g153246.PushParams;
				half4 Global_PaintParams209_g153245 = Out_PaintParams15_g153246;
				float temp_output_6_0_g153247 = ( saturate( (Global_PaintParams209_g153245).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g153247 = ( temp_output_6_0_g153247 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g153247 = temp_output_6_0_g153247;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g153245 = staticSwitch14_g153247;
				#else
				float staticSwitch283_g153245 = 1.0;
				#endif
				half Tinting_GlobalValue285_g153245 = staticSwitch283_g153245;
				float3 lerpResult368_g153245 = lerp( Visual_Albedo139_g153245 , temp_cast_20 , ( Tinting_GlobalValue285_g153245 * _TintingGrayValue ));
				float3 temp_cast_49 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g153245 = (Global_PaintParams209_g153245).xyz;
				#else
				float3 staticSwitch288_g153245 = temp_cast_49;
				#endif
				half3 Tinting_ColorGlobal290_g153245 = staticSwitch288_g153245;
				float temp_output_200_11_g153245 = Out_MultiMask4_g153267;
				half Visual_MultiMask181_g153245 = temp_output_200_11_g153245;
				float lerpResult147_g153245 = lerp( 1.0 , Visual_MultiMask181_g153245 , _TintingMultiValue);
				half Tinting_MutiMask121_g153245 = lerpResult147_g153245;
				half Tinting_TexMask385_g153245 = 1.0;
				float temp_output_200_15_g153245 = Out_Luminosity4_g153267;
				half Visual_Luminosity257_g153245 = temp_output_200_15_g153245;
				float clampResult17_g153259 = clamp( Visual_Luminosity257_g153245 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153258 = _TintingLumaRemap.x;
				float temp_output_10_0_g153258 = ( _TintingLumaRemap.y - temp_output_7_0_g153258 );
				float lerpResult228_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153259 - temp_output_7_0_g153258 ) / ( temp_output_10_0_g153258 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g153245 = lerpResult228_g153245;
				TVEModelData Data15_g153268 = Data16_g153151;
				float Out_Dummy15_g153268 = 0;
				float3 Out_PositionWS15_g153268 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153268 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153268 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153268 = float3( 0,0,0 );
				float4 Out_VertexData15_g153268 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153268 = float4( 0,0,0,0 );
				Out_Dummy15_g153268 = Data15_g153268.Dummy;
				Out_PositionWS15_g153268 = Data15_g153268.PositionWS;
				Out_PositionWO15_g153268 = Data15_g153268.PositionWO;
				Out_PivotWS15_g153268 = Data15_g153268.PivotWS;
				Out_PivotWO15_g153268 = Data15_g153268.PivotWO;
				Out_NormalWS15_g153268 = Data15_g153268.NormalWS;
				Out_ViewDirWS15_g153268 = Data15_g153268.ViewDirWS;
				Out_VertexData15_g153268 = Data15_g153268.VertexData;
				Out_BoundsData15_g153268 = Data15_g153268.BoundsData;
				half4 Model_VertexMasks307_g153245 = Out_VertexData15_g153268;
				float4 break311_g153245 = Model_VertexMasks307_g153245;
				float4 break33_g153251 = _tinting_vert_mode;
				float temp_output_30_0_g153251 = ( break311_g153245.x * break33_g153251.x );
				float temp_output_29_0_g153251 = ( break311_g153245.y * break33_g153251.y );
				float temp_output_31_0_g153251 = ( break311_g153245.z * break33_g153251.z );
				float temp_output_28_0_g153251 = ( temp_output_30_0_g153251 + temp_output_29_0_g153251 + temp_output_31_0_g153251 + ( break311_g153245.w * break33_g153251.w ) );
				float clampResult17_g153257 = clamp( temp_output_28_0_g153251 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153256 = _TintingMeshRemap.x;
				float temp_output_10_0_g153256 = ( _TintingMeshRemap.y - temp_output_7_0_g153256 );
				float lerpResult370_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153257 - temp_output_7_0_g153256 ) / ( temp_output_10_0_g153256 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g153260 = lerpResult370_g153245;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153260 = ( temp_output_6_0_g153260 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153260 = temp_output_6_0_g153260;
				#endif
				float temp_output_333_0_g153245 = staticSwitch14_g153260;
				half Tinting_VertMask309_g153245 = temp_output_333_0_g153245;
				half Tinting_NoiseMask213_g153245 = 1.0;
				half Custom_Mask345_g153245 = 1.0;
				float temp_output_7_0_g153254 = _TintingBlendRemap.x;
				float temp_output_10_0_g153254 = ( _TintingBlendRemap.y - temp_output_7_0_g153254 );
				half Tinting_Mask242_g153245 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g153245 * Tinting_TexMask385_g153245 * Tinting_LumaMask153_g153245 * Tinting_VertMask309_g153245 * Tinting_NoiseMask213_g153245 * Tinting_GlobalValue285_g153245 * Custom_Mask345_g153245 ) - temp_output_7_0_g153254 ) / ( temp_output_10_0_g153254 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g153245 = lerp( Visual_Albedo139_g153245 , ( lerpResult368_g153245 * 4.594794 * Tinting_ColorGlobal290_g153245 * (_TintingColor).rgb ) , Tinting_Mask242_g153245);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g153245 = lerpResult90_g153245;
				#else
				float3 staticSwitch286_g153245 = Visual_Albedo139_g153245;
				#endif
				half3 Final_Albedo97_g153245 = staticSwitch286_g153245;
				float3 In_Albedo3_g153266 = Final_Albedo97_g153245;
				float3 In_AlbedoRaw3_g153266 = Out_AlbedoRaw4_g153267;
				float2 In_NormalTS3_g153266 = Out_NormalTS4_g153267;
				float3 In_NormalWS3_g153266 = Out_NormalWS4_g153267;
				float4 In_Shader3_g153266 = Out_Shader4_g153267;
				float4 In_Emissive3_g153266 = Out_Emissive4_g153267;
				float In_Grayscale3_g153266 = temp_output_200_12_g153245;
				float In_Luminosity3_g153266 = temp_output_200_15_g153245;
				float In_MultiMask3_g153266 = temp_output_200_11_g153245;
				float In_AlphaClip3_g153266 = Out_AlphaClip4_g153267;
				float In_AlphaFade3_g153266 = Out_AlphaFade4_g153267;
				float3 In_Translucency3_g153266 = Out_Translucency4_g153267;
				float In_Transmission3_g153266 = Out_Transmission4_g153267;
				float In_Thickness3_g153266 = Out_Thickness4_g153267;
				float In_Diffusion3_g153266 = Out_Diffusion4_g153267;
				Data3_g153266.Dummy = In_Dummy3_g153266;
				Data3_g153266.Albedo = In_Albedo3_g153266;
				Data3_g153266.AlbedoRaw = In_AlbedoRaw3_g153266;
				Data3_g153266.NormalTS = In_NormalTS3_g153266;
				Data3_g153266.NormalWS = In_NormalWS3_g153266;
				Data3_g153266.Shader = In_Shader3_g153266;
				Data3_g153266.Emissive= In_Emissive3_g153266;
				Data3_g153266.MultiMask = In_MultiMask3_g153266;
				Data3_g153266.Grayscale = In_Grayscale3_g153266;
				Data3_g153266.Luminosity = In_Luminosity3_g153266;
				Data3_g153266.AlphaClip = In_AlphaClip3_g153266;
				Data3_g153266.AlphaFade = In_AlphaFade3_g153266;
				Data3_g153266.Translucency = In_Translucency3_g153266;
				Data3_g153266.Transmission = In_Transmission3_g153266;
				Data3_g153266.Thickness = In_Thickness3_g153266;
				Data3_g153266.Diffusion = In_Diffusion3_g153266;
				TVEVisualData Data4_g153271 = Data3_g153266;
				float Out_Dummy4_g153271 = 0;
				float3 Out_Albedo4_g153271 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153271 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153271 = float2( 0,0 );
				float3 Out_NormalWS4_g153271 = float3( 0,0,0 );
				float4 Out_Shader4_g153271 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153271 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153271 = 0;
				float Out_Grayscale4_g153271 = 0;
				float Out_Luminosity4_g153271 = 0;
				float Out_AlphaClip4_g153271 = 0;
				float Out_AlphaFade4_g153271 = 0;
				float3 Out_Translucency4_g153271 = float3( 0,0,0 );
				float Out_Transmission4_g153271 = 0;
				float Out_Thickness4_g153271 = 0;
				float Out_Diffusion4_g153271 = 0;
				Out_Dummy4_g153271 = Data4_g153271.Dummy;
				Out_Albedo4_g153271 = Data4_g153271.Albedo;
				Out_AlbedoRaw4_g153271 = Data4_g153271.AlbedoRaw;
				Out_NormalTS4_g153271 = Data4_g153271.NormalTS;
				Out_NormalWS4_g153271 = Data4_g153271.NormalWS;
				Out_Shader4_g153271 = Data4_g153271.Shader;
				Out_Emissive4_g153271= Data4_g153271.Emissive;
				Out_MultiMask4_g153271 = Data4_g153271.MultiMask;
				Out_Grayscale4_g153271 = Data4_g153271.Grayscale;
				Out_Luminosity4_g153271= Data4_g153271.Luminosity;
				Out_AlphaClip4_g153271 = Data4_g153271.AlphaClip;
				Out_AlphaFade4_g153271 = Data4_g153271.AlphaFade;
				Out_Translucency4_g153271 = Data4_g153271.Translucency;
				Out_Transmission4_g153271 = Data4_g153271.Transmission;
				Out_Thickness4_g153271 = Data4_g153271.Thickness;
				Out_Diffusion4_g153271 = Data4_g153271.Diffusion;
				half3 Visual_Albedo292_g153269 = Out_Albedo4_g153271;
				float temp_output_280_12_g153269 = Out_Grayscale4_g153271;
				half Visual_Grayscale308_g153269 = temp_output_280_12_g153269;
				float3 temp_cast_50 = (Visual_Grayscale308_g153269).xxx;
				TVEGlobalData Data15_g153270 = Data204_g153153;
				float Out_Dummy15_g153270 = 0;
				float4 Out_CoatParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153270 = float4( 0,0,0,0 );
				Out_Dummy15_g153270 = Data15_g153270.Dummy;
				Out_CoatParams15_g153270 = Data15_g153270.CoatParams;
				Out_PaintParams15_g153270 = Data15_g153270.PaintParams;
				Out_GlowParams15_g153270 = Data15_g153270.GlowParams;
				Out_AtmoParams15_g153270= Data15_g153270.AtmoParams;
				Out_FadeParams15_g153270= Data15_g153270.FadeParams;
				Out_FormParams15_g153270 = Data15_g153270.FormParams;
				Out_LandParams15_g153270 = Data15_g153270.LandParams;
				Out_WindParams15_g153270 = Data15_g153270.WindParams;
				Out_PushParams15_g153270 = Data15_g153270.PushParams;
				half4 Global_AtmoParams314_g153269 = Out_AtmoParams15_g153270;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g153269 = ( (Global_AtmoParams314_g153269).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g153269 = 1.0;
				#endif
				half Dryness_GlobalMask352_g153269 = staticSwitch351_g153269;
				float3 lerpResult485_g153269 = lerp( Visual_Albedo292_g153269 , temp_cast_50 , ( Dryness_GlobalMask352_g153269 * _DrynessGrayValue ));
				half3 hsvTorgb58_g153290 = RGBToHSV( lerpResult485_g153269 );
				half3 hsvTorgb61_g153290 = HSVToRGB( half3(( hsvTorgb58_g153290.x + _DrynessShiftValue ),hsvTorgb58_g153290.y,hsvTorgb58_g153290.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g153269 = hsvTorgb61_g153290;
				#else
				float3 staticSwitch499_g153269 = lerpResult485_g153269;
				#endif
				half Dryness_TexMask478_g153269 = 1.0;
				float temp_output_280_11_g153269 = Out_MultiMask4_g153271;
				half Visual_MultiMask310_g153269 = temp_output_280_11_g153269;
				float lerpResult283_g153269 = lerp( 1.0 , Visual_MultiMask310_g153269 , _DrynessMultiValue);
				half Dryness_MultiMask302_g153269 = lerpResult283_g153269;
				float temp_output_280_15_g153269 = Out_Luminosity4_g153271;
				half Visual_Luminosity309_g153269 = temp_output_280_15_g153269;
				float clampResult17_g153285 = clamp( Visual_Luminosity309_g153269 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153284 = _DrynessLumaRemap.x;
				float temp_output_10_0_g153284 = ( _DrynessLumaRemap.y - temp_output_7_0_g153284 );
				float lerpResult295_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153285 - temp_output_7_0_g153284 ) / ( temp_output_10_0_g153284 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g153269 = lerpResult295_g153269;
				TVEModelData Data15_g153291 = Data16_g153151;
				float Out_Dummy15_g153291 = 0;
				float3 Out_PositionWS15_g153291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153291 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153291 = float3( 0,0,0 );
				float4 Out_VertexData15_g153291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153291 = float4( 0,0,0,0 );
				Out_Dummy15_g153291 = Data15_g153291.Dummy;
				Out_PositionWS15_g153291 = Data15_g153291.PositionWS;
				Out_PositionWO15_g153291 = Data15_g153291.PositionWO;
				Out_PivotWS15_g153291 = Data15_g153291.PivotWS;
				Out_PivotWO15_g153291 = Data15_g153291.PivotWO;
				Out_NormalWS15_g153291 = Data15_g153291.NormalWS;
				Out_ViewDirWS15_g153291 = Data15_g153291.ViewDirWS;
				Out_VertexData15_g153291 = Data15_g153291.VertexData;
				Out_BoundsData15_g153291 = Data15_g153291.BoundsData;
				half4 Model_VertexMasks386_g153269 = Out_VertexData15_g153291;
				float4 break375_g153269 = Model_VertexMasks386_g153269;
				float4 break33_g153278 = _dryness_vert_mode;
				float temp_output_30_0_g153278 = ( break375_g153269.x * break33_g153278.x );
				float temp_output_29_0_g153278 = ( break375_g153269.y * break33_g153278.y );
				float temp_output_31_0_g153278 = ( break375_g153269.z * break33_g153278.z );
				float temp_output_28_0_g153278 = ( temp_output_30_0_g153278 + temp_output_29_0_g153278 + temp_output_31_0_g153278 + ( break375_g153269.w * break33_g153278.w ) );
				float clampResult17_g153279 = clamp( temp_output_28_0_g153278 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153280 = _DrynessMeshRemap.x;
				float temp_output_10_0_g153280 = ( _DrynessMeshRemap.y - temp_output_7_0_g153280 );
				float lerpResult452_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153279 - temp_output_7_0_g153280 ) / ( temp_output_10_0_g153280 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g153286 = lerpResult452_g153269;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153286 = ( temp_output_6_0_g153286 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153286 = temp_output_6_0_g153286;
				#endif
				float temp_output_448_0_g153269 = staticSwitch14_g153286;
				half Dryness_VertMask378_g153269 = temp_output_448_0_g153269;
				half Dryness_MaskNoise291_g153269 = 1.0;
				half Custom_Mask411_g153269 = 1.0;
				float temp_output_7_0_g153283 = _DrynessBlendRemap.x;
				float temp_output_10_0_g153283 = ( _DrynessBlendRemap.y - temp_output_7_0_g153283 );
				half Dryness_Mask329_g153269 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g153269 * Dryness_MultiMask302_g153269 * Dryness_LumaMask301_g153269 * Dryness_VertMask378_g153269 * Dryness_MaskNoise291_g153269 * Dryness_GlobalMask352_g153269 * Custom_Mask411_g153269 ) - temp_output_7_0_g153283 ) / ( temp_output_10_0_g153283 + 0.0001 ) ) );
				float3 lerpResult336_g153269 = lerp( Visual_Albedo292_g153269 , ( staticSwitch499_g153269 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g153269 = lerpResult336_g153269;
				#else
				float3 staticSwitch356_g153269 = Visual_Albedo292_g153269;
				#endif
				half3 Final_Albedo331_g153269 = staticSwitch356_g153269;
				float3 In_Albedo3_g153272 = Final_Albedo331_g153269;
				float3 In_AlbedoRaw3_g153272 = Out_AlbedoRaw4_g153271;
				float2 In_NormalTS3_g153272 = Out_NormalTS4_g153271;
				float3 In_NormalWS3_g153272 = Out_NormalWS4_g153271;
				half4 Visual_Shader415_g153269 = Out_Shader4_g153271;
				float4 break438_g153269 = Visual_Shader415_g153269;
				float4 appendResult439_g153269 = (float4(break438_g153269.x , break438_g153269.y , break438_g153269.z , ( break438_g153269.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g153269 = lerp( Visual_Shader415_g153269 , appendResult439_g153269 , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g153269 = lerpResult427_g153269;
				#else
				float4 staticSwitch426_g153269 = Visual_Shader415_g153269;
				#endif
				half4 Final_Shader433_g153269 = staticSwitch426_g153269;
				float4 In_Shader3_g153272 = Final_Shader433_g153269;
				float4 In_Emissive3_g153272 = Out_Emissive4_g153271;
				float In_Grayscale3_g153272 = temp_output_280_12_g153269;
				float In_Luminosity3_g153272 = temp_output_280_15_g153269;
				float In_MultiMask3_g153272 = temp_output_280_11_g153269;
				float In_AlphaClip3_g153272 = Out_AlphaClip4_g153271;
				float In_AlphaFade3_g153272 = Out_AlphaFade4_g153271;
				float3 In_Translucency3_g153272 = Out_Translucency4_g153271;
				half Visual_Transmission416_g153269 = Out_Transmission4_g153271;
				float lerpResult421_g153269 = lerp( Visual_Transmission416_g153269 , ( Visual_Transmission416_g153269 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g153269 = lerpResult421_g153269;
				#else
				float staticSwitch418_g153269 = Visual_Transmission416_g153269;
				#endif
				half Final_Transmission425_g153269 = staticSwitch418_g153269;
				float In_Transmission3_g153272 = Final_Transmission425_g153269;
				float In_Thickness3_g153272 = Out_Thickness4_g153271;
				float In_Diffusion3_g153272 = Out_Diffusion4_g153271;
				Data3_g153272.Dummy = In_Dummy3_g153272;
				Data3_g153272.Albedo = In_Albedo3_g153272;
				Data3_g153272.AlbedoRaw = In_AlbedoRaw3_g153272;
				Data3_g153272.NormalTS = In_NormalTS3_g153272;
				Data3_g153272.NormalWS = In_NormalWS3_g153272;
				Data3_g153272.Shader = In_Shader3_g153272;
				Data3_g153272.Emissive= In_Emissive3_g153272;
				Data3_g153272.MultiMask = In_MultiMask3_g153272;
				Data3_g153272.Grayscale = In_Grayscale3_g153272;
				Data3_g153272.Luminosity = In_Luminosity3_g153272;
				Data3_g153272.AlphaClip = In_AlphaClip3_g153272;
				Data3_g153272.AlphaFade = In_AlphaFade3_g153272;
				Data3_g153272.Translucency = In_Translucency3_g153272;
				Data3_g153272.Transmission = In_Transmission3_g153272;
				Data3_g153272.Thickness = In_Thickness3_g153272;
				Data3_g153272.Diffusion = In_Diffusion3_g153272;
				TVEVisualData Data4_g153293 = Data3_g153272;
				float Out_Dummy4_g153293 = 0;
				float3 Out_Albedo4_g153293 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153293 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153293 = float2( 0,0 );
				float3 Out_NormalWS4_g153293 = float3( 0,0,0 );
				float4 Out_Shader4_g153293 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153293 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153293 = 0;
				float Out_Grayscale4_g153293 = 0;
				float Out_Luminosity4_g153293 = 0;
				float Out_AlphaClip4_g153293 = 0;
				float Out_AlphaFade4_g153293 = 0;
				float3 Out_Translucency4_g153293 = float3( 0,0,0 );
				float Out_Transmission4_g153293 = 0;
				float Out_Thickness4_g153293 = 0;
				float Out_Diffusion4_g153293 = 0;
				Out_Dummy4_g153293 = Data4_g153293.Dummy;
				Out_Albedo4_g153293 = Data4_g153293.Albedo;
				Out_AlbedoRaw4_g153293 = Data4_g153293.AlbedoRaw;
				Out_NormalTS4_g153293 = Data4_g153293.NormalTS;
				Out_NormalWS4_g153293 = Data4_g153293.NormalWS;
				Out_Shader4_g153293 = Data4_g153293.Shader;
				Out_Emissive4_g153293= Data4_g153293.Emissive;
				Out_MultiMask4_g153293 = Data4_g153293.MultiMask;
				Out_Grayscale4_g153293 = Data4_g153293.Grayscale;
				Out_Luminosity4_g153293= Data4_g153293.Luminosity;
				Out_AlphaClip4_g153293 = Data4_g153293.AlphaClip;
				Out_AlphaFade4_g153293 = Data4_g153293.AlphaFade;
				Out_Translucency4_g153293 = Data4_g153293.Translucency;
				Out_Transmission4_g153293 = Data4_g153293.Transmission;
				Out_Thickness4_g153293 = Data4_g153293.Thickness;
				Out_Diffusion4_g153293 = Data4_g153293.Diffusion;
				half3 Visual_Albedo127_g153292 = Out_Albedo4_g153293;
				float3 temp_output_622_0_g153292 = (_OverlayColor).rgb;
				half Overlay_TexMask908_g153292 = 1.0;
				float3 temp_output_739_21_g153292 = Out_NormalWS4_g153293;
				half3 Visual_NormalWS749_g153292 = temp_output_739_21_g153292;
				float clampResult17_g153313 = clamp( saturate( (Visual_NormalWS749_g153292).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g153312 = _OverlayProjRemap.x;
				float temp_output_10_0_g153312 = ( _OverlayProjRemap.y - temp_output_7_0_g153312 );
				float lerpResult842_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153313 - temp_output_7_0_g153312 ) / ( temp_output_10_0_g153312 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g153292 = lerpResult842_g153292;
				float temp_output_739_15_g153292 = Out_Luminosity4_g153293;
				half Visual_Luminosity654_g153292 = temp_output_739_15_g153292;
				float clampResult17_g153315 = clamp( Visual_Luminosity654_g153292 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153314 = _OverlayLumaRemap.x;
				float temp_output_10_0_g153314 = ( _OverlayLumaRemap.y - temp_output_7_0_g153314 );
				float lerpResult587_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153315 - temp_output_7_0_g153314 ) / ( temp_output_10_0_g153314 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g153292 = lerpResult587_g153292;
				TVEModelData Data15_g153327 = Data16_g153151;
				float Out_Dummy15_g153327 = 0;
				float3 Out_PositionWS15_g153327 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153327 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153327 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153327 = float3( 0,0,0 );
				float4 Out_VertexData15_g153327 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153327 = float4( 0,0,0,0 );
				Out_Dummy15_g153327 = Data15_g153327.Dummy;
				Out_PositionWS15_g153327 = Data15_g153327.PositionWS;
				Out_PositionWO15_g153327 = Data15_g153327.PositionWO;
				Out_PivotWS15_g153327 = Data15_g153327.PivotWS;
				Out_PivotWO15_g153327 = Data15_g153327.PivotWO;
				Out_NormalWS15_g153327 = Data15_g153327.NormalWS;
				Out_ViewDirWS15_g153327 = Data15_g153327.ViewDirWS;
				Out_VertexData15_g153327 = Data15_g153327.VertexData;
				Out_BoundsData15_g153327 = Data15_g153327.BoundsData;
				half4 Model_VertexMasks791_g153292 = Out_VertexData15_g153327;
				float4 break792_g153292 = Model_VertexMasks791_g153292;
				float4 break33_g153305 = _overlay_vert_mode;
				float temp_output_30_0_g153305 = ( break792_g153292.x * break33_g153305.x );
				float temp_output_29_0_g153305 = ( break792_g153292.y * break33_g153305.y );
				float temp_output_31_0_g153305 = ( break792_g153292.z * break33_g153305.z );
				float temp_output_28_0_g153305 = ( temp_output_30_0_g153305 + temp_output_29_0_g153305 + temp_output_31_0_g153305 + ( break792_g153292.w * break33_g153305.w ) );
				float clampResult17_g153306 = clamp( temp_output_28_0_g153305 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153309 = _OverlayMeshRemap.x;
				float temp_output_10_0_g153309 = ( _OverlayMeshRemap.y - temp_output_7_0_g153309 );
				float lerpResult881_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153306 - temp_output_7_0_g153309 ) / ( temp_output_10_0_g153309 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g153316 = lerpResult881_g153292;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153316 = ( temp_output_6_0_g153316 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153316 = temp_output_6_0_g153316;
				#endif
				float temp_output_831_0_g153292 = staticSwitch14_g153316;
				half Overlay_VertMask801_g153292 = temp_output_831_0_g153292;
				half Overlay_MaskNoise427_g153292 = 1.0;
				TVEGlobalData Data15_g153294 = Data204_g153153;
				float Out_Dummy15_g153294 = 0;
				float4 Out_CoatParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153294 = float4( 0,0,0,0 );
				Out_Dummy15_g153294 = Data15_g153294.Dummy;
				Out_CoatParams15_g153294 = Data15_g153294.CoatParams;
				Out_PaintParams15_g153294 = Data15_g153294.PaintParams;
				Out_GlowParams15_g153294 = Data15_g153294.GlowParams;
				Out_AtmoParams15_g153294= Data15_g153294.AtmoParams;
				Out_FadeParams15_g153294= Data15_g153294.FadeParams;
				Out_FormParams15_g153294 = Data15_g153294.FormParams;
				Out_LandParams15_g153294 = Data15_g153294.LandParams;
				Out_WindParams15_g153294 = Data15_g153294.WindParams;
				Out_PushParams15_g153294 = Data15_g153294.PushParams;
				half4 Global_AtmoParams516_g153292 = Out_AtmoParams15_g153294;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g153292 = ( (Global_AtmoParams516_g153292).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g153292 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g153292 = staticSwitch705_g153292;
				half Custom_Mask646_g153292 = 1.0;
				float temp_output_7_0_g153321 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g153321 = ( _OverlayBlendRemap1.y - temp_output_7_0_g153321 );
				half Overlay_Mask494_g153292 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g153292 * Overlay_MaskProj457_g153292 * Overlay_MaskLuma438_g153292 * Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 * Custom_Mask646_g153292 ) - temp_output_7_0_g153321 ) / ( temp_output_10_0_g153321 + 0.0001 ) ) );
				float3 lerpResult467_g153292 = lerp( Visual_Albedo127_g153292 , temp_output_622_0_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g153292 = lerpResult467_g153292;
				#else
				float3 staticSwitch577_g153292 = Visual_Albedo127_g153292;
				#endif
				half3 Final_Albedo493_g153292 = staticSwitch577_g153292;
				float3 In_Albedo3_g153295 = Final_Albedo493_g153292;
				float3 In_AlbedoRaw3_g153295 = Out_AlbedoRaw4_g153293;
				half2 Visual_NormalTS535_g153292 = Out_NormalTS4_g153293;
				float2 lerpResult551_g153292 = lerp( Visual_NormalTS535_g153292 , ( Visual_NormalTS535_g153292 * _OverlayNormalValue ) , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g153292 = lerpResult551_g153292;
				#else
				float2 staticSwitch583_g153292 = Visual_NormalTS535_g153292;
				#endif
				half2 Final_NormalTS499_g153292 = staticSwitch583_g153292;
				float2 In_NormalTS3_g153295 = Final_NormalTS499_g153292;
				float3 In_NormalWS3_g153295 = temp_output_739_21_g153292;
				half4 Visual_Masks536_g153292 = Out_Shader4_g153293;
				float4 appendResult585_g153292 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g153292 = lerp( Visual_Masks536_g153292 , appendResult585_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g153292 = lerpResult584_g153292;
				#else
				float4 staticSwitch586_g153292 = Visual_Masks536_g153292;
				#endif
				half4 Final_Masks482_g153292 = staticSwitch586_g153292;
				float4 In_Shader3_g153295 = Final_Masks482_g153292;
				float4 In_Emissive3_g153295 = Out_Emissive4_g153293;
				float temp_output_739_12_g153292 = Out_Grayscale4_g153293;
				float In_Grayscale3_g153295 = temp_output_739_12_g153292;
				float In_Luminosity3_g153295 = temp_output_739_15_g153292;
				float In_MultiMask3_g153295 = Out_MultiMask4_g153293;
				float In_AlphaClip3_g153295 = Out_AlphaClip4_g153293;
				float In_AlphaFade3_g153295 = Out_AlphaFade4_g153293;
				float3 In_Translucency3_g153295 = Out_Translucency4_g153293;
				half Visual_Transmission699_g153292 = Out_Transmission4_g153293;
				float lerpResult746_g153292 = lerp( Visual_Transmission699_g153292 , ( Visual_Transmission699_g153292 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g153292 = lerpResult746_g153292;
				#else
				float staticSwitch703_g153292 = Visual_Transmission699_g153292;
				#endif
				half Final_Transmission702_g153292 = staticSwitch703_g153292;
				float In_Transmission3_g153295 = Final_Transmission702_g153292;
				float In_Thickness3_g153295 = Out_Thickness4_g153293;
				float In_Diffusion3_g153295 = Out_Diffusion4_g153293;
				Data3_g153295.Dummy = In_Dummy3_g153295;
				Data3_g153295.Albedo = In_Albedo3_g153295;
				Data3_g153295.AlbedoRaw = In_AlbedoRaw3_g153295;
				Data3_g153295.NormalTS = In_NormalTS3_g153295;
				Data3_g153295.NormalWS = In_NormalWS3_g153295;
				Data3_g153295.Shader = In_Shader3_g153295;
				Data3_g153295.Emissive= In_Emissive3_g153295;
				Data3_g153295.MultiMask = In_MultiMask3_g153295;
				Data3_g153295.Grayscale = In_Grayscale3_g153295;
				Data3_g153295.Luminosity = In_Luminosity3_g153295;
				Data3_g153295.AlphaClip = In_AlphaClip3_g153295;
				Data3_g153295.AlphaFade = In_AlphaFade3_g153295;
				Data3_g153295.Translucency = In_Translucency3_g153295;
				Data3_g153295.Transmission = In_Transmission3_g153295;
				Data3_g153295.Thickness = In_Thickness3_g153295;
				Data3_g153295.Diffusion = In_Diffusion3_g153295;
				TVEVisualData Data4_g153329 = Data3_g153295;
				float Out_Dummy4_g153329 = 0;
				float3 Out_Albedo4_g153329 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153329 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153329 = float2( 0,0 );
				float3 Out_NormalWS4_g153329 = float3( 0,0,0 );
				float4 Out_Shader4_g153329 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153329 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153329 = 0;
				float Out_Grayscale4_g153329 = 0;
				float Out_Luminosity4_g153329 = 0;
				float Out_AlphaClip4_g153329 = 0;
				float Out_AlphaFade4_g153329 = 0;
				float3 Out_Translucency4_g153329 = float3( 0,0,0 );
				float Out_Transmission4_g153329 = 0;
				float Out_Thickness4_g153329 = 0;
				float Out_Diffusion4_g153329 = 0;
				Out_Dummy4_g153329 = Data4_g153329.Dummy;
				Out_Albedo4_g153329 = Data4_g153329.Albedo;
				Out_AlbedoRaw4_g153329 = Data4_g153329.AlbedoRaw;
				Out_NormalTS4_g153329 = Data4_g153329.NormalTS;
				Out_NormalWS4_g153329 = Data4_g153329.NormalWS;
				Out_Shader4_g153329 = Data4_g153329.Shader;
				Out_Emissive4_g153329= Data4_g153329.Emissive;
				Out_MultiMask4_g153329 = Data4_g153329.MultiMask;
				Out_Grayscale4_g153329 = Data4_g153329.Grayscale;
				Out_Luminosity4_g153329= Data4_g153329.Luminosity;
				Out_AlphaClip4_g153329 = Data4_g153329.AlphaClip;
				Out_AlphaFade4_g153329 = Data4_g153329.AlphaFade;
				Out_Translucency4_g153329 = Data4_g153329.Translucency;
				Out_Transmission4_g153329 = Data4_g153329.Transmission;
				Out_Thickness4_g153329 = Data4_g153329.Thickness;
				Out_Diffusion4_g153329 = Data4_g153329.Diffusion;
				half3 Visual_Albedo127_g153328 = Out_Albedo4_g153329;
				float3 lerpResult768_g153328 = lerp( Visual_Albedo127_g153328 , ( Visual_Albedo127_g153328 * Visual_Albedo127_g153328 ) , _WetnessContrastValue);
				TVEGlobalData Data15_g153334 = Data204_g153153;
				float Out_Dummy15_g153334 = 0;
				float4 Out_CoatParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153334 = float4( 0,0,0,0 );
				Out_Dummy15_g153334 = Data15_g153334.Dummy;
				Out_CoatParams15_g153334 = Data15_g153334.CoatParams;
				Out_PaintParams15_g153334 = Data15_g153334.PaintParams;
				Out_GlowParams15_g153334 = Data15_g153334.GlowParams;
				Out_AtmoParams15_g153334= Data15_g153334.AtmoParams;
				Out_FadeParams15_g153334= Data15_g153334.FadeParams;
				Out_FormParams15_g153334 = Data15_g153334.FormParams;
				Out_LandParams15_g153334 = Data15_g153334.LandParams;
				Out_WindParams15_g153334 = Data15_g153334.WindParams;
				Out_PushParams15_g153334 = Data15_g153334.PushParams;
				half4 Global_AtmoParams516_g153328 = Out_AtmoParams15_g153334;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g153328 = ( (Global_AtmoParams516_g153328).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g153328 = 1.0;
				#endif
				half Global_Wetness429_g153328 = staticSwitch663_g153328;
				half Wetness_Value1042_g153328 = ( _WetnessIntensityValue * Global_Wetness429_g153328 );
				half Wetness_VertMask1024_g153328 = 1.0;
				float temp_output_1043_0_g153328 = ( Wetness_Value1042_g153328 * Wetness_VertMask1024_g153328 );
				half Wetness_Mask866_g153328 = temp_output_1043_0_g153328;
				float3 lerpResult651_g153328 = lerp( Visual_Albedo127_g153328 , lerpResult768_g153328 , Wetness_Mask866_g153328);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g153328 = lerpResult651_g153328;
				#else
				float3 staticSwitch577_g153328 = Visual_Albedo127_g153328;
				#endif
				half3 Final_Albedo493_g153328 = staticSwitch577_g153328;
				float3 In_Albedo3_g153330 = Final_Albedo493_g153328;
				float3 In_AlbedoRaw3_g153330 = Out_AlbedoRaw4_g153329;
				half2 Visual_Normal535_g153328 = Out_NormalTS4_g153329;
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#else
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#endif
				half2 Final_Normal499_g153328 = staticSwitch774_g153328;
				float2 In_NormalTS3_g153330 = Final_Normal499_g153328;
				float3 In_NormalWS3_g153330 = Out_NormalWS4_g153329;
				half4 Visual_Masks536_g153328 = Out_Shader4_g153329;
				float4 break658_g153328 = Visual_Masks536_g153328;
				float temp_output_935_0_g153328 = ( Wetness_Mask866_g153328 * _WetnessSmoothnessValue );
				float4 appendResult661_g153328 = (float4(break658_g153328.x , break658_g153328.y , break658_g153328.z , saturate( ( break658_g153328.w + temp_output_935_0_g153328 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g153328 = appendResult661_g153328;
				#else
				float4 staticSwitch586_g153328 = Visual_Masks536_g153328;
				#endif
				half4 Final_Masks482_g153328 = staticSwitch586_g153328;
				float4 In_Shader3_g153330 = Final_Masks482_g153328;
				float4 In_Emissive3_g153330 = Out_Emissive4_g153329;
				float In_Grayscale3_g153330 = Out_Grayscale4_g153329;
				float In_Luminosity3_g153330 = Out_Luminosity4_g153329;
				float In_MultiMask3_g153330 = Out_MultiMask4_g153329;
				float In_AlphaClip3_g153330 = Out_AlphaClip4_g153329;
				float In_AlphaFade3_g153330 = Out_AlphaFade4_g153329;
				float3 In_Translucency3_g153330 = Out_Translucency4_g153329;
				float In_Transmission3_g153330 = Out_Transmission4_g153329;
				float In_Thickness3_g153330 = Out_Thickness4_g153329;
				float In_Diffusion3_g153330 = Out_Diffusion4_g153329;
				Data3_g153330.Dummy = In_Dummy3_g153330;
				Data3_g153330.Albedo = In_Albedo3_g153330;
				Data3_g153330.AlbedoRaw = In_AlbedoRaw3_g153330;
				Data3_g153330.NormalTS = In_NormalTS3_g153330;
				Data3_g153330.NormalWS = In_NormalWS3_g153330;
				Data3_g153330.Shader = In_Shader3_g153330;
				Data3_g153330.Emissive= In_Emissive3_g153330;
				Data3_g153330.MultiMask = In_MultiMask3_g153330;
				Data3_g153330.Grayscale = In_Grayscale3_g153330;
				Data3_g153330.Luminosity = In_Luminosity3_g153330;
				Data3_g153330.AlphaClip = In_AlphaClip3_g153330;
				Data3_g153330.AlphaFade = In_AlphaFade3_g153330;
				Data3_g153330.Translucency = In_Translucency3_g153330;
				Data3_g153330.Transmission = In_Transmission3_g153330;
				Data3_g153330.Thickness = In_Thickness3_g153330;
				Data3_g153330.Diffusion = In_Diffusion3_g153330;
				TVEVisualData Data4_g153368 = Data3_g153330;
				float Out_Dummy4_g153368 = 0;
				float3 Out_Albedo4_g153368 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153368 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153368 = float2( 0,0 );
				float3 Out_NormalWS4_g153368 = float3( 0,0,0 );
				float4 Out_Shader4_g153368 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153368 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153368 = 0;
				float Out_Grayscale4_g153368 = 0;
				float Out_Luminosity4_g153368 = 0;
				float Out_AlphaClip4_g153368 = 0;
				float Out_AlphaFade4_g153368 = 0;
				float3 Out_Translucency4_g153368 = float3( 0,0,0 );
				float Out_Transmission4_g153368 = 0;
				float Out_Thickness4_g153368 = 0;
				float Out_Diffusion4_g153368 = 0;
				Out_Dummy4_g153368 = Data4_g153368.Dummy;
				Out_Albedo4_g153368 = Data4_g153368.Albedo;
				Out_AlbedoRaw4_g153368 = Data4_g153368.AlbedoRaw;
				Out_NormalTS4_g153368 = Data4_g153368.NormalTS;
				Out_NormalWS4_g153368 = Data4_g153368.NormalWS;
				Out_Shader4_g153368 = Data4_g153368.Shader;
				Out_Emissive4_g153368= Data4_g153368.Emissive;
				Out_MultiMask4_g153368 = Data4_g153368.MultiMask;
				Out_Grayscale4_g153368 = Data4_g153368.Grayscale;
				Out_Luminosity4_g153368= Data4_g153368.Luminosity;
				Out_AlphaClip4_g153368 = Data4_g153368.AlphaClip;
				Out_AlphaFade4_g153368 = Data4_g153368.AlphaFade;
				Out_Translucency4_g153368 = Data4_g153368.Translucency;
				Out_Transmission4_g153368 = Data4_g153368.Transmission;
				Out_Thickness4_g153368 = Data4_g153368.Thickness;
				Out_Diffusion4_g153368 = Data4_g153368.Diffusion;
				float3 In_Albedo3_g153358 = Out_Albedo4_g153368;
				float3 In_AlbedoRaw3_g153358 = Out_AlbedoRaw4_g153368;
				float2 In_NormalTS3_g153358 = Out_NormalTS4_g153368;
				float3 In_NormalWS3_g153358 = Out_NormalWS4_g153368;
				float4 In_Shader3_g153358 = Out_Shader4_g153368;
				float4 In_Emissive3_g153358 = Out_Emissive4_g153368;
				float In_Grayscale3_g153358 = Out_Grayscale4_g153368;
				float In_Luminosity3_g153358 = Out_Luminosity4_g153368;
				float temp_output_836_11_g153357 = Out_MultiMask4_g153368;
				float In_MultiMask3_g153358 = temp_output_836_11_g153357;
				half Visual_AlphaClip667_g153357 = Out_AlphaClip4_g153368;
				half Input_True57_g153365 = Visual_AlphaClip667_g153357;
				half True36_g153365 = Input_True57_g153365;
				TVEGlobalData Data15_g153367 = Data204_g153153;
				float Out_Dummy15_g153367 = 0;
				float4 Out_CoatParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153367 = float4( 0,0,0,0 );
				Out_Dummy15_g153367 = Data15_g153367.Dummy;
				Out_CoatParams15_g153367 = Data15_g153367.CoatParams;
				Out_PaintParams15_g153367 = Data15_g153367.PaintParams;
				Out_GlowParams15_g153367 = Data15_g153367.GlowParams;
				Out_AtmoParams15_g153367= Data15_g153367.AtmoParams;
				Out_FadeParams15_g153367= Data15_g153367.FadeParams;
				Out_FormParams15_g153367 = Data15_g153367.FormParams;
				Out_LandParams15_g153367 = Data15_g153367.LandParams;
				Out_WindParams15_g153367 = Data15_g153367.WindParams;
				Out_PushParams15_g153367 = Data15_g153367.PushParams;
				half4 Global_FadeParams516_g153357 = Out_FadeParams15_g153367;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g153357 = saturate( (Global_FadeParams516_g153357).w );
				#else
				float staticSwitch663_g153357 = 1.0;
				#endif
				half Local_GlobalMask429_g153357 = staticSwitch663_g153357;
				half Local_AlphaMask814_g153357 = 1.0;
				TVEModelData Data15_g153369 = Data16_g153151;
				float Out_Dummy15_g153369 = 0;
				float3 Out_PositionWS15_g153369 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153369 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153369 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153369 = float3( 0,0,0 );
				float4 Out_VertexData15_g153369 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153369 = float4( 0,0,0,0 );
				Out_Dummy15_g153369 = Data15_g153369.Dummy;
				Out_PositionWS15_g153369 = Data15_g153369.PositionWS;
				Out_PositionWO15_g153369 = Data15_g153369.PositionWO;
				Out_PivotWS15_g153369 = Data15_g153369.PivotWS;
				Out_PivotWO15_g153369 = Data15_g153369.PivotWO;
				Out_NormalWS15_g153369 = Data15_g153369.NormalWS;
				Out_ViewDirWS15_g153369 = Data15_g153369.ViewDirWS;
				Out_VertexData15_g153369 = Data15_g153369.VertexData;
				Out_BoundsData15_g153369 = Data15_g153369.BoundsData;
				half3 Model_PositionWO602_g153357 = Out_PositionWO15_g153369;
				float4 tex3DNode60_g153361 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g153357 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g153357 = lerp( 1.0 , tex3DNode60_g153361.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g153357 = lerpResult673_g153357;
				half4 Model_VertexMasks752_g153357 = Out_VertexData15_g153369;
				float4 break755_g153357 = Model_VertexMasks752_g153357;
				float4 break33_g153359 = _cutout_vert_mode;
				float temp_output_30_0_g153359 = ( break755_g153357.x * break33_g153359.x );
				float temp_output_29_0_g153359 = ( break755_g153357.y * break33_g153359.y );
				float temp_output_31_0_g153359 = ( break755_g153357.z * break33_g153359.z );
				float temp_output_28_0_g153359 = ( temp_output_30_0_g153359 + temp_output_29_0_g153359 + temp_output_31_0_g153359 + ( break755_g153357.w * break33_g153359.w ) );
				float clampResult17_g153360 = clamp( temp_output_28_0_g153359 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153363 = _CutoutMeshRemap.x;
				float temp_output_10_0_g153363 = ( _CutoutMeshRemap.y - temp_output_7_0_g153363 );
				float lerpResult820_g153357 = lerp( 1.0 , saturate( ( ( clampResult17_g153360 - temp_output_7_0_g153363 ) / ( temp_output_10_0_g153363 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g153364 = lerpResult820_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153364 = ( temp_output_6_0_g153364 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153364 = temp_output_6_0_g153364;
				#endif
				float temp_output_801_0_g153357 = staticSwitch14_g153364;
				half Local_VertMask766_g153357 = temp_output_801_0_g153357;
				half Visual_MultiMask671_g153357 = temp_output_836_11_g153357;
				float lerpResult683_g153357 = lerp( 1.0 , Visual_MultiMask671_g153357 , _CutoutMultiValue);
				half Local_MultiMask685_g153357 = lerpResult683_g153357;
				float lerpResult728_g153357 = lerp( Visual_AlphaClip667_g153357 , min( Visual_AlphaClip667_g153357 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g153357 ) - ( Local_AlphaMask814_g153357 * Local_NoiseMask678_g153357 * Local_VertMask766_g153357 ) ) ) ) , Local_MultiMask685_g153357);
				half Local_AlphaClip784_g153357 = lerpResult728_g153357;
				half Input_False58_g153365 = Local_AlphaClip784_g153357;
				half False36_g153365 = Input_False58_g153365;
				half localShadowPassCheck36_g153365 = ShadowPassCheck36_g153365( True36_g153365 , False36_g153365 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g153357 = Local_AlphaClip784_g153357;
				#else
				float staticSwitch791_g153357 = localShadowPassCheck36_g153365;
				#endif
				float temp_output_6_0_g153366 = staticSwitch791_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153366 = ( temp_output_6_0_g153366 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153366 = temp_output_6_0_g153366;
				#endif
				float temp_output_798_0_g153357 = staticSwitch14_g153366;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g153357 = temp_output_798_0_g153357;
				#else
				float staticSwitch577_g153357 = Visual_AlphaClip667_g153357;
				#endif
				half Final_AlphaClip795_g153357 = staticSwitch577_g153357;
				float In_AlphaClip3_g153358 = Final_AlphaClip795_g153357;
				float In_AlphaFade3_g153358 = Out_AlphaFade4_g153368;
				float3 In_Translucency3_g153358 = Out_Translucency4_g153368;
				float In_Transmission3_g153358 = Out_Transmission4_g153368;
				float In_Thickness3_g153358 = Out_Thickness4_g153368;
				float In_Diffusion3_g153358 = Out_Diffusion4_g153368;
				Data3_g153358.Dummy = In_Dummy3_g153358;
				Data3_g153358.Albedo = In_Albedo3_g153358;
				Data3_g153358.AlbedoRaw = In_AlbedoRaw3_g153358;
				Data3_g153358.NormalTS = In_NormalTS3_g153358;
				Data3_g153358.NormalWS = In_NormalWS3_g153358;
				Data3_g153358.Shader = In_Shader3_g153358;
				Data3_g153358.Emissive= In_Emissive3_g153358;
				Data3_g153358.MultiMask = In_MultiMask3_g153358;
				Data3_g153358.Grayscale = In_Grayscale3_g153358;
				Data3_g153358.Luminosity = In_Luminosity3_g153358;
				Data3_g153358.AlphaClip = In_AlphaClip3_g153358;
				Data3_g153358.AlphaFade = In_AlphaFade3_g153358;
				Data3_g153358.Translucency = In_Translucency3_g153358;
				Data3_g153358.Transmission = In_Transmission3_g153358;
				Data3_g153358.Thickness = In_Thickness3_g153358;
				Data3_g153358.Diffusion = In_Diffusion3_g153358;
				TVEVisualData Data4_g153372 = Data3_g153358;
				float Out_Dummy4_g153372 = 0;
				float3 Out_Albedo4_g153372 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153372 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153372 = float2( 0,0 );
				float3 Out_NormalWS4_g153372 = float3( 0,0,0 );
				float4 Out_Shader4_g153372 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153372 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153372 = 0;
				float Out_Grayscale4_g153372 = 0;
				float Out_Luminosity4_g153372 = 0;
				float Out_AlphaClip4_g153372 = 0;
				float Out_AlphaFade4_g153372 = 0;
				float3 Out_Translucency4_g153372 = float3( 0,0,0 );
				float Out_Transmission4_g153372 = 0;
				float Out_Thickness4_g153372 = 0;
				float Out_Diffusion4_g153372 = 0;
				Out_Dummy4_g153372 = Data4_g153372.Dummy;
				Out_Albedo4_g153372 = Data4_g153372.Albedo;
				Out_AlbedoRaw4_g153372 = Data4_g153372.AlbedoRaw;
				Out_NormalTS4_g153372 = Data4_g153372.NormalTS;
				Out_NormalWS4_g153372 = Data4_g153372.NormalWS;
				Out_Shader4_g153372 = Data4_g153372.Shader;
				Out_Emissive4_g153372= Data4_g153372.Emissive;
				Out_MultiMask4_g153372 = Data4_g153372.MultiMask;
				Out_Grayscale4_g153372 = Data4_g153372.Grayscale;
				Out_Luminosity4_g153372= Data4_g153372.Luminosity;
				Out_AlphaClip4_g153372 = Data4_g153372.AlphaClip;
				Out_AlphaFade4_g153372 = Data4_g153372.AlphaFade;
				Out_Translucency4_g153372 = Data4_g153372.Translucency;
				Out_Transmission4_g153372 = Data4_g153372.Transmission;
				Out_Thickness4_g153372 = Data4_g153372.Thickness;
				Out_Diffusion4_g153372 = Data4_g153372.Diffusion;
				float3 In_Albedo3_g153373 = Out_Albedo4_g153372;
				float3 In_AlbedoRaw3_g153373 = Out_AlbedoRaw4_g153372;
				float2 In_NormalTS3_g153373 = Out_NormalTS4_g153372;
				float3 In_NormalWS3_g153373 = Out_NormalWS4_g153372;
				float4 In_Shader3_g153373 = Out_Shader4_g153372;
				float4 In_Emissive3_g153373 = Out_Emissive4_g153372;
				float In_Grayscale3_g153373 = Out_Grayscale4_g153372;
				float In_Luminosity3_g153373 = Out_Luminosity4_g153372;
				float temp_output_821_11_g153370 = Out_MultiMask4_g153372;
				float In_MultiMask3_g153373 = temp_output_821_11_g153370;
				half Visual_AlphaClip754_g153370 = Out_AlphaClip4_g153372;
				half Input_True57_g153374 = Visual_AlphaClip754_g153370;
				half True36_g153374 = Input_True57_g153374;
				half Dither_Constant768_g153370 = _DitherConstantValue;
				TVEModelData Data15_g153379 = Data16_g153151;
				float Out_Dummy15_g153379 = 0;
				float3 Out_PositionWS15_g153379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153379 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153379 = float3( 0,0,0 );
				float4 Out_VertexData15_g153379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153379 = float4( 0,0,0,0 );
				Out_Dummy15_g153379 = Data15_g153379.Dummy;
				Out_PositionWS15_g153379 = Data15_g153379.PositionWS;
				Out_PositionWO15_g153379 = Data15_g153379.PositionWO;
				Out_PivotWS15_g153379 = Data15_g153379.PivotWS;
				Out_PivotWO15_g153379 = Data15_g153379.PivotWO;
				Out_NormalWS15_g153379 = Data15_g153379.NormalWS;
				Out_ViewDirWS15_g153379 = Data15_g153379.ViewDirWS;
				Out_VertexData15_g153379 = Data15_g153379.VertexData;
				Out_BoundsData15_g153379 = Data15_g153379.BoundsData;
				half3 Model_PositionWS776_g153370 = Out_PositionWS15_g153379;
				float temp_output_7_0_g153378 = _DitherDistanceMinValue;
				float temp_output_10_0_g153378 = ( _DitherDistanceMaxValue - temp_output_7_0_g153378 );
				half Dither_Distance856_g153370 = ( saturate( ( ( distance( Model_PositionWS776_g153370 , _WorldSpaceCameraPos ) - temp_output_7_0_g153378 ) / ( temp_output_10_0_g153378 + 0.0001 ) ) ) * _DitherDistanceValue );
				half Dither_Value429_g153370 = max( Dither_Constant768_g153370 , Dither_Distance856_g153370 );
				half3 Model_PositionWO602_g153370 = Out_PositionWO15_g153379;
				float4 tex3DNode60_g153376 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g153370 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g153370 = tex3DNode60_g153376.r;
				half Local_MaskNoise678_g153370 = temp_output_809_0_g153370;
				half Visual_MultiMask671_g153370 = temp_output_821_11_g153370;
				float lerpResult683_g153370 = lerp( 1.0 , Visual_MultiMask671_g153370 , _DitherMultiValue);
				half Local_MaskMulti685_g153370 = lerpResult683_g153370;
				half Custom_Mask826_g153370 = 1.0;
				float lerpResult728_g153370 = lerp( Visual_AlphaClip754_g153370 , min( Visual_AlphaClip754_g153370 , ( -0.001 - ( Dither_Value429_g153370 - Local_MaskNoise678_g153370 ) ) ) , ( Local_MaskMulti685_g153370 * Custom_Mask826_g153370 ));
				half Local_AlphaClip834_g153370 = lerpResult728_g153370;
				half Input_False58_g153374 = Local_AlphaClip834_g153370;
				half False36_g153374 = Input_False58_g153374;
				half localShadowPassCheck36_g153374 = ShadowPassCheck36_g153374( True36_g153374 , False36_g153374 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g153370 = Local_AlphaClip834_g153370;
				#else
				float staticSwitch831_g153370 = localShadowPassCheck36_g153374;
				#endif
				float temp_output_6_0_g153375 = staticSwitch831_g153370;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153375 = ( temp_output_6_0_g153375 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153375 = temp_output_6_0_g153375;
				#endif
				float temp_output_840_0_g153370 = staticSwitch14_g153375;
				#ifdef TVE_DITHER
				float staticSwitch577_g153370 = temp_output_840_0_g153370;
				#else
				float staticSwitch577_g153370 = Visual_AlphaClip754_g153370;
				#endif
				half Final_AlphaClip493_g153370 = staticSwitch577_g153370;
				float In_AlphaClip3_g153373 = Final_AlphaClip493_g153370;
				float In_AlphaFade3_g153373 = Out_AlphaFade4_g153372;
				float3 In_Translucency3_g153373 = Out_Translucency4_g153372;
				float In_Transmission3_g153373 = Out_Transmission4_g153372;
				float In_Thickness3_g153373 = Out_Thickness4_g153372;
				float In_Diffusion3_g153373 = Out_Diffusion4_g153372;
				Data3_g153373.Dummy = In_Dummy3_g153373;
				Data3_g153373.Albedo = In_Albedo3_g153373;
				Data3_g153373.AlbedoRaw = In_AlbedoRaw3_g153373;
				Data3_g153373.NormalTS = In_NormalTS3_g153373;
				Data3_g153373.NormalWS = In_NormalWS3_g153373;
				Data3_g153373.Shader = In_Shader3_g153373;
				Data3_g153373.Emissive= In_Emissive3_g153373;
				Data3_g153373.MultiMask = In_MultiMask3_g153373;
				Data3_g153373.Grayscale = In_Grayscale3_g153373;
				Data3_g153373.Luminosity = In_Luminosity3_g153373;
				Data3_g153373.AlphaClip = In_AlphaClip3_g153373;
				Data3_g153373.AlphaFade = In_AlphaFade3_g153373;
				Data3_g153373.Translucency = In_Translucency3_g153373;
				Data3_g153373.Transmission = In_Transmission3_g153373;
				Data3_g153373.Thickness = In_Thickness3_g153373;
				Data3_g153373.Diffusion = In_Diffusion3_g153373;
				TVEVisualData Data4_g153398 = Data3_g153373;
				float Out_Dummy4_g153398 = 0;
				float3 Out_Albedo4_g153398 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153398 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153398 = float2( 0,0 );
				float3 Out_NormalWS4_g153398 = float3( 0,0,0 );
				float4 Out_Shader4_g153398 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153398 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153398 = 0;
				float Out_Grayscale4_g153398 = 0;
				float Out_Luminosity4_g153398 = 0;
				float Out_AlphaClip4_g153398 = 0;
				float Out_AlphaFade4_g153398 = 0;
				float3 Out_Translucency4_g153398 = float3( 0,0,0 );
				float Out_Transmission4_g153398 = 0;
				float Out_Thickness4_g153398 = 0;
				float Out_Diffusion4_g153398 = 0;
				Out_Dummy4_g153398 = Data4_g153398.Dummy;
				Out_Albedo4_g153398 = Data4_g153398.Albedo;
				Out_AlbedoRaw4_g153398 = Data4_g153398.AlbedoRaw;
				Out_NormalTS4_g153398 = Data4_g153398.NormalTS;
				Out_NormalWS4_g153398 = Data4_g153398.NormalWS;
				Out_Shader4_g153398 = Data4_g153398.Shader;
				Out_Emissive4_g153398= Data4_g153398.Emissive;
				Out_MultiMask4_g153398 = Data4_g153398.MultiMask;
				Out_Grayscale4_g153398 = Data4_g153398.Grayscale;
				Out_Luminosity4_g153398= Data4_g153398.Luminosity;
				Out_AlphaClip4_g153398 = Data4_g153398.AlphaClip;
				Out_AlphaFade4_g153398 = Data4_g153398.AlphaFade;
				Out_Translucency4_g153398 = Data4_g153398.Translucency;
				Out_Transmission4_g153398 = Data4_g153398.Transmission;
				Out_Thickness4_g153398 = Data4_g153398.Thickness;
				Out_Diffusion4_g153398 = Data4_g153398.Diffusion;
				float3 temp_output_297_0_g153389 = Out_Albedo4_g153398;
				float3 In_Albedo3_g153399 = temp_output_297_0_g153389;
				float3 temp_output_297_23_g153389 = Out_AlbedoRaw4_g153398;
				float3 In_AlbedoRaw3_g153399 = temp_output_297_23_g153389;
				float2 In_NormalTS3_g153399 = Out_NormalTS4_g153398;
				float3 In_NormalWS3_g153399 = Out_NormalWS4_g153398;
				float4 In_Shader3_g153399 = Out_Shader4_g153398;
				float4 temp_cast_51 = (0.0).xxxx;
				half4 Visual_Emissive255_g153389 = Out_Emissive4_g153398;
				half Emissive_MeshMask221_g153389 = 1.0;
				half Emissive_Mask103_g153389 = 1.0;
				float temp_output_279_0_g153389 = ( Emissive_MeshMask221_g153389 * Emissive_Mask103_g153389 );
				float3 appendResult293_g153389 = (float3(temp_output_279_0_g153389 , temp_output_279_0_g153389 , temp_output_279_0_g153389));
				half3 Local_EmissiveColor278_g153389 = appendResult293_g153389;
				float3 temp_cast_52 = (1.0).xxx;
				TVEGlobalData Data15_g153390 = Data204_g153153;
				float Out_Dummy15_g153390 = 0;
				float4 Out_CoatParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153390 = float4( 0,0,0,0 );
				Out_Dummy15_g153390 = Data15_g153390.Dummy;
				Out_CoatParams15_g153390 = Data15_g153390.CoatParams;
				Out_PaintParams15_g153390 = Data15_g153390.PaintParams;
				Out_GlowParams15_g153390 = Data15_g153390.GlowParams;
				Out_AtmoParams15_g153390= Data15_g153390.AtmoParams;
				Out_FadeParams15_g153390= Data15_g153390.FadeParams;
				Out_FormParams15_g153390 = Data15_g153390.FormParams;
				Out_LandParams15_g153390 = Data15_g153390.LandParams;
				Out_WindParams15_g153390 = Data15_g153390.WindParams;
				Out_PushParams15_g153390 = Data15_g153390.PushParams;
				half4 Global_GlowParams179_g153389 = Out_GlowParams15_g153390;
				float3 lerpResult299_g153389 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g153389).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g153389 = lerpResult299_g153389;
				#else
				float3 staticSwitch228_g153389 = temp_cast_52;
				#endif
				half3 Emissive_GlobalMask248_g153389 = staticSwitch228_g153389;
				half3 Visual_AlbedoRaw306_g153389 = temp_output_297_23_g153389;
				float3 lerpResult307_g153389 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g153389 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g153389 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g153389 * lerpResult307_g153389 );
				half3 Emissive_Blend260_g153389 = ( ( (Visual_Emissive255_g153389).xyz * Local_EmissiveColor278_g153389 ) * Local_EmissiveValue88_g153389 );
				float3 temp_output_3_0_g153403 = Emissive_Blend260_g153389;
				float temp_output_15_0_g153403 = _emissive_power_value;
				float3 hdEmission22_g153403 = ASEGetEmissionHDRColor(temp_output_3_0_g153403,temp_output_15_0_g153403,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g153389 = temp_output_279_0_g153389;
				float4 appendResult295_g153389 = (float4(hdEmission22_g153403 , Local_EmissiveMask294_g153389));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g153389 = appendResult295_g153389;
				#else
				float4 staticSwitch129_g153389 = temp_cast_51;
				#endif
				half4 Final_Emissive184_g153389 = staticSwitch129_g153389;
				float4 In_Emissive3_g153399 = Final_Emissive184_g153389;
				float In_Grayscale3_g153399 = Out_Grayscale4_g153398;
				float In_Luminosity3_g153399 = Out_Luminosity4_g153398;
				float temp_output_297_11_g153389 = Out_MultiMask4_g153398;
				float In_MultiMask3_g153399 = temp_output_297_11_g153389;
				float In_AlphaClip3_g153399 = Out_AlphaClip4_g153398;
				float In_AlphaFade3_g153399 = Out_AlphaFade4_g153398;
				float3 In_Translucency3_g153399 = Out_Translucency4_g153398;
				float In_Transmission3_g153399 = Out_Transmission4_g153398;
				float In_Thickness3_g153399 = Out_Thickness4_g153398;
				float In_Diffusion3_g153399 = Out_Diffusion4_g153398;
				Data3_g153399.Dummy = In_Dummy3_g153399;
				Data3_g153399.Albedo = In_Albedo3_g153399;
				Data3_g153399.AlbedoRaw = In_AlbedoRaw3_g153399;
				Data3_g153399.NormalTS = In_NormalTS3_g153399;
				Data3_g153399.NormalWS = In_NormalWS3_g153399;
				Data3_g153399.Shader = In_Shader3_g153399;
				Data3_g153399.Emissive= In_Emissive3_g153399;
				Data3_g153399.MultiMask = In_MultiMask3_g153399;
				Data3_g153399.Grayscale = In_Grayscale3_g153399;
				Data3_g153399.Luminosity = In_Luminosity3_g153399;
				Data3_g153399.AlphaClip = In_AlphaClip3_g153399;
				Data3_g153399.AlphaFade = In_AlphaFade3_g153399;
				Data3_g153399.Translucency = In_Translucency3_g153399;
				Data3_g153399.Transmission = In_Transmission3_g153399;
				Data3_g153399.Thickness = In_Thickness3_g153399;
				Data3_g153399.Diffusion = In_Diffusion3_g153399;
				TVEVisualData Data4_g153445 = Data3_g153399;
				float Out_Dummy4_g153445 = 0;
				float3 Out_Albedo4_g153445 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153445 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153445 = float2( 0,0 );
				float3 Out_NormalWS4_g153445 = float3( 0,0,0 );
				float4 Out_Shader4_g153445 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153445 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153445 = 0;
				float Out_Grayscale4_g153445 = 0;
				float Out_Luminosity4_g153445 = 0;
				float Out_AlphaClip4_g153445 = 0;
				float Out_AlphaFade4_g153445 = 0;
				float3 Out_Translucency4_g153445 = float3( 0,0,0 );
				float Out_Transmission4_g153445 = 0;
				float Out_Thickness4_g153445 = 0;
				float Out_Diffusion4_g153445 = 0;
				Out_Dummy4_g153445 = Data4_g153445.Dummy;
				Out_Albedo4_g153445 = Data4_g153445.Albedo;
				Out_AlbedoRaw4_g153445 = Data4_g153445.AlbedoRaw;
				Out_NormalTS4_g153445 = Data4_g153445.NormalTS;
				Out_NormalWS4_g153445 = Data4_g153445.NormalWS;
				Out_Shader4_g153445 = Data4_g153445.Shader;
				Out_Emissive4_g153445= Data4_g153445.Emissive;
				Out_MultiMask4_g153445 = Data4_g153445.MultiMask;
				Out_Grayscale4_g153445 = Data4_g153445.Grayscale;
				Out_Luminosity4_g153445= Data4_g153445.Luminosity;
				Out_AlphaClip4_g153445 = Data4_g153445.AlphaClip;
				Out_AlphaFade4_g153445 = Data4_g153445.AlphaFade;
				Out_Translucency4_g153445 = Data4_g153445.Translucency;
				Out_Transmission4_g153445 = Data4_g153445.Transmission;
				Out_Thickness4_g153445 = Data4_g153445.Thickness;
				Out_Diffusion4_g153445 = Data4_g153445.Diffusion;
				half3 Visual_Albedo199_g153444 = Out_Albedo4_g153445;
				half3 Final_Albedo312_g153444 = Visual_Albedo199_g153444;
				float3 In_Albedo3_g153446 = Final_Albedo312_g153444;
				float3 In_AlbedoRaw3_g153446 = Out_AlbedoRaw4_g153445;
				float2 In_NormalTS3_g153446 = Out_NormalTS4_g153445;
				float3 In_NormalWS3_g153446 = Out_NormalWS4_g153445;
				float4 In_Shader3_g153446 = Out_Shader4_g153445;
				float4 In_Emissive3_g153446 = Out_Emissive4_g153445;
				float In_Grayscale3_g153446 = Out_Grayscale4_g153445;
				float In_Luminosity3_g153446 = Out_Luminosity4_g153445;
				float temp_output_301_11_g153444 = Out_MultiMask4_g153445;
				float In_MultiMask3_g153446 = temp_output_301_11_g153444;
				float In_AlphaClip3_g153446 = Out_AlphaClip4_g153445;
				float In_AlphaFade3_g153446 = Out_AlphaFade4_g153445;
				float3 temp_cast_53 = (0.0).xxx;
				half3 Subsurface_Color264_g153444 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g153444 );
				half Visual_Transmission138_g153444 = Out_Transmission4_g153445;
				half Subsurface_Value268_g153444 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g153447 = Data204_g153153;
				float Out_Dummy15_g153447 = 0;
				float4 Out_CoatParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153447 = float4( 0,0,0,0 );
				Out_Dummy15_g153447 = Data15_g153447.Dummy;
				Out_CoatParams15_g153447 = Data15_g153447.CoatParams;
				Out_PaintParams15_g153447 = Data15_g153447.PaintParams;
				Out_GlowParams15_g153447 = Data15_g153447.GlowParams;
				Out_AtmoParams15_g153447= Data15_g153447.AtmoParams;
				Out_FadeParams15_g153447= Data15_g153447.FadeParams;
				Out_FormParams15_g153447 = Data15_g153447.FormParams;
				Out_LandParams15_g153447 = Data15_g153447.LandParams;
				Out_WindParams15_g153447 = Data15_g153447.WindParams;
				Out_PushParams15_g153447 = Data15_g153447.PushParams;
				half4 Global_GlowParams373_g153444 = Out_GlowParams15_g153447;
				float lerpResult403_g153444 = lerp( 1.0 , saturate( (Global_GlowParams373_g153444).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g153444 = lerpResult403_g153444;
				#else
				float staticSwitch367_g153444 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g153444 = staticSwitch367_g153444;
				half Visual_MultiMask292_g153444 = temp_output_301_11_g153444;
				float lerpResult293_g153444 = lerp( 1.0 , Visual_MultiMask292_g153444 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g153444 = lerpResult293_g153444;
				half Custom_Mask363_g153444 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g153444 = ( Visual_Transmission138_g153444 * Subsurface_Value268_g153444 * Subsurface_GlobalMask369_g153444 * Subsurface_MultiMask296_g153444 * Custom_Mask363_g153444 );
				#else
				float staticSwitch345_g153444 = 0.0;
				#endif
				half Final_Transmission269_g153444 = staticSwitch345_g153444;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g153444 = ( Subsurface_Color264_g153444 * Final_Transmission269_g153444 * 10.0 );
				#else
				float3 staticSwitch348_g153444 = temp_cast_53;
				#endif
				half3 Final_Translucency254_g153444 = staticSwitch348_g153444;
				float3 In_Translucency3_g153446 = Final_Translucency254_g153444;
				float In_Transmission3_g153446 = Final_Transmission269_g153444;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g153444 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g153444 = 1.0;
				#endif
				half Final_Thickness275_g153444 = staticSwitch351_g153444;
				float In_Thickness3_g153446 = Final_Thickness275_g153444;
				float Final_Diffusion340_g153444 = _SubsurfaceDiffusion;
				float In_Diffusion3_g153446 = Final_Diffusion340_g153444;
				Data3_g153446.Dummy = In_Dummy3_g153446;
				Data3_g153446.Albedo = In_Albedo3_g153446;
				Data3_g153446.AlbedoRaw = In_AlbedoRaw3_g153446;
				Data3_g153446.NormalTS = In_NormalTS3_g153446;
				Data3_g153446.NormalWS = In_NormalWS3_g153446;
				Data3_g153446.Shader = In_Shader3_g153446;
				Data3_g153446.Emissive= In_Emissive3_g153446;
				Data3_g153446.MultiMask = In_MultiMask3_g153446;
				Data3_g153446.Grayscale = In_Grayscale3_g153446;
				Data3_g153446.Luminosity = In_Luminosity3_g153446;
				Data3_g153446.AlphaClip = In_AlphaClip3_g153446;
				Data3_g153446.AlphaFade = In_AlphaFade3_g153446;
				Data3_g153446.Translucency = In_Translucency3_g153446;
				Data3_g153446.Transmission = In_Transmission3_g153446;
				Data3_g153446.Thickness = In_Thickness3_g153446;
				Data3_g153446.Diffusion = In_Diffusion3_g153446;
				TVEVisualData Data4_g153454 = Data3_g153446;
				float Out_Dummy4_g153454 = 0;
				float3 Out_Albedo4_g153454 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153454 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153454 = float2( 0,0 );
				float3 Out_NormalWS4_g153454 = float3( 0,0,0 );
				float4 Out_Shader4_g153454 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153454 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153454 = 0;
				float Out_Grayscale4_g153454 = 0;
				float Out_Luminosity4_g153454 = 0;
				float Out_AlphaClip4_g153454 = 0;
				float Out_AlphaFade4_g153454 = 0;
				float3 Out_Translucency4_g153454 = float3( 0,0,0 );
				float Out_Transmission4_g153454 = 0;
				float Out_Thickness4_g153454 = 0;
				float Out_Diffusion4_g153454 = 0;
				Out_Dummy4_g153454 = Data4_g153454.Dummy;
				Out_Albedo4_g153454 = Data4_g153454.Albedo;
				Out_AlbedoRaw4_g153454 = Data4_g153454.AlbedoRaw;
				Out_NormalTS4_g153454 = Data4_g153454.NormalTS;
				Out_NormalWS4_g153454 = Data4_g153454.NormalWS;
				Out_Shader4_g153454 = Data4_g153454.Shader;
				Out_Emissive4_g153454= Data4_g153454.Emissive;
				Out_MultiMask4_g153454 = Data4_g153454.MultiMask;
				Out_Grayscale4_g153454 = Data4_g153454.Grayscale;
				Out_Luminosity4_g153454= Data4_g153454.Luminosity;
				Out_AlphaClip4_g153454 = Data4_g153454.AlphaClip;
				Out_AlphaFade4_g153454 = Data4_g153454.AlphaFade;
				Out_Translucency4_g153454 = Data4_g153454.Translucency;
				Out_Transmission4_g153454 = Data4_g153454.Transmission;
				Out_Thickness4_g153454 = Data4_g153454.Thickness;
				Out_Diffusion4_g153454 = Data4_g153454.Diffusion;
				float temp_output_3_0_g153463 = Out_AlphaClip4_g153454;
				float Alpha19_g153463 = temp_output_3_0_g153463;
				float temp_output_15_0_g153463 = 0.0;
				float Treshold19_g153463 = temp_output_15_0_g153463;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#else
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#endif
				
				surfaceDescription.Alpha = Alpha19_g153463;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = 0;
				#endif

				packedInput.positionCS.zw = positionCS.zw;
				float3 positionRWS = positionWS;

				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//input.worldToTangent = k_identity3x3;
				//#else
				input.tangentToWorld = k_identity3x3;
				//#endif

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir( input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GetSurfaceAndBuiltinData(surfaceDescription,input, normalizedWorldViewDir, posInput, surfaceData, builtinData);

				outputDepth = posInput.deviceDepth;

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), posInput.positionSS, outNormalBuffer);
					#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.positionCS.z;
					#endif
				#elif defined(SCENESELECTIONPASS)
					outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }
			Cull Off

			HLSLPROGRAM

			#pragma shader_feature_local_fragment _DISABLE_DECALS
			#pragma shader_feature_local_fragment _DISABLE_SSR
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define _AMBIENT_OCCLUSION 1
			#define ASE_SRP_VERSION 170003
			#ifdef UNITY_COLORSPACE_GAMMA//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301)//AI_SRP
			#else//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.04, 0.04, 0.04, 1.0 - 0.04) //AI_SRP
			#endif//AI_SRP
			#define ASE_USING_SAMPLING_MACROS 1


			#pragma vertex Vert
			#pragma fragment Frag

			#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Wind.hlsl"
			//#endif
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

			#define SHADERPASS SHADERPASS_LIGHT_TRANSPORT

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"


			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#define T2W(var, index) var.worldToTangent[index]
			//#else
			#define T2W(var, index) var.tangentToWorld[index]
			//#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ai_ObjectToWorld GetObjectToWorldMatrix()
			#define ai_WorldToObject GetWorldToObjectMatrix()
			#define AI_INV_TWO_PI  INV_TWO_PI
			#define AI_PI          PI
			#define AI_INV_PI      INV_PI
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_fragment TVE_IMPOSTOR_MASK_OFF TVE_IMPOSTOR_MASK_DEFAULT TVE_IMPOSTOR_MASK_PACKED TVE_IMPOSTOR_MASK_SHADING
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				
			};

			struct PackedVaryingsMeshToPS
			{
				float4 positionCS : SV_Position;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				float4 UVsFrame122_g151868 : TEXCOORD0;
				float4 UVsFrame222_g151868 : TEXCOORD1;
				float4 UVsFrame322_g151868 : TEXCOORD2;
				float4 octaframe22_g151868 : TEXCOORD3;
				float4 viewPos22_g151868 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
			};

			CBUFFER_START( UnityPerMaterial )
			float4 _AI_SizeOffset;
			half4 _TintingBlendRemap;
			half4 _OverlayBlendRemap1;
			half4 _VariationColorTwo;
			half4 _VariationColorOne;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _ImpostorColor;
			half4 _VariationNoiseRemap;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _dryness_vert_mode;
			float4 _TintingColor;
			half4 _DrynessLumaRemap;
			half4 _TintingLumaRemap;
			float4 _DrynessColor;
			half4 _tinting_vert_mode;
			half4 _OverlayColor;
			half4 _ImpostorColorTwo;
			half4 _TintingMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _SubsurfaceColor;
			float3 _AI_Offset;
			half _TintingMultiValue;
			half _WetnessBakeInfo;
			half _TintingIntensityValue;
			half _TintingLumaValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _OverlayEnd;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _OverlaySpace;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _WetnessElementMode;
			half _TintingBakeInfo;
			half _OverlayElementMode;
			half _VariationNoiseTillingValue;
			half _VariationCategory;
			half _VariationEnd;
			half _TintingSpace;
			half _ImpostorColorMode;
			half _ImpostorMetallicValue;
			half _TintingEnd;
			half _OverlayBakeInfo;
			half _ImpostorSmoothnessValue;
			half _DrynessBakeInfo;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _VariationNoisePivotValue;
			half _DrynessCategory;
			half _TintingCategory;
			half _ImpostorOcclusionValue;
			half _ImpostorMaskOffInfo;
			half _TintingMeshMode;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutMeshValue;
			half _CutoutMeshMode;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _DitherConstantValue;
			half _DitherDistanceMinValue;
			half _CutoutIntensityValue;
			half _DitherDistanceMaxValue;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _EmissiveIntensityValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _SubsurfaceIntensityValue;
			half _DitherDistanceValue;
			half _TintingMeshValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessCategory;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _WetnessIntensityValue;
			half _DrynessSmoothnessValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayNormalValue;
			half _OverlaySmoothnessValue;
			half _OverlaySubsurfaceValue;
			half _DrynessSubsurfaceValue;
			half _CutoutBakeInfo;
			half _CutoutEnd;
			half _SubsurfaceMultiValue;
			half _ImpostorCategory;
			half _ImpostorEnd;
			half _IsImpostorShader;
			half _IsSubsurfaceShader;
			half _MotionWindCategory;
			half _MotionWindEnd;
			half _MotionInteractionCategory;
			half _InteractionInteractionEnd;
			half _MotionWindMode;
			half _MotionWindElementMode;
			half _MotionPushElementMode;
			half _MotionWindOffInfo;
			half _MotionWindOptimizedInfo;
			half _MotionWindAdvancedInfo;
			half _SizeFadeCategory;
			half _SizeFadeEnd;
			half _SizeFadeElementMode;
			float _AI_Frames;
			float _AI_FramesX;
			float _AI_FramesY;
			float _AI_ImpostorSize;
			half _RenderShadow;
			half _RenderMotion;
			half _IsIdentifier;
			half _IsConverted;
			half _ImpostorMaskDefaultInfo;
			half _ImpostorMaskPackedInfo;
			half _ImpostorMaskShadingInfo;
			half _ImpostorMaskMode;
			half _ImpostorAlphaClipValue;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceAngleValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceSpace;
			half _IsVersion;
			float _AI_Parallax;
			half _RenderDecals;
			half _CategoryRender;
			half _EndRender;
			half _NoiseCategory;
			half _NoiseEnd;
			half _IsInitialized;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _HasDefaultTextures;
			half _IsCollected;
			half _RenderSSR;
			float _AI_TextureBias;
			float _AI_DepthSize;
			float _AI_ShadowBias;
			half _MotionBaseSpeedValue;
			half _MotionBaseNoiseValue;
			half _global_wind_layer_value;
			half _MotionBaseDelayValue;
			half _global_push_layer_value;
			half _MotionPushPivotValue;
			half _MotionPushIntensityValue;
			half _SubsurfaceCategory;
			half _SubsurfaceEnd;
			half _SubsurfaceDirectValue;
			half _MotionBaseTillingValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceShadowValue;
			half _SubsurfaceElementMode;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DitherCategory;
			half _DitherEnd;
			half _CutoutCategory;
			half _SubsurfaceAmbientValue;
			half _CutoutElementMode;
			half _MotionIntensityValue;
			half _MotionBasePivotValue;
			float _AI_ShadowView;
			float _AI_Clip;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionTillingValue;
			half _GlobalGlowPivotValue;
			half _GlobalAtmoPivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalWindLayerValue;
			half _GlobalPushLayerValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _MotionBaseIntensityValue;
			half _GlobalAtmoLayerValue;
			half _SubsurfaceThicknessValue;
			float _BlendMode;
			CBUFFER_END

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_Albedo);
			SAMPLER(sampler_Albedo);
			TEXTURE2D(_Normals);
			SAMPLER(sampler_Normals);
			float3 TVE_WorldOrigin;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_Shader);
			TEXTURE2D(_Packed);
			TEXTURE2D(_Vertex);
			SAMPLER(sampler_Shader);
			SAMPLER(sampler_Packed);
			SAMPLER(sampler_Vertex);


			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			float2 VectortoHemiOctahedron( float3 N )
			{
				N.xy /= dot( 1.0, abs( N ) );
				return float2( N.x + N.y, N.x - N.y );
			}
			
			float3 HemiOctahedronToVector( float2 Oct )
			{
				Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y ) * 0.5;
				float3 N = float3( Oct, 1 - dot( 1.0, abs( Oct ) ) );
				return normalize( N );
			}
			
			inline void RayPlaneIntersectionUV( float3 normalOS, float3 rayPosition, float3 rayDirection, inout float2 uvs, inout float3 localNormal )
			{
				float lDotN = dot( rayDirection, normalOS ); 
				float p0l0DotN = dot( -rayPosition, normalOS );
				float t = p0l0DotN / lDotN;
				float3 p = rayDirection * t + rayPosition;
				float3 upVector = float3( 0, 1, 0 );
				float3 tangent = normalize( cross( upVector, normalOS ) + float3( -0.001, 0, 0 ) );
				float3 bitangent = cross( tangent, normalOS );
				float frameX = dot( p, tangent );
				float frameZ = dot( p, bitangent );
				uvs = -float2( frameX, frameZ );
				if( t <= 0.0 )
				uvs = 0;
				float3x3 worldToLocal = float3x3( tangent, bitangent, normalOS );
				localNormal = normalize( mul( worldToLocal, rayDirection ) );
			}
			
			inline void OctaImpostorVertex( inout float4 positionOS, inout float3 normalOS, inout float4 uvsFrame1, inout float4 uvsFrame2, inout float4 uvsFrame3, inout float4 octaFrame, inout float4 viewPos )
			{
				float2 uvOffset = _AI_SizeOffset.zw;
				float parallax = -_AI_Parallax; 
				float UVscale = _AI_ImpostorSize;
				float framesXY = _AI_Frames;
				float prevFrame = framesXY - 1;
				float3 fractions = 1.0 / float3( framesXY, prevFrame, UVscale );
				float fractionsFrame = fractions.x;
				float fractionsPrevFrame = fractions.y;
				float fractionsUVscale = fractions.z;
				float3 worldCameraPos;
				#if defined(UNITY_PASS_SHADOWCASTER)
				float3 worldOrigin = 0;
				float4 perspective = float4( 0, 0, 0, 1 );
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				perspective = float4( 0, 0, 5000, 0 );
				worldOrigin = ai_ObjectToWorld._m03_m13_m23;
				}
				worldCameraPos = worldOrigin + mul( UNITY_MATRIX_I_V, perspective ).xyz;
				#else
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				worldCameraPos = ai_ObjectToWorld._m03_m13_m23 + UNITY_MATRIX_I_V._m02_m12_m22 * 5000;
				}
				else
				{
				worldCameraPos = GetCameraRelativePositionWS( _WorldSpaceCameraPos );
				}
				#endif
				float3 objectCameraPosition = mul( ai_WorldToObject, float4( worldCameraPos, 1 ) ).xyz - _AI_Offset.xyz; 
				float3 objectCameraDirection = normalize( objectCameraPosition );
				float3 upVector = float3( 0,1,0 );
				float3 objectHorizontalVector = normalize( cross( objectCameraDirection, upVector ) );
				float3 objectVerticalVector = cross( objectHorizontalVector, objectCameraDirection );
				float2 uvExpansion = positionOS.xy;
				float3 billboard = objectHorizontalVector * uvExpansion.x + objectVerticalVector * uvExpansion.y;
				float3 localDir = billboard - objectCameraPosition; 
				objectCameraDirection = trunc( objectCameraDirection * 65536.0 ) / 65536.0;
				objectCameraDirection.y = max(0.001, objectCameraDirection.y);
				float2 frameOcta = VectortoHemiOctahedron( objectCameraDirection.xzy ) * 0.5 + 0.5;
				float2 prevOctaFrame = frameOcta * prevFrame;
				float2 baseOctaFrame = floor( prevOctaFrame );
				float2 fractionOctaFrame = ( baseOctaFrame * fractionsFrame );
				float2 octaFrame1 = ( baseOctaFrame * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa1WorldY = HemiOctahedronToVector( octaFrame1 ).xzy;
				float3 octa1LocalY;
				float2 uvFrame1;
				RayPlaneIntersectionUV( octa1WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame1, /*inout*/ octa1LocalY );
				float2 uvParallax1 = octa1LocalY.xy * fractionsFrame * parallax;
				uvFrame1 = ( uvFrame1 * fractionsUVscale + 0.5 ) * fractionsFrame + fractionOctaFrame;
				uvsFrame1 = float4( uvParallax1, uvFrame1) - float4( 0, 0, uvOffset );
				float2 fractPrevOctaFrame = frac( prevOctaFrame );
				float2 cornerDifference = lerp( float2( 0,1 ) , float2( 1,0 ) , saturate( ceil( ( fractPrevOctaFrame.x - fractPrevOctaFrame.y ) ) ));
				float2 octaFrame2 = ( ( baseOctaFrame + cornerDifference ) * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa2WorldY = HemiOctahedronToVector( octaFrame2 ).xzy;
				float3 octa2LocalY;
				float2 uvFrame2;
				RayPlaneIntersectionUV( octa2WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame2, /*inout*/ octa2LocalY );
				float2 uvParallax2 = octa2LocalY.xy * fractionsFrame * parallax;
				uvFrame2 = ( uvFrame2 * fractionsUVscale + 0.5 ) * fractionsFrame + ( ( cornerDifference * fractionsFrame ) + fractionOctaFrame );
				uvsFrame2 = float4( uvParallax2, uvFrame2) - float4( 0, 0, uvOffset );
				float2 octaFrame3 = ( ( baseOctaFrame + 1 ) * fractionsPrevFrame  ) * 2.0 - 1.0;
				float3 octa3WorldY = HemiOctahedronToVector( octaFrame3 ).xzy;
				float3 octa3LocalY;
				float2 uvFrame3;
				RayPlaneIntersectionUV( octa3WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame3, /*inout*/ octa3LocalY );
				float2 uvParallax3 = octa3LocalY.xy * fractionsFrame * parallax;
				uvFrame3 = ( uvFrame3 * fractionsUVscale + 0.5 ) * fractionsFrame + ( fractionOctaFrame + fractionsFrame );
				uvsFrame3 = float4( uvParallax3, uvFrame3) - float4( 0, 0, uvOffset );
				octaFrame = 0;
				octaFrame.xy = prevOctaFrame;
				octaFrame.zw = fractionOctaFrame;
				positionOS.xyz = billboard + _AI_Offset.xyz;
				normalOS.xyz = objectCameraDirection;
				viewPos = 0;
				viewPos.xyz = TransformWorldToView( TransformObjectToWorld( positionOS.xyz ) );
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			inline void OctaImpostorFragment( inout SurfaceOutput o, out float4 positionCS, out float3 positionWS, float4 uvsFrame1, float4 uvsFrame2, float4 uvsFrame3, float4 octaFrame, float4 interpViewPos, out float4 output0, out float4 output1, out float4 output2 )
			{
				float depthBias = -1.0;
				float textureBias = _AI_TextureBias;
				float2 fraction = frac( octaFrame.xy );
				float2 invFraction = 1 - fraction;
				float3 weights;
				weights.x = min( invFraction.x, invFraction.y );
				weights.y = abs( fraction.x - fraction.y );
				weights.z = min( fraction.x, fraction.y );
				float4 parallaxSample1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame1.zw, depthBias );
				float2 parallax1 = ( ( 0.5 - parallaxSample1.a ) * uvsFrame1.xy ) + uvsFrame1.zw;
				float4 parallaxSample2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame2.zw, depthBias );
				float2 parallax2 = ( ( 0.5 - parallaxSample2.a ) * uvsFrame2.xy ) + uvsFrame2.zw;
				float4 parallaxSample3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame3.zw, depthBias );
				float2 parallax3 = ( ( 0.5 - parallaxSample3.a ) * uvsFrame3.xy ) + uvsFrame3.zw;
				float4 albedo1 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax1, textureBias );
				float4 albedo2 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax2, textureBias );
				float4 albedo3 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax3, textureBias );
				float4 blendedAlbedo = albedo1 * weights.x + albedo2 * weights.y + albedo3 * weights.z;
				o.Alpha = ( blendedAlbedo.a - _AI_Clip );
				clip( o.Alpha );
				float t = ceil( fraction.x - fraction.y );
				float4 cornerDifference = float4( t, 1 - t, 1, 1 );
				float2 step_1 = ( parallax1 - octaFrame.zw ) * _AI_Frames;
				float4 step23 = ( float4( parallax2, parallax3 ) -  octaFrame.zwzw ) * _AI_Frames - cornerDifference;
				step_1 = step_1 * (1-step_1);
				step23 = step23 * (1-step23);
				float3 steps;
				steps.x = step_1.x * step_1.y;
				steps.y = step23.x * step23.y;
				steps.z = step23.z * step23.w;
				steps = step(-steps, 0);
				float final = dot( steps, weights );
				clip( final - 0.5 );
				o.Albedo = blendedAlbedo.rgb;
				#if defined(AI_HD_RENDERPIPELINE)
				float4 feat1 = _Features.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.Diffusion = feat1.rgb;
				o.Features = feat1.a;
				float4 test1 = _Specular.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.MetalTangent = test1.b;
				#endif
				float4 normals1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax1, textureBias );
				float4 normals2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax2, textureBias );
				float4 normals3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax3, textureBias );
				float4 blendedNormal = normals1 * weights.x  + normals2 * weights.y + normals3 * weights.z;
				float4 output0a = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax1, textureBias );
				float4 output0b = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax2, textureBias );
				float4 output0c = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax3, textureBias );
				output0 = output0a * weights.x  + output0b * weights.y + output0c * weights.z; 
				float4 output1a = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax1, textureBias );
				float4 output1b = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax2, textureBias );
				float4 output1c = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax3, textureBias );
				output1 = output1a * weights.x  + output1b * weights.y + output1c * weights.z; 
				float4 output2a = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax1, textureBias );
				float4 output2b = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax2, textureBias );
				float4 output2c = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax3, textureBias );
				output2 = output2a * weights.x  + output2b * weights.y + output2c * weights.z; 
				float3 localNormal = blendedNormal.rgb * 2.0 - 1.0;
				float3 worldNormal = normalize( mul( (float3x3)ai_ObjectToWorld, localNormal ) );
				o.Normal = worldNormal;
				float3 viewPos = interpViewPos.xyz;
				float depthOffset = ( ( parallaxSample1.a * weights.x + parallaxSample2.a * weights.y + parallaxSample3.a * weights.z ) - 0.5 /** 2.0 - 1.0*/ ) /** 0.5*/ * _AI_DepthSize * length( ai_ObjectToWorld[ 2 ].xyz );
				#if ( defined(SHADERPASS) && ((defined(SHADERPASS_SHADOWS) && SHADERPASS == SHADERPASS_SHADOWS) || (defined(SHADERPASS_SHADOWCASTER) && SHADERPASS == SHADERPASS_SHADOWCASTER)) ) || defined(UNITY_PASS_SHADOWCASTER)
				viewPos.z += depthOffset * _AI_ShadowView;
				viewPos.z += -_AI_ShadowBias;
				#else 
				viewPos.z += depthOffset;
				#endif
				positionWS = mul( UNITY_MATRIX_I_V, float4( viewPos.xyz, 1 ) ).xyz;
				positionCS = mul( UNITY_MATRIX_P, float4( viewPos, 1 ) );
				#if defined(UNITY_PASS_SHADOWCASTER) && !defined(SHADERPASS)
				#if UNITY_REVERSED_Z
				positionCS.z = min( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#else
				positionCS.z = max( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#endif
				#endif
				positionCS.xyz /= positionCS.w;
				if( UNITY_NEAR_CLIP_VALUE < 0 )
				positionCS = positionCS * 0.5 + 0.5;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g153365( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g153374( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData( FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, out SurfaceData surfaceData, out float3 bentNormalWS )
			{
				ZERO_INITIALIZE( SurfaceData, surfaceData );
				surfaceData.baseColor = surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness = surfaceDescription.Smoothness;
				#ifdef _SPECULAR_OCCLUSION_CUSTOM
					surfaceData.specularOcclusion = surfaceDescription.SpecularOcclusion;
				#endif
					surfaceData.ambientOcclusion = surfaceDescription.Occlusion;
					surfaceData.metallic = surfaceDescription.Metallic;
					surfaceData.coatMask = surfaceDescription.CoatMask;

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.iridescenceMask = surfaceDescription.IridescenceMask;
					surfaceData.iridescenceThickness = surfaceDescription.IridescenceThickness;
				#endif
					surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif
				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				#endif

				#ifdef ASE_LIT_CLEAR_COAT
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif
				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.specularColor = surfaceDescription.Specular;
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
					surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif
					//float3 normalTS = float3( 0.0f, 0.0f, 1.0f );
					//normalTS = surfaceDescription.Normal;
					GetNormalWS( fragInputs, float3( 0.0, 0.0, 1.0 ), surfaceData.normalWS, float3( 1.0, 1.0, 1.0 ) );
					bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
					GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, float4( 1, 1, -1, 0 ) );
				#endif

				surfaceData.geomNormalWS = T2W(fragInputs, 2);

				#ifdef _HAS_REFRACTION
					if( _EnableSSRefraction )
					{
						surfaceData.ior = surfaceDescription.RefractionIndex;
						surfaceData.transmittanceColor = surfaceDescription.RefractionColor;
						surfaceData.atDistance = surfaceDescription.RefractionDistance;

						surfaceData.transmittanceMask = ( 1.0 - surfaceDescription.Alpha );
						surfaceDescription.Alpha = 1.0;
					}
					else
					{
						surfaceData.ior = 1.0;
						surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
						surfaceData.atDistance = 1.0;
						surfaceData.transmittanceMask = 0.0;
						surfaceDescription.Alpha = 1.0;
					}
				#else
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
					surfaceData.atDistance = 1.0;
					surfaceData.transmittanceMask = 0.0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
					surfaceData.thickness = surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask = surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash = asuint(surfaceDescription.DiffusionProfile);
				#endif

					surfaceData.tangentWS = normalize( T2W(fragInputs, 0).xyz );    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.anisotropy = surfaceDescription.Anisotropy;
					surfaceData.tangentWS = TransformTangentToWorld( surfaceDescription.Tangent, fragInputs.worldToTangent );
				#endif
					surfaceData.tangentWS = Orthonormalize( surfaceData.tangentWS, surfaceData.normalWS );
				#if defined(_SPECULAR_OCCLUSION_CUSTOM)
				#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO( V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness( surfaceData.perceptualSmoothness ) );
				#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion( ClampNdotV( dot( surfaceData.normalWS, V ) ), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness( surfaceData.perceptualSmoothness ) );
				#else
					surfaceData.specularOcclusion = 1.0;
				#endif
				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
					surfaceData.perceptualSmoothness = GeometricNormalFiltering( surfaceData.perceptualSmoothness, T2W(fragInputs, 2), surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold );
				#endif

			}

			void GetSurfaceAndBuiltinData( GlobalSurfaceDescription surfaceDescription,FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData )
			{
				//#ifdef LOD_FADE_CROSSFADE
				//	uint3 fadeMaskSeed = asuint( ( int3 )( V * _ScreenSize.xyx ) ); // Quantize V to _ScreenSize values
				//	LODDitheringTransition( fadeMaskSeed, unity_LODFade.x );
				//#endif

				#ifdef _ALPHATEST_ON
					DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				float3 bentNormalWS;
				BuildSurfaceData( fragInputs, surfaceDescription, V, surfaceData, bentNormalWS );

				#if HAVE_DECALS
				if( _EnableDecals )
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif

				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
					//InitBuiltinData( surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.positionRWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				//#else
					InitBuiltinData( posInput, surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				//#endif

				builtinData.emissiveColor = surfaceDescription.Emission;

				builtinData.depthOffset = 0.0;

				#if (SHADERPASS == SHADERPASS_DISTORTION)
					builtinData.distortion = surfaceDescription.Distortion;
					builtinData.distortionBlur = surfaceDescription.DistortionBlur;
				#else
					builtinData.distortion = float2( 0.0, 0.0 );
					builtinData.distortionBlur = 0.0;
				#endif

				PostInitBuiltinData( V, posInput, surfaceData, builtinData );
			}

			CBUFFER_START( UnityMetaPass )
			bool4 unity_MetaVertexControl;
			bool4 unity_MetaFragmentControl;
			CBUFFER_END

			float unity_OneOverOutputBoost;
			float unity_MaxOutputValue;

			PackedVaryingsMeshToPS Vert( AttributesMesh inputMesh  )
			{
				UNITY_SETUP_INSTANCE_ID( inputMesh );
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_TRANSFER_INSTANCE_ID( inputMesh, outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g153438 = (TVEModelData)0;
				float In_Dummy16_g153438 = 0.0;
				TVEModelData Data16_g153406 = (TVEModelData)0;
				half Dummy181_g153404 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _InteractionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g153406 = Dummy181_g153404;
				TVEModelData Data16_g153386 = (TVEModelData)0;
				half Dummy181_g153383 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g153386 = Dummy181_g153383;
				TVEModelData Data16_g153150 = (TVEModelData)0;
				float In_Dummy16_g153150 = 0.0;
				OctaImpostorVertex( inputMesh.positionOS, inputMesh.normalOS, outputPackedVaryingsMeshToPS.UVsFrame122_g151868, outputPackedVaryingsMeshToPS.UVsFrame222_g151868, outputPackedVaryingsMeshToPS.UVsFrame322_g151868, outputPackedVaryingsMeshToPS.octaframe22_g151868, outputPackedVaryingsMeshToPS.viewPos22_g151868 );
				float3 worldPosOut22_g151868 = GetAbsolutePositionWS( mul( UNITY_MATRIX_I_V, float4( outputPackedVaryingsMeshToPS.viewPos22_g151868.xyz, 1.0 ) ).xyz );
				half3 Input_PositionWS319_g153142 = worldPosOut22_g151868;
				float3 worldToObj315_g153142 = mul( GetWorldToObjectMatrix(), float4( GetCameraRelativePositionWS(Input_PositionWS319_g153142), 1 ) ).xyz;
				half3 Model_PositionOS316_g153142 = worldToObj315_g153142;
				float3 In_PositionOS16_g153150 = Model_PositionOS316_g153142;
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153150 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153150 = Model_PositionWO311_g153142;
				float3 In_PositionRawOS16_g153150 = Model_PositionOS316_g153142;
				float3 In_PositionAddOS16_g153150 = float3( 0,0,0 );
				float3 In_PivotOS16_g153150 = float3( 0,0,0 );
				float3 localObjectPosition_UNITY_MATRIX_M14_g153145 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g153145 = ( localObjectPosition_UNITY_MATRIX_M14_g153145 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g153145 = localObjectPosition_UNITY_MATRIX_M14_g153145;
				#endif
				half3 ObjectData20_g153147 = staticSwitch13_g153145;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				half3 WorldData19_g153147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g153147 = WorldData19_g153147;
				#else
				float3 staticSwitch14_g153147 = ObjectData20_g153147;
				#endif
				float3 temp_output_124_0_g153145 = staticSwitch14_g153147;
				float3 vertexToFrag305_g153142 = temp_output_124_0_g153145;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153150 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153150 = Model_PivotWO312_g153142;
				half3 Model_NormalOS313_g153142 = inputMesh.normalOS;
				float3 In_NormalOS16_g153150 = Model_NormalOS313_g153142;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153150 = Model_Normal_WS314_g153142;
				float3 In_NormalRawOS16_g153150 = Model_NormalOS313_g153142;
				float3 In_NormalRawWS16_g153150 = Model_Normal_WS314_g153142;
				float4 In_TangentOS16_g153150 = float4( 0,1,0,1 );
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153150 = Model_ViewDirWS347_g153142;
				float4 In_VertexData16_g153150 = float4( 1,1,1,1 );
				float4 In_MotionData16_g153150 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g153150 = float4( 1,1,1,1 );
				float4 In_RotationData16_g153150 = float4( 0,0,0,0 );
				Data16_g153150.Dummy = In_Dummy16_g153150;
				Data16_g153150.PositionOS = In_PositionOS16_g153150;
				Data16_g153150.PositionWS = In_PositionWS16_g153150;
				Data16_g153150.PositionWO = In_PositionWO16_g153150;
				Data16_g153150.PositionRawOS = In_PositionRawOS16_g153150;
				Data16_g153150.PositionAddOS = In_PositionAddOS16_g153150;
				Data16_g153150.PivotOS = In_PivotOS16_g153150;
				Data16_g153150.PivotWS = In_PivotWS16_g153150;
				Data16_g153150.PivotWO = In_PivotWO16_g153150;
				Data16_g153150.NormalOS = In_NormalOS16_g153150;
				Data16_g153150.NormalWS = In_NormalWS16_g153150;
				Data16_g153150.NormalRawOS = In_NormalRawOS16_g153150;
				Data16_g153150.NormalRawWS = In_NormalRawWS16_g153150;
				Data16_g153150.TangentOS = In_TangentOS16_g153150;
				Data16_g153150.ViewDirWS = In_ViewDirWS16_g153150;
				Data16_g153150.VertexData = In_VertexData16_g153150;
				Data16_g153150.MotionData = In_MotionData16_g153150;
				Data16_g153150.BoundsData = In_BoundsData16_g153150;
				Data16_g153150.RotationData = In_RotationData16_g153150;
				TVEModelData Data15_g153385 = Data16_g153150;
				float Out_Dummy15_g153385 = 0;
				float3 Out_PositionOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153385 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153385 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153385 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153385 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153385 = float3( 0,0,0 );
				float4 Out_VertexData15_g153385 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153385 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153385 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153385 = float4( 0,0,0,0 );
				Out_Dummy15_g153385 = Data15_g153385.Dummy;
				Out_PositionOS15_g153385 = Data15_g153385.PositionOS;
				Out_PositionWS15_g153385 = Data15_g153385.PositionWS;
				Out_PositionWO15_g153385 = Data15_g153385.PositionWO;
				Out_PositionRawOS15_g153385 = Data15_g153385.PositionRawOS;
				Out_PositionAddOS15_g153385 = Data15_g153385.PositionAddOS;
				Out_PivotOS15_g153385 = Data15_g153385.PivotOS;
				Out_PivotWS15_g153385 = Data15_g153385.PivotWS;
				Out_PivotWO15_g153385 = Data15_g153385.PivotWO;
				Out_NormalOS15_g153385 = Data15_g153385.NormalOS;
				Out_NormalWS15_g153385 = Data15_g153385.NormalWS;
				Out_NormalRawOS15_g153385 = Data15_g153385.NormalRawOS;
				Out_NormalRawWS15_g153385 = Data15_g153385.NormalRawWS;
				Out_TangentOS15_g153385 = Data15_g153385.TangentOS;
				Out_ViewDirWS15_g153385 = Data15_g153385.ViewDirWS;
				Out_VertexData15_g153385 = Data15_g153385.VertexData;
				Out_MotionData15_g153385 = Data15_g153385.MotionData;
				Out_BoundsData15_g153385 = Data15_g153385.BoundsData;
				Out_RotationData15_g153385 = Data15_g153385.RotationData;
				half3 Model_PositionOS147_g153383 = Out_PositionOS15_g153385;
				float3 temp_cast_0 = (1.0).xxx;
				float3 temp_output_210_19_g153383 = Out_PivotWO15_g153385;
				half3 Model_PivotWO162_g153383 = temp_output_210_19_g153383;
				float temp_output_7_0_g153384 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g153384 = ( _SizeFadeDistMinValue - temp_output_7_0_g153384 );
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_2 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = 0;
				half4 Input_Tex1379_g153142 = 0;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_6;
				#else
				float4 staticSwitch414_g153142 = temp_cast_7;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153387 = Data204_g153153;
				float Out_Dummy15_g153387 = 0;
				float4 Out_CoatParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153387 = float4( 0,0,0,0 );
				Out_Dummy15_g153387 = Data15_g153387.Dummy;
				Out_CoatParams15_g153387 = Data15_g153387.CoatParams;
				Out_PaintParams15_g153387 = Data15_g153387.PaintParams;
				Out_GlowParams15_g153387 = Data15_g153387.GlowParams;
				Out_AtmoParams15_g153387= Data15_g153387.AtmoParams;
				Out_FadeParams15_g153387= Data15_g153387.FadeParams;
				Out_FormParams15_g153387 = Data15_g153387.FormParams;
				Out_LandParams15_g153387 = Data15_g153387.LandParams;
				Out_WindParams15_g153387 = Data15_g153387.WindParams;
				Out_PushParams15_g153387 = Data15_g153387.PushParams;
				half4 Input_FormParams188_g153383 = Out_FormParams15_g153387;
				float lerpResult213_g153383 = lerp( 1.0 , (Input_FormParams188_g153383).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g153383 = lerpResult213_g153383;
				#else
				float staticSwitch194_g153383 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g153383 = staticSwitch194_g153383;
				float temp_output_189_0_g153383 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g153383 ) - temp_output_7_0_g153384 ) / ( temp_output_10_0_g153384 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g153383 );
				float3 appendResult200_g153383 = (float3(temp_output_189_0_g153383 , temp_output_189_0_g153383 , temp_output_189_0_g153383));
				float3 appendResult201_g153383 = (float3(1.0 , temp_output_189_0_g153383 , 1.0));
				float3 lerpResult202_g153383 = lerp( appendResult200_g153383 , appendResult201_g153383 , _SizeFadeScaleMode);
				float3 lerpResult184_g153383 = lerp( temp_cast_0 , lerpResult202_g153383 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g153383 = ( lerpResult184_g153383 * Model_PositionOS147_g153383 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g153383 = temp_output_167_0_g153383;
				#else
				float3 staticSwitch199_g153383 = Model_PositionOS147_g153383;
				#endif
				half3 Final_Position178_g153383 = staticSwitch199_g153383;
				float3 In_PositionOS16_g153386 = Final_Position178_g153383;
				float3 In_PositionWS16_g153386 = Out_PositionWS15_g153385;
				float3 In_PositionWO16_g153386 = Out_PositionWO15_g153385;
				float3 In_PositionRawOS16_g153386 = Out_PositionRawOS15_g153385;
				float3 In_PositionAddOS16_g153386 = Out_PositionAddOS15_g153385;
				float3 temp_output_210_24_g153383 = Out_PivotOS15_g153385;
				float3 In_PivotOS16_g153386 = temp_output_210_24_g153383;
				float3 In_PivotWS16_g153386 = Out_PivotWS15_g153385;
				float3 In_PivotWO16_g153386 = temp_output_210_19_g153383;
				float3 In_NormalOS16_g153386 = Out_NormalOS15_g153385;
				float3 In_NormalWS16_g153386 = Out_NormalWS15_g153385;
				float3 In_NormalRawOS16_g153386 = Out_NormalRawOS15_g153385;
				float3 In_NormalRawWS16_g153386 = Out_NormalRawWS15_g153385;
				float4 In_TangentOS16_g153386 = Out_TangentOS15_g153385;
				float3 In_ViewDirWS16_g153386 = Out_ViewDirWS15_g153385;
				float4 In_VertexData16_g153386 = Out_VertexData15_g153385;
				float4 In_MotionData16_g153386 = Out_MotionData15_g153385;
				float4 In_BoundsData16_g153386 = Out_BoundsData15_g153385;
				float4 In_RotationData16_g153386 = Out_RotationData15_g153385;
				Data16_g153386.Dummy = In_Dummy16_g153386;
				Data16_g153386.PositionOS = In_PositionOS16_g153386;
				Data16_g153386.PositionWS = In_PositionWS16_g153386;
				Data16_g153386.PositionWO = In_PositionWO16_g153386;
				Data16_g153386.PositionRawOS = In_PositionRawOS16_g153386;
				Data16_g153386.PositionAddOS = In_PositionAddOS16_g153386;
				Data16_g153386.PivotOS = In_PivotOS16_g153386;
				Data16_g153386.PivotWS = In_PivotWS16_g153386;
				Data16_g153386.PivotWO = In_PivotWO16_g153386;
				Data16_g153386.NormalOS = In_NormalOS16_g153386;
				Data16_g153386.NormalWS = In_NormalWS16_g153386;
				Data16_g153386.NormalRawOS = In_NormalRawOS16_g153386;
				Data16_g153386.NormalRawWS = In_NormalRawWS16_g153386;
				Data16_g153386.TangentOS = In_TangentOS16_g153386;
				Data16_g153386.ViewDirWS = In_ViewDirWS16_g153386;
				Data16_g153386.VertexData = In_VertexData16_g153386;
				Data16_g153386.MotionData = In_MotionData16_g153386;
				Data16_g153386.BoundsData = In_BoundsData16_g153386;
				Data16_g153386.RotationData = In_RotationData16_g153386;
				TVEModelData Data15_g153405 = Data16_g153386;
				float Out_Dummy15_g153405 = 0;
				float3 Out_PositionOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153405 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153405 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153405 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153405 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153405 = float3( 0,0,0 );
				float4 Out_VertexData15_g153405 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153405 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153405 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153405 = float4( 0,0,0,0 );
				Out_Dummy15_g153405 = Data15_g153405.Dummy;
				Out_PositionOS15_g153405 = Data15_g153405.PositionOS;
				Out_PositionWS15_g153405 = Data15_g153405.PositionWS;
				Out_PositionWO15_g153405 = Data15_g153405.PositionWO;
				Out_PositionRawOS15_g153405 = Data15_g153405.PositionRawOS;
				Out_PositionAddOS15_g153405 = Data15_g153405.PositionAddOS;
				Out_PivotOS15_g153405 = Data15_g153405.PivotOS;
				Out_PivotWS15_g153405 = Data15_g153405.PivotWS;
				Out_PivotWO15_g153405 = Data15_g153405.PivotWO;
				Out_NormalOS15_g153405 = Data15_g153405.NormalOS;
				Out_NormalWS15_g153405 = Data15_g153405.NormalWS;
				Out_NormalRawOS15_g153405 = Data15_g153405.NormalRawOS;
				Out_NormalRawWS15_g153405 = Data15_g153405.NormalRawWS;
				Out_TangentOS15_g153405 = Data15_g153405.TangentOS;
				Out_ViewDirWS15_g153405 = Data15_g153405.ViewDirWS;
				Out_VertexData15_g153405 = Data15_g153405.VertexData;
				Out_MotionData15_g153405 = Data15_g153405.MotionData;
				Out_BoundsData15_g153405 = Data15_g153405.BoundsData;
				Out_RotationData15_g153405 = Data15_g153405.RotationData;
				float3 temp_output_1567_0_g153404 = Out_PositionOS15_g153405;
				float3 In_PositionOS16_g153406 = temp_output_1567_0_g153404;
				float3 In_PositionWS16_g153406 = Out_PositionWS15_g153405;
				float3 temp_output_1567_17_g153404 = Out_PositionWO15_g153405;
				float3 In_PositionWO16_g153406 = temp_output_1567_17_g153404;
				float3 In_PositionRawOS16_g153406 = Out_PositionRawOS15_g153405;
				float3 In_PositionAddOS16_g153406 = Out_PositionAddOS15_g153405;
				float3 In_PivotOS16_g153406 = Out_PivotOS15_g153405;
				float3 In_PivotWS16_g153406 = Out_PivotWS15_g153405;
				float3 temp_output_1567_19_g153404 = Out_PivotWO15_g153405;
				float3 In_PivotWO16_g153406 = temp_output_1567_19_g153404;
				float3 In_NormalOS16_g153406 = Out_NormalOS15_g153405;
				float3 In_NormalWS16_g153406 = Out_NormalWS15_g153405;
				float3 In_NormalRawOS16_g153406 = Out_NormalRawOS15_g153405;
				float3 In_NormalRawWS16_g153406 = Out_NormalRawWS15_g153405;
				float4 In_TangentOS16_g153406 = Out_TangentOS15_g153405;
				float3 In_ViewDirWS16_g153406 = Out_ViewDirWS15_g153405;
				float4 In_VertexData16_g153406 = Out_VertexData15_g153405;
				float4 In_MotionData16_g153406 = Out_MotionData15_g153405;
				float4 In_BoundsData16_g153406 = Out_BoundsData15_g153405;
				float2 temp_cast_36 = (0.0).xx;
				half3 Model_PositionOS147_g153404 = temp_output_1567_0_g153404;
				half Base_Mask217_g153404 = saturate( ( Model_PositionOS147_g153404.y / _AI_Offset.y ) );
				half3 Model_PositionWO162_g153404 = temp_output_1567_17_g153404;
				half3 Model_PivotWO402_g153404 = temp_output_1567_19_g153404;
				float3 lerpResult829_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionBasePivotValue);
				half3 Base_Position1394_g153404 = lerpResult829_g153404;
				half3 Input_PositionWO419_g153419 = Base_Position1394_g153404;
				half Flow_Tillling1397_g153404 = _MotionTillingValue;
				half Input_MotionTillingRT670_g153419 = ( Flow_Tillling1397_g153404 + 0.2 );
				half2 Noise_CoordRT668_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTillingRT670_g153419 * 0.005 );
				half4 Noise_ParamsRT535_g153419 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g153419, 0.0 );
				half Flow_Value1599_g153404 = _MotionIntensityValue;
				half Input_MotionValue629_g153419 = Flow_Value1599_g153404;
				float2 lerpResult709_g153419 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult712_g153419 = (float3(lerpResult709_g153419 , ( (Noise_ParamsRT535_g153419).b * Input_MotionValue629_g153419 )));
				float4 lerpResult627_g153419 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g153419 = (lerpResult627_g153419).xy;
				half Input_MotionTilling321_g153419 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTilling321_g153419 * 0.005 );
				float2 temp_output_3_0_g153420 = Noise_Coord515_g153419;
				float2 temp_output_21_0_g153420 = (Global_WindDirection593_g153419*2.0 + -1.0);
				float lerpResult128_g153425 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g153419 = _MotionBaseSpeedValue;
				half Noise_Speed516_g153419 = ( ( lerpResult128_g153425 * Input_MotionSpeed62_g153419 ) * 0.02 );
				float temp_output_15_0_g153420 = Noise_Speed516_g153419;
				float temp_output_23_0_g153420 = frac( temp_output_15_0_g153420 );
				float4 lerpResult39_g153420 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * temp_output_23_0_g153420 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * frac( ( temp_output_15_0_g153420 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g153420 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g153419 = lerpResult39_g153420;
				half Input_MotionNoise552_g153419 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g153419 = (lerpResult627_g153419).z;
				half Motion_Intensity720_g153419 = ( Global_WindIntensity576_g153419 * Input_MotionValue629_g153419 );
				float lerpResult701_g153419 = lerp( 1.0 , Input_MotionNoise552_g153419 , Motion_Intensity720_g153419);
				float2 lerpResult646_g153419 = lerp( Global_WindDirection593_g153419 , (Noise_Params685_g153419).rg , lerpResult701_g153419);
				float2 lerpResult724_g153419 = lerp( float2( 0.5,0.5 ) , lerpResult646_g153419 , Motion_Intensity720_g153419);
				float3 appendResult708_g153419 = (float3(lerpResult724_g153419 , ( (Noise_Params685_g153419).a * Motion_Intensity720_g153419 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g153419 = appendResult712_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g153419 = appendResult708_g153419;
				#else
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g153419 = staticSwitch673_g153419;
				float temp_output_136_0_g153426 = _global_wind_layer_value;
				float temp_output_19_0_g153428 = TVE_WindLayers[(int)temp_output_136_0_g153426];
				half3 Input_Position180_g153429 = Input_PositionWO419_g153419;
				float2 temp_output_75_0_g153429 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_82_0_g153429 = temp_output_136_0_g153426;
				float2 temp_output_119_0_g153429 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_7_0_g153434 = 1.0;
				float temp_output_10_0_g153434 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153434 );
				float4 lerpResult131_g153429 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153429,temp_output_82_0_g153429, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153429,temp_output_82_0_g153429, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153429 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153434 ) / temp_output_10_0_g153434 ) ));
				float4 temp_output_17_0_g153428 = lerpResult131_g153429;
				float4 temp_output_3_0_g153428 = TVE_WindParams;
				float4 ifLocalVar18_g153428 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153428 >= 0.5 )
				ifLocalVar18_g153428 = temp_output_17_0_g153428;
				else
				ifLocalVar18_g153428 = temp_output_3_0_g153428;
				float4 lerpResult22_g153428 = lerp( temp_output_3_0_g153428 , temp_output_17_0_g153428 , temp_output_19_0_g153428);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153428 = lerpResult22_g153428;
				#else
				float4 staticSwitch24_g153428 = ifLocalVar18_g153428;
				#endif
				float4 temp_output_610_0_g153419 = staticSwitch24_g153428;
				float2 lerpResult699_g153419 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult643_g153419 = (float3(lerpResult699_g153419 , ( (temp_output_610_0_g153419).b * Input_MotionValue629_g153419 )));
				float3 lerpResult623_g153419 = lerp( Motion_Local694_g153419 , appendResult643_g153419 , (temp_output_610_0_g153419).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#else
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g153419 = staticSwitch693_g153419;
				#else
				float3 staticSwitch612_g153419 = Motion_Local694_g153419;
				#endif
				float3 temp_output_1628_567_g153404 = staticSwitch612_g153419;
				float2 break83_g153418 = ((temp_output_1628_567_g153404).xy*2.0 + -1.0);
				float3 appendResult79_g153418 = (float3(break83_g153418.x , 0.0 , break83_g153418.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153418 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Base_Intensity1623_g153404 = length( Base_Direction893_g153404 );
				float lerpResult1631_g153404 = lerp( 1.0 , ( Base_Intensity1623_g153404 * Base_Intensity1623_g153404 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g153404 = ( _MotionBaseIntensityValue * Base_Mask217_g153404 * Base_Direction893_g153404 * lerpResult1631_g153404 );
				#else
				float2 staticSwitch1573_g153404 = temp_cast_36;
				#endif
				float temp_output_136_0_g153408 = _global_push_layer_value;
				float temp_output_19_0_g153409 = TVE_PushLayers[(int)temp_output_136_0_g153408];
				float3 lerpResult1547_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionPushPivotValue);
				half3 Push_Position1549_g153404 = lerpResult1547_g153404;
				half3 Input_Position180_g153410 = Push_Position1549_g153404;
				float2 temp_output_75_0_g153410 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_82_0_g153410 = temp_output_136_0_g153408;
				float2 temp_output_119_0_g153410 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_7_0_g153415 = 1.0;
				float temp_output_10_0_g153415 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153415 );
				float4 lerpResult131_g153410 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153410,temp_output_82_0_g153410, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153410,temp_output_82_0_g153410, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153410 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153415 ) / temp_output_10_0_g153415 ) ));
				float4 temp_output_17_0_g153409 = lerpResult131_g153410;
				float4 temp_output_3_0_g153409 = TVE_PushParams;
				float4 ifLocalVar18_g153409 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153409 >= 0.5 )
				ifLocalVar18_g153409 = temp_output_17_0_g153409;
				else
				ifLocalVar18_g153409 = temp_output_3_0_g153409;
				float4 lerpResult22_g153409 = lerp( temp_output_3_0_g153409 , temp_output_17_0_g153409 , temp_output_19_0_g153409);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153409 = lerpResult22_g153409;
				#else
				float4 staticSwitch24_g153409 = ifLocalVar18_g153409;
				#endif
				half4 Global_PushParams214_g153404 = staticSwitch24_g153409;
				float2 break83_g153417 = ((Global_PushParams214_g153404).rg*2.0 + -1.0);
				float3 appendResult79_g153417 = (float3(break83_g153417.x , 0.0 , break83_g153417.y));
				half2 Push_Direction1608_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153417 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Push_Intensity1501_g153404 = _MotionPushIntensityValue;
				half Push_Influence1504_g153404 = saturate( ( (Global_PushParams214_g153404).a * Push_Intensity1501_g153404 ) );
				float2 lerpResult1496_g153404 = lerp( staticSwitch1573_g153404 , ( Push_Direction1608_g153404 * Push_Intensity1501_g153404 * Base_Mask217_g153404 ) , Push_Influence1504_g153404);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g153404 = lerpResult1496_g153404;
				#else
				float2 staticSwitch1506_g153404 = staticSwitch1573_g153404;
				#endif
				half2 Base_Motion1440_g153404 = staticSwitch1506_g153404;
				half2 Final_RoationData1570_g153404 = Base_Motion1440_g153404;
				float4 In_RotationData16_g153406 = float4( Final_RoationData1570_g153404, 0.0 , 0.0 );
				Data16_g153406.Dummy = In_Dummy16_g153406;
				Data16_g153406.PositionOS = In_PositionOS16_g153406;
				Data16_g153406.PositionWS = In_PositionWS16_g153406;
				Data16_g153406.PositionWO = In_PositionWO16_g153406;
				Data16_g153406.PositionRawOS = In_PositionRawOS16_g153406;
				Data16_g153406.PositionAddOS = In_PositionAddOS16_g153406;
				Data16_g153406.PivotOS = In_PivotOS16_g153406;
				Data16_g153406.PivotWS = In_PivotWS16_g153406;
				Data16_g153406.PivotWO = In_PivotWO16_g153406;
				Data16_g153406.NormalOS = In_NormalOS16_g153406;
				Data16_g153406.NormalWS = In_NormalWS16_g153406;
				Data16_g153406.NormalRawOS = In_NormalRawOS16_g153406;
				Data16_g153406.NormalRawWS = In_NormalRawWS16_g153406;
				Data16_g153406.TangentOS = In_TangentOS16_g153406;
				Data16_g153406.ViewDirWS = In_ViewDirWS16_g153406;
				Data16_g153406.VertexData = In_VertexData16_g153406;
				Data16_g153406.MotionData = In_MotionData16_g153406;
				Data16_g153406.BoundsData = In_BoundsData16_g153406;
				Data16_g153406.RotationData = In_RotationData16_g153406;
				TVEModelData Data15_g153437 = Data16_g153406;
				float Out_Dummy15_g153437 = 0;
				float3 Out_PositionOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153437 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153437 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153437 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153437 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153437 = float3( 0,0,0 );
				float4 Out_VertexData15_g153437 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153437 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153437 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153437 = float4( 0,0,0,0 );
				Out_Dummy15_g153437 = Data15_g153437.Dummy;
				Out_PositionOS15_g153437 = Data15_g153437.PositionOS;
				Out_PositionWS15_g153437 = Data15_g153437.PositionWS;
				Out_PositionWO15_g153437 = Data15_g153437.PositionWO;
				Out_PositionRawOS15_g153437 = Data15_g153437.PositionRawOS;
				Out_PositionAddOS15_g153437 = Data15_g153437.PositionAddOS;
				Out_PivotOS15_g153437 = Data15_g153437.PivotOS;
				Out_PivotWS15_g153437 = Data15_g153437.PivotWS;
				Out_PivotWO15_g153437 = Data15_g153437.PivotWO;
				Out_NormalOS15_g153437 = Data15_g153437.NormalOS;
				Out_NormalWS15_g153437 = Data15_g153437.NormalWS;
				Out_NormalRawOS15_g153437 = Data15_g153437.NormalRawOS;
				Out_NormalRawWS15_g153437 = Data15_g153437.NormalRawWS;
				Out_TangentOS15_g153437 = Data15_g153437.TangentOS;
				Out_ViewDirWS15_g153437 = Data15_g153437.ViewDirWS;
				Out_VertexData15_g153437 = Data15_g153437.VertexData;
				Out_MotionData15_g153437 = Data15_g153437.MotionData;
				Out_BoundsData15_g153437 = Data15_g153437.BoundsData;
				Out_RotationData15_g153437 = Data15_g153437.RotationData;
				half3 Model_PositionOS147_g153436 = Out_PositionOS15_g153437;
				half3 Input_False58_g153439 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153440 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153441 = VertexPos40_g153440;
				float3 appendResult74_g153441 = (float3(VertexPos40_g153441.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g153441 = appendResult74_g153441;
				float3 break84_g153441 = VertexPos40_g153441;
				float3 appendResult81_g153441 = (float3(0.0 , break84_g153441.y , break84_g153441.z));
				half3 VertexPosOtherAxis82_g153441 = appendResult81_g153441;
				float4 temp_output_1567_33_g153436 = Out_RotationData15_g153437;
				half4 Model_VertexBend1569_g153436 = temp_output_1567_33_g153436;
				half2 Angle44_g153440 = (Model_VertexBend1569_g153436).xy;
				half Angle44_g153441 = (Angle44_g153440).y;
				half3 VertexPos40_g153442 = ( VertexPosRotationAxis50_g153441 + ( VertexPosOtherAxis82_g153441 * cos( Angle44_g153441 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g153441 ) * sin( Angle44_g153441 ) ) );
				float3 appendResult74_g153442 = (float3(0.0 , 0.0 , VertexPos40_g153442.z));
				half3 VertexPosRotationAxis50_g153442 = appendResult74_g153442;
				float3 break84_g153442 = VertexPos40_g153442;
				float3 appendResult81_g153442 = (float3(break84_g153442.x , break84_g153442.y , 0.0));
				half3 VertexPosOtherAxis82_g153442 = appendResult81_g153442;
				half Angle44_g153442 = -(Angle44_g153440).x;
				half3 Input_True57_g153439 = ( VertexPosRotationAxis50_g153442 + ( VertexPosOtherAxis82_g153442 * cos( Angle44_g153442 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g153442 ) * sin( Angle44_g153442 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch65_g153439 = Input_False58_g153439;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch67_g153439 = staticSwitch65_g153439;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch69_g153439 = staticSwitch67_g153439;
				#endif
				float3 temp_output_1578_0_g153436 = staticSwitch69_g153439;
				float3 temp_output_1567_31_g153436 = Out_PositionAddOS15_g153437;
				half3 Model_PositionADD1568_g153436 = temp_output_1567_31_g153436;
				half3 Final_PositionOS178_g153436 = ( temp_output_1578_0_g153436 + Model_PositionADD1568_g153436 );
				float3 In_PositionOS16_g153438 = Final_PositionOS178_g153436;
				float3 In_PositionWS16_g153438 = Out_PositionWS15_g153437;
				float3 In_PositionWO16_g153438 = Out_PositionWO15_g153437;
				float3 In_PositionRawOS16_g153438 = Out_PositionRawOS15_g153437;
				float3 In_PositionAddOS16_g153438 = temp_output_1567_31_g153436;
				float3 In_PivotOS16_g153438 = Out_PivotOS15_g153437;
				float3 In_PivotWS16_g153438 = Out_PivotWS15_g153437;
				float3 In_PivotWO16_g153438 = Out_PivotWO15_g153437;
				float3 In_NormalOS16_g153438 = Out_NormalOS15_g153437;
				float3 In_NormalWS16_g153438 = Out_NormalWS15_g153437;
				float3 In_NormalRawOS16_g153438 = Out_NormalRawOS15_g153437;
				float3 In_NormalRawWS16_g153438 = Out_NormalRawWS15_g153437;
				float4 In_TangentOS16_g153438 = Out_TangentOS15_g153437;
				float3 In_ViewDirWS16_g153438 = Out_ViewDirWS15_g153437;
				float4 In_VertexData16_g153438 = Out_VertexData15_g153437;
				float4 In_MotionData16_g153438 = Out_MotionData15_g153437;
				float4 In_BoundsData16_g153438 = Out_BoundsData15_g153437;
				float4 In_RotationData16_g153438 = temp_output_1567_33_g153436;
				Data16_g153438.Dummy = In_Dummy16_g153438;
				Data16_g153438.PositionOS = In_PositionOS16_g153438;
				Data16_g153438.PositionWS = In_PositionWS16_g153438;
				Data16_g153438.PositionWO = In_PositionWO16_g153438;
				Data16_g153438.PositionRawOS = In_PositionRawOS16_g153438;
				Data16_g153438.PositionAddOS = In_PositionAddOS16_g153438;
				Data16_g153438.PivotOS = In_PivotOS16_g153438;
				Data16_g153438.PivotWS = In_PivotWS16_g153438;
				Data16_g153438.PivotWO = In_PivotWO16_g153438;
				Data16_g153438.NormalOS = In_NormalOS16_g153438;
				Data16_g153438.NormalWS = In_NormalWS16_g153438;
				Data16_g153438.NormalRawOS = In_NormalRawOS16_g153438;
				Data16_g153438.NormalRawWS = In_NormalRawWS16_g153438;
				Data16_g153438.TangentOS = In_TangentOS16_g153438;
				Data16_g153438.ViewDirWS = In_ViewDirWS16_g153438;
				Data16_g153438.VertexData = In_VertexData16_g153438;
				Data16_g153438.MotionData = In_MotionData16_g153438;
				Data16_g153438.BoundsData = In_BoundsData16_g153438;
				Data16_g153438.RotationData = In_RotationData16_g153438;
				TVEModelData Data15_g153458 = Data16_g153438;
				float Out_Dummy15_g153458 = 0;
				float3 Out_PositionOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153458 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153458 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153458 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153458 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153458 = float3( 0,0,0 );
				float4 Out_VertexData15_g153458 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153458 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153458 = float4( 0,0,0,0 );
				Out_Dummy15_g153458 = Data15_g153458.Dummy;
				Out_PositionOS15_g153458 = Data15_g153458.PositionOS;
				Out_PositionWS15_g153458 = Data15_g153458.PositionWS;
				Out_PositionWO15_g153458 = Data15_g153458.PositionWO;
				Out_PositionRawOS15_g153458 = Data15_g153458.PositionRawOS;
				Out_PositionAddOS15_g153458 = Data15_g153458.PositionAddOS;
				Out_PivotOS15_g153458 = Data15_g153458.PivotOS;
				Out_PivotWS15_g153458 = Data15_g153458.PivotWS;
				Out_PivotWO15_g153458 = Data15_g153458.PivotWO;
				Out_NormalOS15_g153458 = Data15_g153458.NormalOS;
				Out_NormalWS15_g153458 = Data15_g153458.NormalWS;
				Out_NormalRawOS15_g153458 = Data15_g153458.NormalRawOS;
				Out_NormalRawWS15_g153458 = Data15_g153458.NormalRawWS;
				Out_TangentOS15_g153458 = Data15_g153458.TangentOS;
				Out_ViewDirWS15_g153458 = Data15_g153458.ViewDirWS;
				Out_VertexData15_g153458 = Data15_g153458.VertexData;
				Out_MotionData15_g153458 = Data15_g153458.MotionData;
				Out_BoundsData15_g153458 = Data15_g153458.BoundsData;
				Out_RotationData15_g153458 = Data15_g153458.RotationData;
				float3 temp_output_31_0_g153451 = Out_PositionOS15_g153458;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag305_g153142;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldNormal;
				
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				inputMesh.positionOS.xyz += ( ( temp_output_31_0_g153451 - Out_PositionRawOS15_g153458 ) + _DisableSRPBatcher );

				float2 uv = float2( 0.0, 0.0 );
				if( unity_MetaVertexControl.x )
				{
					uv = inputMesh.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				}
				else if( unity_MetaVertexControl.y )
				{
					uv = inputMesh.uv2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				}

				outputPackedVaryingsMeshToPS.positionCS = float4( uv * 2.0 - 1.0, inputMesh.positionOS.z > 0 ? 1.0e-4 : 0.0, 1.0 );
				return outputPackedVaryingsMeshToPS;
			}

			float4 Frag( PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );

				//#ifdef LOD_FADE_CROSSFADE
				//float3 VC = GetWorldSpaceNormalizeViewDir(packedInput.interp00.xyz);
				//LODDitheringTransition(ComputeFadeMaskSeed(VC, packedInput.positionCS.xy), unity_LODFade.x);
				//#endif

				FragInputs input;
				ZERO_INITIALIZE( FragInputs, input );
				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				SurfaceOutput o = (SurfaceOutput)0;

				o.Normal = float3( 0, 0, 1 );
				float4 positionCS = 0;
				float3 positionWS = 0;

				float localBreakData4_g153454 = ( 0.0 );
				float localCompData3_g153446 = ( 0.0 );
				TVEVisualData Data3_g153446 = (TVEVisualData)0;
				half Dummy145_g153444 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g153446 = Dummy145_g153444;
				float localBreakData4_g153445 = ( 0.0 );
				float localCompData3_g153399 = ( 0.0 );
				TVEVisualData Data3_g153399 = (TVEVisualData)0;
				half Dummy145_g153389 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + 0.0 );
				float In_Dummy3_g153399 = Dummy145_g153389;
				float localBreakData4_g153398 = ( 0.0 );
				float localCompData3_g153373 = ( 0.0 );
				TVEVisualData Data3_g153373 = (TVEVisualData)0;
				half Dummy594_g153370 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g153373 = Dummy594_g153370;
				float localBreakData4_g153372 = ( 0.0 );
				float localCompData3_g153358 = ( 0.0 );
				TVEVisualData Data3_g153358 = (TVEVisualData)0;
				half Dummy594_g153357 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeInfo );
				float In_Dummy3_g153358 = Dummy594_g153357;
				float localBreakData4_g153368 = ( 0.0 );
				float localCompData3_g153330 = ( 0.0 );
				TVEVisualData Data3_g153330 = (TVEVisualData)0;
				half Dummy594_g153328 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeInfo );
				float In_Dummy3_g153330 = Dummy594_g153328;
				float localBreakData4_g153329 = ( 0.0 );
				float localCompData3_g153295 = ( 0.0 );
				TVEVisualData Data3_g153295 = (TVEVisualData)0;
				half Dummy594_g153292 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeInfo );
				float In_Dummy3_g153295 = Dummy594_g153292;
				float localBreakData4_g153293 = ( 0.0 );
				float localCompData3_g153272 = ( 0.0 );
				TVEVisualData Data3_g153272 = (TVEVisualData)0;
				half Dummy205_g153269 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeInfo );
				float In_Dummy3_g153272 = Dummy205_g153269;
				float localBreakData4_g153271 = ( 0.0 );
				float localCompData3_g153266 = ( 0.0 );
				TVEVisualData Data3_g153266 = (TVEVisualData)0;
				half Dummy205_g153245 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g153266 = Dummy205_g153245;
				float localBreakData4_g153267 = ( 0.0 );
				float localCompData3_g153239 = ( 0.0 );
				TVEVisualData Data3_g153239 = (TVEVisualData)0;
				half Dummy220_g153236 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g153239 = Dummy220_g153236;
				float localBreakData4_g153238 = ( 0.0 );
				float localCompData3_g153152 = ( 0.0 );
				TVEVisualData Data3_g153152 = (TVEVisualData)0;
				float In_Dummy3_g153152 = 0.0;
				float4 output0 = 0;
				float4 output1 = 0;
				float4 output2 = 0;
				OctaImpostorFragment( o, positionCS, positionWS, packedInput.UVsFrame122_g151868, packedInput.UVsFrame222_g151868, packedInput.UVsFrame322_g151868, packedInput.octaframe22_g151868, packedInput.viewPos22_g151868, output0, output1, output2 );
				float4 temp_cast_0 = (1.0).xxxx;
				half4 Input_Tex0377_g153142 = output0;
				half4 Input_Tex1379_g153142 = output1;
				float4 temp_cast_3 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch403_g153142 = temp_cast_3;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch403_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch403_g153142 = temp_cast_3;
				#endif
				half Local_MultiMask249_g153142 = (staticSwitch403_g153142).b;
				float lerpResult289_g153142 = lerp( 1.0 , Local_MultiMask249_g153142 , _ImpostorColorMode);
				float3 lerpResult292_g153142 = lerp( (_ImpostorColorTwo).rgb , (_ImpostorColor).rgb , lerpResult289_g153142);
				half3 Local_Albedo239_g153142 = ( o.Albedo * lerpResult292_g153142 );
				float3 In_Albedo3_g153152 = Local_Albedo239_g153142;
				float3 In_AlbedoRaw3_g153152 = Local_Albedo239_g153142;
				float2 temp_cast_4 = (0.5).xx;
				float2 In_NormalTS3_g153152 = temp_cast_4;
				float3 In_NormalWS3_g153152 = o.Normal;
				float4 temp_cast_5 = (1.0).xxxx;
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch385_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch385_g153142 = temp_cast_6;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch385_g153142 = temp_cast_7;
				#endif
				half Local_Metallic247_g153142 = (staticSwitch385_g153142).r;
				half Final_Metallic238_g153142 = ( Local_Metallic247_g153142 * _ImpostorMetallicValue );
				float4 temp_cast_8 = (1.0).xxxx;
				float4 temp_cast_9 = (1.0).xxxx;
				float4 temp_cast_10 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch392_g153142 = temp_cast_10;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch392_g153142 = temp_cast_9;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch392_g153142 = temp_cast_10;
				#endif
				half Local_OcclusionOrEmissive248_g153142 = (staticSwitch392_g153142).g;
				float lerpResult431_g153142 = lerp( 1.0 , Local_OcclusionOrEmissive248_g153142 , _ImpostorOcclusionValue);
				#ifdef TVE_EMISSIVE
				float staticSwitch428_g153142 = 1.0;
				#else
				float staticSwitch428_g153142 = lerpResult431_g153142;
				#endif
				half Final_Occlusion424_g153142 = staticSwitch428_g153142;
				float4 temp_cast_11 = (1.0).xxxx;
				float4 temp_cast_12 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch408_g153142 = temp_cast_12;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch408_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch408_g153142 = temp_cast_12;
				#endif
				half Local_Smoothness250_g153142 = (staticSwitch408_g153142).a;
				half Final_Smoothness233_g153142 = ( Local_Smoothness250_g153142 * _ImpostorSmoothnessValue );
				float4 appendResult257_g153142 = (float4(Final_Metallic238_g153142 , Final_Occlusion424_g153142 , 1.0 , Final_Smoothness233_g153142));
				float4 In_Shader3_g153152 = appendResult257_g153142;
				float4 appendResult286_g153142 = (float4(Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , 1.0));
				float4 In_Emissive3_g153152 = appendResult286_g153142;
				float3 temp_output_3_0_g153143 = Local_Albedo239_g153142;
				float dotResult20_g153143 = dot( temp_output_3_0_g153143 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale268_g153142 = dotResult20_g153143;
				float In_Grayscale3_g153152 = Local_Grayscale268_g153142;
				float clampResult267_g153142 = clamp( saturate( ( Local_Grayscale268_g153142 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity269_g153142 = clampResult267_g153142;
				float In_Luminosity3_g153152 = Local_Luminosity269_g153142;
				float In_MultiMask3_g153152 = Local_MultiMask249_g153142;
				float In_AlphaClip3_g153152 = 0.0;
				float In_AlphaFade3_g153152 = 1.0;
				float3 temp_cast_13 = (1.0).xxx;
				float3 In_Translucency3_g153152 = temp_cast_13;
				float In_Transmission3_g153152 = 1.0;
				float In_Thickness3_g153152 = 0.0;
				float In_Diffusion3_g153152 = 0.0;
				Data3_g153152.Dummy = In_Dummy3_g153152;
				Data3_g153152.Albedo = In_Albedo3_g153152;
				Data3_g153152.AlbedoRaw = In_AlbedoRaw3_g153152;
				Data3_g153152.NormalTS = In_NormalTS3_g153152;
				Data3_g153152.NormalWS = In_NormalWS3_g153152;
				Data3_g153152.Shader = In_Shader3_g153152;
				Data3_g153152.Emissive= In_Emissive3_g153152;
				Data3_g153152.MultiMask = In_MultiMask3_g153152;
				Data3_g153152.Grayscale = In_Grayscale3_g153152;
				Data3_g153152.Luminosity = In_Luminosity3_g153152;
				Data3_g153152.AlphaClip = In_AlphaClip3_g153152;
				Data3_g153152.AlphaFade = In_AlphaFade3_g153152;
				Data3_g153152.Translucency = In_Translucency3_g153152;
				Data3_g153152.Transmission = In_Transmission3_g153152;
				Data3_g153152.Thickness = In_Thickness3_g153152;
				Data3_g153152.Diffusion = In_Diffusion3_g153152;
				TVEVisualData Data4_g153238 = Data3_g153152;
				float Out_Dummy4_g153238 = 0;
				float3 Out_Albedo4_g153238 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153238 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153238 = float2( 0,0 );
				float3 Out_NormalWS4_g153238 = float3( 0,0,0 );
				float4 Out_Shader4_g153238 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153238 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153238 = 0;
				float Out_Grayscale4_g153238 = 0;
				float Out_Luminosity4_g153238 = 0;
				float Out_AlphaClip4_g153238 = 0;
				float Out_AlphaFade4_g153238 = 0;
				float3 Out_Translucency4_g153238 = float3( 0,0,0 );
				float Out_Transmission4_g153238 = 0;
				float Out_Thickness4_g153238 = 0;
				float Out_Diffusion4_g153238 = 0;
				Out_Dummy4_g153238 = Data4_g153238.Dummy;
				Out_Albedo4_g153238 = Data4_g153238.Albedo;
				Out_AlbedoRaw4_g153238 = Data4_g153238.AlbedoRaw;
				Out_NormalTS4_g153238 = Data4_g153238.NormalTS;
				Out_NormalWS4_g153238 = Data4_g153238.NormalWS;
				Out_Shader4_g153238 = Data4_g153238.Shader;
				Out_Emissive4_g153238= Data4_g153238.Emissive;
				Out_MultiMask4_g153238 = Data4_g153238.MultiMask;
				Out_Grayscale4_g153238 = Data4_g153238.Grayscale;
				Out_Luminosity4_g153238= Data4_g153238.Luminosity;
				Out_AlphaClip4_g153238 = Data4_g153238.AlphaClip;
				Out_AlphaFade4_g153238 = Data4_g153238.AlphaFade;
				Out_Translucency4_g153238 = Data4_g153238.Translucency;
				Out_Transmission4_g153238 = Data4_g153238.Transmission;
				Out_Thickness4_g153238 = Data4_g153238.Thickness;
				Out_Diffusion4_g153238 = Data4_g153238.Diffusion;
				half3 Visual_Albedo127_g153236 = Out_Albedo4_g153238;
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				half3 Input_PositionWS319_g153142 = GetAbsolutePositionWS( positionWS );
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 vertexToFrag305_g153142 = packedInput.ase_texcoord5.xyz;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 ase_worldNormal = packedInput.ase_texcoord6.xyz;
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_14 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = output2;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_17 = (1.0).xxxx;
				float4 temp_cast_18 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_18;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_17;
				#else
				float4 staticSwitch414_g153142 = temp_cast_18;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153244 = Data16_g153151;
				float Out_Dummy15_g153244 = 0;
				float3 Out_PositionWS15_g153244 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153244 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153244 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153244 = float3( 0,0,0 );
				float4 Out_VertexData15_g153244 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153244 = float4( 0,0,0,0 );
				Out_Dummy15_g153244 = Data15_g153244.Dummy;
				Out_PositionWS15_g153244 = Data15_g153244.PositionWS;
				Out_PositionWO15_g153244 = Data15_g153244.PositionWO;
				Out_PivotWS15_g153244 = Data15_g153244.PivotWS;
				Out_PivotWO15_g153244 = Data15_g153244.PivotWO;
				Out_NormalWS15_g153244 = Data15_g153244.NormalWS;
				Out_ViewDirWS15_g153244 = Data15_g153244.ViewDirWS;
				Out_VertexData15_g153244 = Data15_g153244.VertexData;
				Out_BoundsData15_g153244 = Data15_g153244.BoundsData;
				half3 Model_PositionWO224_g153236 = Out_PositionWO15_g153244;
				half3 Model_PivotWO239_g153236 = Out_PivotWO15_g153244;
				float3 lerpResult242_g153236 = lerp( Model_PositionWO224_g153236 , Model_PivotWO239_g153236 , _VariationNoisePivotValue);
				float4 tex3DNode60_g153240 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g153236 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g153242 = clamp( tex3DNode60_g153240.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g153243 = _VariationNoiseRemap.x;
				float temp_output_10_0_g153243 = ( _VariationNoiseRemap.y - temp_output_7_0_g153243 );
				float temp_output_238_0_g153236 = saturate( ( ( clampResult17_g153242 - temp_output_7_0_g153243 ) / ( temp_output_10_0_g153243 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g153236 = temp_output_238_0_g153236;
				half Variaton_Mask200_g153236 = Variaton_NoiseMask82_g153236;
				float3 lerpResult75_g153236 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g153236);
				float temp_output_162_11_g153236 = Out_MultiMask4_g153238;
				half Visual_MultiMask196_g153236 = temp_output_162_11_g153236;
				float lerpResult190_g153236 = lerp( 1.0 , Visual_MultiMask196_g153236 , _VariationMultiValue);
				half Variaton_MultiMask194_g153236 = lerpResult190_g153236;
				float3 lerpResult186_g153236 = lerp( Visual_Albedo127_g153236 , ( Visual_Albedo127_g153236 * lerpResult75_g153236 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g153236 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g153236 = lerpResult186_g153236;
				#else
				float3 staticSwitch171_g153236 = Visual_Albedo127_g153236;
				#endif
				half3 Final_Albedo160_g153236 = staticSwitch171_g153236;
				float3 In_Albedo3_g153239 = Final_Albedo160_g153236;
				float3 In_AlbedoRaw3_g153239 = Final_Albedo160_g153236;
				float2 In_NormalTS3_g153239 = Out_NormalTS4_g153238;
				float3 In_NormalWS3_g153239 = Out_NormalWS4_g153238;
				float4 In_Shader3_g153239 = Out_Shader4_g153238;
				float4 In_Emissive3_g153239 = Out_Emissive4_g153238;
				float3 temp_output_3_0_g153237 = Final_Albedo160_g153236;
				float dotResult20_g153237 = dot( temp_output_3_0_g153237 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g153236 = dotResult20_g153237;
				float In_Grayscale3_g153239 = Final_Grayscale164_g153236;
				float clampResult180_g153236 = clamp( saturate( ( Final_Grayscale164_g153236 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g153236 = clampResult180_g153236;
				float In_Luminosity3_g153239 = Final_Luminosity181_g153236;
				float In_MultiMask3_g153239 = temp_output_162_11_g153236;
				float In_AlphaClip3_g153239 = Out_AlphaClip4_g153238;
				float In_AlphaFade3_g153239 = Out_AlphaFade4_g153238;
				float3 In_Translucency3_g153239 = Out_Translucency4_g153238;
				float In_Transmission3_g153239 = Out_Transmission4_g153238;
				float In_Thickness3_g153239 = Out_Thickness4_g153238;
				float In_Diffusion3_g153239 = Out_Diffusion4_g153238;
				Data3_g153239.Dummy = In_Dummy3_g153239;
				Data3_g153239.Albedo = In_Albedo3_g153239;
				Data3_g153239.AlbedoRaw = In_AlbedoRaw3_g153239;
				Data3_g153239.NormalTS = In_NormalTS3_g153239;
				Data3_g153239.NormalWS = In_NormalWS3_g153239;
				Data3_g153239.Shader = In_Shader3_g153239;
				Data3_g153239.Emissive= In_Emissive3_g153239;
				Data3_g153239.MultiMask = In_MultiMask3_g153239;
				Data3_g153239.Grayscale = In_Grayscale3_g153239;
				Data3_g153239.Luminosity = In_Luminosity3_g153239;
				Data3_g153239.AlphaClip = In_AlphaClip3_g153239;
				Data3_g153239.AlphaFade = In_AlphaFade3_g153239;
				Data3_g153239.Translucency = In_Translucency3_g153239;
				Data3_g153239.Transmission = In_Transmission3_g153239;
				Data3_g153239.Thickness = In_Thickness3_g153239;
				Data3_g153239.Diffusion = In_Diffusion3_g153239;
				TVEVisualData Data4_g153267 = Data3_g153239;
				float Out_Dummy4_g153267 = 0;
				float3 Out_Albedo4_g153267 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153267 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153267 = float2( 0,0 );
				float3 Out_NormalWS4_g153267 = float3( 0,0,0 );
				float4 Out_Shader4_g153267 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153267 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153267 = 0;
				float Out_Grayscale4_g153267 = 0;
				float Out_Luminosity4_g153267 = 0;
				float Out_AlphaClip4_g153267 = 0;
				float Out_AlphaFade4_g153267 = 0;
				float3 Out_Translucency4_g153267 = float3( 0,0,0 );
				float Out_Transmission4_g153267 = 0;
				float Out_Thickness4_g153267 = 0;
				float Out_Diffusion4_g153267 = 0;
				Out_Dummy4_g153267 = Data4_g153267.Dummy;
				Out_Albedo4_g153267 = Data4_g153267.Albedo;
				Out_AlbedoRaw4_g153267 = Data4_g153267.AlbedoRaw;
				Out_NormalTS4_g153267 = Data4_g153267.NormalTS;
				Out_NormalWS4_g153267 = Data4_g153267.NormalWS;
				Out_Shader4_g153267 = Data4_g153267.Shader;
				Out_Emissive4_g153267= Data4_g153267.Emissive;
				Out_MultiMask4_g153267 = Data4_g153267.MultiMask;
				Out_Grayscale4_g153267 = Data4_g153267.Grayscale;
				Out_Luminosity4_g153267= Data4_g153267.Luminosity;
				Out_AlphaClip4_g153267 = Data4_g153267.AlphaClip;
				Out_AlphaFade4_g153267 = Data4_g153267.AlphaFade;
				Out_Translucency4_g153267 = Data4_g153267.Translucency;
				Out_Transmission4_g153267 = Data4_g153267.Transmission;
				Out_Thickness4_g153267 = Data4_g153267.Thickness;
				Out_Diffusion4_g153267 = Data4_g153267.Diffusion;
				half3 Visual_Albedo139_g153245 = Out_Albedo4_g153267;
				float temp_output_200_12_g153245 = Out_Grayscale4_g153267;
				half Visual_Grayscale150_g153245 = temp_output_200_12_g153245;
				float3 temp_cast_20 = (Visual_Grayscale150_g153245).xxx;
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153246 = Data204_g153153;
				float Out_Dummy15_g153246 = 0;
				float4 Out_CoatParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153246 = float4( 0,0,0,0 );
				Out_Dummy15_g153246 = Data15_g153246.Dummy;
				Out_CoatParams15_g153246 = Data15_g153246.CoatParams;
				Out_PaintParams15_g153246 = Data15_g153246.PaintParams;
				Out_GlowParams15_g153246 = Data15_g153246.GlowParams;
				Out_AtmoParams15_g153246= Data15_g153246.AtmoParams;
				Out_FadeParams15_g153246= Data15_g153246.FadeParams;
				Out_FormParams15_g153246 = Data15_g153246.FormParams;
				Out_LandParams15_g153246 = Data15_g153246.LandParams;
				Out_WindParams15_g153246 = Data15_g153246.WindParams;
				Out_PushParams15_g153246 = Data15_g153246.PushParams;
				half4 Global_PaintParams209_g153245 = Out_PaintParams15_g153246;
				float temp_output_6_0_g153247 = ( saturate( (Global_PaintParams209_g153245).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g153247 = ( temp_output_6_0_g153247 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g153247 = temp_output_6_0_g153247;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g153245 = staticSwitch14_g153247;
				#else
				float staticSwitch283_g153245 = 1.0;
				#endif
				half Tinting_GlobalValue285_g153245 = staticSwitch283_g153245;
				float3 lerpResult368_g153245 = lerp( Visual_Albedo139_g153245 , temp_cast_20 , ( Tinting_GlobalValue285_g153245 * _TintingGrayValue ));
				float3 temp_cast_49 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g153245 = (Global_PaintParams209_g153245).xyz;
				#else
				float3 staticSwitch288_g153245 = temp_cast_49;
				#endif
				half3 Tinting_ColorGlobal290_g153245 = staticSwitch288_g153245;
				float temp_output_200_11_g153245 = Out_MultiMask4_g153267;
				half Visual_MultiMask181_g153245 = temp_output_200_11_g153245;
				float lerpResult147_g153245 = lerp( 1.0 , Visual_MultiMask181_g153245 , _TintingMultiValue);
				half Tinting_MutiMask121_g153245 = lerpResult147_g153245;
				half Tinting_TexMask385_g153245 = 1.0;
				float temp_output_200_15_g153245 = Out_Luminosity4_g153267;
				half Visual_Luminosity257_g153245 = temp_output_200_15_g153245;
				float clampResult17_g153259 = clamp( Visual_Luminosity257_g153245 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153258 = _TintingLumaRemap.x;
				float temp_output_10_0_g153258 = ( _TintingLumaRemap.y - temp_output_7_0_g153258 );
				float lerpResult228_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153259 - temp_output_7_0_g153258 ) / ( temp_output_10_0_g153258 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g153245 = lerpResult228_g153245;
				TVEModelData Data15_g153268 = Data16_g153151;
				float Out_Dummy15_g153268 = 0;
				float3 Out_PositionWS15_g153268 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153268 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153268 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153268 = float3( 0,0,0 );
				float4 Out_VertexData15_g153268 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153268 = float4( 0,0,0,0 );
				Out_Dummy15_g153268 = Data15_g153268.Dummy;
				Out_PositionWS15_g153268 = Data15_g153268.PositionWS;
				Out_PositionWO15_g153268 = Data15_g153268.PositionWO;
				Out_PivotWS15_g153268 = Data15_g153268.PivotWS;
				Out_PivotWO15_g153268 = Data15_g153268.PivotWO;
				Out_NormalWS15_g153268 = Data15_g153268.NormalWS;
				Out_ViewDirWS15_g153268 = Data15_g153268.ViewDirWS;
				Out_VertexData15_g153268 = Data15_g153268.VertexData;
				Out_BoundsData15_g153268 = Data15_g153268.BoundsData;
				half4 Model_VertexMasks307_g153245 = Out_VertexData15_g153268;
				float4 break311_g153245 = Model_VertexMasks307_g153245;
				float4 break33_g153251 = _tinting_vert_mode;
				float temp_output_30_0_g153251 = ( break311_g153245.x * break33_g153251.x );
				float temp_output_29_0_g153251 = ( break311_g153245.y * break33_g153251.y );
				float temp_output_31_0_g153251 = ( break311_g153245.z * break33_g153251.z );
				float temp_output_28_0_g153251 = ( temp_output_30_0_g153251 + temp_output_29_0_g153251 + temp_output_31_0_g153251 + ( break311_g153245.w * break33_g153251.w ) );
				float clampResult17_g153257 = clamp( temp_output_28_0_g153251 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153256 = _TintingMeshRemap.x;
				float temp_output_10_0_g153256 = ( _TintingMeshRemap.y - temp_output_7_0_g153256 );
				float lerpResult370_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153257 - temp_output_7_0_g153256 ) / ( temp_output_10_0_g153256 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g153260 = lerpResult370_g153245;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153260 = ( temp_output_6_0_g153260 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153260 = temp_output_6_0_g153260;
				#endif
				float temp_output_333_0_g153245 = staticSwitch14_g153260;
				half Tinting_VertMask309_g153245 = temp_output_333_0_g153245;
				half Tinting_NoiseMask213_g153245 = 1.0;
				half Custom_Mask345_g153245 = 1.0;
				float temp_output_7_0_g153254 = _TintingBlendRemap.x;
				float temp_output_10_0_g153254 = ( _TintingBlendRemap.y - temp_output_7_0_g153254 );
				half Tinting_Mask242_g153245 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g153245 * Tinting_TexMask385_g153245 * Tinting_LumaMask153_g153245 * Tinting_VertMask309_g153245 * Tinting_NoiseMask213_g153245 * Tinting_GlobalValue285_g153245 * Custom_Mask345_g153245 ) - temp_output_7_0_g153254 ) / ( temp_output_10_0_g153254 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g153245 = lerp( Visual_Albedo139_g153245 , ( lerpResult368_g153245 * 4.594794 * Tinting_ColorGlobal290_g153245 * (_TintingColor).rgb ) , Tinting_Mask242_g153245);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g153245 = lerpResult90_g153245;
				#else
				float3 staticSwitch286_g153245 = Visual_Albedo139_g153245;
				#endif
				half3 Final_Albedo97_g153245 = staticSwitch286_g153245;
				float3 In_Albedo3_g153266 = Final_Albedo97_g153245;
				float3 In_AlbedoRaw3_g153266 = Out_AlbedoRaw4_g153267;
				float2 In_NormalTS3_g153266 = Out_NormalTS4_g153267;
				float3 In_NormalWS3_g153266 = Out_NormalWS4_g153267;
				float4 In_Shader3_g153266 = Out_Shader4_g153267;
				float4 In_Emissive3_g153266 = Out_Emissive4_g153267;
				float In_Grayscale3_g153266 = temp_output_200_12_g153245;
				float In_Luminosity3_g153266 = temp_output_200_15_g153245;
				float In_MultiMask3_g153266 = temp_output_200_11_g153245;
				float In_AlphaClip3_g153266 = Out_AlphaClip4_g153267;
				float In_AlphaFade3_g153266 = Out_AlphaFade4_g153267;
				float3 In_Translucency3_g153266 = Out_Translucency4_g153267;
				float In_Transmission3_g153266 = Out_Transmission4_g153267;
				float In_Thickness3_g153266 = Out_Thickness4_g153267;
				float In_Diffusion3_g153266 = Out_Diffusion4_g153267;
				Data3_g153266.Dummy = In_Dummy3_g153266;
				Data3_g153266.Albedo = In_Albedo3_g153266;
				Data3_g153266.AlbedoRaw = In_AlbedoRaw3_g153266;
				Data3_g153266.NormalTS = In_NormalTS3_g153266;
				Data3_g153266.NormalWS = In_NormalWS3_g153266;
				Data3_g153266.Shader = In_Shader3_g153266;
				Data3_g153266.Emissive= In_Emissive3_g153266;
				Data3_g153266.MultiMask = In_MultiMask3_g153266;
				Data3_g153266.Grayscale = In_Grayscale3_g153266;
				Data3_g153266.Luminosity = In_Luminosity3_g153266;
				Data3_g153266.AlphaClip = In_AlphaClip3_g153266;
				Data3_g153266.AlphaFade = In_AlphaFade3_g153266;
				Data3_g153266.Translucency = In_Translucency3_g153266;
				Data3_g153266.Transmission = In_Transmission3_g153266;
				Data3_g153266.Thickness = In_Thickness3_g153266;
				Data3_g153266.Diffusion = In_Diffusion3_g153266;
				TVEVisualData Data4_g153271 = Data3_g153266;
				float Out_Dummy4_g153271 = 0;
				float3 Out_Albedo4_g153271 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153271 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153271 = float2( 0,0 );
				float3 Out_NormalWS4_g153271 = float3( 0,0,0 );
				float4 Out_Shader4_g153271 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153271 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153271 = 0;
				float Out_Grayscale4_g153271 = 0;
				float Out_Luminosity4_g153271 = 0;
				float Out_AlphaClip4_g153271 = 0;
				float Out_AlphaFade4_g153271 = 0;
				float3 Out_Translucency4_g153271 = float3( 0,0,0 );
				float Out_Transmission4_g153271 = 0;
				float Out_Thickness4_g153271 = 0;
				float Out_Diffusion4_g153271 = 0;
				Out_Dummy4_g153271 = Data4_g153271.Dummy;
				Out_Albedo4_g153271 = Data4_g153271.Albedo;
				Out_AlbedoRaw4_g153271 = Data4_g153271.AlbedoRaw;
				Out_NormalTS4_g153271 = Data4_g153271.NormalTS;
				Out_NormalWS4_g153271 = Data4_g153271.NormalWS;
				Out_Shader4_g153271 = Data4_g153271.Shader;
				Out_Emissive4_g153271= Data4_g153271.Emissive;
				Out_MultiMask4_g153271 = Data4_g153271.MultiMask;
				Out_Grayscale4_g153271 = Data4_g153271.Grayscale;
				Out_Luminosity4_g153271= Data4_g153271.Luminosity;
				Out_AlphaClip4_g153271 = Data4_g153271.AlphaClip;
				Out_AlphaFade4_g153271 = Data4_g153271.AlphaFade;
				Out_Translucency4_g153271 = Data4_g153271.Translucency;
				Out_Transmission4_g153271 = Data4_g153271.Transmission;
				Out_Thickness4_g153271 = Data4_g153271.Thickness;
				Out_Diffusion4_g153271 = Data4_g153271.Diffusion;
				half3 Visual_Albedo292_g153269 = Out_Albedo4_g153271;
				float temp_output_280_12_g153269 = Out_Grayscale4_g153271;
				half Visual_Grayscale308_g153269 = temp_output_280_12_g153269;
				float3 temp_cast_50 = (Visual_Grayscale308_g153269).xxx;
				TVEGlobalData Data15_g153270 = Data204_g153153;
				float Out_Dummy15_g153270 = 0;
				float4 Out_CoatParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153270 = float4( 0,0,0,0 );
				Out_Dummy15_g153270 = Data15_g153270.Dummy;
				Out_CoatParams15_g153270 = Data15_g153270.CoatParams;
				Out_PaintParams15_g153270 = Data15_g153270.PaintParams;
				Out_GlowParams15_g153270 = Data15_g153270.GlowParams;
				Out_AtmoParams15_g153270= Data15_g153270.AtmoParams;
				Out_FadeParams15_g153270= Data15_g153270.FadeParams;
				Out_FormParams15_g153270 = Data15_g153270.FormParams;
				Out_LandParams15_g153270 = Data15_g153270.LandParams;
				Out_WindParams15_g153270 = Data15_g153270.WindParams;
				Out_PushParams15_g153270 = Data15_g153270.PushParams;
				half4 Global_AtmoParams314_g153269 = Out_AtmoParams15_g153270;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g153269 = ( (Global_AtmoParams314_g153269).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g153269 = 1.0;
				#endif
				half Dryness_GlobalMask352_g153269 = staticSwitch351_g153269;
				float3 lerpResult485_g153269 = lerp( Visual_Albedo292_g153269 , temp_cast_50 , ( Dryness_GlobalMask352_g153269 * _DrynessGrayValue ));
				half3 hsvTorgb58_g153290 = RGBToHSV( lerpResult485_g153269 );
				half3 hsvTorgb61_g153290 = HSVToRGB( half3(( hsvTorgb58_g153290.x + _DrynessShiftValue ),hsvTorgb58_g153290.y,hsvTorgb58_g153290.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g153269 = hsvTorgb61_g153290;
				#else
				float3 staticSwitch499_g153269 = lerpResult485_g153269;
				#endif
				half Dryness_TexMask478_g153269 = 1.0;
				float temp_output_280_11_g153269 = Out_MultiMask4_g153271;
				half Visual_MultiMask310_g153269 = temp_output_280_11_g153269;
				float lerpResult283_g153269 = lerp( 1.0 , Visual_MultiMask310_g153269 , _DrynessMultiValue);
				half Dryness_MultiMask302_g153269 = lerpResult283_g153269;
				float temp_output_280_15_g153269 = Out_Luminosity4_g153271;
				half Visual_Luminosity309_g153269 = temp_output_280_15_g153269;
				float clampResult17_g153285 = clamp( Visual_Luminosity309_g153269 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153284 = _DrynessLumaRemap.x;
				float temp_output_10_0_g153284 = ( _DrynessLumaRemap.y - temp_output_7_0_g153284 );
				float lerpResult295_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153285 - temp_output_7_0_g153284 ) / ( temp_output_10_0_g153284 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g153269 = lerpResult295_g153269;
				TVEModelData Data15_g153291 = Data16_g153151;
				float Out_Dummy15_g153291 = 0;
				float3 Out_PositionWS15_g153291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153291 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153291 = float3( 0,0,0 );
				float4 Out_VertexData15_g153291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153291 = float4( 0,0,0,0 );
				Out_Dummy15_g153291 = Data15_g153291.Dummy;
				Out_PositionWS15_g153291 = Data15_g153291.PositionWS;
				Out_PositionWO15_g153291 = Data15_g153291.PositionWO;
				Out_PivotWS15_g153291 = Data15_g153291.PivotWS;
				Out_PivotWO15_g153291 = Data15_g153291.PivotWO;
				Out_NormalWS15_g153291 = Data15_g153291.NormalWS;
				Out_ViewDirWS15_g153291 = Data15_g153291.ViewDirWS;
				Out_VertexData15_g153291 = Data15_g153291.VertexData;
				Out_BoundsData15_g153291 = Data15_g153291.BoundsData;
				half4 Model_VertexMasks386_g153269 = Out_VertexData15_g153291;
				float4 break375_g153269 = Model_VertexMasks386_g153269;
				float4 break33_g153278 = _dryness_vert_mode;
				float temp_output_30_0_g153278 = ( break375_g153269.x * break33_g153278.x );
				float temp_output_29_0_g153278 = ( break375_g153269.y * break33_g153278.y );
				float temp_output_31_0_g153278 = ( break375_g153269.z * break33_g153278.z );
				float temp_output_28_0_g153278 = ( temp_output_30_0_g153278 + temp_output_29_0_g153278 + temp_output_31_0_g153278 + ( break375_g153269.w * break33_g153278.w ) );
				float clampResult17_g153279 = clamp( temp_output_28_0_g153278 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153280 = _DrynessMeshRemap.x;
				float temp_output_10_0_g153280 = ( _DrynessMeshRemap.y - temp_output_7_0_g153280 );
				float lerpResult452_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153279 - temp_output_7_0_g153280 ) / ( temp_output_10_0_g153280 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g153286 = lerpResult452_g153269;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153286 = ( temp_output_6_0_g153286 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153286 = temp_output_6_0_g153286;
				#endif
				float temp_output_448_0_g153269 = staticSwitch14_g153286;
				half Dryness_VertMask378_g153269 = temp_output_448_0_g153269;
				half Dryness_MaskNoise291_g153269 = 1.0;
				half Custom_Mask411_g153269 = 1.0;
				float temp_output_7_0_g153283 = _DrynessBlendRemap.x;
				float temp_output_10_0_g153283 = ( _DrynessBlendRemap.y - temp_output_7_0_g153283 );
				half Dryness_Mask329_g153269 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g153269 * Dryness_MultiMask302_g153269 * Dryness_LumaMask301_g153269 * Dryness_VertMask378_g153269 * Dryness_MaskNoise291_g153269 * Dryness_GlobalMask352_g153269 * Custom_Mask411_g153269 ) - temp_output_7_0_g153283 ) / ( temp_output_10_0_g153283 + 0.0001 ) ) );
				float3 lerpResult336_g153269 = lerp( Visual_Albedo292_g153269 , ( staticSwitch499_g153269 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g153269 = lerpResult336_g153269;
				#else
				float3 staticSwitch356_g153269 = Visual_Albedo292_g153269;
				#endif
				half3 Final_Albedo331_g153269 = staticSwitch356_g153269;
				float3 In_Albedo3_g153272 = Final_Albedo331_g153269;
				float3 In_AlbedoRaw3_g153272 = Out_AlbedoRaw4_g153271;
				float2 In_NormalTS3_g153272 = Out_NormalTS4_g153271;
				float3 In_NormalWS3_g153272 = Out_NormalWS4_g153271;
				half4 Visual_Shader415_g153269 = Out_Shader4_g153271;
				float4 break438_g153269 = Visual_Shader415_g153269;
				float4 appendResult439_g153269 = (float4(break438_g153269.x , break438_g153269.y , break438_g153269.z , ( break438_g153269.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g153269 = lerp( Visual_Shader415_g153269 , appendResult439_g153269 , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g153269 = lerpResult427_g153269;
				#else
				float4 staticSwitch426_g153269 = Visual_Shader415_g153269;
				#endif
				half4 Final_Shader433_g153269 = staticSwitch426_g153269;
				float4 In_Shader3_g153272 = Final_Shader433_g153269;
				float4 In_Emissive3_g153272 = Out_Emissive4_g153271;
				float In_Grayscale3_g153272 = temp_output_280_12_g153269;
				float In_Luminosity3_g153272 = temp_output_280_15_g153269;
				float In_MultiMask3_g153272 = temp_output_280_11_g153269;
				float In_AlphaClip3_g153272 = Out_AlphaClip4_g153271;
				float In_AlphaFade3_g153272 = Out_AlphaFade4_g153271;
				float3 In_Translucency3_g153272 = Out_Translucency4_g153271;
				half Visual_Transmission416_g153269 = Out_Transmission4_g153271;
				float lerpResult421_g153269 = lerp( Visual_Transmission416_g153269 , ( Visual_Transmission416_g153269 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g153269 = lerpResult421_g153269;
				#else
				float staticSwitch418_g153269 = Visual_Transmission416_g153269;
				#endif
				half Final_Transmission425_g153269 = staticSwitch418_g153269;
				float In_Transmission3_g153272 = Final_Transmission425_g153269;
				float In_Thickness3_g153272 = Out_Thickness4_g153271;
				float In_Diffusion3_g153272 = Out_Diffusion4_g153271;
				Data3_g153272.Dummy = In_Dummy3_g153272;
				Data3_g153272.Albedo = In_Albedo3_g153272;
				Data3_g153272.AlbedoRaw = In_AlbedoRaw3_g153272;
				Data3_g153272.NormalTS = In_NormalTS3_g153272;
				Data3_g153272.NormalWS = In_NormalWS3_g153272;
				Data3_g153272.Shader = In_Shader3_g153272;
				Data3_g153272.Emissive= In_Emissive3_g153272;
				Data3_g153272.MultiMask = In_MultiMask3_g153272;
				Data3_g153272.Grayscale = In_Grayscale3_g153272;
				Data3_g153272.Luminosity = In_Luminosity3_g153272;
				Data3_g153272.AlphaClip = In_AlphaClip3_g153272;
				Data3_g153272.AlphaFade = In_AlphaFade3_g153272;
				Data3_g153272.Translucency = In_Translucency3_g153272;
				Data3_g153272.Transmission = In_Transmission3_g153272;
				Data3_g153272.Thickness = In_Thickness3_g153272;
				Data3_g153272.Diffusion = In_Diffusion3_g153272;
				TVEVisualData Data4_g153293 = Data3_g153272;
				float Out_Dummy4_g153293 = 0;
				float3 Out_Albedo4_g153293 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153293 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153293 = float2( 0,0 );
				float3 Out_NormalWS4_g153293 = float3( 0,0,0 );
				float4 Out_Shader4_g153293 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153293 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153293 = 0;
				float Out_Grayscale4_g153293 = 0;
				float Out_Luminosity4_g153293 = 0;
				float Out_AlphaClip4_g153293 = 0;
				float Out_AlphaFade4_g153293 = 0;
				float3 Out_Translucency4_g153293 = float3( 0,0,0 );
				float Out_Transmission4_g153293 = 0;
				float Out_Thickness4_g153293 = 0;
				float Out_Diffusion4_g153293 = 0;
				Out_Dummy4_g153293 = Data4_g153293.Dummy;
				Out_Albedo4_g153293 = Data4_g153293.Albedo;
				Out_AlbedoRaw4_g153293 = Data4_g153293.AlbedoRaw;
				Out_NormalTS4_g153293 = Data4_g153293.NormalTS;
				Out_NormalWS4_g153293 = Data4_g153293.NormalWS;
				Out_Shader4_g153293 = Data4_g153293.Shader;
				Out_Emissive4_g153293= Data4_g153293.Emissive;
				Out_MultiMask4_g153293 = Data4_g153293.MultiMask;
				Out_Grayscale4_g153293 = Data4_g153293.Grayscale;
				Out_Luminosity4_g153293= Data4_g153293.Luminosity;
				Out_AlphaClip4_g153293 = Data4_g153293.AlphaClip;
				Out_AlphaFade4_g153293 = Data4_g153293.AlphaFade;
				Out_Translucency4_g153293 = Data4_g153293.Translucency;
				Out_Transmission4_g153293 = Data4_g153293.Transmission;
				Out_Thickness4_g153293 = Data4_g153293.Thickness;
				Out_Diffusion4_g153293 = Data4_g153293.Diffusion;
				half3 Visual_Albedo127_g153292 = Out_Albedo4_g153293;
				float3 temp_output_622_0_g153292 = (_OverlayColor).rgb;
				half Overlay_TexMask908_g153292 = 1.0;
				float3 temp_output_739_21_g153292 = Out_NormalWS4_g153293;
				half3 Visual_NormalWS749_g153292 = temp_output_739_21_g153292;
				float clampResult17_g153313 = clamp( saturate( (Visual_NormalWS749_g153292).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g153312 = _OverlayProjRemap.x;
				float temp_output_10_0_g153312 = ( _OverlayProjRemap.y - temp_output_7_0_g153312 );
				float lerpResult842_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153313 - temp_output_7_0_g153312 ) / ( temp_output_10_0_g153312 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g153292 = lerpResult842_g153292;
				float temp_output_739_15_g153292 = Out_Luminosity4_g153293;
				half Visual_Luminosity654_g153292 = temp_output_739_15_g153292;
				float clampResult17_g153315 = clamp( Visual_Luminosity654_g153292 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153314 = _OverlayLumaRemap.x;
				float temp_output_10_0_g153314 = ( _OverlayLumaRemap.y - temp_output_7_0_g153314 );
				float lerpResult587_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153315 - temp_output_7_0_g153314 ) / ( temp_output_10_0_g153314 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g153292 = lerpResult587_g153292;
				TVEModelData Data15_g153327 = Data16_g153151;
				float Out_Dummy15_g153327 = 0;
				float3 Out_PositionWS15_g153327 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153327 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153327 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153327 = float3( 0,0,0 );
				float4 Out_VertexData15_g153327 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153327 = float4( 0,0,0,0 );
				Out_Dummy15_g153327 = Data15_g153327.Dummy;
				Out_PositionWS15_g153327 = Data15_g153327.PositionWS;
				Out_PositionWO15_g153327 = Data15_g153327.PositionWO;
				Out_PivotWS15_g153327 = Data15_g153327.PivotWS;
				Out_PivotWO15_g153327 = Data15_g153327.PivotWO;
				Out_NormalWS15_g153327 = Data15_g153327.NormalWS;
				Out_ViewDirWS15_g153327 = Data15_g153327.ViewDirWS;
				Out_VertexData15_g153327 = Data15_g153327.VertexData;
				Out_BoundsData15_g153327 = Data15_g153327.BoundsData;
				half4 Model_VertexMasks791_g153292 = Out_VertexData15_g153327;
				float4 break792_g153292 = Model_VertexMasks791_g153292;
				float4 break33_g153305 = _overlay_vert_mode;
				float temp_output_30_0_g153305 = ( break792_g153292.x * break33_g153305.x );
				float temp_output_29_0_g153305 = ( break792_g153292.y * break33_g153305.y );
				float temp_output_31_0_g153305 = ( break792_g153292.z * break33_g153305.z );
				float temp_output_28_0_g153305 = ( temp_output_30_0_g153305 + temp_output_29_0_g153305 + temp_output_31_0_g153305 + ( break792_g153292.w * break33_g153305.w ) );
				float clampResult17_g153306 = clamp( temp_output_28_0_g153305 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153309 = _OverlayMeshRemap.x;
				float temp_output_10_0_g153309 = ( _OverlayMeshRemap.y - temp_output_7_0_g153309 );
				float lerpResult881_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153306 - temp_output_7_0_g153309 ) / ( temp_output_10_0_g153309 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g153316 = lerpResult881_g153292;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153316 = ( temp_output_6_0_g153316 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153316 = temp_output_6_0_g153316;
				#endif
				float temp_output_831_0_g153292 = staticSwitch14_g153316;
				half Overlay_VertMask801_g153292 = temp_output_831_0_g153292;
				half Overlay_MaskNoise427_g153292 = 1.0;
				TVEGlobalData Data15_g153294 = Data204_g153153;
				float Out_Dummy15_g153294 = 0;
				float4 Out_CoatParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153294 = float4( 0,0,0,0 );
				Out_Dummy15_g153294 = Data15_g153294.Dummy;
				Out_CoatParams15_g153294 = Data15_g153294.CoatParams;
				Out_PaintParams15_g153294 = Data15_g153294.PaintParams;
				Out_GlowParams15_g153294 = Data15_g153294.GlowParams;
				Out_AtmoParams15_g153294= Data15_g153294.AtmoParams;
				Out_FadeParams15_g153294= Data15_g153294.FadeParams;
				Out_FormParams15_g153294 = Data15_g153294.FormParams;
				Out_LandParams15_g153294 = Data15_g153294.LandParams;
				Out_WindParams15_g153294 = Data15_g153294.WindParams;
				Out_PushParams15_g153294 = Data15_g153294.PushParams;
				half4 Global_AtmoParams516_g153292 = Out_AtmoParams15_g153294;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g153292 = ( (Global_AtmoParams516_g153292).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g153292 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g153292 = staticSwitch705_g153292;
				half Custom_Mask646_g153292 = 1.0;
				float temp_output_7_0_g153321 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g153321 = ( _OverlayBlendRemap1.y - temp_output_7_0_g153321 );
				half Overlay_Mask494_g153292 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g153292 * Overlay_MaskProj457_g153292 * Overlay_MaskLuma438_g153292 * Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 * Custom_Mask646_g153292 ) - temp_output_7_0_g153321 ) / ( temp_output_10_0_g153321 + 0.0001 ) ) );
				float3 lerpResult467_g153292 = lerp( Visual_Albedo127_g153292 , temp_output_622_0_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g153292 = lerpResult467_g153292;
				#else
				float3 staticSwitch577_g153292 = Visual_Albedo127_g153292;
				#endif
				half3 Final_Albedo493_g153292 = staticSwitch577_g153292;
				float3 In_Albedo3_g153295 = Final_Albedo493_g153292;
				float3 In_AlbedoRaw3_g153295 = Out_AlbedoRaw4_g153293;
				half2 Visual_NormalTS535_g153292 = Out_NormalTS4_g153293;
				float2 lerpResult551_g153292 = lerp( Visual_NormalTS535_g153292 , ( Visual_NormalTS535_g153292 * _OverlayNormalValue ) , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g153292 = lerpResult551_g153292;
				#else
				float2 staticSwitch583_g153292 = Visual_NormalTS535_g153292;
				#endif
				half2 Final_NormalTS499_g153292 = staticSwitch583_g153292;
				float2 In_NormalTS3_g153295 = Final_NormalTS499_g153292;
				float3 In_NormalWS3_g153295 = temp_output_739_21_g153292;
				half4 Visual_Masks536_g153292 = Out_Shader4_g153293;
				float4 appendResult585_g153292 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g153292 = lerp( Visual_Masks536_g153292 , appendResult585_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g153292 = lerpResult584_g153292;
				#else
				float4 staticSwitch586_g153292 = Visual_Masks536_g153292;
				#endif
				half4 Final_Masks482_g153292 = staticSwitch586_g153292;
				float4 In_Shader3_g153295 = Final_Masks482_g153292;
				float4 In_Emissive3_g153295 = Out_Emissive4_g153293;
				float temp_output_739_12_g153292 = Out_Grayscale4_g153293;
				float In_Grayscale3_g153295 = temp_output_739_12_g153292;
				float In_Luminosity3_g153295 = temp_output_739_15_g153292;
				float In_MultiMask3_g153295 = Out_MultiMask4_g153293;
				float In_AlphaClip3_g153295 = Out_AlphaClip4_g153293;
				float In_AlphaFade3_g153295 = Out_AlphaFade4_g153293;
				float3 In_Translucency3_g153295 = Out_Translucency4_g153293;
				half Visual_Transmission699_g153292 = Out_Transmission4_g153293;
				float lerpResult746_g153292 = lerp( Visual_Transmission699_g153292 , ( Visual_Transmission699_g153292 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g153292 = lerpResult746_g153292;
				#else
				float staticSwitch703_g153292 = Visual_Transmission699_g153292;
				#endif
				half Final_Transmission702_g153292 = staticSwitch703_g153292;
				float In_Transmission3_g153295 = Final_Transmission702_g153292;
				float In_Thickness3_g153295 = Out_Thickness4_g153293;
				float In_Diffusion3_g153295 = Out_Diffusion4_g153293;
				Data3_g153295.Dummy = In_Dummy3_g153295;
				Data3_g153295.Albedo = In_Albedo3_g153295;
				Data3_g153295.AlbedoRaw = In_AlbedoRaw3_g153295;
				Data3_g153295.NormalTS = In_NormalTS3_g153295;
				Data3_g153295.NormalWS = In_NormalWS3_g153295;
				Data3_g153295.Shader = In_Shader3_g153295;
				Data3_g153295.Emissive= In_Emissive3_g153295;
				Data3_g153295.MultiMask = In_MultiMask3_g153295;
				Data3_g153295.Grayscale = In_Grayscale3_g153295;
				Data3_g153295.Luminosity = In_Luminosity3_g153295;
				Data3_g153295.AlphaClip = In_AlphaClip3_g153295;
				Data3_g153295.AlphaFade = In_AlphaFade3_g153295;
				Data3_g153295.Translucency = In_Translucency3_g153295;
				Data3_g153295.Transmission = In_Transmission3_g153295;
				Data3_g153295.Thickness = In_Thickness3_g153295;
				Data3_g153295.Diffusion = In_Diffusion3_g153295;
				TVEVisualData Data4_g153329 = Data3_g153295;
				float Out_Dummy4_g153329 = 0;
				float3 Out_Albedo4_g153329 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153329 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153329 = float2( 0,0 );
				float3 Out_NormalWS4_g153329 = float3( 0,0,0 );
				float4 Out_Shader4_g153329 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153329 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153329 = 0;
				float Out_Grayscale4_g153329 = 0;
				float Out_Luminosity4_g153329 = 0;
				float Out_AlphaClip4_g153329 = 0;
				float Out_AlphaFade4_g153329 = 0;
				float3 Out_Translucency4_g153329 = float3( 0,0,0 );
				float Out_Transmission4_g153329 = 0;
				float Out_Thickness4_g153329 = 0;
				float Out_Diffusion4_g153329 = 0;
				Out_Dummy4_g153329 = Data4_g153329.Dummy;
				Out_Albedo4_g153329 = Data4_g153329.Albedo;
				Out_AlbedoRaw4_g153329 = Data4_g153329.AlbedoRaw;
				Out_NormalTS4_g153329 = Data4_g153329.NormalTS;
				Out_NormalWS4_g153329 = Data4_g153329.NormalWS;
				Out_Shader4_g153329 = Data4_g153329.Shader;
				Out_Emissive4_g153329= Data4_g153329.Emissive;
				Out_MultiMask4_g153329 = Data4_g153329.MultiMask;
				Out_Grayscale4_g153329 = Data4_g153329.Grayscale;
				Out_Luminosity4_g153329= Data4_g153329.Luminosity;
				Out_AlphaClip4_g153329 = Data4_g153329.AlphaClip;
				Out_AlphaFade4_g153329 = Data4_g153329.AlphaFade;
				Out_Translucency4_g153329 = Data4_g153329.Translucency;
				Out_Transmission4_g153329 = Data4_g153329.Transmission;
				Out_Thickness4_g153329 = Data4_g153329.Thickness;
				Out_Diffusion4_g153329 = Data4_g153329.Diffusion;
				half3 Visual_Albedo127_g153328 = Out_Albedo4_g153329;
				float3 lerpResult768_g153328 = lerp( Visual_Albedo127_g153328 , ( Visual_Albedo127_g153328 * Visual_Albedo127_g153328 ) , _WetnessContrastValue);
				TVEGlobalData Data15_g153334 = Data204_g153153;
				float Out_Dummy15_g153334 = 0;
				float4 Out_CoatParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153334 = float4( 0,0,0,0 );
				Out_Dummy15_g153334 = Data15_g153334.Dummy;
				Out_CoatParams15_g153334 = Data15_g153334.CoatParams;
				Out_PaintParams15_g153334 = Data15_g153334.PaintParams;
				Out_GlowParams15_g153334 = Data15_g153334.GlowParams;
				Out_AtmoParams15_g153334= Data15_g153334.AtmoParams;
				Out_FadeParams15_g153334= Data15_g153334.FadeParams;
				Out_FormParams15_g153334 = Data15_g153334.FormParams;
				Out_LandParams15_g153334 = Data15_g153334.LandParams;
				Out_WindParams15_g153334 = Data15_g153334.WindParams;
				Out_PushParams15_g153334 = Data15_g153334.PushParams;
				half4 Global_AtmoParams516_g153328 = Out_AtmoParams15_g153334;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g153328 = ( (Global_AtmoParams516_g153328).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g153328 = 1.0;
				#endif
				half Global_Wetness429_g153328 = staticSwitch663_g153328;
				half Wetness_Value1042_g153328 = ( _WetnessIntensityValue * Global_Wetness429_g153328 );
				half Wetness_VertMask1024_g153328 = 1.0;
				float temp_output_1043_0_g153328 = ( Wetness_Value1042_g153328 * Wetness_VertMask1024_g153328 );
				half Wetness_Mask866_g153328 = temp_output_1043_0_g153328;
				float3 lerpResult651_g153328 = lerp( Visual_Albedo127_g153328 , lerpResult768_g153328 , Wetness_Mask866_g153328);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g153328 = lerpResult651_g153328;
				#else
				float3 staticSwitch577_g153328 = Visual_Albedo127_g153328;
				#endif
				half3 Final_Albedo493_g153328 = staticSwitch577_g153328;
				float3 In_Albedo3_g153330 = Final_Albedo493_g153328;
				float3 In_AlbedoRaw3_g153330 = Out_AlbedoRaw4_g153329;
				half2 Visual_Normal535_g153328 = Out_NormalTS4_g153329;
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#else
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#endif
				half2 Final_Normal499_g153328 = staticSwitch774_g153328;
				float2 In_NormalTS3_g153330 = Final_Normal499_g153328;
				float3 In_NormalWS3_g153330 = Out_NormalWS4_g153329;
				half4 Visual_Masks536_g153328 = Out_Shader4_g153329;
				float4 break658_g153328 = Visual_Masks536_g153328;
				float temp_output_935_0_g153328 = ( Wetness_Mask866_g153328 * _WetnessSmoothnessValue );
				float4 appendResult661_g153328 = (float4(break658_g153328.x , break658_g153328.y , break658_g153328.z , saturate( ( break658_g153328.w + temp_output_935_0_g153328 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g153328 = appendResult661_g153328;
				#else
				float4 staticSwitch586_g153328 = Visual_Masks536_g153328;
				#endif
				half4 Final_Masks482_g153328 = staticSwitch586_g153328;
				float4 In_Shader3_g153330 = Final_Masks482_g153328;
				float4 In_Emissive3_g153330 = Out_Emissive4_g153329;
				float In_Grayscale3_g153330 = Out_Grayscale4_g153329;
				float In_Luminosity3_g153330 = Out_Luminosity4_g153329;
				float In_MultiMask3_g153330 = Out_MultiMask4_g153329;
				float In_AlphaClip3_g153330 = Out_AlphaClip4_g153329;
				float In_AlphaFade3_g153330 = Out_AlphaFade4_g153329;
				float3 In_Translucency3_g153330 = Out_Translucency4_g153329;
				float In_Transmission3_g153330 = Out_Transmission4_g153329;
				float In_Thickness3_g153330 = Out_Thickness4_g153329;
				float In_Diffusion3_g153330 = Out_Diffusion4_g153329;
				Data3_g153330.Dummy = In_Dummy3_g153330;
				Data3_g153330.Albedo = In_Albedo3_g153330;
				Data3_g153330.AlbedoRaw = In_AlbedoRaw3_g153330;
				Data3_g153330.NormalTS = In_NormalTS3_g153330;
				Data3_g153330.NormalWS = In_NormalWS3_g153330;
				Data3_g153330.Shader = In_Shader3_g153330;
				Data3_g153330.Emissive= In_Emissive3_g153330;
				Data3_g153330.MultiMask = In_MultiMask3_g153330;
				Data3_g153330.Grayscale = In_Grayscale3_g153330;
				Data3_g153330.Luminosity = In_Luminosity3_g153330;
				Data3_g153330.AlphaClip = In_AlphaClip3_g153330;
				Data3_g153330.AlphaFade = In_AlphaFade3_g153330;
				Data3_g153330.Translucency = In_Translucency3_g153330;
				Data3_g153330.Transmission = In_Transmission3_g153330;
				Data3_g153330.Thickness = In_Thickness3_g153330;
				Data3_g153330.Diffusion = In_Diffusion3_g153330;
				TVEVisualData Data4_g153368 = Data3_g153330;
				float Out_Dummy4_g153368 = 0;
				float3 Out_Albedo4_g153368 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153368 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153368 = float2( 0,0 );
				float3 Out_NormalWS4_g153368 = float3( 0,0,0 );
				float4 Out_Shader4_g153368 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153368 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153368 = 0;
				float Out_Grayscale4_g153368 = 0;
				float Out_Luminosity4_g153368 = 0;
				float Out_AlphaClip4_g153368 = 0;
				float Out_AlphaFade4_g153368 = 0;
				float3 Out_Translucency4_g153368 = float3( 0,0,0 );
				float Out_Transmission4_g153368 = 0;
				float Out_Thickness4_g153368 = 0;
				float Out_Diffusion4_g153368 = 0;
				Out_Dummy4_g153368 = Data4_g153368.Dummy;
				Out_Albedo4_g153368 = Data4_g153368.Albedo;
				Out_AlbedoRaw4_g153368 = Data4_g153368.AlbedoRaw;
				Out_NormalTS4_g153368 = Data4_g153368.NormalTS;
				Out_NormalWS4_g153368 = Data4_g153368.NormalWS;
				Out_Shader4_g153368 = Data4_g153368.Shader;
				Out_Emissive4_g153368= Data4_g153368.Emissive;
				Out_MultiMask4_g153368 = Data4_g153368.MultiMask;
				Out_Grayscale4_g153368 = Data4_g153368.Grayscale;
				Out_Luminosity4_g153368= Data4_g153368.Luminosity;
				Out_AlphaClip4_g153368 = Data4_g153368.AlphaClip;
				Out_AlphaFade4_g153368 = Data4_g153368.AlphaFade;
				Out_Translucency4_g153368 = Data4_g153368.Translucency;
				Out_Transmission4_g153368 = Data4_g153368.Transmission;
				Out_Thickness4_g153368 = Data4_g153368.Thickness;
				Out_Diffusion4_g153368 = Data4_g153368.Diffusion;
				float3 In_Albedo3_g153358 = Out_Albedo4_g153368;
				float3 In_AlbedoRaw3_g153358 = Out_AlbedoRaw4_g153368;
				float2 In_NormalTS3_g153358 = Out_NormalTS4_g153368;
				float3 In_NormalWS3_g153358 = Out_NormalWS4_g153368;
				float4 In_Shader3_g153358 = Out_Shader4_g153368;
				float4 In_Emissive3_g153358 = Out_Emissive4_g153368;
				float In_Grayscale3_g153358 = Out_Grayscale4_g153368;
				float In_Luminosity3_g153358 = Out_Luminosity4_g153368;
				float temp_output_836_11_g153357 = Out_MultiMask4_g153368;
				float In_MultiMask3_g153358 = temp_output_836_11_g153357;
				half Visual_AlphaClip667_g153357 = Out_AlphaClip4_g153368;
				half Input_True57_g153365 = Visual_AlphaClip667_g153357;
				half True36_g153365 = Input_True57_g153365;
				TVEGlobalData Data15_g153367 = Data204_g153153;
				float Out_Dummy15_g153367 = 0;
				float4 Out_CoatParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153367 = float4( 0,0,0,0 );
				Out_Dummy15_g153367 = Data15_g153367.Dummy;
				Out_CoatParams15_g153367 = Data15_g153367.CoatParams;
				Out_PaintParams15_g153367 = Data15_g153367.PaintParams;
				Out_GlowParams15_g153367 = Data15_g153367.GlowParams;
				Out_AtmoParams15_g153367= Data15_g153367.AtmoParams;
				Out_FadeParams15_g153367= Data15_g153367.FadeParams;
				Out_FormParams15_g153367 = Data15_g153367.FormParams;
				Out_LandParams15_g153367 = Data15_g153367.LandParams;
				Out_WindParams15_g153367 = Data15_g153367.WindParams;
				Out_PushParams15_g153367 = Data15_g153367.PushParams;
				half4 Global_FadeParams516_g153357 = Out_FadeParams15_g153367;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g153357 = saturate( (Global_FadeParams516_g153357).w );
				#else
				float staticSwitch663_g153357 = 1.0;
				#endif
				half Local_GlobalMask429_g153357 = staticSwitch663_g153357;
				half Local_AlphaMask814_g153357 = 1.0;
				TVEModelData Data15_g153369 = Data16_g153151;
				float Out_Dummy15_g153369 = 0;
				float3 Out_PositionWS15_g153369 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153369 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153369 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153369 = float3( 0,0,0 );
				float4 Out_VertexData15_g153369 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153369 = float4( 0,0,0,0 );
				Out_Dummy15_g153369 = Data15_g153369.Dummy;
				Out_PositionWS15_g153369 = Data15_g153369.PositionWS;
				Out_PositionWO15_g153369 = Data15_g153369.PositionWO;
				Out_PivotWS15_g153369 = Data15_g153369.PivotWS;
				Out_PivotWO15_g153369 = Data15_g153369.PivotWO;
				Out_NormalWS15_g153369 = Data15_g153369.NormalWS;
				Out_ViewDirWS15_g153369 = Data15_g153369.ViewDirWS;
				Out_VertexData15_g153369 = Data15_g153369.VertexData;
				Out_BoundsData15_g153369 = Data15_g153369.BoundsData;
				half3 Model_PositionWO602_g153357 = Out_PositionWO15_g153369;
				float4 tex3DNode60_g153361 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g153357 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g153357 = lerp( 1.0 , tex3DNode60_g153361.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g153357 = lerpResult673_g153357;
				half4 Model_VertexMasks752_g153357 = Out_VertexData15_g153369;
				float4 break755_g153357 = Model_VertexMasks752_g153357;
				float4 break33_g153359 = _cutout_vert_mode;
				float temp_output_30_0_g153359 = ( break755_g153357.x * break33_g153359.x );
				float temp_output_29_0_g153359 = ( break755_g153357.y * break33_g153359.y );
				float temp_output_31_0_g153359 = ( break755_g153357.z * break33_g153359.z );
				float temp_output_28_0_g153359 = ( temp_output_30_0_g153359 + temp_output_29_0_g153359 + temp_output_31_0_g153359 + ( break755_g153357.w * break33_g153359.w ) );
				float clampResult17_g153360 = clamp( temp_output_28_0_g153359 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153363 = _CutoutMeshRemap.x;
				float temp_output_10_0_g153363 = ( _CutoutMeshRemap.y - temp_output_7_0_g153363 );
				float lerpResult820_g153357 = lerp( 1.0 , saturate( ( ( clampResult17_g153360 - temp_output_7_0_g153363 ) / ( temp_output_10_0_g153363 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g153364 = lerpResult820_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153364 = ( temp_output_6_0_g153364 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153364 = temp_output_6_0_g153364;
				#endif
				float temp_output_801_0_g153357 = staticSwitch14_g153364;
				half Local_VertMask766_g153357 = temp_output_801_0_g153357;
				half Visual_MultiMask671_g153357 = temp_output_836_11_g153357;
				float lerpResult683_g153357 = lerp( 1.0 , Visual_MultiMask671_g153357 , _CutoutMultiValue);
				half Local_MultiMask685_g153357 = lerpResult683_g153357;
				float lerpResult728_g153357 = lerp( Visual_AlphaClip667_g153357 , min( Visual_AlphaClip667_g153357 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g153357 ) - ( Local_AlphaMask814_g153357 * Local_NoiseMask678_g153357 * Local_VertMask766_g153357 ) ) ) ) , Local_MultiMask685_g153357);
				half Local_AlphaClip784_g153357 = lerpResult728_g153357;
				half Input_False58_g153365 = Local_AlphaClip784_g153357;
				half False36_g153365 = Input_False58_g153365;
				half localShadowPassCheck36_g153365 = ShadowPassCheck36_g153365( True36_g153365 , False36_g153365 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g153357 = Local_AlphaClip784_g153357;
				#else
				float staticSwitch791_g153357 = localShadowPassCheck36_g153365;
				#endif
				float temp_output_6_0_g153366 = staticSwitch791_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153366 = ( temp_output_6_0_g153366 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153366 = temp_output_6_0_g153366;
				#endif
				float temp_output_798_0_g153357 = staticSwitch14_g153366;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g153357 = temp_output_798_0_g153357;
				#else
				float staticSwitch577_g153357 = Visual_AlphaClip667_g153357;
				#endif
				half Final_AlphaClip795_g153357 = staticSwitch577_g153357;
				float In_AlphaClip3_g153358 = Final_AlphaClip795_g153357;
				float In_AlphaFade3_g153358 = Out_AlphaFade4_g153368;
				float3 In_Translucency3_g153358 = Out_Translucency4_g153368;
				float In_Transmission3_g153358 = Out_Transmission4_g153368;
				float In_Thickness3_g153358 = Out_Thickness4_g153368;
				float In_Diffusion3_g153358 = Out_Diffusion4_g153368;
				Data3_g153358.Dummy = In_Dummy3_g153358;
				Data3_g153358.Albedo = In_Albedo3_g153358;
				Data3_g153358.AlbedoRaw = In_AlbedoRaw3_g153358;
				Data3_g153358.NormalTS = In_NormalTS3_g153358;
				Data3_g153358.NormalWS = In_NormalWS3_g153358;
				Data3_g153358.Shader = In_Shader3_g153358;
				Data3_g153358.Emissive= In_Emissive3_g153358;
				Data3_g153358.MultiMask = In_MultiMask3_g153358;
				Data3_g153358.Grayscale = In_Grayscale3_g153358;
				Data3_g153358.Luminosity = In_Luminosity3_g153358;
				Data3_g153358.AlphaClip = In_AlphaClip3_g153358;
				Data3_g153358.AlphaFade = In_AlphaFade3_g153358;
				Data3_g153358.Translucency = In_Translucency3_g153358;
				Data3_g153358.Transmission = In_Transmission3_g153358;
				Data3_g153358.Thickness = In_Thickness3_g153358;
				Data3_g153358.Diffusion = In_Diffusion3_g153358;
				TVEVisualData Data4_g153372 = Data3_g153358;
				float Out_Dummy4_g153372 = 0;
				float3 Out_Albedo4_g153372 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153372 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153372 = float2( 0,0 );
				float3 Out_NormalWS4_g153372 = float3( 0,0,0 );
				float4 Out_Shader4_g153372 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153372 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153372 = 0;
				float Out_Grayscale4_g153372 = 0;
				float Out_Luminosity4_g153372 = 0;
				float Out_AlphaClip4_g153372 = 0;
				float Out_AlphaFade4_g153372 = 0;
				float3 Out_Translucency4_g153372 = float3( 0,0,0 );
				float Out_Transmission4_g153372 = 0;
				float Out_Thickness4_g153372 = 0;
				float Out_Diffusion4_g153372 = 0;
				Out_Dummy4_g153372 = Data4_g153372.Dummy;
				Out_Albedo4_g153372 = Data4_g153372.Albedo;
				Out_AlbedoRaw4_g153372 = Data4_g153372.AlbedoRaw;
				Out_NormalTS4_g153372 = Data4_g153372.NormalTS;
				Out_NormalWS4_g153372 = Data4_g153372.NormalWS;
				Out_Shader4_g153372 = Data4_g153372.Shader;
				Out_Emissive4_g153372= Data4_g153372.Emissive;
				Out_MultiMask4_g153372 = Data4_g153372.MultiMask;
				Out_Grayscale4_g153372 = Data4_g153372.Grayscale;
				Out_Luminosity4_g153372= Data4_g153372.Luminosity;
				Out_AlphaClip4_g153372 = Data4_g153372.AlphaClip;
				Out_AlphaFade4_g153372 = Data4_g153372.AlphaFade;
				Out_Translucency4_g153372 = Data4_g153372.Translucency;
				Out_Transmission4_g153372 = Data4_g153372.Transmission;
				Out_Thickness4_g153372 = Data4_g153372.Thickness;
				Out_Diffusion4_g153372 = Data4_g153372.Diffusion;
				float3 In_Albedo3_g153373 = Out_Albedo4_g153372;
				float3 In_AlbedoRaw3_g153373 = Out_AlbedoRaw4_g153372;
				float2 In_NormalTS3_g153373 = Out_NormalTS4_g153372;
				float3 In_NormalWS3_g153373 = Out_NormalWS4_g153372;
				float4 In_Shader3_g153373 = Out_Shader4_g153372;
				float4 In_Emissive3_g153373 = Out_Emissive4_g153372;
				float In_Grayscale3_g153373 = Out_Grayscale4_g153372;
				float In_Luminosity3_g153373 = Out_Luminosity4_g153372;
				float temp_output_821_11_g153370 = Out_MultiMask4_g153372;
				float In_MultiMask3_g153373 = temp_output_821_11_g153370;
				half Visual_AlphaClip754_g153370 = Out_AlphaClip4_g153372;
				half Input_True57_g153374 = Visual_AlphaClip754_g153370;
				half True36_g153374 = Input_True57_g153374;
				half Dither_Constant768_g153370 = _DitherConstantValue;
				TVEModelData Data15_g153379 = Data16_g153151;
				float Out_Dummy15_g153379 = 0;
				float3 Out_PositionWS15_g153379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153379 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153379 = float3( 0,0,0 );
				float4 Out_VertexData15_g153379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153379 = float4( 0,0,0,0 );
				Out_Dummy15_g153379 = Data15_g153379.Dummy;
				Out_PositionWS15_g153379 = Data15_g153379.PositionWS;
				Out_PositionWO15_g153379 = Data15_g153379.PositionWO;
				Out_PivotWS15_g153379 = Data15_g153379.PivotWS;
				Out_PivotWO15_g153379 = Data15_g153379.PivotWO;
				Out_NormalWS15_g153379 = Data15_g153379.NormalWS;
				Out_ViewDirWS15_g153379 = Data15_g153379.ViewDirWS;
				Out_VertexData15_g153379 = Data15_g153379.VertexData;
				Out_BoundsData15_g153379 = Data15_g153379.BoundsData;
				half3 Model_PositionWS776_g153370 = Out_PositionWS15_g153379;
				float temp_output_7_0_g153378 = _DitherDistanceMinValue;
				float temp_output_10_0_g153378 = ( _DitherDistanceMaxValue - temp_output_7_0_g153378 );
				half Dither_Distance856_g153370 = ( saturate( ( ( distance( Model_PositionWS776_g153370 , _WorldSpaceCameraPos ) - temp_output_7_0_g153378 ) / ( temp_output_10_0_g153378 + 0.0001 ) ) ) * _DitherDistanceValue );
				half Dither_Value429_g153370 = max( Dither_Constant768_g153370 , Dither_Distance856_g153370 );
				half3 Model_PositionWO602_g153370 = Out_PositionWO15_g153379;
				float4 tex3DNode60_g153376 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g153370 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g153370 = tex3DNode60_g153376.r;
				half Local_MaskNoise678_g153370 = temp_output_809_0_g153370;
				half Visual_MultiMask671_g153370 = temp_output_821_11_g153370;
				float lerpResult683_g153370 = lerp( 1.0 , Visual_MultiMask671_g153370 , _DitherMultiValue);
				half Local_MaskMulti685_g153370 = lerpResult683_g153370;
				half Custom_Mask826_g153370 = 1.0;
				float lerpResult728_g153370 = lerp( Visual_AlphaClip754_g153370 , min( Visual_AlphaClip754_g153370 , ( -0.001 - ( Dither_Value429_g153370 - Local_MaskNoise678_g153370 ) ) ) , ( Local_MaskMulti685_g153370 * Custom_Mask826_g153370 ));
				half Local_AlphaClip834_g153370 = lerpResult728_g153370;
				half Input_False58_g153374 = Local_AlphaClip834_g153370;
				half False36_g153374 = Input_False58_g153374;
				half localShadowPassCheck36_g153374 = ShadowPassCheck36_g153374( True36_g153374 , False36_g153374 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g153370 = Local_AlphaClip834_g153370;
				#else
				float staticSwitch831_g153370 = localShadowPassCheck36_g153374;
				#endif
				float temp_output_6_0_g153375 = staticSwitch831_g153370;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153375 = ( temp_output_6_0_g153375 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153375 = temp_output_6_0_g153375;
				#endif
				float temp_output_840_0_g153370 = staticSwitch14_g153375;
				#ifdef TVE_DITHER
				float staticSwitch577_g153370 = temp_output_840_0_g153370;
				#else
				float staticSwitch577_g153370 = Visual_AlphaClip754_g153370;
				#endif
				half Final_AlphaClip493_g153370 = staticSwitch577_g153370;
				float In_AlphaClip3_g153373 = Final_AlphaClip493_g153370;
				float In_AlphaFade3_g153373 = Out_AlphaFade4_g153372;
				float3 In_Translucency3_g153373 = Out_Translucency4_g153372;
				float In_Transmission3_g153373 = Out_Transmission4_g153372;
				float In_Thickness3_g153373 = Out_Thickness4_g153372;
				float In_Diffusion3_g153373 = Out_Diffusion4_g153372;
				Data3_g153373.Dummy = In_Dummy3_g153373;
				Data3_g153373.Albedo = In_Albedo3_g153373;
				Data3_g153373.AlbedoRaw = In_AlbedoRaw3_g153373;
				Data3_g153373.NormalTS = In_NormalTS3_g153373;
				Data3_g153373.NormalWS = In_NormalWS3_g153373;
				Data3_g153373.Shader = In_Shader3_g153373;
				Data3_g153373.Emissive= In_Emissive3_g153373;
				Data3_g153373.MultiMask = In_MultiMask3_g153373;
				Data3_g153373.Grayscale = In_Grayscale3_g153373;
				Data3_g153373.Luminosity = In_Luminosity3_g153373;
				Data3_g153373.AlphaClip = In_AlphaClip3_g153373;
				Data3_g153373.AlphaFade = In_AlphaFade3_g153373;
				Data3_g153373.Translucency = In_Translucency3_g153373;
				Data3_g153373.Transmission = In_Transmission3_g153373;
				Data3_g153373.Thickness = In_Thickness3_g153373;
				Data3_g153373.Diffusion = In_Diffusion3_g153373;
				TVEVisualData Data4_g153398 = Data3_g153373;
				float Out_Dummy4_g153398 = 0;
				float3 Out_Albedo4_g153398 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153398 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153398 = float2( 0,0 );
				float3 Out_NormalWS4_g153398 = float3( 0,0,0 );
				float4 Out_Shader4_g153398 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153398 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153398 = 0;
				float Out_Grayscale4_g153398 = 0;
				float Out_Luminosity4_g153398 = 0;
				float Out_AlphaClip4_g153398 = 0;
				float Out_AlphaFade4_g153398 = 0;
				float3 Out_Translucency4_g153398 = float3( 0,0,0 );
				float Out_Transmission4_g153398 = 0;
				float Out_Thickness4_g153398 = 0;
				float Out_Diffusion4_g153398 = 0;
				Out_Dummy4_g153398 = Data4_g153398.Dummy;
				Out_Albedo4_g153398 = Data4_g153398.Albedo;
				Out_AlbedoRaw4_g153398 = Data4_g153398.AlbedoRaw;
				Out_NormalTS4_g153398 = Data4_g153398.NormalTS;
				Out_NormalWS4_g153398 = Data4_g153398.NormalWS;
				Out_Shader4_g153398 = Data4_g153398.Shader;
				Out_Emissive4_g153398= Data4_g153398.Emissive;
				Out_MultiMask4_g153398 = Data4_g153398.MultiMask;
				Out_Grayscale4_g153398 = Data4_g153398.Grayscale;
				Out_Luminosity4_g153398= Data4_g153398.Luminosity;
				Out_AlphaClip4_g153398 = Data4_g153398.AlphaClip;
				Out_AlphaFade4_g153398 = Data4_g153398.AlphaFade;
				Out_Translucency4_g153398 = Data4_g153398.Translucency;
				Out_Transmission4_g153398 = Data4_g153398.Transmission;
				Out_Thickness4_g153398 = Data4_g153398.Thickness;
				Out_Diffusion4_g153398 = Data4_g153398.Diffusion;
				float3 temp_output_297_0_g153389 = Out_Albedo4_g153398;
				float3 In_Albedo3_g153399 = temp_output_297_0_g153389;
				float3 temp_output_297_23_g153389 = Out_AlbedoRaw4_g153398;
				float3 In_AlbedoRaw3_g153399 = temp_output_297_23_g153389;
				float2 In_NormalTS3_g153399 = Out_NormalTS4_g153398;
				float3 In_NormalWS3_g153399 = Out_NormalWS4_g153398;
				float4 In_Shader3_g153399 = Out_Shader4_g153398;
				float4 temp_cast_51 = (0.0).xxxx;
				half4 Visual_Emissive255_g153389 = Out_Emissive4_g153398;
				half Emissive_MeshMask221_g153389 = 1.0;
				half Emissive_Mask103_g153389 = 1.0;
				float temp_output_279_0_g153389 = ( Emissive_MeshMask221_g153389 * Emissive_Mask103_g153389 );
				float3 appendResult293_g153389 = (float3(temp_output_279_0_g153389 , temp_output_279_0_g153389 , temp_output_279_0_g153389));
				half3 Local_EmissiveColor278_g153389 = appendResult293_g153389;
				float3 temp_cast_52 = (1.0).xxx;
				TVEGlobalData Data15_g153390 = Data204_g153153;
				float Out_Dummy15_g153390 = 0;
				float4 Out_CoatParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153390 = float4( 0,0,0,0 );
				Out_Dummy15_g153390 = Data15_g153390.Dummy;
				Out_CoatParams15_g153390 = Data15_g153390.CoatParams;
				Out_PaintParams15_g153390 = Data15_g153390.PaintParams;
				Out_GlowParams15_g153390 = Data15_g153390.GlowParams;
				Out_AtmoParams15_g153390= Data15_g153390.AtmoParams;
				Out_FadeParams15_g153390= Data15_g153390.FadeParams;
				Out_FormParams15_g153390 = Data15_g153390.FormParams;
				Out_LandParams15_g153390 = Data15_g153390.LandParams;
				Out_WindParams15_g153390 = Data15_g153390.WindParams;
				Out_PushParams15_g153390 = Data15_g153390.PushParams;
				half4 Global_GlowParams179_g153389 = Out_GlowParams15_g153390;
				float3 lerpResult299_g153389 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g153389).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g153389 = lerpResult299_g153389;
				#else
				float3 staticSwitch228_g153389 = temp_cast_52;
				#endif
				half3 Emissive_GlobalMask248_g153389 = staticSwitch228_g153389;
				half3 Visual_AlbedoRaw306_g153389 = temp_output_297_23_g153389;
				float3 lerpResult307_g153389 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g153389 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g153389 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g153389 * lerpResult307_g153389 );
				half3 Emissive_Blend260_g153389 = ( ( (Visual_Emissive255_g153389).xyz * Local_EmissiveColor278_g153389 ) * Local_EmissiveValue88_g153389 );
				float3 temp_output_3_0_g153403 = Emissive_Blend260_g153389;
				float temp_output_15_0_g153403 = _emissive_power_value;
				float3 hdEmission22_g153403 = ASEGetEmissionHDRColor(temp_output_3_0_g153403,temp_output_15_0_g153403,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g153389 = temp_output_279_0_g153389;
				float4 appendResult295_g153389 = (float4(hdEmission22_g153403 , Local_EmissiveMask294_g153389));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g153389 = appendResult295_g153389;
				#else
				float4 staticSwitch129_g153389 = temp_cast_51;
				#endif
				half4 Final_Emissive184_g153389 = staticSwitch129_g153389;
				float4 In_Emissive3_g153399 = Final_Emissive184_g153389;
				float In_Grayscale3_g153399 = Out_Grayscale4_g153398;
				float In_Luminosity3_g153399 = Out_Luminosity4_g153398;
				float temp_output_297_11_g153389 = Out_MultiMask4_g153398;
				float In_MultiMask3_g153399 = temp_output_297_11_g153389;
				float In_AlphaClip3_g153399 = Out_AlphaClip4_g153398;
				float In_AlphaFade3_g153399 = Out_AlphaFade4_g153398;
				float3 In_Translucency3_g153399 = Out_Translucency4_g153398;
				float In_Transmission3_g153399 = Out_Transmission4_g153398;
				float In_Thickness3_g153399 = Out_Thickness4_g153398;
				float In_Diffusion3_g153399 = Out_Diffusion4_g153398;
				Data3_g153399.Dummy = In_Dummy3_g153399;
				Data3_g153399.Albedo = In_Albedo3_g153399;
				Data3_g153399.AlbedoRaw = In_AlbedoRaw3_g153399;
				Data3_g153399.NormalTS = In_NormalTS3_g153399;
				Data3_g153399.NormalWS = In_NormalWS3_g153399;
				Data3_g153399.Shader = In_Shader3_g153399;
				Data3_g153399.Emissive= In_Emissive3_g153399;
				Data3_g153399.MultiMask = In_MultiMask3_g153399;
				Data3_g153399.Grayscale = In_Grayscale3_g153399;
				Data3_g153399.Luminosity = In_Luminosity3_g153399;
				Data3_g153399.AlphaClip = In_AlphaClip3_g153399;
				Data3_g153399.AlphaFade = In_AlphaFade3_g153399;
				Data3_g153399.Translucency = In_Translucency3_g153399;
				Data3_g153399.Transmission = In_Transmission3_g153399;
				Data3_g153399.Thickness = In_Thickness3_g153399;
				Data3_g153399.Diffusion = In_Diffusion3_g153399;
				TVEVisualData Data4_g153445 = Data3_g153399;
				float Out_Dummy4_g153445 = 0;
				float3 Out_Albedo4_g153445 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153445 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153445 = float2( 0,0 );
				float3 Out_NormalWS4_g153445 = float3( 0,0,0 );
				float4 Out_Shader4_g153445 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153445 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153445 = 0;
				float Out_Grayscale4_g153445 = 0;
				float Out_Luminosity4_g153445 = 0;
				float Out_AlphaClip4_g153445 = 0;
				float Out_AlphaFade4_g153445 = 0;
				float3 Out_Translucency4_g153445 = float3( 0,0,0 );
				float Out_Transmission4_g153445 = 0;
				float Out_Thickness4_g153445 = 0;
				float Out_Diffusion4_g153445 = 0;
				Out_Dummy4_g153445 = Data4_g153445.Dummy;
				Out_Albedo4_g153445 = Data4_g153445.Albedo;
				Out_AlbedoRaw4_g153445 = Data4_g153445.AlbedoRaw;
				Out_NormalTS4_g153445 = Data4_g153445.NormalTS;
				Out_NormalWS4_g153445 = Data4_g153445.NormalWS;
				Out_Shader4_g153445 = Data4_g153445.Shader;
				Out_Emissive4_g153445= Data4_g153445.Emissive;
				Out_MultiMask4_g153445 = Data4_g153445.MultiMask;
				Out_Grayscale4_g153445 = Data4_g153445.Grayscale;
				Out_Luminosity4_g153445= Data4_g153445.Luminosity;
				Out_AlphaClip4_g153445 = Data4_g153445.AlphaClip;
				Out_AlphaFade4_g153445 = Data4_g153445.AlphaFade;
				Out_Translucency4_g153445 = Data4_g153445.Translucency;
				Out_Transmission4_g153445 = Data4_g153445.Transmission;
				Out_Thickness4_g153445 = Data4_g153445.Thickness;
				Out_Diffusion4_g153445 = Data4_g153445.Diffusion;
				half3 Visual_Albedo199_g153444 = Out_Albedo4_g153445;
				half3 Final_Albedo312_g153444 = Visual_Albedo199_g153444;
				float3 In_Albedo3_g153446 = Final_Albedo312_g153444;
				float3 In_AlbedoRaw3_g153446 = Out_AlbedoRaw4_g153445;
				float2 In_NormalTS3_g153446 = Out_NormalTS4_g153445;
				float3 In_NormalWS3_g153446 = Out_NormalWS4_g153445;
				float4 In_Shader3_g153446 = Out_Shader4_g153445;
				float4 In_Emissive3_g153446 = Out_Emissive4_g153445;
				float In_Grayscale3_g153446 = Out_Grayscale4_g153445;
				float In_Luminosity3_g153446 = Out_Luminosity4_g153445;
				float temp_output_301_11_g153444 = Out_MultiMask4_g153445;
				float In_MultiMask3_g153446 = temp_output_301_11_g153444;
				float In_AlphaClip3_g153446 = Out_AlphaClip4_g153445;
				float In_AlphaFade3_g153446 = Out_AlphaFade4_g153445;
				float3 temp_cast_53 = (0.0).xxx;
				half3 Subsurface_Color264_g153444 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g153444 );
				half Visual_Transmission138_g153444 = Out_Transmission4_g153445;
				half Subsurface_Value268_g153444 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g153447 = Data204_g153153;
				float Out_Dummy15_g153447 = 0;
				float4 Out_CoatParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153447 = float4( 0,0,0,0 );
				Out_Dummy15_g153447 = Data15_g153447.Dummy;
				Out_CoatParams15_g153447 = Data15_g153447.CoatParams;
				Out_PaintParams15_g153447 = Data15_g153447.PaintParams;
				Out_GlowParams15_g153447 = Data15_g153447.GlowParams;
				Out_AtmoParams15_g153447= Data15_g153447.AtmoParams;
				Out_FadeParams15_g153447= Data15_g153447.FadeParams;
				Out_FormParams15_g153447 = Data15_g153447.FormParams;
				Out_LandParams15_g153447 = Data15_g153447.LandParams;
				Out_WindParams15_g153447 = Data15_g153447.WindParams;
				Out_PushParams15_g153447 = Data15_g153447.PushParams;
				half4 Global_GlowParams373_g153444 = Out_GlowParams15_g153447;
				float lerpResult403_g153444 = lerp( 1.0 , saturate( (Global_GlowParams373_g153444).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g153444 = lerpResult403_g153444;
				#else
				float staticSwitch367_g153444 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g153444 = staticSwitch367_g153444;
				half Visual_MultiMask292_g153444 = temp_output_301_11_g153444;
				float lerpResult293_g153444 = lerp( 1.0 , Visual_MultiMask292_g153444 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g153444 = lerpResult293_g153444;
				half Custom_Mask363_g153444 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g153444 = ( Visual_Transmission138_g153444 * Subsurface_Value268_g153444 * Subsurface_GlobalMask369_g153444 * Subsurface_MultiMask296_g153444 * Custom_Mask363_g153444 );
				#else
				float staticSwitch345_g153444 = 0.0;
				#endif
				half Final_Transmission269_g153444 = staticSwitch345_g153444;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g153444 = ( Subsurface_Color264_g153444 * Final_Transmission269_g153444 * 10.0 );
				#else
				float3 staticSwitch348_g153444 = temp_cast_53;
				#endif
				half3 Final_Translucency254_g153444 = staticSwitch348_g153444;
				float3 In_Translucency3_g153446 = Final_Translucency254_g153444;
				float In_Transmission3_g153446 = Final_Transmission269_g153444;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g153444 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g153444 = 1.0;
				#endif
				half Final_Thickness275_g153444 = staticSwitch351_g153444;
				float In_Thickness3_g153446 = Final_Thickness275_g153444;
				float Final_Diffusion340_g153444 = _SubsurfaceDiffusion;
				float In_Diffusion3_g153446 = Final_Diffusion340_g153444;
				Data3_g153446.Dummy = In_Dummy3_g153446;
				Data3_g153446.Albedo = In_Albedo3_g153446;
				Data3_g153446.AlbedoRaw = In_AlbedoRaw3_g153446;
				Data3_g153446.NormalTS = In_NormalTS3_g153446;
				Data3_g153446.NormalWS = In_NormalWS3_g153446;
				Data3_g153446.Shader = In_Shader3_g153446;
				Data3_g153446.Emissive= In_Emissive3_g153446;
				Data3_g153446.MultiMask = In_MultiMask3_g153446;
				Data3_g153446.Grayscale = In_Grayscale3_g153446;
				Data3_g153446.Luminosity = In_Luminosity3_g153446;
				Data3_g153446.AlphaClip = In_AlphaClip3_g153446;
				Data3_g153446.AlphaFade = In_AlphaFade3_g153446;
				Data3_g153446.Translucency = In_Translucency3_g153446;
				Data3_g153446.Transmission = In_Transmission3_g153446;
				Data3_g153446.Thickness = In_Thickness3_g153446;
				Data3_g153446.Diffusion = In_Diffusion3_g153446;
				TVEVisualData Data4_g153454 = Data3_g153446;
				float Out_Dummy4_g153454 = 0;
				float3 Out_Albedo4_g153454 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153454 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153454 = float2( 0,0 );
				float3 Out_NormalWS4_g153454 = float3( 0,0,0 );
				float4 Out_Shader4_g153454 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153454 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153454 = 0;
				float Out_Grayscale4_g153454 = 0;
				float Out_Luminosity4_g153454 = 0;
				float Out_AlphaClip4_g153454 = 0;
				float Out_AlphaFade4_g153454 = 0;
				float3 Out_Translucency4_g153454 = float3( 0,0,0 );
				float Out_Transmission4_g153454 = 0;
				float Out_Thickness4_g153454 = 0;
				float Out_Diffusion4_g153454 = 0;
				Out_Dummy4_g153454 = Data4_g153454.Dummy;
				Out_Albedo4_g153454 = Data4_g153454.Albedo;
				Out_AlbedoRaw4_g153454 = Data4_g153454.AlbedoRaw;
				Out_NormalTS4_g153454 = Data4_g153454.NormalTS;
				Out_NormalWS4_g153454 = Data4_g153454.NormalWS;
				Out_Shader4_g153454 = Data4_g153454.Shader;
				Out_Emissive4_g153454= Data4_g153454.Emissive;
				Out_MultiMask4_g153454 = Data4_g153454.MultiMask;
				Out_Grayscale4_g153454 = Data4_g153454.Grayscale;
				Out_Luminosity4_g153454= Data4_g153454.Luminosity;
				Out_AlphaClip4_g153454 = Data4_g153454.AlphaClip;
				Out_AlphaFade4_g153454 = Data4_g153454.AlphaFade;
				Out_Translucency4_g153454 = Data4_g153454.Translucency;
				Out_Transmission4_g153454 = Data4_g153454.Transmission;
				Out_Thickness4_g153454 = Data4_g153454.Thickness;
				Out_Diffusion4_g153454 = Data4_g153454.Diffusion;
				half3 Input_Albedo24_g153452 = Out_Albedo4_g153454;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g153452 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g153452 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g153452 = staticSwitch22_g153452;
				float4 break24_g153451 = Out_Shader4_g153454;
				half Metallic117_g153451 = break24_g153451.x;
				half Input_Metallic25_g153452 = Metallic117_g153451;
				half OneMinusReflectivity31_g153452 = ( (ColorSpaceDielectricSpec23_g153452).w - ( (ColorSpaceDielectricSpec23_g153452).w * Input_Metallic25_g153452 ) );
				float3 lerpResult87_g153451 = lerp( half3(1,0,0) , ( Input_Albedo24_g153452 * OneMinusReflectivity31_g153452 ) , _IsInitialized);
				
				float localCustomAlphaClip19_g153463 = ( 0.0 );
				float temp_output_3_0_g153463 = Out_AlphaClip4_g153454;
				float Alpha19_g153463 = temp_output_3_0_g153463;
				float temp_output_15_0_g153463 = 0.0;
				float Treshold19_g153463 = temp_output_15_0_g153463;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#else
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#endif
				

				surfaceDescription.Albedo = lerpResult87_g153451;
				o.Normal = Out_NormalWS4_g153454;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g153454).xyz;
				surfaceDescription.Smoothness = break24_g153451.w;
				surfaceDescription.Occlusion = break24_g153451.y;
				surfaceDescription.Alpha = Alpha19_g153463;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g153454;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1,1,1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g153454;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g153454;
				#endif
				
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1,0,0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				packedInput.positionCS.zw = positionCS.zw;
				float3 positionRWS = positionWS;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//input.worldToTangent = k_identity3x3;
				//#else
				input.tangentToWorld = k_identity3x3;
				//#endif

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir( input.positionRWS );

				GetSurfaceAndBuiltinData( surfaceDescription,input, normalizedWorldViewDir, posInput, surfaceData, builtinData );

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData( input.positionSS.xy, surfaceData );
				LightTransportData lightTransportData = GetLightTransportData( surfaceData, builtinData, bsdfData );

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				if( unity_MetaFragmentControl.x )
				{
					res.rgb = clamp( pow( abs( lightTransportData.diffuseColor ), saturate( unity_OneOverOutputBoost ) ), 0, unity_MaxOutputValue );
				}

				if( unity_MetaFragmentControl.y )
				{
					res.rgb = lightTransportData.emissiveColor;
				}

				return res;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ColorMask 0

			HLSLPROGRAM
			#pragma shader_feature_local_fragment _DISABLE_DECALS
			#pragma shader_feature_local_fragment _DISABLE_SSR
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define _AMBIENT_OCCLUSION 1
			#define ASE_SRP_VERSION 170003
			#ifdef UNITY_COLORSPACE_GAMMA//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301)//AI_SRP
			#else//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.04, 0.04, 0.04, 1.0 - 0.04) //AI_SRP
			#endif//AI_SRP
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex Vert
			#pragma fragment Frag

			#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Wind.hlsl"
			//#endif
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

			#define SHADERPASS SHADERPASS_SHADOWS
			#define USE_LEGACY_UNITY_MATRIX_VARIABLES

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#define T2W(var, index) var.worldToTangent[index]
			//#else
			#define T2W(var, index) var.tangentToWorld[index]
			//#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ai_ObjectToWorld GetObjectToWorldMatrix()
			#define ai_WorldToObject GetWorldToObjectMatrix()
			#define AI_INV_TWO_PI  INV_TWO_PI
			#define AI_PI          PI
			#define AI_INV_PI      INV_PI
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_fragment TVE_IMPOSTOR_MASK_OFF TVE_IMPOSTOR_MASK_DEFAULT TVE_IMPOSTOR_MASK_PACKED TVE_IMPOSTOR_MASK_SHADING
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 texcoord : TEXCOORD0;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				float4 positionCS : SV_Position;
				float3 interp00 : TEXCOORD10;
				float4 UVsFrame122_g151868 : TEXCOORD0;
				float4 UVsFrame222_g151868 : TEXCOORD1;
				float4 UVsFrame322_g151868 : TEXCOORD2;
				float4 octaframe22_g151868 : TEXCOORD3;
				float4 viewPos22_g151868 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START( UnityPerMaterial )
			float4 _AI_SizeOffset;
			half4 _TintingBlendRemap;
			half4 _OverlayBlendRemap1;
			half4 _VariationColorTwo;
			half4 _VariationColorOne;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _ImpostorColor;
			half4 _VariationNoiseRemap;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _dryness_vert_mode;
			float4 _TintingColor;
			half4 _DrynessLumaRemap;
			half4 _TintingLumaRemap;
			float4 _DrynessColor;
			half4 _tinting_vert_mode;
			half4 _OverlayColor;
			half4 _ImpostorColorTwo;
			half4 _TintingMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _SubsurfaceColor;
			float3 _AI_Offset;
			half _TintingMultiValue;
			half _WetnessBakeInfo;
			half _TintingIntensityValue;
			half _TintingLumaValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _OverlayEnd;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _OverlaySpace;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _WetnessElementMode;
			half _TintingBakeInfo;
			half _OverlayElementMode;
			half _VariationNoiseTillingValue;
			half _VariationCategory;
			half _VariationEnd;
			half _TintingSpace;
			half _ImpostorColorMode;
			half _ImpostorMetallicValue;
			half _TintingEnd;
			half _OverlayBakeInfo;
			half _ImpostorSmoothnessValue;
			half _DrynessBakeInfo;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _VariationNoisePivotValue;
			half _DrynessCategory;
			half _TintingCategory;
			half _ImpostorOcclusionValue;
			half _ImpostorMaskOffInfo;
			half _TintingMeshMode;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutMeshValue;
			half _CutoutMeshMode;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _DitherConstantValue;
			half _DitherDistanceMinValue;
			half _CutoutIntensityValue;
			half _DitherDistanceMaxValue;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _EmissiveIntensityValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _SubsurfaceIntensityValue;
			half _DitherDistanceValue;
			half _TintingMeshValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessCategory;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _WetnessIntensityValue;
			half _DrynessSmoothnessValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayNormalValue;
			half _OverlaySmoothnessValue;
			half _OverlaySubsurfaceValue;
			half _DrynessSubsurfaceValue;
			half _CutoutBakeInfo;
			half _CutoutEnd;
			half _SubsurfaceMultiValue;
			half _ImpostorCategory;
			half _ImpostorEnd;
			half _IsImpostorShader;
			half _IsSubsurfaceShader;
			half _MotionWindCategory;
			half _MotionWindEnd;
			half _MotionInteractionCategory;
			half _InteractionInteractionEnd;
			half _MotionWindMode;
			half _MotionWindElementMode;
			half _MotionPushElementMode;
			half _MotionWindOffInfo;
			half _MotionWindOptimizedInfo;
			half _MotionWindAdvancedInfo;
			half _SizeFadeCategory;
			half _SizeFadeEnd;
			half _SizeFadeElementMode;
			float _AI_Frames;
			float _AI_FramesX;
			float _AI_FramesY;
			float _AI_ImpostorSize;
			half _RenderShadow;
			half _RenderMotion;
			half _IsIdentifier;
			half _IsConverted;
			half _ImpostorMaskDefaultInfo;
			half _ImpostorMaskPackedInfo;
			half _ImpostorMaskShadingInfo;
			half _ImpostorMaskMode;
			half _ImpostorAlphaClipValue;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceAngleValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceSpace;
			half _IsVersion;
			float _AI_Parallax;
			half _RenderDecals;
			half _CategoryRender;
			half _EndRender;
			half _NoiseCategory;
			half _NoiseEnd;
			half _IsInitialized;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _HasDefaultTextures;
			half _IsCollected;
			half _RenderSSR;
			float _AI_TextureBias;
			float _AI_DepthSize;
			float _AI_ShadowBias;
			half _MotionBaseSpeedValue;
			half _MotionBaseNoiseValue;
			half _global_wind_layer_value;
			half _MotionBaseDelayValue;
			half _global_push_layer_value;
			half _MotionPushPivotValue;
			half _MotionPushIntensityValue;
			half _SubsurfaceCategory;
			half _SubsurfaceEnd;
			half _SubsurfaceDirectValue;
			half _MotionBaseTillingValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceShadowValue;
			half _SubsurfaceElementMode;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DitherCategory;
			half _DitherEnd;
			half _CutoutCategory;
			half _SubsurfaceAmbientValue;
			half _CutoutElementMode;
			half _MotionIntensityValue;
			half _MotionBasePivotValue;
			float _AI_ShadowView;
			float _AI_Clip;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionTillingValue;
			half _GlobalGlowPivotValue;
			half _GlobalAtmoPivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalWindLayerValue;
			half _GlobalPushLayerValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _MotionBaseIntensityValue;
			half _GlobalAtmoLayerValue;
			half _SubsurfaceThicknessValue;
			float _BlendMode;
			CBUFFER_END

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_Albedo);
			SAMPLER(sampler_Albedo);
			TEXTURE2D(_Normals);
			SAMPLER(sampler_Normals);
			float3 TVE_WorldOrigin;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_Shader);
			TEXTURE2D(_Packed);
			TEXTURE2D(_Vertex);
			SAMPLER(sampler_Shader);
			SAMPLER(sampler_Packed);
			SAMPLER(sampler_Vertex);


			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			float2 VectortoHemiOctahedron( float3 N )
			{
				N.xy /= dot( 1.0, abs( N ) );
				return float2( N.x + N.y, N.x - N.y );
			}
			
			float3 HemiOctahedronToVector( float2 Oct )
			{
				Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y ) * 0.5;
				float3 N = float3( Oct, 1 - dot( 1.0, abs( Oct ) ) );
				return normalize( N );
			}
			
			inline void RayPlaneIntersectionUV( float3 normalOS, float3 rayPosition, float3 rayDirection, inout float2 uvs, inout float3 localNormal )
			{
				float lDotN = dot( rayDirection, normalOS ); 
				float p0l0DotN = dot( -rayPosition, normalOS );
				float t = p0l0DotN / lDotN;
				float3 p = rayDirection * t + rayPosition;
				float3 upVector = float3( 0, 1, 0 );
				float3 tangent = normalize( cross( upVector, normalOS ) + float3( -0.001, 0, 0 ) );
				float3 bitangent = cross( tangent, normalOS );
				float frameX = dot( p, tangent );
				float frameZ = dot( p, bitangent );
				uvs = -float2( frameX, frameZ );
				if( t <= 0.0 )
				uvs = 0;
				float3x3 worldToLocal = float3x3( tangent, bitangent, normalOS );
				localNormal = normalize( mul( worldToLocal, rayDirection ) );
			}
			
			inline void OctaImpostorVertex( inout float4 positionOS, inout float3 normalOS, inout float4 uvsFrame1, inout float4 uvsFrame2, inout float4 uvsFrame3, inout float4 octaFrame, inout float4 viewPos )
			{
				float2 uvOffset = _AI_SizeOffset.zw;
				float parallax = -_AI_Parallax; 
				float UVscale = _AI_ImpostorSize;
				float framesXY = _AI_Frames;
				float prevFrame = framesXY - 1;
				float3 fractions = 1.0 / float3( framesXY, prevFrame, UVscale );
				float fractionsFrame = fractions.x;
				float fractionsPrevFrame = fractions.y;
				float fractionsUVscale = fractions.z;
				float3 worldCameraPos;
				#if defined(UNITY_PASS_SHADOWCASTER)
				float3 worldOrigin = 0;
				float4 perspective = float4( 0, 0, 0, 1 );
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				perspective = float4( 0, 0, 5000, 0 );
				worldOrigin = ai_ObjectToWorld._m03_m13_m23;
				}
				worldCameraPos = worldOrigin + mul( UNITY_MATRIX_I_V, perspective ).xyz;
				#else
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				worldCameraPos = ai_ObjectToWorld._m03_m13_m23 + UNITY_MATRIX_I_V._m02_m12_m22 * 5000;
				}
				else
				{
				worldCameraPos = GetCameraRelativePositionWS( _WorldSpaceCameraPos );
				}
				#endif
				float3 objectCameraPosition = mul( ai_WorldToObject, float4( worldCameraPos, 1 ) ).xyz - _AI_Offset.xyz; 
				float3 objectCameraDirection = normalize( objectCameraPosition );
				float3 upVector = float3( 0,1,0 );
				float3 objectHorizontalVector = normalize( cross( objectCameraDirection, upVector ) );
				float3 objectVerticalVector = cross( objectHorizontalVector, objectCameraDirection );
				float2 uvExpansion = positionOS.xy;
				float3 billboard = objectHorizontalVector * uvExpansion.x + objectVerticalVector * uvExpansion.y;
				float3 localDir = billboard - objectCameraPosition; 
				objectCameraDirection = trunc( objectCameraDirection * 65536.0 ) / 65536.0;
				objectCameraDirection.y = max(0.001, objectCameraDirection.y);
				float2 frameOcta = VectortoHemiOctahedron( objectCameraDirection.xzy ) * 0.5 + 0.5;
				float2 prevOctaFrame = frameOcta * prevFrame;
				float2 baseOctaFrame = floor( prevOctaFrame );
				float2 fractionOctaFrame = ( baseOctaFrame * fractionsFrame );
				float2 octaFrame1 = ( baseOctaFrame * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa1WorldY = HemiOctahedronToVector( octaFrame1 ).xzy;
				float3 octa1LocalY;
				float2 uvFrame1;
				RayPlaneIntersectionUV( octa1WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame1, /*inout*/ octa1LocalY );
				float2 uvParallax1 = octa1LocalY.xy * fractionsFrame * parallax;
				uvFrame1 = ( uvFrame1 * fractionsUVscale + 0.5 ) * fractionsFrame + fractionOctaFrame;
				uvsFrame1 = float4( uvParallax1, uvFrame1) - float4( 0, 0, uvOffset );
				float2 fractPrevOctaFrame = frac( prevOctaFrame );
				float2 cornerDifference = lerp( float2( 0,1 ) , float2( 1,0 ) , saturate( ceil( ( fractPrevOctaFrame.x - fractPrevOctaFrame.y ) ) ));
				float2 octaFrame2 = ( ( baseOctaFrame + cornerDifference ) * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa2WorldY = HemiOctahedronToVector( octaFrame2 ).xzy;
				float3 octa2LocalY;
				float2 uvFrame2;
				RayPlaneIntersectionUV( octa2WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame2, /*inout*/ octa2LocalY );
				float2 uvParallax2 = octa2LocalY.xy * fractionsFrame * parallax;
				uvFrame2 = ( uvFrame2 * fractionsUVscale + 0.5 ) * fractionsFrame + ( ( cornerDifference * fractionsFrame ) + fractionOctaFrame );
				uvsFrame2 = float4( uvParallax2, uvFrame2) - float4( 0, 0, uvOffset );
				float2 octaFrame3 = ( ( baseOctaFrame + 1 ) * fractionsPrevFrame  ) * 2.0 - 1.0;
				float3 octa3WorldY = HemiOctahedronToVector( octaFrame3 ).xzy;
				float3 octa3LocalY;
				float2 uvFrame3;
				RayPlaneIntersectionUV( octa3WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame3, /*inout*/ octa3LocalY );
				float2 uvParallax3 = octa3LocalY.xy * fractionsFrame * parallax;
				uvFrame3 = ( uvFrame3 * fractionsUVscale + 0.5 ) * fractionsFrame + ( fractionOctaFrame + fractionsFrame );
				uvsFrame3 = float4( uvParallax3, uvFrame3) - float4( 0, 0, uvOffset );
				octaFrame = 0;
				octaFrame.xy = prevOctaFrame;
				octaFrame.zw = fractionOctaFrame;
				positionOS.xyz = billboard + _AI_Offset.xyz;
				normalOS.xyz = objectCameraDirection;
				viewPos = 0;
				viewPos.xyz = TransformWorldToView( TransformObjectToWorld( positionOS.xyz ) );
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			inline void OctaImpostorFragment( inout SurfaceOutput o, out float4 positionCS, out float3 positionWS, float4 uvsFrame1, float4 uvsFrame2, float4 uvsFrame3, float4 octaFrame, float4 interpViewPos, out float4 output0, out float4 output1, out float4 output2 )
			{
				float depthBias = -1.0;
				float textureBias = _AI_TextureBias;
				float2 fraction = frac( octaFrame.xy );
				float2 invFraction = 1 - fraction;
				float3 weights;
				weights.x = min( invFraction.x, invFraction.y );
				weights.y = abs( fraction.x - fraction.y );
				weights.z = min( fraction.x, fraction.y );
				float4 parallaxSample1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame1.zw, depthBias );
				float2 parallax1 = ( ( 0.5 - parallaxSample1.a ) * uvsFrame1.xy ) + uvsFrame1.zw;
				float4 parallaxSample2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame2.zw, depthBias );
				float2 parallax2 = ( ( 0.5 - parallaxSample2.a ) * uvsFrame2.xy ) + uvsFrame2.zw;
				float4 parallaxSample3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame3.zw, depthBias );
				float2 parallax3 = ( ( 0.5 - parallaxSample3.a ) * uvsFrame3.xy ) + uvsFrame3.zw;
				float4 albedo1 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax1, textureBias );
				float4 albedo2 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax2, textureBias );
				float4 albedo3 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax3, textureBias );
				float4 blendedAlbedo = albedo1 * weights.x + albedo2 * weights.y + albedo3 * weights.z;
				o.Alpha = ( blendedAlbedo.a - _AI_Clip );
				clip( o.Alpha );
				float t = ceil( fraction.x - fraction.y );
				float4 cornerDifference = float4( t, 1 - t, 1, 1 );
				float2 step_1 = ( parallax1 - octaFrame.zw ) * _AI_Frames;
				float4 step23 = ( float4( parallax2, parallax3 ) -  octaFrame.zwzw ) * _AI_Frames - cornerDifference;
				step_1 = step_1 * (1-step_1);
				step23 = step23 * (1-step23);
				float3 steps;
				steps.x = step_1.x * step_1.y;
				steps.y = step23.x * step23.y;
				steps.z = step23.z * step23.w;
				steps = step(-steps, 0);
				float final = dot( steps, weights );
				clip( final - 0.5 );
				o.Albedo = blendedAlbedo.rgb;
				#if defined(AI_HD_RENDERPIPELINE)
				float4 feat1 = _Features.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.Diffusion = feat1.rgb;
				o.Features = feat1.a;
				float4 test1 = _Specular.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.MetalTangent = test1.b;
				#endif
				float4 normals1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax1, textureBias );
				float4 normals2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax2, textureBias );
				float4 normals3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax3, textureBias );
				float4 blendedNormal = normals1 * weights.x  + normals2 * weights.y + normals3 * weights.z;
				float4 output0a = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax1, textureBias );
				float4 output0b = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax2, textureBias );
				float4 output0c = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax3, textureBias );
				output0 = output0a * weights.x  + output0b * weights.y + output0c * weights.z; 
				float4 output1a = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax1, textureBias );
				float4 output1b = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax2, textureBias );
				float4 output1c = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax3, textureBias );
				output1 = output1a * weights.x  + output1b * weights.y + output1c * weights.z; 
				float4 output2a = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax1, textureBias );
				float4 output2b = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax2, textureBias );
				float4 output2c = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax3, textureBias );
				output2 = output2a * weights.x  + output2b * weights.y + output2c * weights.z; 
				float3 localNormal = blendedNormal.rgb * 2.0 - 1.0;
				float3 worldNormal = normalize( mul( (float3x3)ai_ObjectToWorld, localNormal ) );
				o.Normal = worldNormal;
				float3 viewPos = interpViewPos.xyz;
				float depthOffset = ( ( parallaxSample1.a * weights.x + parallaxSample2.a * weights.y + parallaxSample3.a * weights.z ) - 0.5 /** 2.0 - 1.0*/ ) /** 0.5*/ * _AI_DepthSize * length( ai_ObjectToWorld[ 2 ].xyz );
				#if ( defined(SHADERPASS) && ((defined(SHADERPASS_SHADOWS) && SHADERPASS == SHADERPASS_SHADOWS) || (defined(SHADERPASS_SHADOWCASTER) && SHADERPASS == SHADERPASS_SHADOWCASTER)) ) || defined(UNITY_PASS_SHADOWCASTER)
				viewPos.z += depthOffset * _AI_ShadowView;
				viewPos.z += -_AI_ShadowBias;
				#else 
				viewPos.z += depthOffset;
				#endif
				positionWS = mul( UNITY_MATRIX_I_V, float4( viewPos.xyz, 1 ) ).xyz;
				positionCS = mul( UNITY_MATRIX_P, float4( viewPos, 1 ) );
				#if defined(UNITY_PASS_SHADOWCASTER) && !defined(SHADERPASS)
				#if UNITY_REVERSED_Z
				positionCS.z = min( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#else
				positionCS.z = max( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#endif
				#endif
				positionCS.xyz /= positionCS.w;
				if( UNITY_NEAR_CLIP_VALUE < 0 )
				positionCS = positionCS * 0.5 + 0.5;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g153365( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g153374( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif
				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif
				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
					surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
				#endif

				GetNormalWS( fragInputs, float3( 0.0, 0.0, 1.0 ), surfaceData.normalWS, float3( 1.0, 1.0, 1.0 ) );
				bentNormalWS = surfaceData.normalWS;

				surfaceData.geomNormalWS = T2W(fragInputs, 2);

				#ifdef _HAS_REFRACTION
					if (_EnableSSRefraction)
					{

						surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
						surfaceDescription.Alpha = 1.0;
					}
					else
					{
						surfaceData.ior = 1.0;
						surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
						surfaceData.atDistance = 1.0;
						surfaceData.transmittanceMask = 0.0;
						surfaceDescription.Alpha = 1.0;
					}
				#else
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
					surfaceData.atDistance = 1.0;
					surfaceData.transmittanceMask = 0.0;
				#endif

					surfaceData.tangentWS = normalize(T2W(fragInputs, 0).xyz);    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
					surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				#if defined(_SPECULAR_OCCLUSION_CUSTOM)
				#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
				#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
				#else
					surfaceData.specularOcclusion = 1.0;
				#endif
				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
					surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, T2W(fragInputs, 2), surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
				#endif
			}

			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				//#ifdef LOD_FADE_CROSSFADE
				//	uint3 fadeMaskSeed = asuint((int3)(V * _ScreenSize.xyx));
				//	LODDitheringTransition(fadeMaskSeed, unity_LODFade.x);
				//#endif

				#ifdef _ALPHATEST_ON
					DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif
				float3 bentNormalWS;
				BuildSurfaceData(fragInputs, surfaceDescription, V, surfaceData, bentNormalWS);

				#if HAVE_DECALS
				if( _EnableDecals )
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif

				#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
					InitBuiltinData( surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.positionRWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#else
					InitBuiltinData( posInput, surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#endif

				builtinData.depthOffset = 0.0;

				#if (SHADERPASS == SHADERPASS_DISTORTION)
					builtinData.distortion = surfaceDescription.Distortion;
					builtinData.distortionBlur = surfaceDescription.DistortionBlur;
				#else
					builtinData.distortion = float2(0.0, 0.0);
					builtinData.distortionBlur = 0.0;
				#endif

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID( inputMesh, outputPackedVaryingsMeshToPS );
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(outputPackedVaryingsMeshToPS);

				TVEModelData Data16_g153438 = (TVEModelData)0;
				float In_Dummy16_g153438 = 0.0;
				TVEModelData Data16_g153406 = (TVEModelData)0;
				half Dummy181_g153404 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _InteractionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g153406 = Dummy181_g153404;
				TVEModelData Data16_g153386 = (TVEModelData)0;
				half Dummy181_g153383 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g153386 = Dummy181_g153383;
				TVEModelData Data16_g153150 = (TVEModelData)0;
				float In_Dummy16_g153150 = 0.0;
				OctaImpostorVertex( inputMesh.positionOS, inputMesh.normalOS, outputPackedVaryingsMeshToPS.UVsFrame122_g151868, outputPackedVaryingsMeshToPS.UVsFrame222_g151868, outputPackedVaryingsMeshToPS.UVsFrame322_g151868, outputPackedVaryingsMeshToPS.octaframe22_g151868, outputPackedVaryingsMeshToPS.viewPos22_g151868 );
				float3 worldPosOut22_g151868 = GetAbsolutePositionWS( mul( UNITY_MATRIX_I_V, float4( outputPackedVaryingsMeshToPS.viewPos22_g151868.xyz, 1.0 ) ).xyz );
				half3 Input_PositionWS319_g153142 = worldPosOut22_g151868;
				float3 worldToObj315_g153142 = mul( GetWorldToObjectMatrix(), float4( GetCameraRelativePositionWS(Input_PositionWS319_g153142), 1 ) ).xyz;
				half3 Model_PositionOS316_g153142 = worldToObj315_g153142;
				float3 In_PositionOS16_g153150 = Model_PositionOS316_g153142;
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153150 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153150 = Model_PositionWO311_g153142;
				float3 In_PositionRawOS16_g153150 = Model_PositionOS316_g153142;
				float3 In_PositionAddOS16_g153150 = float3( 0,0,0 );
				float3 In_PivotOS16_g153150 = float3( 0,0,0 );
				float3 localObjectPosition_UNITY_MATRIX_M14_g153145 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g153145 = ( localObjectPosition_UNITY_MATRIX_M14_g153145 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g153145 = localObjectPosition_UNITY_MATRIX_M14_g153145;
				#endif
				half3 ObjectData20_g153147 = staticSwitch13_g153145;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				half3 WorldData19_g153147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g153147 = WorldData19_g153147;
				#else
				float3 staticSwitch14_g153147 = ObjectData20_g153147;
				#endif
				float3 temp_output_124_0_g153145 = staticSwitch14_g153147;
				float3 vertexToFrag305_g153142 = temp_output_124_0_g153145;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153150 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153150 = Model_PivotWO312_g153142;
				half3 Model_NormalOS313_g153142 = inputMesh.normalOS;
				float3 In_NormalOS16_g153150 = Model_NormalOS313_g153142;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153150 = Model_Normal_WS314_g153142;
				float3 In_NormalRawOS16_g153150 = Model_NormalOS313_g153142;
				float3 In_NormalRawWS16_g153150 = Model_Normal_WS314_g153142;
				float4 In_TangentOS16_g153150 = float4( 0,1,0,1 );
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153150 = Model_ViewDirWS347_g153142;
				float4 In_VertexData16_g153150 = float4( 1,1,1,1 );
				float4 In_MotionData16_g153150 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g153150 = float4( 1,1,1,1 );
				float4 In_RotationData16_g153150 = float4( 0,0,0,0 );
				Data16_g153150.Dummy = In_Dummy16_g153150;
				Data16_g153150.PositionOS = In_PositionOS16_g153150;
				Data16_g153150.PositionWS = In_PositionWS16_g153150;
				Data16_g153150.PositionWO = In_PositionWO16_g153150;
				Data16_g153150.PositionRawOS = In_PositionRawOS16_g153150;
				Data16_g153150.PositionAddOS = In_PositionAddOS16_g153150;
				Data16_g153150.PivotOS = In_PivotOS16_g153150;
				Data16_g153150.PivotWS = In_PivotWS16_g153150;
				Data16_g153150.PivotWO = In_PivotWO16_g153150;
				Data16_g153150.NormalOS = In_NormalOS16_g153150;
				Data16_g153150.NormalWS = In_NormalWS16_g153150;
				Data16_g153150.NormalRawOS = In_NormalRawOS16_g153150;
				Data16_g153150.NormalRawWS = In_NormalRawWS16_g153150;
				Data16_g153150.TangentOS = In_TangentOS16_g153150;
				Data16_g153150.ViewDirWS = In_ViewDirWS16_g153150;
				Data16_g153150.VertexData = In_VertexData16_g153150;
				Data16_g153150.MotionData = In_MotionData16_g153150;
				Data16_g153150.BoundsData = In_BoundsData16_g153150;
				Data16_g153150.RotationData = In_RotationData16_g153150;
				TVEModelData Data15_g153385 = Data16_g153150;
				float Out_Dummy15_g153385 = 0;
				float3 Out_PositionOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153385 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153385 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153385 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153385 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153385 = float3( 0,0,0 );
				float4 Out_VertexData15_g153385 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153385 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153385 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153385 = float4( 0,0,0,0 );
				Out_Dummy15_g153385 = Data15_g153385.Dummy;
				Out_PositionOS15_g153385 = Data15_g153385.PositionOS;
				Out_PositionWS15_g153385 = Data15_g153385.PositionWS;
				Out_PositionWO15_g153385 = Data15_g153385.PositionWO;
				Out_PositionRawOS15_g153385 = Data15_g153385.PositionRawOS;
				Out_PositionAddOS15_g153385 = Data15_g153385.PositionAddOS;
				Out_PivotOS15_g153385 = Data15_g153385.PivotOS;
				Out_PivotWS15_g153385 = Data15_g153385.PivotWS;
				Out_PivotWO15_g153385 = Data15_g153385.PivotWO;
				Out_NormalOS15_g153385 = Data15_g153385.NormalOS;
				Out_NormalWS15_g153385 = Data15_g153385.NormalWS;
				Out_NormalRawOS15_g153385 = Data15_g153385.NormalRawOS;
				Out_NormalRawWS15_g153385 = Data15_g153385.NormalRawWS;
				Out_TangentOS15_g153385 = Data15_g153385.TangentOS;
				Out_ViewDirWS15_g153385 = Data15_g153385.ViewDirWS;
				Out_VertexData15_g153385 = Data15_g153385.VertexData;
				Out_MotionData15_g153385 = Data15_g153385.MotionData;
				Out_BoundsData15_g153385 = Data15_g153385.BoundsData;
				Out_RotationData15_g153385 = Data15_g153385.RotationData;
				half3 Model_PositionOS147_g153383 = Out_PositionOS15_g153385;
				float3 temp_cast_0 = (1.0).xxx;
				float3 temp_output_210_19_g153383 = Out_PivotWO15_g153385;
				half3 Model_PivotWO162_g153383 = temp_output_210_19_g153383;
				float temp_output_7_0_g153384 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g153384 = ( _SizeFadeDistMinValue - temp_output_7_0_g153384 );
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_2 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = 0;
				half4 Input_Tex1379_g153142 = 0;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_6;
				#else
				float4 staticSwitch414_g153142 = temp_cast_7;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153387 = Data204_g153153;
				float Out_Dummy15_g153387 = 0;
				float4 Out_CoatParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153387 = float4( 0,0,0,0 );
				Out_Dummy15_g153387 = Data15_g153387.Dummy;
				Out_CoatParams15_g153387 = Data15_g153387.CoatParams;
				Out_PaintParams15_g153387 = Data15_g153387.PaintParams;
				Out_GlowParams15_g153387 = Data15_g153387.GlowParams;
				Out_AtmoParams15_g153387= Data15_g153387.AtmoParams;
				Out_FadeParams15_g153387= Data15_g153387.FadeParams;
				Out_FormParams15_g153387 = Data15_g153387.FormParams;
				Out_LandParams15_g153387 = Data15_g153387.LandParams;
				Out_WindParams15_g153387 = Data15_g153387.WindParams;
				Out_PushParams15_g153387 = Data15_g153387.PushParams;
				half4 Input_FormParams188_g153383 = Out_FormParams15_g153387;
				float lerpResult213_g153383 = lerp( 1.0 , (Input_FormParams188_g153383).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g153383 = lerpResult213_g153383;
				#else
				float staticSwitch194_g153383 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g153383 = staticSwitch194_g153383;
				float temp_output_189_0_g153383 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g153383 ) - temp_output_7_0_g153384 ) / ( temp_output_10_0_g153384 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g153383 );
				float3 appendResult200_g153383 = (float3(temp_output_189_0_g153383 , temp_output_189_0_g153383 , temp_output_189_0_g153383));
				float3 appendResult201_g153383 = (float3(1.0 , temp_output_189_0_g153383 , 1.0));
				float3 lerpResult202_g153383 = lerp( appendResult200_g153383 , appendResult201_g153383 , _SizeFadeScaleMode);
				float3 lerpResult184_g153383 = lerp( temp_cast_0 , lerpResult202_g153383 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g153383 = ( lerpResult184_g153383 * Model_PositionOS147_g153383 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g153383 = temp_output_167_0_g153383;
				#else
				float3 staticSwitch199_g153383 = Model_PositionOS147_g153383;
				#endif
				half3 Final_Position178_g153383 = staticSwitch199_g153383;
				float3 In_PositionOS16_g153386 = Final_Position178_g153383;
				float3 In_PositionWS16_g153386 = Out_PositionWS15_g153385;
				float3 In_PositionWO16_g153386 = Out_PositionWO15_g153385;
				float3 In_PositionRawOS16_g153386 = Out_PositionRawOS15_g153385;
				float3 In_PositionAddOS16_g153386 = Out_PositionAddOS15_g153385;
				float3 temp_output_210_24_g153383 = Out_PivotOS15_g153385;
				float3 In_PivotOS16_g153386 = temp_output_210_24_g153383;
				float3 In_PivotWS16_g153386 = Out_PivotWS15_g153385;
				float3 In_PivotWO16_g153386 = temp_output_210_19_g153383;
				float3 In_NormalOS16_g153386 = Out_NormalOS15_g153385;
				float3 In_NormalWS16_g153386 = Out_NormalWS15_g153385;
				float3 In_NormalRawOS16_g153386 = Out_NormalRawOS15_g153385;
				float3 In_NormalRawWS16_g153386 = Out_NormalRawWS15_g153385;
				float4 In_TangentOS16_g153386 = Out_TangentOS15_g153385;
				float3 In_ViewDirWS16_g153386 = Out_ViewDirWS15_g153385;
				float4 In_VertexData16_g153386 = Out_VertexData15_g153385;
				float4 In_MotionData16_g153386 = Out_MotionData15_g153385;
				float4 In_BoundsData16_g153386 = Out_BoundsData15_g153385;
				float4 In_RotationData16_g153386 = Out_RotationData15_g153385;
				Data16_g153386.Dummy = In_Dummy16_g153386;
				Data16_g153386.PositionOS = In_PositionOS16_g153386;
				Data16_g153386.PositionWS = In_PositionWS16_g153386;
				Data16_g153386.PositionWO = In_PositionWO16_g153386;
				Data16_g153386.PositionRawOS = In_PositionRawOS16_g153386;
				Data16_g153386.PositionAddOS = In_PositionAddOS16_g153386;
				Data16_g153386.PivotOS = In_PivotOS16_g153386;
				Data16_g153386.PivotWS = In_PivotWS16_g153386;
				Data16_g153386.PivotWO = In_PivotWO16_g153386;
				Data16_g153386.NormalOS = In_NormalOS16_g153386;
				Data16_g153386.NormalWS = In_NormalWS16_g153386;
				Data16_g153386.NormalRawOS = In_NormalRawOS16_g153386;
				Data16_g153386.NormalRawWS = In_NormalRawWS16_g153386;
				Data16_g153386.TangentOS = In_TangentOS16_g153386;
				Data16_g153386.ViewDirWS = In_ViewDirWS16_g153386;
				Data16_g153386.VertexData = In_VertexData16_g153386;
				Data16_g153386.MotionData = In_MotionData16_g153386;
				Data16_g153386.BoundsData = In_BoundsData16_g153386;
				Data16_g153386.RotationData = In_RotationData16_g153386;
				TVEModelData Data15_g153405 = Data16_g153386;
				float Out_Dummy15_g153405 = 0;
				float3 Out_PositionOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153405 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153405 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153405 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153405 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153405 = float3( 0,0,0 );
				float4 Out_VertexData15_g153405 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153405 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153405 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153405 = float4( 0,0,0,0 );
				Out_Dummy15_g153405 = Data15_g153405.Dummy;
				Out_PositionOS15_g153405 = Data15_g153405.PositionOS;
				Out_PositionWS15_g153405 = Data15_g153405.PositionWS;
				Out_PositionWO15_g153405 = Data15_g153405.PositionWO;
				Out_PositionRawOS15_g153405 = Data15_g153405.PositionRawOS;
				Out_PositionAddOS15_g153405 = Data15_g153405.PositionAddOS;
				Out_PivotOS15_g153405 = Data15_g153405.PivotOS;
				Out_PivotWS15_g153405 = Data15_g153405.PivotWS;
				Out_PivotWO15_g153405 = Data15_g153405.PivotWO;
				Out_NormalOS15_g153405 = Data15_g153405.NormalOS;
				Out_NormalWS15_g153405 = Data15_g153405.NormalWS;
				Out_NormalRawOS15_g153405 = Data15_g153405.NormalRawOS;
				Out_NormalRawWS15_g153405 = Data15_g153405.NormalRawWS;
				Out_TangentOS15_g153405 = Data15_g153405.TangentOS;
				Out_ViewDirWS15_g153405 = Data15_g153405.ViewDirWS;
				Out_VertexData15_g153405 = Data15_g153405.VertexData;
				Out_MotionData15_g153405 = Data15_g153405.MotionData;
				Out_BoundsData15_g153405 = Data15_g153405.BoundsData;
				Out_RotationData15_g153405 = Data15_g153405.RotationData;
				float3 temp_output_1567_0_g153404 = Out_PositionOS15_g153405;
				float3 In_PositionOS16_g153406 = temp_output_1567_0_g153404;
				float3 In_PositionWS16_g153406 = Out_PositionWS15_g153405;
				float3 temp_output_1567_17_g153404 = Out_PositionWO15_g153405;
				float3 In_PositionWO16_g153406 = temp_output_1567_17_g153404;
				float3 In_PositionRawOS16_g153406 = Out_PositionRawOS15_g153405;
				float3 In_PositionAddOS16_g153406 = Out_PositionAddOS15_g153405;
				float3 In_PivotOS16_g153406 = Out_PivotOS15_g153405;
				float3 In_PivotWS16_g153406 = Out_PivotWS15_g153405;
				float3 temp_output_1567_19_g153404 = Out_PivotWO15_g153405;
				float3 In_PivotWO16_g153406 = temp_output_1567_19_g153404;
				float3 In_NormalOS16_g153406 = Out_NormalOS15_g153405;
				float3 In_NormalWS16_g153406 = Out_NormalWS15_g153405;
				float3 In_NormalRawOS16_g153406 = Out_NormalRawOS15_g153405;
				float3 In_NormalRawWS16_g153406 = Out_NormalRawWS15_g153405;
				float4 In_TangentOS16_g153406 = Out_TangentOS15_g153405;
				float3 In_ViewDirWS16_g153406 = Out_ViewDirWS15_g153405;
				float4 In_VertexData16_g153406 = Out_VertexData15_g153405;
				float4 In_MotionData16_g153406 = Out_MotionData15_g153405;
				float4 In_BoundsData16_g153406 = Out_BoundsData15_g153405;
				float2 temp_cast_36 = (0.0).xx;
				half3 Model_PositionOS147_g153404 = temp_output_1567_0_g153404;
				half Base_Mask217_g153404 = saturate( ( Model_PositionOS147_g153404.y / _AI_Offset.y ) );
				half3 Model_PositionWO162_g153404 = temp_output_1567_17_g153404;
				half3 Model_PivotWO402_g153404 = temp_output_1567_19_g153404;
				float3 lerpResult829_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionBasePivotValue);
				half3 Base_Position1394_g153404 = lerpResult829_g153404;
				half3 Input_PositionWO419_g153419 = Base_Position1394_g153404;
				half Flow_Tillling1397_g153404 = _MotionTillingValue;
				half Input_MotionTillingRT670_g153419 = ( Flow_Tillling1397_g153404 + 0.2 );
				half2 Noise_CoordRT668_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTillingRT670_g153419 * 0.005 );
				half4 Noise_ParamsRT535_g153419 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g153419, 0.0 );
				half Flow_Value1599_g153404 = _MotionIntensityValue;
				half Input_MotionValue629_g153419 = Flow_Value1599_g153404;
				float2 lerpResult709_g153419 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult712_g153419 = (float3(lerpResult709_g153419 , ( (Noise_ParamsRT535_g153419).b * Input_MotionValue629_g153419 )));
				float4 lerpResult627_g153419 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g153419 = (lerpResult627_g153419).xy;
				half Input_MotionTilling321_g153419 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTilling321_g153419 * 0.005 );
				float2 temp_output_3_0_g153420 = Noise_Coord515_g153419;
				float2 temp_output_21_0_g153420 = (Global_WindDirection593_g153419*2.0 + -1.0);
				float lerpResult128_g153425 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g153419 = _MotionBaseSpeedValue;
				half Noise_Speed516_g153419 = ( ( lerpResult128_g153425 * Input_MotionSpeed62_g153419 ) * 0.02 );
				float temp_output_15_0_g153420 = Noise_Speed516_g153419;
				float temp_output_23_0_g153420 = frac( temp_output_15_0_g153420 );
				float4 lerpResult39_g153420 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * temp_output_23_0_g153420 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * frac( ( temp_output_15_0_g153420 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g153420 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g153419 = lerpResult39_g153420;
				half Input_MotionNoise552_g153419 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g153419 = (lerpResult627_g153419).z;
				half Motion_Intensity720_g153419 = ( Global_WindIntensity576_g153419 * Input_MotionValue629_g153419 );
				float lerpResult701_g153419 = lerp( 1.0 , Input_MotionNoise552_g153419 , Motion_Intensity720_g153419);
				float2 lerpResult646_g153419 = lerp( Global_WindDirection593_g153419 , (Noise_Params685_g153419).rg , lerpResult701_g153419);
				float2 lerpResult724_g153419 = lerp( float2( 0.5,0.5 ) , lerpResult646_g153419 , Motion_Intensity720_g153419);
				float3 appendResult708_g153419 = (float3(lerpResult724_g153419 , ( (Noise_Params685_g153419).a * Motion_Intensity720_g153419 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g153419 = appendResult712_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g153419 = appendResult708_g153419;
				#else
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g153419 = staticSwitch673_g153419;
				float temp_output_136_0_g153426 = _global_wind_layer_value;
				float temp_output_19_0_g153428 = TVE_WindLayers[(int)temp_output_136_0_g153426];
				half3 Input_Position180_g153429 = Input_PositionWO419_g153419;
				float2 temp_output_75_0_g153429 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_82_0_g153429 = temp_output_136_0_g153426;
				float2 temp_output_119_0_g153429 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_7_0_g153434 = 1.0;
				float temp_output_10_0_g153434 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153434 );
				float4 lerpResult131_g153429 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153429,temp_output_82_0_g153429, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153429,temp_output_82_0_g153429, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153429 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153434 ) / temp_output_10_0_g153434 ) ));
				float4 temp_output_17_0_g153428 = lerpResult131_g153429;
				float4 temp_output_3_0_g153428 = TVE_WindParams;
				float4 ifLocalVar18_g153428 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153428 >= 0.5 )
				ifLocalVar18_g153428 = temp_output_17_0_g153428;
				else
				ifLocalVar18_g153428 = temp_output_3_0_g153428;
				float4 lerpResult22_g153428 = lerp( temp_output_3_0_g153428 , temp_output_17_0_g153428 , temp_output_19_0_g153428);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153428 = lerpResult22_g153428;
				#else
				float4 staticSwitch24_g153428 = ifLocalVar18_g153428;
				#endif
				float4 temp_output_610_0_g153419 = staticSwitch24_g153428;
				float2 lerpResult699_g153419 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult643_g153419 = (float3(lerpResult699_g153419 , ( (temp_output_610_0_g153419).b * Input_MotionValue629_g153419 )));
				float3 lerpResult623_g153419 = lerp( Motion_Local694_g153419 , appendResult643_g153419 , (temp_output_610_0_g153419).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#else
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g153419 = staticSwitch693_g153419;
				#else
				float3 staticSwitch612_g153419 = Motion_Local694_g153419;
				#endif
				float3 temp_output_1628_567_g153404 = staticSwitch612_g153419;
				float2 break83_g153418 = ((temp_output_1628_567_g153404).xy*2.0 + -1.0);
				float3 appendResult79_g153418 = (float3(break83_g153418.x , 0.0 , break83_g153418.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153418 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Base_Intensity1623_g153404 = length( Base_Direction893_g153404 );
				float lerpResult1631_g153404 = lerp( 1.0 , ( Base_Intensity1623_g153404 * Base_Intensity1623_g153404 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g153404 = ( _MotionBaseIntensityValue * Base_Mask217_g153404 * Base_Direction893_g153404 * lerpResult1631_g153404 );
				#else
				float2 staticSwitch1573_g153404 = temp_cast_36;
				#endif
				float temp_output_136_0_g153408 = _global_push_layer_value;
				float temp_output_19_0_g153409 = TVE_PushLayers[(int)temp_output_136_0_g153408];
				float3 lerpResult1547_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionPushPivotValue);
				half3 Push_Position1549_g153404 = lerpResult1547_g153404;
				half3 Input_Position180_g153410 = Push_Position1549_g153404;
				float2 temp_output_75_0_g153410 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_82_0_g153410 = temp_output_136_0_g153408;
				float2 temp_output_119_0_g153410 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_7_0_g153415 = 1.0;
				float temp_output_10_0_g153415 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153415 );
				float4 lerpResult131_g153410 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153410,temp_output_82_0_g153410, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153410,temp_output_82_0_g153410, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153410 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153415 ) / temp_output_10_0_g153415 ) ));
				float4 temp_output_17_0_g153409 = lerpResult131_g153410;
				float4 temp_output_3_0_g153409 = TVE_PushParams;
				float4 ifLocalVar18_g153409 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153409 >= 0.5 )
				ifLocalVar18_g153409 = temp_output_17_0_g153409;
				else
				ifLocalVar18_g153409 = temp_output_3_0_g153409;
				float4 lerpResult22_g153409 = lerp( temp_output_3_0_g153409 , temp_output_17_0_g153409 , temp_output_19_0_g153409);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153409 = lerpResult22_g153409;
				#else
				float4 staticSwitch24_g153409 = ifLocalVar18_g153409;
				#endif
				half4 Global_PushParams214_g153404 = staticSwitch24_g153409;
				float2 break83_g153417 = ((Global_PushParams214_g153404).rg*2.0 + -1.0);
				float3 appendResult79_g153417 = (float3(break83_g153417.x , 0.0 , break83_g153417.y));
				half2 Push_Direction1608_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153417 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Push_Intensity1501_g153404 = _MotionPushIntensityValue;
				half Push_Influence1504_g153404 = saturate( ( (Global_PushParams214_g153404).a * Push_Intensity1501_g153404 ) );
				float2 lerpResult1496_g153404 = lerp( staticSwitch1573_g153404 , ( Push_Direction1608_g153404 * Push_Intensity1501_g153404 * Base_Mask217_g153404 ) , Push_Influence1504_g153404);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g153404 = lerpResult1496_g153404;
				#else
				float2 staticSwitch1506_g153404 = staticSwitch1573_g153404;
				#endif
				half2 Base_Motion1440_g153404 = staticSwitch1506_g153404;
				half2 Final_RoationData1570_g153404 = Base_Motion1440_g153404;
				float4 In_RotationData16_g153406 = float4( Final_RoationData1570_g153404, 0.0 , 0.0 );
				Data16_g153406.Dummy = In_Dummy16_g153406;
				Data16_g153406.PositionOS = In_PositionOS16_g153406;
				Data16_g153406.PositionWS = In_PositionWS16_g153406;
				Data16_g153406.PositionWO = In_PositionWO16_g153406;
				Data16_g153406.PositionRawOS = In_PositionRawOS16_g153406;
				Data16_g153406.PositionAddOS = In_PositionAddOS16_g153406;
				Data16_g153406.PivotOS = In_PivotOS16_g153406;
				Data16_g153406.PivotWS = In_PivotWS16_g153406;
				Data16_g153406.PivotWO = In_PivotWO16_g153406;
				Data16_g153406.NormalOS = In_NormalOS16_g153406;
				Data16_g153406.NormalWS = In_NormalWS16_g153406;
				Data16_g153406.NormalRawOS = In_NormalRawOS16_g153406;
				Data16_g153406.NormalRawWS = In_NormalRawWS16_g153406;
				Data16_g153406.TangentOS = In_TangentOS16_g153406;
				Data16_g153406.ViewDirWS = In_ViewDirWS16_g153406;
				Data16_g153406.VertexData = In_VertexData16_g153406;
				Data16_g153406.MotionData = In_MotionData16_g153406;
				Data16_g153406.BoundsData = In_BoundsData16_g153406;
				Data16_g153406.RotationData = In_RotationData16_g153406;
				TVEModelData Data15_g153437 = Data16_g153406;
				float Out_Dummy15_g153437 = 0;
				float3 Out_PositionOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153437 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153437 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153437 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153437 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153437 = float3( 0,0,0 );
				float4 Out_VertexData15_g153437 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153437 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153437 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153437 = float4( 0,0,0,0 );
				Out_Dummy15_g153437 = Data15_g153437.Dummy;
				Out_PositionOS15_g153437 = Data15_g153437.PositionOS;
				Out_PositionWS15_g153437 = Data15_g153437.PositionWS;
				Out_PositionWO15_g153437 = Data15_g153437.PositionWO;
				Out_PositionRawOS15_g153437 = Data15_g153437.PositionRawOS;
				Out_PositionAddOS15_g153437 = Data15_g153437.PositionAddOS;
				Out_PivotOS15_g153437 = Data15_g153437.PivotOS;
				Out_PivotWS15_g153437 = Data15_g153437.PivotWS;
				Out_PivotWO15_g153437 = Data15_g153437.PivotWO;
				Out_NormalOS15_g153437 = Data15_g153437.NormalOS;
				Out_NormalWS15_g153437 = Data15_g153437.NormalWS;
				Out_NormalRawOS15_g153437 = Data15_g153437.NormalRawOS;
				Out_NormalRawWS15_g153437 = Data15_g153437.NormalRawWS;
				Out_TangentOS15_g153437 = Data15_g153437.TangentOS;
				Out_ViewDirWS15_g153437 = Data15_g153437.ViewDirWS;
				Out_VertexData15_g153437 = Data15_g153437.VertexData;
				Out_MotionData15_g153437 = Data15_g153437.MotionData;
				Out_BoundsData15_g153437 = Data15_g153437.BoundsData;
				Out_RotationData15_g153437 = Data15_g153437.RotationData;
				half3 Model_PositionOS147_g153436 = Out_PositionOS15_g153437;
				half3 Input_False58_g153439 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153440 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153441 = VertexPos40_g153440;
				float3 appendResult74_g153441 = (float3(VertexPos40_g153441.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g153441 = appendResult74_g153441;
				float3 break84_g153441 = VertexPos40_g153441;
				float3 appendResult81_g153441 = (float3(0.0 , break84_g153441.y , break84_g153441.z));
				half3 VertexPosOtherAxis82_g153441 = appendResult81_g153441;
				float4 temp_output_1567_33_g153436 = Out_RotationData15_g153437;
				half4 Model_VertexBend1569_g153436 = temp_output_1567_33_g153436;
				half2 Angle44_g153440 = (Model_VertexBend1569_g153436).xy;
				half Angle44_g153441 = (Angle44_g153440).y;
				half3 VertexPos40_g153442 = ( VertexPosRotationAxis50_g153441 + ( VertexPosOtherAxis82_g153441 * cos( Angle44_g153441 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g153441 ) * sin( Angle44_g153441 ) ) );
				float3 appendResult74_g153442 = (float3(0.0 , 0.0 , VertexPos40_g153442.z));
				half3 VertexPosRotationAxis50_g153442 = appendResult74_g153442;
				float3 break84_g153442 = VertexPos40_g153442;
				float3 appendResult81_g153442 = (float3(break84_g153442.x , break84_g153442.y , 0.0));
				half3 VertexPosOtherAxis82_g153442 = appendResult81_g153442;
				half Angle44_g153442 = -(Angle44_g153440).x;
				half3 Input_True57_g153439 = ( VertexPosRotationAxis50_g153442 + ( VertexPosOtherAxis82_g153442 * cos( Angle44_g153442 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g153442 ) * sin( Angle44_g153442 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch65_g153439 = Input_False58_g153439;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch67_g153439 = staticSwitch65_g153439;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch69_g153439 = staticSwitch67_g153439;
				#endif
				float3 temp_output_1578_0_g153436 = staticSwitch69_g153439;
				float3 temp_output_1567_31_g153436 = Out_PositionAddOS15_g153437;
				half3 Model_PositionADD1568_g153436 = temp_output_1567_31_g153436;
				half3 Final_PositionOS178_g153436 = ( temp_output_1578_0_g153436 + Model_PositionADD1568_g153436 );
				float3 In_PositionOS16_g153438 = Final_PositionOS178_g153436;
				float3 In_PositionWS16_g153438 = Out_PositionWS15_g153437;
				float3 In_PositionWO16_g153438 = Out_PositionWO15_g153437;
				float3 In_PositionRawOS16_g153438 = Out_PositionRawOS15_g153437;
				float3 In_PositionAddOS16_g153438 = temp_output_1567_31_g153436;
				float3 In_PivotOS16_g153438 = Out_PivotOS15_g153437;
				float3 In_PivotWS16_g153438 = Out_PivotWS15_g153437;
				float3 In_PivotWO16_g153438 = Out_PivotWO15_g153437;
				float3 In_NormalOS16_g153438 = Out_NormalOS15_g153437;
				float3 In_NormalWS16_g153438 = Out_NormalWS15_g153437;
				float3 In_NormalRawOS16_g153438 = Out_NormalRawOS15_g153437;
				float3 In_NormalRawWS16_g153438 = Out_NormalRawWS15_g153437;
				float4 In_TangentOS16_g153438 = Out_TangentOS15_g153437;
				float3 In_ViewDirWS16_g153438 = Out_ViewDirWS15_g153437;
				float4 In_VertexData16_g153438 = Out_VertexData15_g153437;
				float4 In_MotionData16_g153438 = Out_MotionData15_g153437;
				float4 In_BoundsData16_g153438 = Out_BoundsData15_g153437;
				float4 In_RotationData16_g153438 = temp_output_1567_33_g153436;
				Data16_g153438.Dummy = In_Dummy16_g153438;
				Data16_g153438.PositionOS = In_PositionOS16_g153438;
				Data16_g153438.PositionWS = In_PositionWS16_g153438;
				Data16_g153438.PositionWO = In_PositionWO16_g153438;
				Data16_g153438.PositionRawOS = In_PositionRawOS16_g153438;
				Data16_g153438.PositionAddOS = In_PositionAddOS16_g153438;
				Data16_g153438.PivotOS = In_PivotOS16_g153438;
				Data16_g153438.PivotWS = In_PivotWS16_g153438;
				Data16_g153438.PivotWO = In_PivotWO16_g153438;
				Data16_g153438.NormalOS = In_NormalOS16_g153438;
				Data16_g153438.NormalWS = In_NormalWS16_g153438;
				Data16_g153438.NormalRawOS = In_NormalRawOS16_g153438;
				Data16_g153438.NormalRawWS = In_NormalRawWS16_g153438;
				Data16_g153438.TangentOS = In_TangentOS16_g153438;
				Data16_g153438.ViewDirWS = In_ViewDirWS16_g153438;
				Data16_g153438.VertexData = In_VertexData16_g153438;
				Data16_g153438.MotionData = In_MotionData16_g153438;
				Data16_g153438.BoundsData = In_BoundsData16_g153438;
				Data16_g153438.RotationData = In_RotationData16_g153438;
				TVEModelData Data15_g153458 = Data16_g153438;
				float Out_Dummy15_g153458 = 0;
				float3 Out_PositionOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153458 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153458 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153458 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153458 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153458 = float3( 0,0,0 );
				float4 Out_VertexData15_g153458 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153458 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153458 = float4( 0,0,0,0 );
				Out_Dummy15_g153458 = Data15_g153458.Dummy;
				Out_PositionOS15_g153458 = Data15_g153458.PositionOS;
				Out_PositionWS15_g153458 = Data15_g153458.PositionWS;
				Out_PositionWO15_g153458 = Data15_g153458.PositionWO;
				Out_PositionRawOS15_g153458 = Data15_g153458.PositionRawOS;
				Out_PositionAddOS15_g153458 = Data15_g153458.PositionAddOS;
				Out_PivotOS15_g153458 = Data15_g153458.PivotOS;
				Out_PivotWS15_g153458 = Data15_g153458.PivotWS;
				Out_PivotWO15_g153458 = Data15_g153458.PivotWO;
				Out_NormalOS15_g153458 = Data15_g153458.NormalOS;
				Out_NormalWS15_g153458 = Data15_g153458.NormalWS;
				Out_NormalRawOS15_g153458 = Data15_g153458.NormalRawOS;
				Out_NormalRawWS15_g153458 = Data15_g153458.NormalRawWS;
				Out_TangentOS15_g153458 = Data15_g153458.TangentOS;
				Out_ViewDirWS15_g153458 = Data15_g153458.ViewDirWS;
				Out_VertexData15_g153458 = Data15_g153458.VertexData;
				Out_MotionData15_g153458 = Data15_g153458.MotionData;
				Out_BoundsData15_g153458 = Data15_g153458.BoundsData;
				Out_RotationData15_g153458 = Data15_g153458.RotationData;
				float3 temp_output_31_0_g153451 = Out_PositionOS15_g153458;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag305_g153142;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldNormal;
				
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				inputMesh.positionOS.xyz += ( ( temp_output_31_0_g153451 - Out_PositionRawOS15_g153458 ) + _DisableSRPBatcher );

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS.xyz);
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.interp00.xyz = positionRWS;
				return outputPackedVaryingsMeshToPS;
			}

			void Frag(  PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_NORMAL_BUFFER
				, out float4 outNormalBuffer : SV_Target0
					#ifdef WRITE_MSAA_DEPTH
				, out float1 depthColor : SV_Target1
					#endif
				#endif
				, out float outputDepth : SV_Depth
				
			)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				#ifdef LOD_FADE_CROSSFADE
				float3 VC = GetWorldSpaceNormalizeViewDir(packedInput.interp00.xyz);
				LODDitheringTransition(ComputeFadeMaskSeed(VC, packedInput.positionCS.xy), unity_LODFade.x);
				#endif

				FragInputs input;

				ZERO_INITIALIZE(FragInputs, input);
				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;
				SurfaceOutput o = (SurfaceOutput)0;

				o.Normal = float3( 0, 0, 1 );
				float4 positionCS = 0;
				float3 positionWS = 0;

				float localCustomAlphaClip19_g153463 = ( 0.0 );
				float localBreakData4_g153454 = ( 0.0 );
				float localCompData3_g153446 = ( 0.0 );
				TVEVisualData Data3_g153446 = (TVEVisualData)0;
				half Dummy145_g153444 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g153446 = Dummy145_g153444;
				float localBreakData4_g153445 = ( 0.0 );
				float localCompData3_g153399 = ( 0.0 );
				TVEVisualData Data3_g153399 = (TVEVisualData)0;
				half Dummy145_g153389 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + 0.0 );
				float In_Dummy3_g153399 = Dummy145_g153389;
				float localBreakData4_g153398 = ( 0.0 );
				float localCompData3_g153373 = ( 0.0 );
				TVEVisualData Data3_g153373 = (TVEVisualData)0;
				half Dummy594_g153370 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g153373 = Dummy594_g153370;
				float localBreakData4_g153372 = ( 0.0 );
				float localCompData3_g153358 = ( 0.0 );
				TVEVisualData Data3_g153358 = (TVEVisualData)0;
				half Dummy594_g153357 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeInfo );
				float In_Dummy3_g153358 = Dummy594_g153357;
				float localBreakData4_g153368 = ( 0.0 );
				float localCompData3_g153330 = ( 0.0 );
				TVEVisualData Data3_g153330 = (TVEVisualData)0;
				half Dummy594_g153328 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeInfo );
				float In_Dummy3_g153330 = Dummy594_g153328;
				float localBreakData4_g153329 = ( 0.0 );
				float localCompData3_g153295 = ( 0.0 );
				TVEVisualData Data3_g153295 = (TVEVisualData)0;
				half Dummy594_g153292 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeInfo );
				float In_Dummy3_g153295 = Dummy594_g153292;
				float localBreakData4_g153293 = ( 0.0 );
				float localCompData3_g153272 = ( 0.0 );
				TVEVisualData Data3_g153272 = (TVEVisualData)0;
				half Dummy205_g153269 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeInfo );
				float In_Dummy3_g153272 = Dummy205_g153269;
				float localBreakData4_g153271 = ( 0.0 );
				float localCompData3_g153266 = ( 0.0 );
				TVEVisualData Data3_g153266 = (TVEVisualData)0;
				half Dummy205_g153245 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g153266 = Dummy205_g153245;
				float localBreakData4_g153267 = ( 0.0 );
				float localCompData3_g153239 = ( 0.0 );
				TVEVisualData Data3_g153239 = (TVEVisualData)0;
				half Dummy220_g153236 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g153239 = Dummy220_g153236;
				float localBreakData4_g153238 = ( 0.0 );
				float localCompData3_g153152 = ( 0.0 );
				TVEVisualData Data3_g153152 = (TVEVisualData)0;
				float In_Dummy3_g153152 = 0.0;
				float4 output0 = 0;
				float4 output1 = 0;
				float4 output2 = 0;
				OctaImpostorFragment( o, positionCS, positionWS, packedInput.UVsFrame122_g151868, packedInput.UVsFrame222_g151868, packedInput.UVsFrame322_g151868, packedInput.octaframe22_g151868, packedInput.viewPos22_g151868, output0, output1, output2 );
				float4 temp_cast_0 = (1.0).xxxx;
				half4 Input_Tex0377_g153142 = output0;
				half4 Input_Tex1379_g153142 = output1;
				float4 temp_cast_3 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch403_g153142 = temp_cast_3;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch403_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch403_g153142 = temp_cast_3;
				#endif
				half Local_MultiMask249_g153142 = (staticSwitch403_g153142).b;
				float lerpResult289_g153142 = lerp( 1.0 , Local_MultiMask249_g153142 , _ImpostorColorMode);
				float3 lerpResult292_g153142 = lerp( (_ImpostorColorTwo).rgb , (_ImpostorColor).rgb , lerpResult289_g153142);
				half3 Local_Albedo239_g153142 = ( o.Albedo * lerpResult292_g153142 );
				float3 In_Albedo3_g153152 = Local_Albedo239_g153142;
				float3 In_AlbedoRaw3_g153152 = Local_Albedo239_g153142;
				float2 temp_cast_4 = (0.5).xx;
				float2 In_NormalTS3_g153152 = temp_cast_4;
				float3 In_NormalWS3_g153152 = o.Normal;
				float4 temp_cast_5 = (1.0).xxxx;
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch385_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch385_g153142 = temp_cast_6;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch385_g153142 = temp_cast_7;
				#endif
				half Local_Metallic247_g153142 = (staticSwitch385_g153142).r;
				half Final_Metallic238_g153142 = ( Local_Metallic247_g153142 * _ImpostorMetallicValue );
				float4 temp_cast_8 = (1.0).xxxx;
				float4 temp_cast_9 = (1.0).xxxx;
				float4 temp_cast_10 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch392_g153142 = temp_cast_10;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch392_g153142 = temp_cast_9;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch392_g153142 = temp_cast_10;
				#endif
				half Local_OcclusionOrEmissive248_g153142 = (staticSwitch392_g153142).g;
				float lerpResult431_g153142 = lerp( 1.0 , Local_OcclusionOrEmissive248_g153142 , _ImpostorOcclusionValue);
				#ifdef TVE_EMISSIVE
				float staticSwitch428_g153142 = 1.0;
				#else
				float staticSwitch428_g153142 = lerpResult431_g153142;
				#endif
				half Final_Occlusion424_g153142 = staticSwitch428_g153142;
				float4 temp_cast_11 = (1.0).xxxx;
				float4 temp_cast_12 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch408_g153142 = temp_cast_12;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch408_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch408_g153142 = temp_cast_12;
				#endif
				half Local_Smoothness250_g153142 = (staticSwitch408_g153142).a;
				half Final_Smoothness233_g153142 = ( Local_Smoothness250_g153142 * _ImpostorSmoothnessValue );
				float4 appendResult257_g153142 = (float4(Final_Metallic238_g153142 , Final_Occlusion424_g153142 , 1.0 , Final_Smoothness233_g153142));
				float4 In_Shader3_g153152 = appendResult257_g153142;
				float4 appendResult286_g153142 = (float4(Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , 1.0));
				float4 In_Emissive3_g153152 = appendResult286_g153142;
				float3 temp_output_3_0_g153143 = Local_Albedo239_g153142;
				float dotResult20_g153143 = dot( temp_output_3_0_g153143 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale268_g153142 = dotResult20_g153143;
				float In_Grayscale3_g153152 = Local_Grayscale268_g153142;
				float clampResult267_g153142 = clamp( saturate( ( Local_Grayscale268_g153142 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity269_g153142 = clampResult267_g153142;
				float In_Luminosity3_g153152 = Local_Luminosity269_g153142;
				float In_MultiMask3_g153152 = Local_MultiMask249_g153142;
				float In_AlphaClip3_g153152 = 0.0;
				float In_AlphaFade3_g153152 = 1.0;
				float3 temp_cast_13 = (1.0).xxx;
				float3 In_Translucency3_g153152 = temp_cast_13;
				float In_Transmission3_g153152 = 1.0;
				float In_Thickness3_g153152 = 0.0;
				float In_Diffusion3_g153152 = 0.0;
				Data3_g153152.Dummy = In_Dummy3_g153152;
				Data3_g153152.Albedo = In_Albedo3_g153152;
				Data3_g153152.AlbedoRaw = In_AlbedoRaw3_g153152;
				Data3_g153152.NormalTS = In_NormalTS3_g153152;
				Data3_g153152.NormalWS = In_NormalWS3_g153152;
				Data3_g153152.Shader = In_Shader3_g153152;
				Data3_g153152.Emissive= In_Emissive3_g153152;
				Data3_g153152.MultiMask = In_MultiMask3_g153152;
				Data3_g153152.Grayscale = In_Grayscale3_g153152;
				Data3_g153152.Luminosity = In_Luminosity3_g153152;
				Data3_g153152.AlphaClip = In_AlphaClip3_g153152;
				Data3_g153152.AlphaFade = In_AlphaFade3_g153152;
				Data3_g153152.Translucency = In_Translucency3_g153152;
				Data3_g153152.Transmission = In_Transmission3_g153152;
				Data3_g153152.Thickness = In_Thickness3_g153152;
				Data3_g153152.Diffusion = In_Diffusion3_g153152;
				TVEVisualData Data4_g153238 = Data3_g153152;
				float Out_Dummy4_g153238 = 0;
				float3 Out_Albedo4_g153238 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153238 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153238 = float2( 0,0 );
				float3 Out_NormalWS4_g153238 = float3( 0,0,0 );
				float4 Out_Shader4_g153238 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153238 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153238 = 0;
				float Out_Grayscale4_g153238 = 0;
				float Out_Luminosity4_g153238 = 0;
				float Out_AlphaClip4_g153238 = 0;
				float Out_AlphaFade4_g153238 = 0;
				float3 Out_Translucency4_g153238 = float3( 0,0,0 );
				float Out_Transmission4_g153238 = 0;
				float Out_Thickness4_g153238 = 0;
				float Out_Diffusion4_g153238 = 0;
				Out_Dummy4_g153238 = Data4_g153238.Dummy;
				Out_Albedo4_g153238 = Data4_g153238.Albedo;
				Out_AlbedoRaw4_g153238 = Data4_g153238.AlbedoRaw;
				Out_NormalTS4_g153238 = Data4_g153238.NormalTS;
				Out_NormalWS4_g153238 = Data4_g153238.NormalWS;
				Out_Shader4_g153238 = Data4_g153238.Shader;
				Out_Emissive4_g153238= Data4_g153238.Emissive;
				Out_MultiMask4_g153238 = Data4_g153238.MultiMask;
				Out_Grayscale4_g153238 = Data4_g153238.Grayscale;
				Out_Luminosity4_g153238= Data4_g153238.Luminosity;
				Out_AlphaClip4_g153238 = Data4_g153238.AlphaClip;
				Out_AlphaFade4_g153238 = Data4_g153238.AlphaFade;
				Out_Translucency4_g153238 = Data4_g153238.Translucency;
				Out_Transmission4_g153238 = Data4_g153238.Transmission;
				Out_Thickness4_g153238 = Data4_g153238.Thickness;
				Out_Diffusion4_g153238 = Data4_g153238.Diffusion;
				half3 Visual_Albedo127_g153236 = Out_Albedo4_g153238;
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				half3 Input_PositionWS319_g153142 = GetAbsolutePositionWS( positionWS );
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 vertexToFrag305_g153142 = packedInput.ase_texcoord5.xyz;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 ase_worldNormal = packedInput.ase_texcoord6.xyz;
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_14 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = output2;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_17 = (1.0).xxxx;
				float4 temp_cast_18 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_18;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_17;
				#else
				float4 staticSwitch414_g153142 = temp_cast_18;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153244 = Data16_g153151;
				float Out_Dummy15_g153244 = 0;
				float3 Out_PositionWS15_g153244 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153244 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153244 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153244 = float3( 0,0,0 );
				float4 Out_VertexData15_g153244 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153244 = float4( 0,0,0,0 );
				Out_Dummy15_g153244 = Data15_g153244.Dummy;
				Out_PositionWS15_g153244 = Data15_g153244.PositionWS;
				Out_PositionWO15_g153244 = Data15_g153244.PositionWO;
				Out_PivotWS15_g153244 = Data15_g153244.PivotWS;
				Out_PivotWO15_g153244 = Data15_g153244.PivotWO;
				Out_NormalWS15_g153244 = Data15_g153244.NormalWS;
				Out_ViewDirWS15_g153244 = Data15_g153244.ViewDirWS;
				Out_VertexData15_g153244 = Data15_g153244.VertexData;
				Out_BoundsData15_g153244 = Data15_g153244.BoundsData;
				half3 Model_PositionWO224_g153236 = Out_PositionWO15_g153244;
				half3 Model_PivotWO239_g153236 = Out_PivotWO15_g153244;
				float3 lerpResult242_g153236 = lerp( Model_PositionWO224_g153236 , Model_PivotWO239_g153236 , _VariationNoisePivotValue);
				float4 tex3DNode60_g153240 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g153236 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g153242 = clamp( tex3DNode60_g153240.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g153243 = _VariationNoiseRemap.x;
				float temp_output_10_0_g153243 = ( _VariationNoiseRemap.y - temp_output_7_0_g153243 );
				float temp_output_238_0_g153236 = saturate( ( ( clampResult17_g153242 - temp_output_7_0_g153243 ) / ( temp_output_10_0_g153243 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g153236 = temp_output_238_0_g153236;
				half Variaton_Mask200_g153236 = Variaton_NoiseMask82_g153236;
				float3 lerpResult75_g153236 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g153236);
				float temp_output_162_11_g153236 = Out_MultiMask4_g153238;
				half Visual_MultiMask196_g153236 = temp_output_162_11_g153236;
				float lerpResult190_g153236 = lerp( 1.0 , Visual_MultiMask196_g153236 , _VariationMultiValue);
				half Variaton_MultiMask194_g153236 = lerpResult190_g153236;
				float3 lerpResult186_g153236 = lerp( Visual_Albedo127_g153236 , ( Visual_Albedo127_g153236 * lerpResult75_g153236 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g153236 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g153236 = lerpResult186_g153236;
				#else
				float3 staticSwitch171_g153236 = Visual_Albedo127_g153236;
				#endif
				half3 Final_Albedo160_g153236 = staticSwitch171_g153236;
				float3 In_Albedo3_g153239 = Final_Albedo160_g153236;
				float3 In_AlbedoRaw3_g153239 = Final_Albedo160_g153236;
				float2 In_NormalTS3_g153239 = Out_NormalTS4_g153238;
				float3 In_NormalWS3_g153239 = Out_NormalWS4_g153238;
				float4 In_Shader3_g153239 = Out_Shader4_g153238;
				float4 In_Emissive3_g153239 = Out_Emissive4_g153238;
				float3 temp_output_3_0_g153237 = Final_Albedo160_g153236;
				float dotResult20_g153237 = dot( temp_output_3_0_g153237 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g153236 = dotResult20_g153237;
				float In_Grayscale3_g153239 = Final_Grayscale164_g153236;
				float clampResult180_g153236 = clamp( saturate( ( Final_Grayscale164_g153236 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g153236 = clampResult180_g153236;
				float In_Luminosity3_g153239 = Final_Luminosity181_g153236;
				float In_MultiMask3_g153239 = temp_output_162_11_g153236;
				float In_AlphaClip3_g153239 = Out_AlphaClip4_g153238;
				float In_AlphaFade3_g153239 = Out_AlphaFade4_g153238;
				float3 In_Translucency3_g153239 = Out_Translucency4_g153238;
				float In_Transmission3_g153239 = Out_Transmission4_g153238;
				float In_Thickness3_g153239 = Out_Thickness4_g153238;
				float In_Diffusion3_g153239 = Out_Diffusion4_g153238;
				Data3_g153239.Dummy = In_Dummy3_g153239;
				Data3_g153239.Albedo = In_Albedo3_g153239;
				Data3_g153239.AlbedoRaw = In_AlbedoRaw3_g153239;
				Data3_g153239.NormalTS = In_NormalTS3_g153239;
				Data3_g153239.NormalWS = In_NormalWS3_g153239;
				Data3_g153239.Shader = In_Shader3_g153239;
				Data3_g153239.Emissive= In_Emissive3_g153239;
				Data3_g153239.MultiMask = In_MultiMask3_g153239;
				Data3_g153239.Grayscale = In_Grayscale3_g153239;
				Data3_g153239.Luminosity = In_Luminosity3_g153239;
				Data3_g153239.AlphaClip = In_AlphaClip3_g153239;
				Data3_g153239.AlphaFade = In_AlphaFade3_g153239;
				Data3_g153239.Translucency = In_Translucency3_g153239;
				Data3_g153239.Transmission = In_Transmission3_g153239;
				Data3_g153239.Thickness = In_Thickness3_g153239;
				Data3_g153239.Diffusion = In_Diffusion3_g153239;
				TVEVisualData Data4_g153267 = Data3_g153239;
				float Out_Dummy4_g153267 = 0;
				float3 Out_Albedo4_g153267 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153267 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153267 = float2( 0,0 );
				float3 Out_NormalWS4_g153267 = float3( 0,0,0 );
				float4 Out_Shader4_g153267 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153267 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153267 = 0;
				float Out_Grayscale4_g153267 = 0;
				float Out_Luminosity4_g153267 = 0;
				float Out_AlphaClip4_g153267 = 0;
				float Out_AlphaFade4_g153267 = 0;
				float3 Out_Translucency4_g153267 = float3( 0,0,0 );
				float Out_Transmission4_g153267 = 0;
				float Out_Thickness4_g153267 = 0;
				float Out_Diffusion4_g153267 = 0;
				Out_Dummy4_g153267 = Data4_g153267.Dummy;
				Out_Albedo4_g153267 = Data4_g153267.Albedo;
				Out_AlbedoRaw4_g153267 = Data4_g153267.AlbedoRaw;
				Out_NormalTS4_g153267 = Data4_g153267.NormalTS;
				Out_NormalWS4_g153267 = Data4_g153267.NormalWS;
				Out_Shader4_g153267 = Data4_g153267.Shader;
				Out_Emissive4_g153267= Data4_g153267.Emissive;
				Out_MultiMask4_g153267 = Data4_g153267.MultiMask;
				Out_Grayscale4_g153267 = Data4_g153267.Grayscale;
				Out_Luminosity4_g153267= Data4_g153267.Luminosity;
				Out_AlphaClip4_g153267 = Data4_g153267.AlphaClip;
				Out_AlphaFade4_g153267 = Data4_g153267.AlphaFade;
				Out_Translucency4_g153267 = Data4_g153267.Translucency;
				Out_Transmission4_g153267 = Data4_g153267.Transmission;
				Out_Thickness4_g153267 = Data4_g153267.Thickness;
				Out_Diffusion4_g153267 = Data4_g153267.Diffusion;
				half3 Visual_Albedo139_g153245 = Out_Albedo4_g153267;
				float temp_output_200_12_g153245 = Out_Grayscale4_g153267;
				half Visual_Grayscale150_g153245 = temp_output_200_12_g153245;
				float3 temp_cast_20 = (Visual_Grayscale150_g153245).xxx;
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153246 = Data204_g153153;
				float Out_Dummy15_g153246 = 0;
				float4 Out_CoatParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153246 = float4( 0,0,0,0 );
				Out_Dummy15_g153246 = Data15_g153246.Dummy;
				Out_CoatParams15_g153246 = Data15_g153246.CoatParams;
				Out_PaintParams15_g153246 = Data15_g153246.PaintParams;
				Out_GlowParams15_g153246 = Data15_g153246.GlowParams;
				Out_AtmoParams15_g153246= Data15_g153246.AtmoParams;
				Out_FadeParams15_g153246= Data15_g153246.FadeParams;
				Out_FormParams15_g153246 = Data15_g153246.FormParams;
				Out_LandParams15_g153246 = Data15_g153246.LandParams;
				Out_WindParams15_g153246 = Data15_g153246.WindParams;
				Out_PushParams15_g153246 = Data15_g153246.PushParams;
				half4 Global_PaintParams209_g153245 = Out_PaintParams15_g153246;
				float temp_output_6_0_g153247 = ( saturate( (Global_PaintParams209_g153245).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g153247 = ( temp_output_6_0_g153247 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g153247 = temp_output_6_0_g153247;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g153245 = staticSwitch14_g153247;
				#else
				float staticSwitch283_g153245 = 1.0;
				#endif
				half Tinting_GlobalValue285_g153245 = staticSwitch283_g153245;
				float3 lerpResult368_g153245 = lerp( Visual_Albedo139_g153245 , temp_cast_20 , ( Tinting_GlobalValue285_g153245 * _TintingGrayValue ));
				float3 temp_cast_49 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g153245 = (Global_PaintParams209_g153245).xyz;
				#else
				float3 staticSwitch288_g153245 = temp_cast_49;
				#endif
				half3 Tinting_ColorGlobal290_g153245 = staticSwitch288_g153245;
				float temp_output_200_11_g153245 = Out_MultiMask4_g153267;
				half Visual_MultiMask181_g153245 = temp_output_200_11_g153245;
				float lerpResult147_g153245 = lerp( 1.0 , Visual_MultiMask181_g153245 , _TintingMultiValue);
				half Tinting_MutiMask121_g153245 = lerpResult147_g153245;
				half Tinting_TexMask385_g153245 = 1.0;
				float temp_output_200_15_g153245 = Out_Luminosity4_g153267;
				half Visual_Luminosity257_g153245 = temp_output_200_15_g153245;
				float clampResult17_g153259 = clamp( Visual_Luminosity257_g153245 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153258 = _TintingLumaRemap.x;
				float temp_output_10_0_g153258 = ( _TintingLumaRemap.y - temp_output_7_0_g153258 );
				float lerpResult228_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153259 - temp_output_7_0_g153258 ) / ( temp_output_10_0_g153258 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g153245 = lerpResult228_g153245;
				TVEModelData Data15_g153268 = Data16_g153151;
				float Out_Dummy15_g153268 = 0;
				float3 Out_PositionWS15_g153268 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153268 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153268 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153268 = float3( 0,0,0 );
				float4 Out_VertexData15_g153268 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153268 = float4( 0,0,0,0 );
				Out_Dummy15_g153268 = Data15_g153268.Dummy;
				Out_PositionWS15_g153268 = Data15_g153268.PositionWS;
				Out_PositionWO15_g153268 = Data15_g153268.PositionWO;
				Out_PivotWS15_g153268 = Data15_g153268.PivotWS;
				Out_PivotWO15_g153268 = Data15_g153268.PivotWO;
				Out_NormalWS15_g153268 = Data15_g153268.NormalWS;
				Out_ViewDirWS15_g153268 = Data15_g153268.ViewDirWS;
				Out_VertexData15_g153268 = Data15_g153268.VertexData;
				Out_BoundsData15_g153268 = Data15_g153268.BoundsData;
				half4 Model_VertexMasks307_g153245 = Out_VertexData15_g153268;
				float4 break311_g153245 = Model_VertexMasks307_g153245;
				float4 break33_g153251 = _tinting_vert_mode;
				float temp_output_30_0_g153251 = ( break311_g153245.x * break33_g153251.x );
				float temp_output_29_0_g153251 = ( break311_g153245.y * break33_g153251.y );
				float temp_output_31_0_g153251 = ( break311_g153245.z * break33_g153251.z );
				float temp_output_28_0_g153251 = ( temp_output_30_0_g153251 + temp_output_29_0_g153251 + temp_output_31_0_g153251 + ( break311_g153245.w * break33_g153251.w ) );
				float clampResult17_g153257 = clamp( temp_output_28_0_g153251 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153256 = _TintingMeshRemap.x;
				float temp_output_10_0_g153256 = ( _TintingMeshRemap.y - temp_output_7_0_g153256 );
				float lerpResult370_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153257 - temp_output_7_0_g153256 ) / ( temp_output_10_0_g153256 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g153260 = lerpResult370_g153245;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153260 = ( temp_output_6_0_g153260 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153260 = temp_output_6_0_g153260;
				#endif
				float temp_output_333_0_g153245 = staticSwitch14_g153260;
				half Tinting_VertMask309_g153245 = temp_output_333_0_g153245;
				half Tinting_NoiseMask213_g153245 = 1.0;
				half Custom_Mask345_g153245 = 1.0;
				float temp_output_7_0_g153254 = _TintingBlendRemap.x;
				float temp_output_10_0_g153254 = ( _TintingBlendRemap.y - temp_output_7_0_g153254 );
				half Tinting_Mask242_g153245 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g153245 * Tinting_TexMask385_g153245 * Tinting_LumaMask153_g153245 * Tinting_VertMask309_g153245 * Tinting_NoiseMask213_g153245 * Tinting_GlobalValue285_g153245 * Custom_Mask345_g153245 ) - temp_output_7_0_g153254 ) / ( temp_output_10_0_g153254 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g153245 = lerp( Visual_Albedo139_g153245 , ( lerpResult368_g153245 * 4.594794 * Tinting_ColorGlobal290_g153245 * (_TintingColor).rgb ) , Tinting_Mask242_g153245);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g153245 = lerpResult90_g153245;
				#else
				float3 staticSwitch286_g153245 = Visual_Albedo139_g153245;
				#endif
				half3 Final_Albedo97_g153245 = staticSwitch286_g153245;
				float3 In_Albedo3_g153266 = Final_Albedo97_g153245;
				float3 In_AlbedoRaw3_g153266 = Out_AlbedoRaw4_g153267;
				float2 In_NormalTS3_g153266 = Out_NormalTS4_g153267;
				float3 In_NormalWS3_g153266 = Out_NormalWS4_g153267;
				float4 In_Shader3_g153266 = Out_Shader4_g153267;
				float4 In_Emissive3_g153266 = Out_Emissive4_g153267;
				float In_Grayscale3_g153266 = temp_output_200_12_g153245;
				float In_Luminosity3_g153266 = temp_output_200_15_g153245;
				float In_MultiMask3_g153266 = temp_output_200_11_g153245;
				float In_AlphaClip3_g153266 = Out_AlphaClip4_g153267;
				float In_AlphaFade3_g153266 = Out_AlphaFade4_g153267;
				float3 In_Translucency3_g153266 = Out_Translucency4_g153267;
				float In_Transmission3_g153266 = Out_Transmission4_g153267;
				float In_Thickness3_g153266 = Out_Thickness4_g153267;
				float In_Diffusion3_g153266 = Out_Diffusion4_g153267;
				Data3_g153266.Dummy = In_Dummy3_g153266;
				Data3_g153266.Albedo = In_Albedo3_g153266;
				Data3_g153266.AlbedoRaw = In_AlbedoRaw3_g153266;
				Data3_g153266.NormalTS = In_NormalTS3_g153266;
				Data3_g153266.NormalWS = In_NormalWS3_g153266;
				Data3_g153266.Shader = In_Shader3_g153266;
				Data3_g153266.Emissive= In_Emissive3_g153266;
				Data3_g153266.MultiMask = In_MultiMask3_g153266;
				Data3_g153266.Grayscale = In_Grayscale3_g153266;
				Data3_g153266.Luminosity = In_Luminosity3_g153266;
				Data3_g153266.AlphaClip = In_AlphaClip3_g153266;
				Data3_g153266.AlphaFade = In_AlphaFade3_g153266;
				Data3_g153266.Translucency = In_Translucency3_g153266;
				Data3_g153266.Transmission = In_Transmission3_g153266;
				Data3_g153266.Thickness = In_Thickness3_g153266;
				Data3_g153266.Diffusion = In_Diffusion3_g153266;
				TVEVisualData Data4_g153271 = Data3_g153266;
				float Out_Dummy4_g153271 = 0;
				float3 Out_Albedo4_g153271 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153271 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153271 = float2( 0,0 );
				float3 Out_NormalWS4_g153271 = float3( 0,0,0 );
				float4 Out_Shader4_g153271 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153271 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153271 = 0;
				float Out_Grayscale4_g153271 = 0;
				float Out_Luminosity4_g153271 = 0;
				float Out_AlphaClip4_g153271 = 0;
				float Out_AlphaFade4_g153271 = 0;
				float3 Out_Translucency4_g153271 = float3( 0,0,0 );
				float Out_Transmission4_g153271 = 0;
				float Out_Thickness4_g153271 = 0;
				float Out_Diffusion4_g153271 = 0;
				Out_Dummy4_g153271 = Data4_g153271.Dummy;
				Out_Albedo4_g153271 = Data4_g153271.Albedo;
				Out_AlbedoRaw4_g153271 = Data4_g153271.AlbedoRaw;
				Out_NormalTS4_g153271 = Data4_g153271.NormalTS;
				Out_NormalWS4_g153271 = Data4_g153271.NormalWS;
				Out_Shader4_g153271 = Data4_g153271.Shader;
				Out_Emissive4_g153271= Data4_g153271.Emissive;
				Out_MultiMask4_g153271 = Data4_g153271.MultiMask;
				Out_Grayscale4_g153271 = Data4_g153271.Grayscale;
				Out_Luminosity4_g153271= Data4_g153271.Luminosity;
				Out_AlphaClip4_g153271 = Data4_g153271.AlphaClip;
				Out_AlphaFade4_g153271 = Data4_g153271.AlphaFade;
				Out_Translucency4_g153271 = Data4_g153271.Translucency;
				Out_Transmission4_g153271 = Data4_g153271.Transmission;
				Out_Thickness4_g153271 = Data4_g153271.Thickness;
				Out_Diffusion4_g153271 = Data4_g153271.Diffusion;
				half3 Visual_Albedo292_g153269 = Out_Albedo4_g153271;
				float temp_output_280_12_g153269 = Out_Grayscale4_g153271;
				half Visual_Grayscale308_g153269 = temp_output_280_12_g153269;
				float3 temp_cast_50 = (Visual_Grayscale308_g153269).xxx;
				TVEGlobalData Data15_g153270 = Data204_g153153;
				float Out_Dummy15_g153270 = 0;
				float4 Out_CoatParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153270 = float4( 0,0,0,0 );
				Out_Dummy15_g153270 = Data15_g153270.Dummy;
				Out_CoatParams15_g153270 = Data15_g153270.CoatParams;
				Out_PaintParams15_g153270 = Data15_g153270.PaintParams;
				Out_GlowParams15_g153270 = Data15_g153270.GlowParams;
				Out_AtmoParams15_g153270= Data15_g153270.AtmoParams;
				Out_FadeParams15_g153270= Data15_g153270.FadeParams;
				Out_FormParams15_g153270 = Data15_g153270.FormParams;
				Out_LandParams15_g153270 = Data15_g153270.LandParams;
				Out_WindParams15_g153270 = Data15_g153270.WindParams;
				Out_PushParams15_g153270 = Data15_g153270.PushParams;
				half4 Global_AtmoParams314_g153269 = Out_AtmoParams15_g153270;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g153269 = ( (Global_AtmoParams314_g153269).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g153269 = 1.0;
				#endif
				half Dryness_GlobalMask352_g153269 = staticSwitch351_g153269;
				float3 lerpResult485_g153269 = lerp( Visual_Albedo292_g153269 , temp_cast_50 , ( Dryness_GlobalMask352_g153269 * _DrynessGrayValue ));
				half3 hsvTorgb58_g153290 = RGBToHSV( lerpResult485_g153269 );
				half3 hsvTorgb61_g153290 = HSVToRGB( half3(( hsvTorgb58_g153290.x + _DrynessShiftValue ),hsvTorgb58_g153290.y,hsvTorgb58_g153290.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g153269 = hsvTorgb61_g153290;
				#else
				float3 staticSwitch499_g153269 = lerpResult485_g153269;
				#endif
				half Dryness_TexMask478_g153269 = 1.0;
				float temp_output_280_11_g153269 = Out_MultiMask4_g153271;
				half Visual_MultiMask310_g153269 = temp_output_280_11_g153269;
				float lerpResult283_g153269 = lerp( 1.0 , Visual_MultiMask310_g153269 , _DrynessMultiValue);
				half Dryness_MultiMask302_g153269 = lerpResult283_g153269;
				float temp_output_280_15_g153269 = Out_Luminosity4_g153271;
				half Visual_Luminosity309_g153269 = temp_output_280_15_g153269;
				float clampResult17_g153285 = clamp( Visual_Luminosity309_g153269 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153284 = _DrynessLumaRemap.x;
				float temp_output_10_0_g153284 = ( _DrynessLumaRemap.y - temp_output_7_0_g153284 );
				float lerpResult295_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153285 - temp_output_7_0_g153284 ) / ( temp_output_10_0_g153284 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g153269 = lerpResult295_g153269;
				TVEModelData Data15_g153291 = Data16_g153151;
				float Out_Dummy15_g153291 = 0;
				float3 Out_PositionWS15_g153291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153291 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153291 = float3( 0,0,0 );
				float4 Out_VertexData15_g153291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153291 = float4( 0,0,0,0 );
				Out_Dummy15_g153291 = Data15_g153291.Dummy;
				Out_PositionWS15_g153291 = Data15_g153291.PositionWS;
				Out_PositionWO15_g153291 = Data15_g153291.PositionWO;
				Out_PivotWS15_g153291 = Data15_g153291.PivotWS;
				Out_PivotWO15_g153291 = Data15_g153291.PivotWO;
				Out_NormalWS15_g153291 = Data15_g153291.NormalWS;
				Out_ViewDirWS15_g153291 = Data15_g153291.ViewDirWS;
				Out_VertexData15_g153291 = Data15_g153291.VertexData;
				Out_BoundsData15_g153291 = Data15_g153291.BoundsData;
				half4 Model_VertexMasks386_g153269 = Out_VertexData15_g153291;
				float4 break375_g153269 = Model_VertexMasks386_g153269;
				float4 break33_g153278 = _dryness_vert_mode;
				float temp_output_30_0_g153278 = ( break375_g153269.x * break33_g153278.x );
				float temp_output_29_0_g153278 = ( break375_g153269.y * break33_g153278.y );
				float temp_output_31_0_g153278 = ( break375_g153269.z * break33_g153278.z );
				float temp_output_28_0_g153278 = ( temp_output_30_0_g153278 + temp_output_29_0_g153278 + temp_output_31_0_g153278 + ( break375_g153269.w * break33_g153278.w ) );
				float clampResult17_g153279 = clamp( temp_output_28_0_g153278 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153280 = _DrynessMeshRemap.x;
				float temp_output_10_0_g153280 = ( _DrynessMeshRemap.y - temp_output_7_0_g153280 );
				float lerpResult452_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153279 - temp_output_7_0_g153280 ) / ( temp_output_10_0_g153280 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g153286 = lerpResult452_g153269;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153286 = ( temp_output_6_0_g153286 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153286 = temp_output_6_0_g153286;
				#endif
				float temp_output_448_0_g153269 = staticSwitch14_g153286;
				half Dryness_VertMask378_g153269 = temp_output_448_0_g153269;
				half Dryness_MaskNoise291_g153269 = 1.0;
				half Custom_Mask411_g153269 = 1.0;
				float temp_output_7_0_g153283 = _DrynessBlendRemap.x;
				float temp_output_10_0_g153283 = ( _DrynessBlendRemap.y - temp_output_7_0_g153283 );
				half Dryness_Mask329_g153269 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g153269 * Dryness_MultiMask302_g153269 * Dryness_LumaMask301_g153269 * Dryness_VertMask378_g153269 * Dryness_MaskNoise291_g153269 * Dryness_GlobalMask352_g153269 * Custom_Mask411_g153269 ) - temp_output_7_0_g153283 ) / ( temp_output_10_0_g153283 + 0.0001 ) ) );
				float3 lerpResult336_g153269 = lerp( Visual_Albedo292_g153269 , ( staticSwitch499_g153269 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g153269 = lerpResult336_g153269;
				#else
				float3 staticSwitch356_g153269 = Visual_Albedo292_g153269;
				#endif
				half3 Final_Albedo331_g153269 = staticSwitch356_g153269;
				float3 In_Albedo3_g153272 = Final_Albedo331_g153269;
				float3 In_AlbedoRaw3_g153272 = Out_AlbedoRaw4_g153271;
				float2 In_NormalTS3_g153272 = Out_NormalTS4_g153271;
				float3 In_NormalWS3_g153272 = Out_NormalWS4_g153271;
				half4 Visual_Shader415_g153269 = Out_Shader4_g153271;
				float4 break438_g153269 = Visual_Shader415_g153269;
				float4 appendResult439_g153269 = (float4(break438_g153269.x , break438_g153269.y , break438_g153269.z , ( break438_g153269.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g153269 = lerp( Visual_Shader415_g153269 , appendResult439_g153269 , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g153269 = lerpResult427_g153269;
				#else
				float4 staticSwitch426_g153269 = Visual_Shader415_g153269;
				#endif
				half4 Final_Shader433_g153269 = staticSwitch426_g153269;
				float4 In_Shader3_g153272 = Final_Shader433_g153269;
				float4 In_Emissive3_g153272 = Out_Emissive4_g153271;
				float In_Grayscale3_g153272 = temp_output_280_12_g153269;
				float In_Luminosity3_g153272 = temp_output_280_15_g153269;
				float In_MultiMask3_g153272 = temp_output_280_11_g153269;
				float In_AlphaClip3_g153272 = Out_AlphaClip4_g153271;
				float In_AlphaFade3_g153272 = Out_AlphaFade4_g153271;
				float3 In_Translucency3_g153272 = Out_Translucency4_g153271;
				half Visual_Transmission416_g153269 = Out_Transmission4_g153271;
				float lerpResult421_g153269 = lerp( Visual_Transmission416_g153269 , ( Visual_Transmission416_g153269 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g153269 = lerpResult421_g153269;
				#else
				float staticSwitch418_g153269 = Visual_Transmission416_g153269;
				#endif
				half Final_Transmission425_g153269 = staticSwitch418_g153269;
				float In_Transmission3_g153272 = Final_Transmission425_g153269;
				float In_Thickness3_g153272 = Out_Thickness4_g153271;
				float In_Diffusion3_g153272 = Out_Diffusion4_g153271;
				Data3_g153272.Dummy = In_Dummy3_g153272;
				Data3_g153272.Albedo = In_Albedo3_g153272;
				Data3_g153272.AlbedoRaw = In_AlbedoRaw3_g153272;
				Data3_g153272.NormalTS = In_NormalTS3_g153272;
				Data3_g153272.NormalWS = In_NormalWS3_g153272;
				Data3_g153272.Shader = In_Shader3_g153272;
				Data3_g153272.Emissive= In_Emissive3_g153272;
				Data3_g153272.MultiMask = In_MultiMask3_g153272;
				Data3_g153272.Grayscale = In_Grayscale3_g153272;
				Data3_g153272.Luminosity = In_Luminosity3_g153272;
				Data3_g153272.AlphaClip = In_AlphaClip3_g153272;
				Data3_g153272.AlphaFade = In_AlphaFade3_g153272;
				Data3_g153272.Translucency = In_Translucency3_g153272;
				Data3_g153272.Transmission = In_Transmission3_g153272;
				Data3_g153272.Thickness = In_Thickness3_g153272;
				Data3_g153272.Diffusion = In_Diffusion3_g153272;
				TVEVisualData Data4_g153293 = Data3_g153272;
				float Out_Dummy4_g153293 = 0;
				float3 Out_Albedo4_g153293 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153293 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153293 = float2( 0,0 );
				float3 Out_NormalWS4_g153293 = float3( 0,0,0 );
				float4 Out_Shader4_g153293 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153293 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153293 = 0;
				float Out_Grayscale4_g153293 = 0;
				float Out_Luminosity4_g153293 = 0;
				float Out_AlphaClip4_g153293 = 0;
				float Out_AlphaFade4_g153293 = 0;
				float3 Out_Translucency4_g153293 = float3( 0,0,0 );
				float Out_Transmission4_g153293 = 0;
				float Out_Thickness4_g153293 = 0;
				float Out_Diffusion4_g153293 = 0;
				Out_Dummy4_g153293 = Data4_g153293.Dummy;
				Out_Albedo4_g153293 = Data4_g153293.Albedo;
				Out_AlbedoRaw4_g153293 = Data4_g153293.AlbedoRaw;
				Out_NormalTS4_g153293 = Data4_g153293.NormalTS;
				Out_NormalWS4_g153293 = Data4_g153293.NormalWS;
				Out_Shader4_g153293 = Data4_g153293.Shader;
				Out_Emissive4_g153293= Data4_g153293.Emissive;
				Out_MultiMask4_g153293 = Data4_g153293.MultiMask;
				Out_Grayscale4_g153293 = Data4_g153293.Grayscale;
				Out_Luminosity4_g153293= Data4_g153293.Luminosity;
				Out_AlphaClip4_g153293 = Data4_g153293.AlphaClip;
				Out_AlphaFade4_g153293 = Data4_g153293.AlphaFade;
				Out_Translucency4_g153293 = Data4_g153293.Translucency;
				Out_Transmission4_g153293 = Data4_g153293.Transmission;
				Out_Thickness4_g153293 = Data4_g153293.Thickness;
				Out_Diffusion4_g153293 = Data4_g153293.Diffusion;
				half3 Visual_Albedo127_g153292 = Out_Albedo4_g153293;
				float3 temp_output_622_0_g153292 = (_OverlayColor).rgb;
				half Overlay_TexMask908_g153292 = 1.0;
				float3 temp_output_739_21_g153292 = Out_NormalWS4_g153293;
				half3 Visual_NormalWS749_g153292 = temp_output_739_21_g153292;
				float clampResult17_g153313 = clamp( saturate( (Visual_NormalWS749_g153292).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g153312 = _OverlayProjRemap.x;
				float temp_output_10_0_g153312 = ( _OverlayProjRemap.y - temp_output_7_0_g153312 );
				float lerpResult842_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153313 - temp_output_7_0_g153312 ) / ( temp_output_10_0_g153312 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g153292 = lerpResult842_g153292;
				float temp_output_739_15_g153292 = Out_Luminosity4_g153293;
				half Visual_Luminosity654_g153292 = temp_output_739_15_g153292;
				float clampResult17_g153315 = clamp( Visual_Luminosity654_g153292 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153314 = _OverlayLumaRemap.x;
				float temp_output_10_0_g153314 = ( _OverlayLumaRemap.y - temp_output_7_0_g153314 );
				float lerpResult587_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153315 - temp_output_7_0_g153314 ) / ( temp_output_10_0_g153314 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g153292 = lerpResult587_g153292;
				TVEModelData Data15_g153327 = Data16_g153151;
				float Out_Dummy15_g153327 = 0;
				float3 Out_PositionWS15_g153327 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153327 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153327 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153327 = float3( 0,0,0 );
				float4 Out_VertexData15_g153327 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153327 = float4( 0,0,0,0 );
				Out_Dummy15_g153327 = Data15_g153327.Dummy;
				Out_PositionWS15_g153327 = Data15_g153327.PositionWS;
				Out_PositionWO15_g153327 = Data15_g153327.PositionWO;
				Out_PivotWS15_g153327 = Data15_g153327.PivotWS;
				Out_PivotWO15_g153327 = Data15_g153327.PivotWO;
				Out_NormalWS15_g153327 = Data15_g153327.NormalWS;
				Out_ViewDirWS15_g153327 = Data15_g153327.ViewDirWS;
				Out_VertexData15_g153327 = Data15_g153327.VertexData;
				Out_BoundsData15_g153327 = Data15_g153327.BoundsData;
				half4 Model_VertexMasks791_g153292 = Out_VertexData15_g153327;
				float4 break792_g153292 = Model_VertexMasks791_g153292;
				float4 break33_g153305 = _overlay_vert_mode;
				float temp_output_30_0_g153305 = ( break792_g153292.x * break33_g153305.x );
				float temp_output_29_0_g153305 = ( break792_g153292.y * break33_g153305.y );
				float temp_output_31_0_g153305 = ( break792_g153292.z * break33_g153305.z );
				float temp_output_28_0_g153305 = ( temp_output_30_0_g153305 + temp_output_29_0_g153305 + temp_output_31_0_g153305 + ( break792_g153292.w * break33_g153305.w ) );
				float clampResult17_g153306 = clamp( temp_output_28_0_g153305 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153309 = _OverlayMeshRemap.x;
				float temp_output_10_0_g153309 = ( _OverlayMeshRemap.y - temp_output_7_0_g153309 );
				float lerpResult881_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153306 - temp_output_7_0_g153309 ) / ( temp_output_10_0_g153309 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g153316 = lerpResult881_g153292;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153316 = ( temp_output_6_0_g153316 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153316 = temp_output_6_0_g153316;
				#endif
				float temp_output_831_0_g153292 = staticSwitch14_g153316;
				half Overlay_VertMask801_g153292 = temp_output_831_0_g153292;
				half Overlay_MaskNoise427_g153292 = 1.0;
				TVEGlobalData Data15_g153294 = Data204_g153153;
				float Out_Dummy15_g153294 = 0;
				float4 Out_CoatParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153294 = float4( 0,0,0,0 );
				Out_Dummy15_g153294 = Data15_g153294.Dummy;
				Out_CoatParams15_g153294 = Data15_g153294.CoatParams;
				Out_PaintParams15_g153294 = Data15_g153294.PaintParams;
				Out_GlowParams15_g153294 = Data15_g153294.GlowParams;
				Out_AtmoParams15_g153294= Data15_g153294.AtmoParams;
				Out_FadeParams15_g153294= Data15_g153294.FadeParams;
				Out_FormParams15_g153294 = Data15_g153294.FormParams;
				Out_LandParams15_g153294 = Data15_g153294.LandParams;
				Out_WindParams15_g153294 = Data15_g153294.WindParams;
				Out_PushParams15_g153294 = Data15_g153294.PushParams;
				half4 Global_AtmoParams516_g153292 = Out_AtmoParams15_g153294;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g153292 = ( (Global_AtmoParams516_g153292).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g153292 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g153292 = staticSwitch705_g153292;
				half Custom_Mask646_g153292 = 1.0;
				float temp_output_7_0_g153321 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g153321 = ( _OverlayBlendRemap1.y - temp_output_7_0_g153321 );
				half Overlay_Mask494_g153292 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g153292 * Overlay_MaskProj457_g153292 * Overlay_MaskLuma438_g153292 * Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 * Custom_Mask646_g153292 ) - temp_output_7_0_g153321 ) / ( temp_output_10_0_g153321 + 0.0001 ) ) );
				float3 lerpResult467_g153292 = lerp( Visual_Albedo127_g153292 , temp_output_622_0_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g153292 = lerpResult467_g153292;
				#else
				float3 staticSwitch577_g153292 = Visual_Albedo127_g153292;
				#endif
				half3 Final_Albedo493_g153292 = staticSwitch577_g153292;
				float3 In_Albedo3_g153295 = Final_Albedo493_g153292;
				float3 In_AlbedoRaw3_g153295 = Out_AlbedoRaw4_g153293;
				half2 Visual_NormalTS535_g153292 = Out_NormalTS4_g153293;
				float2 lerpResult551_g153292 = lerp( Visual_NormalTS535_g153292 , ( Visual_NormalTS535_g153292 * _OverlayNormalValue ) , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g153292 = lerpResult551_g153292;
				#else
				float2 staticSwitch583_g153292 = Visual_NormalTS535_g153292;
				#endif
				half2 Final_NormalTS499_g153292 = staticSwitch583_g153292;
				float2 In_NormalTS3_g153295 = Final_NormalTS499_g153292;
				float3 In_NormalWS3_g153295 = temp_output_739_21_g153292;
				half4 Visual_Masks536_g153292 = Out_Shader4_g153293;
				float4 appendResult585_g153292 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g153292 = lerp( Visual_Masks536_g153292 , appendResult585_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g153292 = lerpResult584_g153292;
				#else
				float4 staticSwitch586_g153292 = Visual_Masks536_g153292;
				#endif
				half4 Final_Masks482_g153292 = staticSwitch586_g153292;
				float4 In_Shader3_g153295 = Final_Masks482_g153292;
				float4 In_Emissive3_g153295 = Out_Emissive4_g153293;
				float temp_output_739_12_g153292 = Out_Grayscale4_g153293;
				float In_Grayscale3_g153295 = temp_output_739_12_g153292;
				float In_Luminosity3_g153295 = temp_output_739_15_g153292;
				float In_MultiMask3_g153295 = Out_MultiMask4_g153293;
				float In_AlphaClip3_g153295 = Out_AlphaClip4_g153293;
				float In_AlphaFade3_g153295 = Out_AlphaFade4_g153293;
				float3 In_Translucency3_g153295 = Out_Translucency4_g153293;
				half Visual_Transmission699_g153292 = Out_Transmission4_g153293;
				float lerpResult746_g153292 = lerp( Visual_Transmission699_g153292 , ( Visual_Transmission699_g153292 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g153292 = lerpResult746_g153292;
				#else
				float staticSwitch703_g153292 = Visual_Transmission699_g153292;
				#endif
				half Final_Transmission702_g153292 = staticSwitch703_g153292;
				float In_Transmission3_g153295 = Final_Transmission702_g153292;
				float In_Thickness3_g153295 = Out_Thickness4_g153293;
				float In_Diffusion3_g153295 = Out_Diffusion4_g153293;
				Data3_g153295.Dummy = In_Dummy3_g153295;
				Data3_g153295.Albedo = In_Albedo3_g153295;
				Data3_g153295.AlbedoRaw = In_AlbedoRaw3_g153295;
				Data3_g153295.NormalTS = In_NormalTS3_g153295;
				Data3_g153295.NormalWS = In_NormalWS3_g153295;
				Data3_g153295.Shader = In_Shader3_g153295;
				Data3_g153295.Emissive= In_Emissive3_g153295;
				Data3_g153295.MultiMask = In_MultiMask3_g153295;
				Data3_g153295.Grayscale = In_Grayscale3_g153295;
				Data3_g153295.Luminosity = In_Luminosity3_g153295;
				Data3_g153295.AlphaClip = In_AlphaClip3_g153295;
				Data3_g153295.AlphaFade = In_AlphaFade3_g153295;
				Data3_g153295.Translucency = In_Translucency3_g153295;
				Data3_g153295.Transmission = In_Transmission3_g153295;
				Data3_g153295.Thickness = In_Thickness3_g153295;
				Data3_g153295.Diffusion = In_Diffusion3_g153295;
				TVEVisualData Data4_g153329 = Data3_g153295;
				float Out_Dummy4_g153329 = 0;
				float3 Out_Albedo4_g153329 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153329 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153329 = float2( 0,0 );
				float3 Out_NormalWS4_g153329 = float3( 0,0,0 );
				float4 Out_Shader4_g153329 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153329 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153329 = 0;
				float Out_Grayscale4_g153329 = 0;
				float Out_Luminosity4_g153329 = 0;
				float Out_AlphaClip4_g153329 = 0;
				float Out_AlphaFade4_g153329 = 0;
				float3 Out_Translucency4_g153329 = float3( 0,0,0 );
				float Out_Transmission4_g153329 = 0;
				float Out_Thickness4_g153329 = 0;
				float Out_Diffusion4_g153329 = 0;
				Out_Dummy4_g153329 = Data4_g153329.Dummy;
				Out_Albedo4_g153329 = Data4_g153329.Albedo;
				Out_AlbedoRaw4_g153329 = Data4_g153329.AlbedoRaw;
				Out_NormalTS4_g153329 = Data4_g153329.NormalTS;
				Out_NormalWS4_g153329 = Data4_g153329.NormalWS;
				Out_Shader4_g153329 = Data4_g153329.Shader;
				Out_Emissive4_g153329= Data4_g153329.Emissive;
				Out_MultiMask4_g153329 = Data4_g153329.MultiMask;
				Out_Grayscale4_g153329 = Data4_g153329.Grayscale;
				Out_Luminosity4_g153329= Data4_g153329.Luminosity;
				Out_AlphaClip4_g153329 = Data4_g153329.AlphaClip;
				Out_AlphaFade4_g153329 = Data4_g153329.AlphaFade;
				Out_Translucency4_g153329 = Data4_g153329.Translucency;
				Out_Transmission4_g153329 = Data4_g153329.Transmission;
				Out_Thickness4_g153329 = Data4_g153329.Thickness;
				Out_Diffusion4_g153329 = Data4_g153329.Diffusion;
				half3 Visual_Albedo127_g153328 = Out_Albedo4_g153329;
				float3 lerpResult768_g153328 = lerp( Visual_Albedo127_g153328 , ( Visual_Albedo127_g153328 * Visual_Albedo127_g153328 ) , _WetnessContrastValue);
				TVEGlobalData Data15_g153334 = Data204_g153153;
				float Out_Dummy15_g153334 = 0;
				float4 Out_CoatParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153334 = float4( 0,0,0,0 );
				Out_Dummy15_g153334 = Data15_g153334.Dummy;
				Out_CoatParams15_g153334 = Data15_g153334.CoatParams;
				Out_PaintParams15_g153334 = Data15_g153334.PaintParams;
				Out_GlowParams15_g153334 = Data15_g153334.GlowParams;
				Out_AtmoParams15_g153334= Data15_g153334.AtmoParams;
				Out_FadeParams15_g153334= Data15_g153334.FadeParams;
				Out_FormParams15_g153334 = Data15_g153334.FormParams;
				Out_LandParams15_g153334 = Data15_g153334.LandParams;
				Out_WindParams15_g153334 = Data15_g153334.WindParams;
				Out_PushParams15_g153334 = Data15_g153334.PushParams;
				half4 Global_AtmoParams516_g153328 = Out_AtmoParams15_g153334;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g153328 = ( (Global_AtmoParams516_g153328).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g153328 = 1.0;
				#endif
				half Global_Wetness429_g153328 = staticSwitch663_g153328;
				half Wetness_Value1042_g153328 = ( _WetnessIntensityValue * Global_Wetness429_g153328 );
				half Wetness_VertMask1024_g153328 = 1.0;
				float temp_output_1043_0_g153328 = ( Wetness_Value1042_g153328 * Wetness_VertMask1024_g153328 );
				half Wetness_Mask866_g153328 = temp_output_1043_0_g153328;
				float3 lerpResult651_g153328 = lerp( Visual_Albedo127_g153328 , lerpResult768_g153328 , Wetness_Mask866_g153328);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g153328 = lerpResult651_g153328;
				#else
				float3 staticSwitch577_g153328 = Visual_Albedo127_g153328;
				#endif
				half3 Final_Albedo493_g153328 = staticSwitch577_g153328;
				float3 In_Albedo3_g153330 = Final_Albedo493_g153328;
				float3 In_AlbedoRaw3_g153330 = Out_AlbedoRaw4_g153329;
				half2 Visual_Normal535_g153328 = Out_NormalTS4_g153329;
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#else
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#endif
				half2 Final_Normal499_g153328 = staticSwitch774_g153328;
				float2 In_NormalTS3_g153330 = Final_Normal499_g153328;
				float3 In_NormalWS3_g153330 = Out_NormalWS4_g153329;
				half4 Visual_Masks536_g153328 = Out_Shader4_g153329;
				float4 break658_g153328 = Visual_Masks536_g153328;
				float temp_output_935_0_g153328 = ( Wetness_Mask866_g153328 * _WetnessSmoothnessValue );
				float4 appendResult661_g153328 = (float4(break658_g153328.x , break658_g153328.y , break658_g153328.z , saturate( ( break658_g153328.w + temp_output_935_0_g153328 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g153328 = appendResult661_g153328;
				#else
				float4 staticSwitch586_g153328 = Visual_Masks536_g153328;
				#endif
				half4 Final_Masks482_g153328 = staticSwitch586_g153328;
				float4 In_Shader3_g153330 = Final_Masks482_g153328;
				float4 In_Emissive3_g153330 = Out_Emissive4_g153329;
				float In_Grayscale3_g153330 = Out_Grayscale4_g153329;
				float In_Luminosity3_g153330 = Out_Luminosity4_g153329;
				float In_MultiMask3_g153330 = Out_MultiMask4_g153329;
				float In_AlphaClip3_g153330 = Out_AlphaClip4_g153329;
				float In_AlphaFade3_g153330 = Out_AlphaFade4_g153329;
				float3 In_Translucency3_g153330 = Out_Translucency4_g153329;
				float In_Transmission3_g153330 = Out_Transmission4_g153329;
				float In_Thickness3_g153330 = Out_Thickness4_g153329;
				float In_Diffusion3_g153330 = Out_Diffusion4_g153329;
				Data3_g153330.Dummy = In_Dummy3_g153330;
				Data3_g153330.Albedo = In_Albedo3_g153330;
				Data3_g153330.AlbedoRaw = In_AlbedoRaw3_g153330;
				Data3_g153330.NormalTS = In_NormalTS3_g153330;
				Data3_g153330.NormalWS = In_NormalWS3_g153330;
				Data3_g153330.Shader = In_Shader3_g153330;
				Data3_g153330.Emissive= In_Emissive3_g153330;
				Data3_g153330.MultiMask = In_MultiMask3_g153330;
				Data3_g153330.Grayscale = In_Grayscale3_g153330;
				Data3_g153330.Luminosity = In_Luminosity3_g153330;
				Data3_g153330.AlphaClip = In_AlphaClip3_g153330;
				Data3_g153330.AlphaFade = In_AlphaFade3_g153330;
				Data3_g153330.Translucency = In_Translucency3_g153330;
				Data3_g153330.Transmission = In_Transmission3_g153330;
				Data3_g153330.Thickness = In_Thickness3_g153330;
				Data3_g153330.Diffusion = In_Diffusion3_g153330;
				TVEVisualData Data4_g153368 = Data3_g153330;
				float Out_Dummy4_g153368 = 0;
				float3 Out_Albedo4_g153368 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153368 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153368 = float2( 0,0 );
				float3 Out_NormalWS4_g153368 = float3( 0,0,0 );
				float4 Out_Shader4_g153368 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153368 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153368 = 0;
				float Out_Grayscale4_g153368 = 0;
				float Out_Luminosity4_g153368 = 0;
				float Out_AlphaClip4_g153368 = 0;
				float Out_AlphaFade4_g153368 = 0;
				float3 Out_Translucency4_g153368 = float3( 0,0,0 );
				float Out_Transmission4_g153368 = 0;
				float Out_Thickness4_g153368 = 0;
				float Out_Diffusion4_g153368 = 0;
				Out_Dummy4_g153368 = Data4_g153368.Dummy;
				Out_Albedo4_g153368 = Data4_g153368.Albedo;
				Out_AlbedoRaw4_g153368 = Data4_g153368.AlbedoRaw;
				Out_NormalTS4_g153368 = Data4_g153368.NormalTS;
				Out_NormalWS4_g153368 = Data4_g153368.NormalWS;
				Out_Shader4_g153368 = Data4_g153368.Shader;
				Out_Emissive4_g153368= Data4_g153368.Emissive;
				Out_MultiMask4_g153368 = Data4_g153368.MultiMask;
				Out_Grayscale4_g153368 = Data4_g153368.Grayscale;
				Out_Luminosity4_g153368= Data4_g153368.Luminosity;
				Out_AlphaClip4_g153368 = Data4_g153368.AlphaClip;
				Out_AlphaFade4_g153368 = Data4_g153368.AlphaFade;
				Out_Translucency4_g153368 = Data4_g153368.Translucency;
				Out_Transmission4_g153368 = Data4_g153368.Transmission;
				Out_Thickness4_g153368 = Data4_g153368.Thickness;
				Out_Diffusion4_g153368 = Data4_g153368.Diffusion;
				float3 In_Albedo3_g153358 = Out_Albedo4_g153368;
				float3 In_AlbedoRaw3_g153358 = Out_AlbedoRaw4_g153368;
				float2 In_NormalTS3_g153358 = Out_NormalTS4_g153368;
				float3 In_NormalWS3_g153358 = Out_NormalWS4_g153368;
				float4 In_Shader3_g153358 = Out_Shader4_g153368;
				float4 In_Emissive3_g153358 = Out_Emissive4_g153368;
				float In_Grayscale3_g153358 = Out_Grayscale4_g153368;
				float In_Luminosity3_g153358 = Out_Luminosity4_g153368;
				float temp_output_836_11_g153357 = Out_MultiMask4_g153368;
				float In_MultiMask3_g153358 = temp_output_836_11_g153357;
				half Visual_AlphaClip667_g153357 = Out_AlphaClip4_g153368;
				half Input_True57_g153365 = Visual_AlphaClip667_g153357;
				half True36_g153365 = Input_True57_g153365;
				TVEGlobalData Data15_g153367 = Data204_g153153;
				float Out_Dummy15_g153367 = 0;
				float4 Out_CoatParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153367 = float4( 0,0,0,0 );
				Out_Dummy15_g153367 = Data15_g153367.Dummy;
				Out_CoatParams15_g153367 = Data15_g153367.CoatParams;
				Out_PaintParams15_g153367 = Data15_g153367.PaintParams;
				Out_GlowParams15_g153367 = Data15_g153367.GlowParams;
				Out_AtmoParams15_g153367= Data15_g153367.AtmoParams;
				Out_FadeParams15_g153367= Data15_g153367.FadeParams;
				Out_FormParams15_g153367 = Data15_g153367.FormParams;
				Out_LandParams15_g153367 = Data15_g153367.LandParams;
				Out_WindParams15_g153367 = Data15_g153367.WindParams;
				Out_PushParams15_g153367 = Data15_g153367.PushParams;
				half4 Global_FadeParams516_g153357 = Out_FadeParams15_g153367;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g153357 = saturate( (Global_FadeParams516_g153357).w );
				#else
				float staticSwitch663_g153357 = 1.0;
				#endif
				half Local_GlobalMask429_g153357 = staticSwitch663_g153357;
				half Local_AlphaMask814_g153357 = 1.0;
				TVEModelData Data15_g153369 = Data16_g153151;
				float Out_Dummy15_g153369 = 0;
				float3 Out_PositionWS15_g153369 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153369 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153369 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153369 = float3( 0,0,0 );
				float4 Out_VertexData15_g153369 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153369 = float4( 0,0,0,0 );
				Out_Dummy15_g153369 = Data15_g153369.Dummy;
				Out_PositionWS15_g153369 = Data15_g153369.PositionWS;
				Out_PositionWO15_g153369 = Data15_g153369.PositionWO;
				Out_PivotWS15_g153369 = Data15_g153369.PivotWS;
				Out_PivotWO15_g153369 = Data15_g153369.PivotWO;
				Out_NormalWS15_g153369 = Data15_g153369.NormalWS;
				Out_ViewDirWS15_g153369 = Data15_g153369.ViewDirWS;
				Out_VertexData15_g153369 = Data15_g153369.VertexData;
				Out_BoundsData15_g153369 = Data15_g153369.BoundsData;
				half3 Model_PositionWO602_g153357 = Out_PositionWO15_g153369;
				float4 tex3DNode60_g153361 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g153357 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g153357 = lerp( 1.0 , tex3DNode60_g153361.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g153357 = lerpResult673_g153357;
				half4 Model_VertexMasks752_g153357 = Out_VertexData15_g153369;
				float4 break755_g153357 = Model_VertexMasks752_g153357;
				float4 break33_g153359 = _cutout_vert_mode;
				float temp_output_30_0_g153359 = ( break755_g153357.x * break33_g153359.x );
				float temp_output_29_0_g153359 = ( break755_g153357.y * break33_g153359.y );
				float temp_output_31_0_g153359 = ( break755_g153357.z * break33_g153359.z );
				float temp_output_28_0_g153359 = ( temp_output_30_0_g153359 + temp_output_29_0_g153359 + temp_output_31_0_g153359 + ( break755_g153357.w * break33_g153359.w ) );
				float clampResult17_g153360 = clamp( temp_output_28_0_g153359 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153363 = _CutoutMeshRemap.x;
				float temp_output_10_0_g153363 = ( _CutoutMeshRemap.y - temp_output_7_0_g153363 );
				float lerpResult820_g153357 = lerp( 1.0 , saturate( ( ( clampResult17_g153360 - temp_output_7_0_g153363 ) / ( temp_output_10_0_g153363 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g153364 = lerpResult820_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153364 = ( temp_output_6_0_g153364 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153364 = temp_output_6_0_g153364;
				#endif
				float temp_output_801_0_g153357 = staticSwitch14_g153364;
				half Local_VertMask766_g153357 = temp_output_801_0_g153357;
				half Visual_MultiMask671_g153357 = temp_output_836_11_g153357;
				float lerpResult683_g153357 = lerp( 1.0 , Visual_MultiMask671_g153357 , _CutoutMultiValue);
				half Local_MultiMask685_g153357 = lerpResult683_g153357;
				float lerpResult728_g153357 = lerp( Visual_AlphaClip667_g153357 , min( Visual_AlphaClip667_g153357 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g153357 ) - ( Local_AlphaMask814_g153357 * Local_NoiseMask678_g153357 * Local_VertMask766_g153357 ) ) ) ) , Local_MultiMask685_g153357);
				half Local_AlphaClip784_g153357 = lerpResult728_g153357;
				half Input_False58_g153365 = Local_AlphaClip784_g153357;
				half False36_g153365 = Input_False58_g153365;
				half localShadowPassCheck36_g153365 = ShadowPassCheck36_g153365( True36_g153365 , False36_g153365 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g153357 = Local_AlphaClip784_g153357;
				#else
				float staticSwitch791_g153357 = localShadowPassCheck36_g153365;
				#endif
				float temp_output_6_0_g153366 = staticSwitch791_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153366 = ( temp_output_6_0_g153366 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153366 = temp_output_6_0_g153366;
				#endif
				float temp_output_798_0_g153357 = staticSwitch14_g153366;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g153357 = temp_output_798_0_g153357;
				#else
				float staticSwitch577_g153357 = Visual_AlphaClip667_g153357;
				#endif
				half Final_AlphaClip795_g153357 = staticSwitch577_g153357;
				float In_AlphaClip3_g153358 = Final_AlphaClip795_g153357;
				float In_AlphaFade3_g153358 = Out_AlphaFade4_g153368;
				float3 In_Translucency3_g153358 = Out_Translucency4_g153368;
				float In_Transmission3_g153358 = Out_Transmission4_g153368;
				float In_Thickness3_g153358 = Out_Thickness4_g153368;
				float In_Diffusion3_g153358 = Out_Diffusion4_g153368;
				Data3_g153358.Dummy = In_Dummy3_g153358;
				Data3_g153358.Albedo = In_Albedo3_g153358;
				Data3_g153358.AlbedoRaw = In_AlbedoRaw3_g153358;
				Data3_g153358.NormalTS = In_NormalTS3_g153358;
				Data3_g153358.NormalWS = In_NormalWS3_g153358;
				Data3_g153358.Shader = In_Shader3_g153358;
				Data3_g153358.Emissive= In_Emissive3_g153358;
				Data3_g153358.MultiMask = In_MultiMask3_g153358;
				Data3_g153358.Grayscale = In_Grayscale3_g153358;
				Data3_g153358.Luminosity = In_Luminosity3_g153358;
				Data3_g153358.AlphaClip = In_AlphaClip3_g153358;
				Data3_g153358.AlphaFade = In_AlphaFade3_g153358;
				Data3_g153358.Translucency = In_Translucency3_g153358;
				Data3_g153358.Transmission = In_Transmission3_g153358;
				Data3_g153358.Thickness = In_Thickness3_g153358;
				Data3_g153358.Diffusion = In_Diffusion3_g153358;
				TVEVisualData Data4_g153372 = Data3_g153358;
				float Out_Dummy4_g153372 = 0;
				float3 Out_Albedo4_g153372 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153372 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153372 = float2( 0,0 );
				float3 Out_NormalWS4_g153372 = float3( 0,0,0 );
				float4 Out_Shader4_g153372 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153372 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153372 = 0;
				float Out_Grayscale4_g153372 = 0;
				float Out_Luminosity4_g153372 = 0;
				float Out_AlphaClip4_g153372 = 0;
				float Out_AlphaFade4_g153372 = 0;
				float3 Out_Translucency4_g153372 = float3( 0,0,0 );
				float Out_Transmission4_g153372 = 0;
				float Out_Thickness4_g153372 = 0;
				float Out_Diffusion4_g153372 = 0;
				Out_Dummy4_g153372 = Data4_g153372.Dummy;
				Out_Albedo4_g153372 = Data4_g153372.Albedo;
				Out_AlbedoRaw4_g153372 = Data4_g153372.AlbedoRaw;
				Out_NormalTS4_g153372 = Data4_g153372.NormalTS;
				Out_NormalWS4_g153372 = Data4_g153372.NormalWS;
				Out_Shader4_g153372 = Data4_g153372.Shader;
				Out_Emissive4_g153372= Data4_g153372.Emissive;
				Out_MultiMask4_g153372 = Data4_g153372.MultiMask;
				Out_Grayscale4_g153372 = Data4_g153372.Grayscale;
				Out_Luminosity4_g153372= Data4_g153372.Luminosity;
				Out_AlphaClip4_g153372 = Data4_g153372.AlphaClip;
				Out_AlphaFade4_g153372 = Data4_g153372.AlphaFade;
				Out_Translucency4_g153372 = Data4_g153372.Translucency;
				Out_Transmission4_g153372 = Data4_g153372.Transmission;
				Out_Thickness4_g153372 = Data4_g153372.Thickness;
				Out_Diffusion4_g153372 = Data4_g153372.Diffusion;
				float3 In_Albedo3_g153373 = Out_Albedo4_g153372;
				float3 In_AlbedoRaw3_g153373 = Out_AlbedoRaw4_g153372;
				float2 In_NormalTS3_g153373 = Out_NormalTS4_g153372;
				float3 In_NormalWS3_g153373 = Out_NormalWS4_g153372;
				float4 In_Shader3_g153373 = Out_Shader4_g153372;
				float4 In_Emissive3_g153373 = Out_Emissive4_g153372;
				float In_Grayscale3_g153373 = Out_Grayscale4_g153372;
				float In_Luminosity3_g153373 = Out_Luminosity4_g153372;
				float temp_output_821_11_g153370 = Out_MultiMask4_g153372;
				float In_MultiMask3_g153373 = temp_output_821_11_g153370;
				half Visual_AlphaClip754_g153370 = Out_AlphaClip4_g153372;
				half Input_True57_g153374 = Visual_AlphaClip754_g153370;
				half True36_g153374 = Input_True57_g153374;
				half Dither_Constant768_g153370 = _DitherConstantValue;
				TVEModelData Data15_g153379 = Data16_g153151;
				float Out_Dummy15_g153379 = 0;
				float3 Out_PositionWS15_g153379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153379 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153379 = float3( 0,0,0 );
				float4 Out_VertexData15_g153379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153379 = float4( 0,0,0,0 );
				Out_Dummy15_g153379 = Data15_g153379.Dummy;
				Out_PositionWS15_g153379 = Data15_g153379.PositionWS;
				Out_PositionWO15_g153379 = Data15_g153379.PositionWO;
				Out_PivotWS15_g153379 = Data15_g153379.PivotWS;
				Out_PivotWO15_g153379 = Data15_g153379.PivotWO;
				Out_NormalWS15_g153379 = Data15_g153379.NormalWS;
				Out_ViewDirWS15_g153379 = Data15_g153379.ViewDirWS;
				Out_VertexData15_g153379 = Data15_g153379.VertexData;
				Out_BoundsData15_g153379 = Data15_g153379.BoundsData;
				half3 Model_PositionWS776_g153370 = Out_PositionWS15_g153379;
				float temp_output_7_0_g153378 = _DitherDistanceMinValue;
				float temp_output_10_0_g153378 = ( _DitherDistanceMaxValue - temp_output_7_0_g153378 );
				half Dither_Distance856_g153370 = ( saturate( ( ( distance( Model_PositionWS776_g153370 , _WorldSpaceCameraPos ) - temp_output_7_0_g153378 ) / ( temp_output_10_0_g153378 + 0.0001 ) ) ) * _DitherDistanceValue );
				half Dither_Value429_g153370 = max( Dither_Constant768_g153370 , Dither_Distance856_g153370 );
				half3 Model_PositionWO602_g153370 = Out_PositionWO15_g153379;
				float4 tex3DNode60_g153376 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g153370 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g153370 = tex3DNode60_g153376.r;
				half Local_MaskNoise678_g153370 = temp_output_809_0_g153370;
				half Visual_MultiMask671_g153370 = temp_output_821_11_g153370;
				float lerpResult683_g153370 = lerp( 1.0 , Visual_MultiMask671_g153370 , _DitherMultiValue);
				half Local_MaskMulti685_g153370 = lerpResult683_g153370;
				half Custom_Mask826_g153370 = 1.0;
				float lerpResult728_g153370 = lerp( Visual_AlphaClip754_g153370 , min( Visual_AlphaClip754_g153370 , ( -0.001 - ( Dither_Value429_g153370 - Local_MaskNoise678_g153370 ) ) ) , ( Local_MaskMulti685_g153370 * Custom_Mask826_g153370 ));
				half Local_AlphaClip834_g153370 = lerpResult728_g153370;
				half Input_False58_g153374 = Local_AlphaClip834_g153370;
				half False36_g153374 = Input_False58_g153374;
				half localShadowPassCheck36_g153374 = ShadowPassCheck36_g153374( True36_g153374 , False36_g153374 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g153370 = Local_AlphaClip834_g153370;
				#else
				float staticSwitch831_g153370 = localShadowPassCheck36_g153374;
				#endif
				float temp_output_6_0_g153375 = staticSwitch831_g153370;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153375 = ( temp_output_6_0_g153375 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153375 = temp_output_6_0_g153375;
				#endif
				float temp_output_840_0_g153370 = staticSwitch14_g153375;
				#ifdef TVE_DITHER
				float staticSwitch577_g153370 = temp_output_840_0_g153370;
				#else
				float staticSwitch577_g153370 = Visual_AlphaClip754_g153370;
				#endif
				half Final_AlphaClip493_g153370 = staticSwitch577_g153370;
				float In_AlphaClip3_g153373 = Final_AlphaClip493_g153370;
				float In_AlphaFade3_g153373 = Out_AlphaFade4_g153372;
				float3 In_Translucency3_g153373 = Out_Translucency4_g153372;
				float In_Transmission3_g153373 = Out_Transmission4_g153372;
				float In_Thickness3_g153373 = Out_Thickness4_g153372;
				float In_Diffusion3_g153373 = Out_Diffusion4_g153372;
				Data3_g153373.Dummy = In_Dummy3_g153373;
				Data3_g153373.Albedo = In_Albedo3_g153373;
				Data3_g153373.AlbedoRaw = In_AlbedoRaw3_g153373;
				Data3_g153373.NormalTS = In_NormalTS3_g153373;
				Data3_g153373.NormalWS = In_NormalWS3_g153373;
				Data3_g153373.Shader = In_Shader3_g153373;
				Data3_g153373.Emissive= In_Emissive3_g153373;
				Data3_g153373.MultiMask = In_MultiMask3_g153373;
				Data3_g153373.Grayscale = In_Grayscale3_g153373;
				Data3_g153373.Luminosity = In_Luminosity3_g153373;
				Data3_g153373.AlphaClip = In_AlphaClip3_g153373;
				Data3_g153373.AlphaFade = In_AlphaFade3_g153373;
				Data3_g153373.Translucency = In_Translucency3_g153373;
				Data3_g153373.Transmission = In_Transmission3_g153373;
				Data3_g153373.Thickness = In_Thickness3_g153373;
				Data3_g153373.Diffusion = In_Diffusion3_g153373;
				TVEVisualData Data4_g153398 = Data3_g153373;
				float Out_Dummy4_g153398 = 0;
				float3 Out_Albedo4_g153398 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153398 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153398 = float2( 0,0 );
				float3 Out_NormalWS4_g153398 = float3( 0,0,0 );
				float4 Out_Shader4_g153398 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153398 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153398 = 0;
				float Out_Grayscale4_g153398 = 0;
				float Out_Luminosity4_g153398 = 0;
				float Out_AlphaClip4_g153398 = 0;
				float Out_AlphaFade4_g153398 = 0;
				float3 Out_Translucency4_g153398 = float3( 0,0,0 );
				float Out_Transmission4_g153398 = 0;
				float Out_Thickness4_g153398 = 0;
				float Out_Diffusion4_g153398 = 0;
				Out_Dummy4_g153398 = Data4_g153398.Dummy;
				Out_Albedo4_g153398 = Data4_g153398.Albedo;
				Out_AlbedoRaw4_g153398 = Data4_g153398.AlbedoRaw;
				Out_NormalTS4_g153398 = Data4_g153398.NormalTS;
				Out_NormalWS4_g153398 = Data4_g153398.NormalWS;
				Out_Shader4_g153398 = Data4_g153398.Shader;
				Out_Emissive4_g153398= Data4_g153398.Emissive;
				Out_MultiMask4_g153398 = Data4_g153398.MultiMask;
				Out_Grayscale4_g153398 = Data4_g153398.Grayscale;
				Out_Luminosity4_g153398= Data4_g153398.Luminosity;
				Out_AlphaClip4_g153398 = Data4_g153398.AlphaClip;
				Out_AlphaFade4_g153398 = Data4_g153398.AlphaFade;
				Out_Translucency4_g153398 = Data4_g153398.Translucency;
				Out_Transmission4_g153398 = Data4_g153398.Transmission;
				Out_Thickness4_g153398 = Data4_g153398.Thickness;
				Out_Diffusion4_g153398 = Data4_g153398.Diffusion;
				float3 temp_output_297_0_g153389 = Out_Albedo4_g153398;
				float3 In_Albedo3_g153399 = temp_output_297_0_g153389;
				float3 temp_output_297_23_g153389 = Out_AlbedoRaw4_g153398;
				float3 In_AlbedoRaw3_g153399 = temp_output_297_23_g153389;
				float2 In_NormalTS3_g153399 = Out_NormalTS4_g153398;
				float3 In_NormalWS3_g153399 = Out_NormalWS4_g153398;
				float4 In_Shader3_g153399 = Out_Shader4_g153398;
				float4 temp_cast_51 = (0.0).xxxx;
				half4 Visual_Emissive255_g153389 = Out_Emissive4_g153398;
				half Emissive_MeshMask221_g153389 = 1.0;
				half Emissive_Mask103_g153389 = 1.0;
				float temp_output_279_0_g153389 = ( Emissive_MeshMask221_g153389 * Emissive_Mask103_g153389 );
				float3 appendResult293_g153389 = (float3(temp_output_279_0_g153389 , temp_output_279_0_g153389 , temp_output_279_0_g153389));
				half3 Local_EmissiveColor278_g153389 = appendResult293_g153389;
				float3 temp_cast_52 = (1.0).xxx;
				TVEGlobalData Data15_g153390 = Data204_g153153;
				float Out_Dummy15_g153390 = 0;
				float4 Out_CoatParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153390 = float4( 0,0,0,0 );
				Out_Dummy15_g153390 = Data15_g153390.Dummy;
				Out_CoatParams15_g153390 = Data15_g153390.CoatParams;
				Out_PaintParams15_g153390 = Data15_g153390.PaintParams;
				Out_GlowParams15_g153390 = Data15_g153390.GlowParams;
				Out_AtmoParams15_g153390= Data15_g153390.AtmoParams;
				Out_FadeParams15_g153390= Data15_g153390.FadeParams;
				Out_FormParams15_g153390 = Data15_g153390.FormParams;
				Out_LandParams15_g153390 = Data15_g153390.LandParams;
				Out_WindParams15_g153390 = Data15_g153390.WindParams;
				Out_PushParams15_g153390 = Data15_g153390.PushParams;
				half4 Global_GlowParams179_g153389 = Out_GlowParams15_g153390;
				float3 lerpResult299_g153389 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g153389).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g153389 = lerpResult299_g153389;
				#else
				float3 staticSwitch228_g153389 = temp_cast_52;
				#endif
				half3 Emissive_GlobalMask248_g153389 = staticSwitch228_g153389;
				half3 Visual_AlbedoRaw306_g153389 = temp_output_297_23_g153389;
				float3 lerpResult307_g153389 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g153389 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g153389 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g153389 * lerpResult307_g153389 );
				half3 Emissive_Blend260_g153389 = ( ( (Visual_Emissive255_g153389).xyz * Local_EmissiveColor278_g153389 ) * Local_EmissiveValue88_g153389 );
				float3 temp_output_3_0_g153403 = Emissive_Blend260_g153389;
				float temp_output_15_0_g153403 = _emissive_power_value;
				float3 hdEmission22_g153403 = ASEGetEmissionHDRColor(temp_output_3_0_g153403,temp_output_15_0_g153403,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g153389 = temp_output_279_0_g153389;
				float4 appendResult295_g153389 = (float4(hdEmission22_g153403 , Local_EmissiveMask294_g153389));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g153389 = appendResult295_g153389;
				#else
				float4 staticSwitch129_g153389 = temp_cast_51;
				#endif
				half4 Final_Emissive184_g153389 = staticSwitch129_g153389;
				float4 In_Emissive3_g153399 = Final_Emissive184_g153389;
				float In_Grayscale3_g153399 = Out_Grayscale4_g153398;
				float In_Luminosity3_g153399 = Out_Luminosity4_g153398;
				float temp_output_297_11_g153389 = Out_MultiMask4_g153398;
				float In_MultiMask3_g153399 = temp_output_297_11_g153389;
				float In_AlphaClip3_g153399 = Out_AlphaClip4_g153398;
				float In_AlphaFade3_g153399 = Out_AlphaFade4_g153398;
				float3 In_Translucency3_g153399 = Out_Translucency4_g153398;
				float In_Transmission3_g153399 = Out_Transmission4_g153398;
				float In_Thickness3_g153399 = Out_Thickness4_g153398;
				float In_Diffusion3_g153399 = Out_Diffusion4_g153398;
				Data3_g153399.Dummy = In_Dummy3_g153399;
				Data3_g153399.Albedo = In_Albedo3_g153399;
				Data3_g153399.AlbedoRaw = In_AlbedoRaw3_g153399;
				Data3_g153399.NormalTS = In_NormalTS3_g153399;
				Data3_g153399.NormalWS = In_NormalWS3_g153399;
				Data3_g153399.Shader = In_Shader3_g153399;
				Data3_g153399.Emissive= In_Emissive3_g153399;
				Data3_g153399.MultiMask = In_MultiMask3_g153399;
				Data3_g153399.Grayscale = In_Grayscale3_g153399;
				Data3_g153399.Luminosity = In_Luminosity3_g153399;
				Data3_g153399.AlphaClip = In_AlphaClip3_g153399;
				Data3_g153399.AlphaFade = In_AlphaFade3_g153399;
				Data3_g153399.Translucency = In_Translucency3_g153399;
				Data3_g153399.Transmission = In_Transmission3_g153399;
				Data3_g153399.Thickness = In_Thickness3_g153399;
				Data3_g153399.Diffusion = In_Diffusion3_g153399;
				TVEVisualData Data4_g153445 = Data3_g153399;
				float Out_Dummy4_g153445 = 0;
				float3 Out_Albedo4_g153445 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153445 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153445 = float2( 0,0 );
				float3 Out_NormalWS4_g153445 = float3( 0,0,0 );
				float4 Out_Shader4_g153445 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153445 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153445 = 0;
				float Out_Grayscale4_g153445 = 0;
				float Out_Luminosity4_g153445 = 0;
				float Out_AlphaClip4_g153445 = 0;
				float Out_AlphaFade4_g153445 = 0;
				float3 Out_Translucency4_g153445 = float3( 0,0,0 );
				float Out_Transmission4_g153445 = 0;
				float Out_Thickness4_g153445 = 0;
				float Out_Diffusion4_g153445 = 0;
				Out_Dummy4_g153445 = Data4_g153445.Dummy;
				Out_Albedo4_g153445 = Data4_g153445.Albedo;
				Out_AlbedoRaw4_g153445 = Data4_g153445.AlbedoRaw;
				Out_NormalTS4_g153445 = Data4_g153445.NormalTS;
				Out_NormalWS4_g153445 = Data4_g153445.NormalWS;
				Out_Shader4_g153445 = Data4_g153445.Shader;
				Out_Emissive4_g153445= Data4_g153445.Emissive;
				Out_MultiMask4_g153445 = Data4_g153445.MultiMask;
				Out_Grayscale4_g153445 = Data4_g153445.Grayscale;
				Out_Luminosity4_g153445= Data4_g153445.Luminosity;
				Out_AlphaClip4_g153445 = Data4_g153445.AlphaClip;
				Out_AlphaFade4_g153445 = Data4_g153445.AlphaFade;
				Out_Translucency4_g153445 = Data4_g153445.Translucency;
				Out_Transmission4_g153445 = Data4_g153445.Transmission;
				Out_Thickness4_g153445 = Data4_g153445.Thickness;
				Out_Diffusion4_g153445 = Data4_g153445.Diffusion;
				half3 Visual_Albedo199_g153444 = Out_Albedo4_g153445;
				half3 Final_Albedo312_g153444 = Visual_Albedo199_g153444;
				float3 In_Albedo3_g153446 = Final_Albedo312_g153444;
				float3 In_AlbedoRaw3_g153446 = Out_AlbedoRaw4_g153445;
				float2 In_NormalTS3_g153446 = Out_NormalTS4_g153445;
				float3 In_NormalWS3_g153446 = Out_NormalWS4_g153445;
				float4 In_Shader3_g153446 = Out_Shader4_g153445;
				float4 In_Emissive3_g153446 = Out_Emissive4_g153445;
				float In_Grayscale3_g153446 = Out_Grayscale4_g153445;
				float In_Luminosity3_g153446 = Out_Luminosity4_g153445;
				float temp_output_301_11_g153444 = Out_MultiMask4_g153445;
				float In_MultiMask3_g153446 = temp_output_301_11_g153444;
				float In_AlphaClip3_g153446 = Out_AlphaClip4_g153445;
				float In_AlphaFade3_g153446 = Out_AlphaFade4_g153445;
				float3 temp_cast_53 = (0.0).xxx;
				half3 Subsurface_Color264_g153444 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g153444 );
				half Visual_Transmission138_g153444 = Out_Transmission4_g153445;
				half Subsurface_Value268_g153444 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g153447 = Data204_g153153;
				float Out_Dummy15_g153447 = 0;
				float4 Out_CoatParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153447 = float4( 0,0,0,0 );
				Out_Dummy15_g153447 = Data15_g153447.Dummy;
				Out_CoatParams15_g153447 = Data15_g153447.CoatParams;
				Out_PaintParams15_g153447 = Data15_g153447.PaintParams;
				Out_GlowParams15_g153447 = Data15_g153447.GlowParams;
				Out_AtmoParams15_g153447= Data15_g153447.AtmoParams;
				Out_FadeParams15_g153447= Data15_g153447.FadeParams;
				Out_FormParams15_g153447 = Data15_g153447.FormParams;
				Out_LandParams15_g153447 = Data15_g153447.LandParams;
				Out_WindParams15_g153447 = Data15_g153447.WindParams;
				Out_PushParams15_g153447 = Data15_g153447.PushParams;
				half4 Global_GlowParams373_g153444 = Out_GlowParams15_g153447;
				float lerpResult403_g153444 = lerp( 1.0 , saturate( (Global_GlowParams373_g153444).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g153444 = lerpResult403_g153444;
				#else
				float staticSwitch367_g153444 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g153444 = staticSwitch367_g153444;
				half Visual_MultiMask292_g153444 = temp_output_301_11_g153444;
				float lerpResult293_g153444 = lerp( 1.0 , Visual_MultiMask292_g153444 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g153444 = lerpResult293_g153444;
				half Custom_Mask363_g153444 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g153444 = ( Visual_Transmission138_g153444 * Subsurface_Value268_g153444 * Subsurface_GlobalMask369_g153444 * Subsurface_MultiMask296_g153444 * Custom_Mask363_g153444 );
				#else
				float staticSwitch345_g153444 = 0.0;
				#endif
				half Final_Transmission269_g153444 = staticSwitch345_g153444;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g153444 = ( Subsurface_Color264_g153444 * Final_Transmission269_g153444 * 10.0 );
				#else
				float3 staticSwitch348_g153444 = temp_cast_53;
				#endif
				half3 Final_Translucency254_g153444 = staticSwitch348_g153444;
				float3 In_Translucency3_g153446 = Final_Translucency254_g153444;
				float In_Transmission3_g153446 = Final_Transmission269_g153444;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g153444 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g153444 = 1.0;
				#endif
				half Final_Thickness275_g153444 = staticSwitch351_g153444;
				float In_Thickness3_g153446 = Final_Thickness275_g153444;
				float Final_Diffusion340_g153444 = _SubsurfaceDiffusion;
				float In_Diffusion3_g153446 = Final_Diffusion340_g153444;
				Data3_g153446.Dummy = In_Dummy3_g153446;
				Data3_g153446.Albedo = In_Albedo3_g153446;
				Data3_g153446.AlbedoRaw = In_AlbedoRaw3_g153446;
				Data3_g153446.NormalTS = In_NormalTS3_g153446;
				Data3_g153446.NormalWS = In_NormalWS3_g153446;
				Data3_g153446.Shader = In_Shader3_g153446;
				Data3_g153446.Emissive= In_Emissive3_g153446;
				Data3_g153446.MultiMask = In_MultiMask3_g153446;
				Data3_g153446.Grayscale = In_Grayscale3_g153446;
				Data3_g153446.Luminosity = In_Luminosity3_g153446;
				Data3_g153446.AlphaClip = In_AlphaClip3_g153446;
				Data3_g153446.AlphaFade = In_AlphaFade3_g153446;
				Data3_g153446.Translucency = In_Translucency3_g153446;
				Data3_g153446.Transmission = In_Transmission3_g153446;
				Data3_g153446.Thickness = In_Thickness3_g153446;
				Data3_g153446.Diffusion = In_Diffusion3_g153446;
				TVEVisualData Data4_g153454 = Data3_g153446;
				float Out_Dummy4_g153454 = 0;
				float3 Out_Albedo4_g153454 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153454 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153454 = float2( 0,0 );
				float3 Out_NormalWS4_g153454 = float3( 0,0,0 );
				float4 Out_Shader4_g153454 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153454 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153454 = 0;
				float Out_Grayscale4_g153454 = 0;
				float Out_Luminosity4_g153454 = 0;
				float Out_AlphaClip4_g153454 = 0;
				float Out_AlphaFade4_g153454 = 0;
				float3 Out_Translucency4_g153454 = float3( 0,0,0 );
				float Out_Transmission4_g153454 = 0;
				float Out_Thickness4_g153454 = 0;
				float Out_Diffusion4_g153454 = 0;
				Out_Dummy4_g153454 = Data4_g153454.Dummy;
				Out_Albedo4_g153454 = Data4_g153454.Albedo;
				Out_AlbedoRaw4_g153454 = Data4_g153454.AlbedoRaw;
				Out_NormalTS4_g153454 = Data4_g153454.NormalTS;
				Out_NormalWS4_g153454 = Data4_g153454.NormalWS;
				Out_Shader4_g153454 = Data4_g153454.Shader;
				Out_Emissive4_g153454= Data4_g153454.Emissive;
				Out_MultiMask4_g153454 = Data4_g153454.MultiMask;
				Out_Grayscale4_g153454 = Data4_g153454.Grayscale;
				Out_Luminosity4_g153454= Data4_g153454.Luminosity;
				Out_AlphaClip4_g153454 = Data4_g153454.AlphaClip;
				Out_AlphaFade4_g153454 = Data4_g153454.AlphaFade;
				Out_Translucency4_g153454 = Data4_g153454.Translucency;
				Out_Transmission4_g153454 = Data4_g153454.Transmission;
				Out_Thickness4_g153454 = Data4_g153454.Thickness;
				Out_Diffusion4_g153454 = Data4_g153454.Diffusion;
				float temp_output_3_0_g153463 = Out_AlphaClip4_g153454;
				float Alpha19_g153463 = temp_output_3_0_g153463;
				float temp_output_15_0_g153463 = 0.0;
				float Treshold19_g153463 = temp_output_15_0_g153463;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#else
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#endif
				

				surfaceDescription.Alpha = Alpha19_g153463;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = 0;
				#endif

				packedInput.positionCS.zw = positionCS.zw;
				float3 positionRWS = positionWS;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//input.worldToTangent = k_identity3x3;
				//#else
				input.tangentToWorld = k_identity3x3;
				//#endif

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir( input.positionRWS );

				GetSurfaceAndBuiltinData(surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData);

				outputDepth = posInput.deviceDepth;

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), posInput.positionSS, outNormalBuffer);
					#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.positionCS.z;
					#endif
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			HLSLPROGRAM
			#pragma shader_feature_local_fragment _DISABLE_DECALS
			#pragma shader_feature_local_fragment _DISABLE_SSR
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define _AMBIENT_OCCLUSION 1
			#define ASE_SRP_VERSION 170003
			#ifdef UNITY_COLORSPACE_GAMMA//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301)//AI_SRP
			#else//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.04, 0.04, 0.04, 1.0 - 0.04) //AI_SRP
			#endif//AI_SRP
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex Vert
			#pragma fragment Frag

			#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Wind.hlsl"
			//#endif
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#pragma multi_compile _ WRITE_NORMAL_BUFFER
			#pragma multi_compile _ WRITE_MSAA_DEPTH

			#define VARYINGS_NEED_POSITION_WS
			#define VARYINGS_NEED_TANGENT_TO_WORLD
			#define VARYINGS_NEED_TEXCOORD0
			#define VARYINGS_NEED_TEXCOORD1
			#define VARYINGS_NEED_TEXCOORD2
			#define VARYINGS_NEED_TEXCOORD3
			#define VARYINGS_NEED_COLOR

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#define T2W(var, index) var.worldToTangent[index]
			//#else
			#define T2W(var, index) var.tangentToWorld[index]
			//#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ai_ObjectToWorld GetObjectToWorldMatrix()
			#define ai_WorldToObject GetWorldToObjectMatrix()
			#define AI_INV_TWO_PI  INV_TWO_PI
			#define AI_PI          PI
			#define AI_INV_PI      INV_PI
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_fragment TVE_IMPOSTOR_MASK_OFF TVE_IMPOSTOR_MASK_DEFAULT TVE_IMPOSTOR_MASK_PACKED TVE_IMPOSTOR_MASK_SHADING
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 color : COLOR;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				float4 positionCS : SV_Position;
				float3 interp00 : TEXCOORD0;
				float3 interp01 : TEXCOORD1;
				float4 interp02 : TEXCOORD2;
				float4 interp03 : TEXCOORD3;
				float4 interp04 : TEXCOORD4;
				float4 interp05 : TEXCOORD5;
				float4 interp06 : TEXCOORD6;
				float4 interp07 : TEXCOORD7;
				float4 UVsFrame122_g151868 : TEXCOORD8;
				float4 UVsFrame222_g151868 : TEXCOORD9;
				float4 UVsFrame322_g151868 : TEXCOORD10;
				float4 octaframe22_g151868 : TEXCOORD11;
				float4 viewPos22_g151868 : TEXCOORD12;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START( UnityPerMaterial )
			float4 _AI_SizeOffset;
			half4 _TintingBlendRemap;
			half4 _OverlayBlendRemap1;
			half4 _VariationColorTwo;
			half4 _VariationColorOne;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _ImpostorColor;
			half4 _VariationNoiseRemap;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _dryness_vert_mode;
			float4 _TintingColor;
			half4 _DrynessLumaRemap;
			half4 _TintingLumaRemap;
			float4 _DrynessColor;
			half4 _tinting_vert_mode;
			half4 _OverlayColor;
			half4 _ImpostorColorTwo;
			half4 _TintingMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _SubsurfaceColor;
			float3 _AI_Offset;
			half _TintingMultiValue;
			half _WetnessBakeInfo;
			half _TintingIntensityValue;
			half _TintingLumaValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _OverlayEnd;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _OverlaySpace;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _WetnessElementMode;
			half _TintingBakeInfo;
			half _OverlayElementMode;
			half _VariationNoiseTillingValue;
			half _VariationCategory;
			half _VariationEnd;
			half _TintingSpace;
			half _ImpostorColorMode;
			half _ImpostorMetallicValue;
			half _TintingEnd;
			half _OverlayBakeInfo;
			half _ImpostorSmoothnessValue;
			half _DrynessBakeInfo;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _VariationNoisePivotValue;
			half _DrynessCategory;
			half _TintingCategory;
			half _ImpostorOcclusionValue;
			half _ImpostorMaskOffInfo;
			half _TintingMeshMode;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutMeshValue;
			half _CutoutMeshMode;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _DitherConstantValue;
			half _DitherDistanceMinValue;
			half _CutoutIntensityValue;
			half _DitherDistanceMaxValue;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _EmissiveIntensityValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _SubsurfaceIntensityValue;
			half _DitherDistanceValue;
			half _TintingMeshValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessCategory;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _WetnessIntensityValue;
			half _DrynessSmoothnessValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayNormalValue;
			half _OverlaySmoothnessValue;
			half _OverlaySubsurfaceValue;
			half _DrynessSubsurfaceValue;
			half _CutoutBakeInfo;
			half _CutoutEnd;
			half _SubsurfaceMultiValue;
			half _ImpostorCategory;
			half _ImpostorEnd;
			half _IsImpostorShader;
			half _IsSubsurfaceShader;
			half _MotionWindCategory;
			half _MotionWindEnd;
			half _MotionInteractionCategory;
			half _InteractionInteractionEnd;
			half _MotionWindMode;
			half _MotionWindElementMode;
			half _MotionPushElementMode;
			half _MotionWindOffInfo;
			half _MotionWindOptimizedInfo;
			half _MotionWindAdvancedInfo;
			half _SizeFadeCategory;
			half _SizeFadeEnd;
			half _SizeFadeElementMode;
			float _AI_Frames;
			float _AI_FramesX;
			float _AI_FramesY;
			float _AI_ImpostorSize;
			half _RenderShadow;
			half _RenderMotion;
			half _IsIdentifier;
			half _IsConverted;
			half _ImpostorMaskDefaultInfo;
			half _ImpostorMaskPackedInfo;
			half _ImpostorMaskShadingInfo;
			half _ImpostorMaskMode;
			half _ImpostorAlphaClipValue;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceAngleValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceSpace;
			half _IsVersion;
			float _AI_Parallax;
			half _RenderDecals;
			half _CategoryRender;
			half _EndRender;
			half _NoiseCategory;
			half _NoiseEnd;
			half _IsInitialized;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _HasDefaultTextures;
			half _IsCollected;
			half _RenderSSR;
			float _AI_TextureBias;
			float _AI_DepthSize;
			float _AI_ShadowBias;
			half _MotionBaseSpeedValue;
			half _MotionBaseNoiseValue;
			half _global_wind_layer_value;
			half _MotionBaseDelayValue;
			half _global_push_layer_value;
			half _MotionPushPivotValue;
			half _MotionPushIntensityValue;
			half _SubsurfaceCategory;
			half _SubsurfaceEnd;
			half _SubsurfaceDirectValue;
			half _MotionBaseTillingValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceShadowValue;
			half _SubsurfaceElementMode;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DitherCategory;
			half _DitherEnd;
			half _CutoutCategory;
			half _SubsurfaceAmbientValue;
			half _CutoutElementMode;
			half _MotionIntensityValue;
			half _MotionBasePivotValue;
			float _AI_ShadowView;
			float _AI_Clip;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionTillingValue;
			half _GlobalGlowPivotValue;
			half _GlobalAtmoPivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalWindLayerValue;
			half _GlobalPushLayerValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _MotionBaseIntensityValue;
			half _GlobalAtmoLayerValue;
			half _SubsurfaceThicknessValue;
			float _BlendMode;
			CBUFFER_END

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_Albedo);
			SAMPLER(sampler_Albedo);
			TEXTURE2D(_Normals);
			SAMPLER(sampler_Normals);
			float3 TVE_WorldOrigin;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_Shader);
			TEXTURE2D(_Packed);
			TEXTURE2D(_Vertex);
			SAMPLER(sampler_Shader);
			SAMPLER(sampler_Packed);
			SAMPLER(sampler_Vertex);


			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			float2 VectortoHemiOctahedron( float3 N )
			{
				N.xy /= dot( 1.0, abs( N ) );
				return float2( N.x + N.y, N.x - N.y );
			}
			
			float3 HemiOctahedronToVector( float2 Oct )
			{
				Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y ) * 0.5;
				float3 N = float3( Oct, 1 - dot( 1.0, abs( Oct ) ) );
				return normalize( N );
			}
			
			inline void RayPlaneIntersectionUV( float3 normalOS, float3 rayPosition, float3 rayDirection, inout float2 uvs, inout float3 localNormal )
			{
				float lDotN = dot( rayDirection, normalOS ); 
				float p0l0DotN = dot( -rayPosition, normalOS );
				float t = p0l0DotN / lDotN;
				float3 p = rayDirection * t + rayPosition;
				float3 upVector = float3( 0, 1, 0 );
				float3 tangent = normalize( cross( upVector, normalOS ) + float3( -0.001, 0, 0 ) );
				float3 bitangent = cross( tangent, normalOS );
				float frameX = dot( p, tangent );
				float frameZ = dot( p, bitangent );
				uvs = -float2( frameX, frameZ );
				if( t <= 0.0 )
				uvs = 0;
				float3x3 worldToLocal = float3x3( tangent, bitangent, normalOS );
				localNormal = normalize( mul( worldToLocal, rayDirection ) );
			}
			
			inline void OctaImpostorVertex( inout float4 positionOS, inout float3 normalOS, inout float4 uvsFrame1, inout float4 uvsFrame2, inout float4 uvsFrame3, inout float4 octaFrame, inout float4 viewPos )
			{
				float2 uvOffset = _AI_SizeOffset.zw;
				float parallax = -_AI_Parallax; 
				float UVscale = _AI_ImpostorSize;
				float framesXY = _AI_Frames;
				float prevFrame = framesXY - 1;
				float3 fractions = 1.0 / float3( framesXY, prevFrame, UVscale );
				float fractionsFrame = fractions.x;
				float fractionsPrevFrame = fractions.y;
				float fractionsUVscale = fractions.z;
				float3 worldCameraPos;
				#if defined(UNITY_PASS_SHADOWCASTER)
				float3 worldOrigin = 0;
				float4 perspective = float4( 0, 0, 0, 1 );
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				perspective = float4( 0, 0, 5000, 0 );
				worldOrigin = ai_ObjectToWorld._m03_m13_m23;
				}
				worldCameraPos = worldOrigin + mul( UNITY_MATRIX_I_V, perspective ).xyz;
				#else
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				worldCameraPos = ai_ObjectToWorld._m03_m13_m23 + UNITY_MATRIX_I_V._m02_m12_m22 * 5000;
				}
				else
				{
				worldCameraPos = GetCameraRelativePositionWS( _WorldSpaceCameraPos );
				}
				#endif
				float3 objectCameraPosition = mul( ai_WorldToObject, float4( worldCameraPos, 1 ) ).xyz - _AI_Offset.xyz; 
				float3 objectCameraDirection = normalize( objectCameraPosition );
				float3 upVector = float3( 0,1,0 );
				float3 objectHorizontalVector = normalize( cross( objectCameraDirection, upVector ) );
				float3 objectVerticalVector = cross( objectHorizontalVector, objectCameraDirection );
				float2 uvExpansion = positionOS.xy;
				float3 billboard = objectHorizontalVector * uvExpansion.x + objectVerticalVector * uvExpansion.y;
				float3 localDir = billboard - objectCameraPosition; 
				objectCameraDirection = trunc( objectCameraDirection * 65536.0 ) / 65536.0;
				objectCameraDirection.y = max(0.001, objectCameraDirection.y);
				float2 frameOcta = VectortoHemiOctahedron( objectCameraDirection.xzy ) * 0.5 + 0.5;
				float2 prevOctaFrame = frameOcta * prevFrame;
				float2 baseOctaFrame = floor( prevOctaFrame );
				float2 fractionOctaFrame = ( baseOctaFrame * fractionsFrame );
				float2 octaFrame1 = ( baseOctaFrame * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa1WorldY = HemiOctahedronToVector( octaFrame1 ).xzy;
				float3 octa1LocalY;
				float2 uvFrame1;
				RayPlaneIntersectionUV( octa1WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame1, /*inout*/ octa1LocalY );
				float2 uvParallax1 = octa1LocalY.xy * fractionsFrame * parallax;
				uvFrame1 = ( uvFrame1 * fractionsUVscale + 0.5 ) * fractionsFrame + fractionOctaFrame;
				uvsFrame1 = float4( uvParallax1, uvFrame1) - float4( 0, 0, uvOffset );
				float2 fractPrevOctaFrame = frac( prevOctaFrame );
				float2 cornerDifference = lerp( float2( 0,1 ) , float2( 1,0 ) , saturate( ceil( ( fractPrevOctaFrame.x - fractPrevOctaFrame.y ) ) ));
				float2 octaFrame2 = ( ( baseOctaFrame + cornerDifference ) * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa2WorldY = HemiOctahedronToVector( octaFrame2 ).xzy;
				float3 octa2LocalY;
				float2 uvFrame2;
				RayPlaneIntersectionUV( octa2WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame2, /*inout*/ octa2LocalY );
				float2 uvParallax2 = octa2LocalY.xy * fractionsFrame * parallax;
				uvFrame2 = ( uvFrame2 * fractionsUVscale + 0.5 ) * fractionsFrame + ( ( cornerDifference * fractionsFrame ) + fractionOctaFrame );
				uvsFrame2 = float4( uvParallax2, uvFrame2) - float4( 0, 0, uvOffset );
				float2 octaFrame3 = ( ( baseOctaFrame + 1 ) * fractionsPrevFrame  ) * 2.0 - 1.0;
				float3 octa3WorldY = HemiOctahedronToVector( octaFrame3 ).xzy;
				float3 octa3LocalY;
				float2 uvFrame3;
				RayPlaneIntersectionUV( octa3WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame3, /*inout*/ octa3LocalY );
				float2 uvParallax3 = octa3LocalY.xy * fractionsFrame * parallax;
				uvFrame3 = ( uvFrame3 * fractionsUVscale + 0.5 ) * fractionsFrame + ( fractionOctaFrame + fractionsFrame );
				uvsFrame3 = float4( uvParallax3, uvFrame3) - float4( 0, 0, uvOffset );
				octaFrame = 0;
				octaFrame.xy = prevOctaFrame;
				octaFrame.zw = fractionOctaFrame;
				positionOS.xyz = billboard + _AI_Offset.xyz;
				normalOS.xyz = objectCameraDirection;
				viewPos = 0;
				viewPos.xyz = TransformWorldToView( TransformObjectToWorld( positionOS.xyz ) );
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			inline void OctaImpostorFragment( inout SurfaceOutput o, out float4 positionCS, out float3 positionWS, float4 uvsFrame1, float4 uvsFrame2, float4 uvsFrame3, float4 octaFrame, float4 interpViewPos, out float4 output0, out float4 output1, out float4 output2 )
			{
				float depthBias = -1.0;
				float textureBias = _AI_TextureBias;
				float2 fraction = frac( octaFrame.xy );
				float2 invFraction = 1 - fraction;
				float3 weights;
				weights.x = min( invFraction.x, invFraction.y );
				weights.y = abs( fraction.x - fraction.y );
				weights.z = min( fraction.x, fraction.y );
				float4 parallaxSample1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame1.zw, depthBias );
				float2 parallax1 = ( ( 0.5 - parallaxSample1.a ) * uvsFrame1.xy ) + uvsFrame1.zw;
				float4 parallaxSample2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame2.zw, depthBias );
				float2 parallax2 = ( ( 0.5 - parallaxSample2.a ) * uvsFrame2.xy ) + uvsFrame2.zw;
				float4 parallaxSample3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame3.zw, depthBias );
				float2 parallax3 = ( ( 0.5 - parallaxSample3.a ) * uvsFrame3.xy ) + uvsFrame3.zw;
				float4 albedo1 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax1, textureBias );
				float4 albedo2 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax2, textureBias );
				float4 albedo3 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax3, textureBias );
				float4 blendedAlbedo = albedo1 * weights.x + albedo2 * weights.y + albedo3 * weights.z;
				o.Alpha = ( blendedAlbedo.a - _AI_Clip );
				clip( o.Alpha );
				float t = ceil( fraction.x - fraction.y );
				float4 cornerDifference = float4( t, 1 - t, 1, 1 );
				float2 step_1 = ( parallax1 - octaFrame.zw ) * _AI_Frames;
				float4 step23 = ( float4( parallax2, parallax3 ) -  octaFrame.zwzw ) * _AI_Frames - cornerDifference;
				step_1 = step_1 * (1-step_1);
				step23 = step23 * (1-step23);
				float3 steps;
				steps.x = step_1.x * step_1.y;
				steps.y = step23.x * step23.y;
				steps.z = step23.z * step23.w;
				steps = step(-steps, 0);
				float final = dot( steps, weights );
				clip( final - 0.5 );
				o.Albedo = blendedAlbedo.rgb;
				#if defined(AI_HD_RENDERPIPELINE)
				float4 feat1 = _Features.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.Diffusion = feat1.rgb;
				o.Features = feat1.a;
				float4 test1 = _Specular.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.MetalTangent = test1.b;
				#endif
				float4 normals1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax1, textureBias );
				float4 normals2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax2, textureBias );
				float4 normals3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax3, textureBias );
				float4 blendedNormal = normals1 * weights.x  + normals2 * weights.y + normals3 * weights.z;
				float4 output0a = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax1, textureBias );
				float4 output0b = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax2, textureBias );
				float4 output0c = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax3, textureBias );
				output0 = output0a * weights.x  + output0b * weights.y + output0c * weights.z; 
				float4 output1a = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax1, textureBias );
				float4 output1b = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax2, textureBias );
				float4 output1c = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax3, textureBias );
				output1 = output1a * weights.x  + output1b * weights.y + output1c * weights.z; 
				float4 output2a = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax1, textureBias );
				float4 output2b = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax2, textureBias );
				float4 output2c = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax3, textureBias );
				output2 = output2a * weights.x  + output2b * weights.y + output2c * weights.z; 
				float3 localNormal = blendedNormal.rgb * 2.0 - 1.0;
				float3 worldNormal = normalize( mul( (float3x3)ai_ObjectToWorld, localNormal ) );
				o.Normal = worldNormal;
				float3 viewPos = interpViewPos.xyz;
				float depthOffset = ( ( parallaxSample1.a * weights.x + parallaxSample2.a * weights.y + parallaxSample3.a * weights.z ) - 0.5 /** 2.0 - 1.0*/ ) /** 0.5*/ * _AI_DepthSize * length( ai_ObjectToWorld[ 2 ].xyz );
				#if ( defined(SHADERPASS) && ((defined(SHADERPASS_SHADOWS) && SHADERPASS == SHADERPASS_SHADOWS) || (defined(SHADERPASS_SHADOWCASTER) && SHADERPASS == SHADERPASS_SHADOWCASTER)) ) || defined(UNITY_PASS_SHADOWCASTER)
				viewPos.z += depthOffset * _AI_ShadowView;
				viewPos.z += -_AI_ShadowBias;
				#else 
				viewPos.z += depthOffset;
				#endif
				positionWS = mul( UNITY_MATRIX_I_V, float4( viewPos.xyz, 1 ) ).xyz;
				positionCS = mul( UNITY_MATRIX_P, float4( viewPos, 1 ) );
				#if defined(UNITY_PASS_SHADOWCASTER) && !defined(SHADERPASS)
				#if UNITY_REVERSED_Z
				positionCS.z = min( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#else
				positionCS.z = max( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#endif
				#endif
				positionCS.xyz /= positionCS.w;
				if( UNITY_NEAR_CLIP_VALUE < 0 )
				positionCS = positionCS * 0.5 + 0.5;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g153365( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g153374( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif
				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif
				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
					surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
				#endif

				GetNormalWS( fragInputs, float3( 0.0, 0.0, 1.0 ), surfaceData.normalWS, float3( 1.0, 1.0, 1.0 ) );
				bentNormalWS = surfaceData.normalWS;

				surfaceData.geomNormalWS = T2W(fragInputs, 2);

				#ifdef _HAS_REFRACTION
					surfaceData.transmittanceMask = 1.0 - surfaceDescription.Alpha;
					surfaceDescription.Alpha = 1.0;
				#endif

					surfaceData.tangentWS = normalize(T2W(fragInputs, 0).xyz);    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
					surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				#if defined(_SPECULAR_OCCLUSION_CUSTOM)
				#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
				#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
				#else
					surfaceData.specularOcclusion = 1.0;
				#endif
				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
					surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, T2W(fragInputs, 2), surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
				#endif
			}

			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				//#ifdef LOD_FADE_CROSSFADE
				//	uint3 fadeMaskSeed = asuint((int3)(V * _ScreenSize.xyx));
				//	LODDitheringTransition(fadeMaskSeed, unity_LODFade.x);
				//#endif

				#ifdef _ALPHATEST_ON
					DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

					float3 bentNormalWS;
					BuildSurfaceData(fragInputs, surfaceDescription, V, surfaceData, bentNormalWS);

				#if HAVE_DECALS
				if( _EnableDecals )
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif

				#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
					InitBuiltinData( surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.positionRWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#else
					InitBuiltinData( posInput, surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#endif

				builtinData.depthOffset = 0.0;

				#if (SHADERPASS == SHADERPASS_DISTORTION)
					builtinData.distortion = surfaceDescription.Distortion;
					builtinData.distortionBlur = surfaceDescription.DistortionBlur;
				#else
					builtinData.distortion = float2(0.0, 0.0);
					builtinData.distortionBlur = 0.0;
				#endif

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID( inputMesh, outputPackedVaryingsMeshToPS );
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g153438 = (TVEModelData)0;
				float In_Dummy16_g153438 = 0.0;
				TVEModelData Data16_g153406 = (TVEModelData)0;
				half Dummy181_g153404 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _InteractionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g153406 = Dummy181_g153404;
				TVEModelData Data16_g153386 = (TVEModelData)0;
				half Dummy181_g153383 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g153386 = Dummy181_g153383;
				TVEModelData Data16_g153150 = (TVEModelData)0;
				float In_Dummy16_g153150 = 0.0;
				OctaImpostorVertex( inputMesh.positionOS, inputMesh.normalOS, outputPackedVaryingsMeshToPS.UVsFrame122_g151868, outputPackedVaryingsMeshToPS.UVsFrame222_g151868, outputPackedVaryingsMeshToPS.UVsFrame322_g151868, outputPackedVaryingsMeshToPS.octaframe22_g151868, outputPackedVaryingsMeshToPS.viewPos22_g151868 );
				float3 worldPosOut22_g151868 = GetAbsolutePositionWS( mul( UNITY_MATRIX_I_V, float4( outputPackedVaryingsMeshToPS.viewPos22_g151868.xyz, 1.0 ) ).xyz );
				half3 Input_PositionWS319_g153142 = worldPosOut22_g151868;
				float3 worldToObj315_g153142 = mul( GetWorldToObjectMatrix(), float4( GetCameraRelativePositionWS(Input_PositionWS319_g153142), 1 ) ).xyz;
				half3 Model_PositionOS316_g153142 = worldToObj315_g153142;
				float3 In_PositionOS16_g153150 = Model_PositionOS316_g153142;
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153150 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153150 = Model_PositionWO311_g153142;
				float3 In_PositionRawOS16_g153150 = Model_PositionOS316_g153142;
				float3 In_PositionAddOS16_g153150 = float3( 0,0,0 );
				float3 In_PivotOS16_g153150 = float3( 0,0,0 );
				float3 localObjectPosition_UNITY_MATRIX_M14_g153145 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g153145 = ( localObjectPosition_UNITY_MATRIX_M14_g153145 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g153145 = localObjectPosition_UNITY_MATRIX_M14_g153145;
				#endif
				half3 ObjectData20_g153147 = staticSwitch13_g153145;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				half3 WorldData19_g153147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g153147 = WorldData19_g153147;
				#else
				float3 staticSwitch14_g153147 = ObjectData20_g153147;
				#endif
				float3 temp_output_124_0_g153145 = staticSwitch14_g153147;
				float3 vertexToFrag305_g153142 = temp_output_124_0_g153145;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153150 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153150 = Model_PivotWO312_g153142;
				half3 Model_NormalOS313_g153142 = inputMesh.normalOS;
				float3 In_NormalOS16_g153150 = Model_NormalOS313_g153142;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153150 = Model_Normal_WS314_g153142;
				float3 In_NormalRawOS16_g153150 = Model_NormalOS313_g153142;
				float3 In_NormalRawWS16_g153150 = Model_Normal_WS314_g153142;
				float4 In_TangentOS16_g153150 = float4( 0,1,0,1 );
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153150 = Model_ViewDirWS347_g153142;
				float4 In_VertexData16_g153150 = float4( 1,1,1,1 );
				float4 In_MotionData16_g153150 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g153150 = float4( 1,1,1,1 );
				float4 In_RotationData16_g153150 = float4( 0,0,0,0 );
				Data16_g153150.Dummy = In_Dummy16_g153150;
				Data16_g153150.PositionOS = In_PositionOS16_g153150;
				Data16_g153150.PositionWS = In_PositionWS16_g153150;
				Data16_g153150.PositionWO = In_PositionWO16_g153150;
				Data16_g153150.PositionRawOS = In_PositionRawOS16_g153150;
				Data16_g153150.PositionAddOS = In_PositionAddOS16_g153150;
				Data16_g153150.PivotOS = In_PivotOS16_g153150;
				Data16_g153150.PivotWS = In_PivotWS16_g153150;
				Data16_g153150.PivotWO = In_PivotWO16_g153150;
				Data16_g153150.NormalOS = In_NormalOS16_g153150;
				Data16_g153150.NormalWS = In_NormalWS16_g153150;
				Data16_g153150.NormalRawOS = In_NormalRawOS16_g153150;
				Data16_g153150.NormalRawWS = In_NormalRawWS16_g153150;
				Data16_g153150.TangentOS = In_TangentOS16_g153150;
				Data16_g153150.ViewDirWS = In_ViewDirWS16_g153150;
				Data16_g153150.VertexData = In_VertexData16_g153150;
				Data16_g153150.MotionData = In_MotionData16_g153150;
				Data16_g153150.BoundsData = In_BoundsData16_g153150;
				Data16_g153150.RotationData = In_RotationData16_g153150;
				TVEModelData Data15_g153385 = Data16_g153150;
				float Out_Dummy15_g153385 = 0;
				float3 Out_PositionOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153385 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153385 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153385 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153385 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153385 = float3( 0,0,0 );
				float4 Out_VertexData15_g153385 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153385 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153385 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153385 = float4( 0,0,0,0 );
				Out_Dummy15_g153385 = Data15_g153385.Dummy;
				Out_PositionOS15_g153385 = Data15_g153385.PositionOS;
				Out_PositionWS15_g153385 = Data15_g153385.PositionWS;
				Out_PositionWO15_g153385 = Data15_g153385.PositionWO;
				Out_PositionRawOS15_g153385 = Data15_g153385.PositionRawOS;
				Out_PositionAddOS15_g153385 = Data15_g153385.PositionAddOS;
				Out_PivotOS15_g153385 = Data15_g153385.PivotOS;
				Out_PivotWS15_g153385 = Data15_g153385.PivotWS;
				Out_PivotWO15_g153385 = Data15_g153385.PivotWO;
				Out_NormalOS15_g153385 = Data15_g153385.NormalOS;
				Out_NormalWS15_g153385 = Data15_g153385.NormalWS;
				Out_NormalRawOS15_g153385 = Data15_g153385.NormalRawOS;
				Out_NormalRawWS15_g153385 = Data15_g153385.NormalRawWS;
				Out_TangentOS15_g153385 = Data15_g153385.TangentOS;
				Out_ViewDirWS15_g153385 = Data15_g153385.ViewDirWS;
				Out_VertexData15_g153385 = Data15_g153385.VertexData;
				Out_MotionData15_g153385 = Data15_g153385.MotionData;
				Out_BoundsData15_g153385 = Data15_g153385.BoundsData;
				Out_RotationData15_g153385 = Data15_g153385.RotationData;
				half3 Model_PositionOS147_g153383 = Out_PositionOS15_g153385;
				float3 temp_cast_0 = (1.0).xxx;
				float3 temp_output_210_19_g153383 = Out_PivotWO15_g153385;
				half3 Model_PivotWO162_g153383 = temp_output_210_19_g153383;
				float temp_output_7_0_g153384 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g153384 = ( _SizeFadeDistMinValue - temp_output_7_0_g153384 );
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_2 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = 0;
				half4 Input_Tex1379_g153142 = 0;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_6;
				#else
				float4 staticSwitch414_g153142 = temp_cast_7;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153387 = Data204_g153153;
				float Out_Dummy15_g153387 = 0;
				float4 Out_CoatParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153387 = float4( 0,0,0,0 );
				Out_Dummy15_g153387 = Data15_g153387.Dummy;
				Out_CoatParams15_g153387 = Data15_g153387.CoatParams;
				Out_PaintParams15_g153387 = Data15_g153387.PaintParams;
				Out_GlowParams15_g153387 = Data15_g153387.GlowParams;
				Out_AtmoParams15_g153387= Data15_g153387.AtmoParams;
				Out_FadeParams15_g153387= Data15_g153387.FadeParams;
				Out_FormParams15_g153387 = Data15_g153387.FormParams;
				Out_LandParams15_g153387 = Data15_g153387.LandParams;
				Out_WindParams15_g153387 = Data15_g153387.WindParams;
				Out_PushParams15_g153387 = Data15_g153387.PushParams;
				half4 Input_FormParams188_g153383 = Out_FormParams15_g153387;
				float lerpResult213_g153383 = lerp( 1.0 , (Input_FormParams188_g153383).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g153383 = lerpResult213_g153383;
				#else
				float staticSwitch194_g153383 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g153383 = staticSwitch194_g153383;
				float temp_output_189_0_g153383 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g153383 ) - temp_output_7_0_g153384 ) / ( temp_output_10_0_g153384 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g153383 );
				float3 appendResult200_g153383 = (float3(temp_output_189_0_g153383 , temp_output_189_0_g153383 , temp_output_189_0_g153383));
				float3 appendResult201_g153383 = (float3(1.0 , temp_output_189_0_g153383 , 1.0));
				float3 lerpResult202_g153383 = lerp( appendResult200_g153383 , appendResult201_g153383 , _SizeFadeScaleMode);
				float3 lerpResult184_g153383 = lerp( temp_cast_0 , lerpResult202_g153383 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g153383 = ( lerpResult184_g153383 * Model_PositionOS147_g153383 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g153383 = temp_output_167_0_g153383;
				#else
				float3 staticSwitch199_g153383 = Model_PositionOS147_g153383;
				#endif
				half3 Final_Position178_g153383 = staticSwitch199_g153383;
				float3 In_PositionOS16_g153386 = Final_Position178_g153383;
				float3 In_PositionWS16_g153386 = Out_PositionWS15_g153385;
				float3 In_PositionWO16_g153386 = Out_PositionWO15_g153385;
				float3 In_PositionRawOS16_g153386 = Out_PositionRawOS15_g153385;
				float3 In_PositionAddOS16_g153386 = Out_PositionAddOS15_g153385;
				float3 temp_output_210_24_g153383 = Out_PivotOS15_g153385;
				float3 In_PivotOS16_g153386 = temp_output_210_24_g153383;
				float3 In_PivotWS16_g153386 = Out_PivotWS15_g153385;
				float3 In_PivotWO16_g153386 = temp_output_210_19_g153383;
				float3 In_NormalOS16_g153386 = Out_NormalOS15_g153385;
				float3 In_NormalWS16_g153386 = Out_NormalWS15_g153385;
				float3 In_NormalRawOS16_g153386 = Out_NormalRawOS15_g153385;
				float3 In_NormalRawWS16_g153386 = Out_NormalRawWS15_g153385;
				float4 In_TangentOS16_g153386 = Out_TangentOS15_g153385;
				float3 In_ViewDirWS16_g153386 = Out_ViewDirWS15_g153385;
				float4 In_VertexData16_g153386 = Out_VertexData15_g153385;
				float4 In_MotionData16_g153386 = Out_MotionData15_g153385;
				float4 In_BoundsData16_g153386 = Out_BoundsData15_g153385;
				float4 In_RotationData16_g153386 = Out_RotationData15_g153385;
				Data16_g153386.Dummy = In_Dummy16_g153386;
				Data16_g153386.PositionOS = In_PositionOS16_g153386;
				Data16_g153386.PositionWS = In_PositionWS16_g153386;
				Data16_g153386.PositionWO = In_PositionWO16_g153386;
				Data16_g153386.PositionRawOS = In_PositionRawOS16_g153386;
				Data16_g153386.PositionAddOS = In_PositionAddOS16_g153386;
				Data16_g153386.PivotOS = In_PivotOS16_g153386;
				Data16_g153386.PivotWS = In_PivotWS16_g153386;
				Data16_g153386.PivotWO = In_PivotWO16_g153386;
				Data16_g153386.NormalOS = In_NormalOS16_g153386;
				Data16_g153386.NormalWS = In_NormalWS16_g153386;
				Data16_g153386.NormalRawOS = In_NormalRawOS16_g153386;
				Data16_g153386.NormalRawWS = In_NormalRawWS16_g153386;
				Data16_g153386.TangentOS = In_TangentOS16_g153386;
				Data16_g153386.ViewDirWS = In_ViewDirWS16_g153386;
				Data16_g153386.VertexData = In_VertexData16_g153386;
				Data16_g153386.MotionData = In_MotionData16_g153386;
				Data16_g153386.BoundsData = In_BoundsData16_g153386;
				Data16_g153386.RotationData = In_RotationData16_g153386;
				TVEModelData Data15_g153405 = Data16_g153386;
				float Out_Dummy15_g153405 = 0;
				float3 Out_PositionOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153405 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153405 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153405 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153405 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153405 = float3( 0,0,0 );
				float4 Out_VertexData15_g153405 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153405 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153405 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153405 = float4( 0,0,0,0 );
				Out_Dummy15_g153405 = Data15_g153405.Dummy;
				Out_PositionOS15_g153405 = Data15_g153405.PositionOS;
				Out_PositionWS15_g153405 = Data15_g153405.PositionWS;
				Out_PositionWO15_g153405 = Data15_g153405.PositionWO;
				Out_PositionRawOS15_g153405 = Data15_g153405.PositionRawOS;
				Out_PositionAddOS15_g153405 = Data15_g153405.PositionAddOS;
				Out_PivotOS15_g153405 = Data15_g153405.PivotOS;
				Out_PivotWS15_g153405 = Data15_g153405.PivotWS;
				Out_PivotWO15_g153405 = Data15_g153405.PivotWO;
				Out_NormalOS15_g153405 = Data15_g153405.NormalOS;
				Out_NormalWS15_g153405 = Data15_g153405.NormalWS;
				Out_NormalRawOS15_g153405 = Data15_g153405.NormalRawOS;
				Out_NormalRawWS15_g153405 = Data15_g153405.NormalRawWS;
				Out_TangentOS15_g153405 = Data15_g153405.TangentOS;
				Out_ViewDirWS15_g153405 = Data15_g153405.ViewDirWS;
				Out_VertexData15_g153405 = Data15_g153405.VertexData;
				Out_MotionData15_g153405 = Data15_g153405.MotionData;
				Out_BoundsData15_g153405 = Data15_g153405.BoundsData;
				Out_RotationData15_g153405 = Data15_g153405.RotationData;
				float3 temp_output_1567_0_g153404 = Out_PositionOS15_g153405;
				float3 In_PositionOS16_g153406 = temp_output_1567_0_g153404;
				float3 In_PositionWS16_g153406 = Out_PositionWS15_g153405;
				float3 temp_output_1567_17_g153404 = Out_PositionWO15_g153405;
				float3 In_PositionWO16_g153406 = temp_output_1567_17_g153404;
				float3 In_PositionRawOS16_g153406 = Out_PositionRawOS15_g153405;
				float3 In_PositionAddOS16_g153406 = Out_PositionAddOS15_g153405;
				float3 In_PivotOS16_g153406 = Out_PivotOS15_g153405;
				float3 In_PivotWS16_g153406 = Out_PivotWS15_g153405;
				float3 temp_output_1567_19_g153404 = Out_PivotWO15_g153405;
				float3 In_PivotWO16_g153406 = temp_output_1567_19_g153404;
				float3 In_NormalOS16_g153406 = Out_NormalOS15_g153405;
				float3 In_NormalWS16_g153406 = Out_NormalWS15_g153405;
				float3 In_NormalRawOS16_g153406 = Out_NormalRawOS15_g153405;
				float3 In_NormalRawWS16_g153406 = Out_NormalRawWS15_g153405;
				float4 In_TangentOS16_g153406 = Out_TangentOS15_g153405;
				float3 In_ViewDirWS16_g153406 = Out_ViewDirWS15_g153405;
				float4 In_VertexData16_g153406 = Out_VertexData15_g153405;
				float4 In_MotionData16_g153406 = Out_MotionData15_g153405;
				float4 In_BoundsData16_g153406 = Out_BoundsData15_g153405;
				float2 temp_cast_36 = (0.0).xx;
				half3 Model_PositionOS147_g153404 = temp_output_1567_0_g153404;
				half Base_Mask217_g153404 = saturate( ( Model_PositionOS147_g153404.y / _AI_Offset.y ) );
				half3 Model_PositionWO162_g153404 = temp_output_1567_17_g153404;
				half3 Model_PivotWO402_g153404 = temp_output_1567_19_g153404;
				float3 lerpResult829_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionBasePivotValue);
				half3 Base_Position1394_g153404 = lerpResult829_g153404;
				half3 Input_PositionWO419_g153419 = Base_Position1394_g153404;
				half Flow_Tillling1397_g153404 = _MotionTillingValue;
				half Input_MotionTillingRT670_g153419 = ( Flow_Tillling1397_g153404 + 0.2 );
				half2 Noise_CoordRT668_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTillingRT670_g153419 * 0.005 );
				half4 Noise_ParamsRT535_g153419 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g153419, 0.0 );
				half Flow_Value1599_g153404 = _MotionIntensityValue;
				half Input_MotionValue629_g153419 = Flow_Value1599_g153404;
				float2 lerpResult709_g153419 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult712_g153419 = (float3(lerpResult709_g153419 , ( (Noise_ParamsRT535_g153419).b * Input_MotionValue629_g153419 )));
				float4 lerpResult627_g153419 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g153419 = (lerpResult627_g153419).xy;
				half Input_MotionTilling321_g153419 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTilling321_g153419 * 0.005 );
				float2 temp_output_3_0_g153420 = Noise_Coord515_g153419;
				float2 temp_output_21_0_g153420 = (Global_WindDirection593_g153419*2.0 + -1.0);
				float lerpResult128_g153425 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g153419 = _MotionBaseSpeedValue;
				half Noise_Speed516_g153419 = ( ( lerpResult128_g153425 * Input_MotionSpeed62_g153419 ) * 0.02 );
				float temp_output_15_0_g153420 = Noise_Speed516_g153419;
				float temp_output_23_0_g153420 = frac( temp_output_15_0_g153420 );
				float4 lerpResult39_g153420 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * temp_output_23_0_g153420 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * frac( ( temp_output_15_0_g153420 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g153420 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g153419 = lerpResult39_g153420;
				half Input_MotionNoise552_g153419 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g153419 = (lerpResult627_g153419).z;
				half Motion_Intensity720_g153419 = ( Global_WindIntensity576_g153419 * Input_MotionValue629_g153419 );
				float lerpResult701_g153419 = lerp( 1.0 , Input_MotionNoise552_g153419 , Motion_Intensity720_g153419);
				float2 lerpResult646_g153419 = lerp( Global_WindDirection593_g153419 , (Noise_Params685_g153419).rg , lerpResult701_g153419);
				float2 lerpResult724_g153419 = lerp( float2( 0.5,0.5 ) , lerpResult646_g153419 , Motion_Intensity720_g153419);
				float3 appendResult708_g153419 = (float3(lerpResult724_g153419 , ( (Noise_Params685_g153419).a * Motion_Intensity720_g153419 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g153419 = appendResult712_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g153419 = appendResult708_g153419;
				#else
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g153419 = staticSwitch673_g153419;
				float temp_output_136_0_g153426 = _global_wind_layer_value;
				float temp_output_19_0_g153428 = TVE_WindLayers[(int)temp_output_136_0_g153426];
				half3 Input_Position180_g153429 = Input_PositionWO419_g153419;
				float2 temp_output_75_0_g153429 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_82_0_g153429 = temp_output_136_0_g153426;
				float2 temp_output_119_0_g153429 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_7_0_g153434 = 1.0;
				float temp_output_10_0_g153434 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153434 );
				float4 lerpResult131_g153429 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153429,temp_output_82_0_g153429, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153429,temp_output_82_0_g153429, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153429 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153434 ) / temp_output_10_0_g153434 ) ));
				float4 temp_output_17_0_g153428 = lerpResult131_g153429;
				float4 temp_output_3_0_g153428 = TVE_WindParams;
				float4 ifLocalVar18_g153428 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153428 >= 0.5 )
				ifLocalVar18_g153428 = temp_output_17_0_g153428;
				else
				ifLocalVar18_g153428 = temp_output_3_0_g153428;
				float4 lerpResult22_g153428 = lerp( temp_output_3_0_g153428 , temp_output_17_0_g153428 , temp_output_19_0_g153428);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153428 = lerpResult22_g153428;
				#else
				float4 staticSwitch24_g153428 = ifLocalVar18_g153428;
				#endif
				float4 temp_output_610_0_g153419 = staticSwitch24_g153428;
				float2 lerpResult699_g153419 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult643_g153419 = (float3(lerpResult699_g153419 , ( (temp_output_610_0_g153419).b * Input_MotionValue629_g153419 )));
				float3 lerpResult623_g153419 = lerp( Motion_Local694_g153419 , appendResult643_g153419 , (temp_output_610_0_g153419).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#else
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g153419 = staticSwitch693_g153419;
				#else
				float3 staticSwitch612_g153419 = Motion_Local694_g153419;
				#endif
				float3 temp_output_1628_567_g153404 = staticSwitch612_g153419;
				float2 break83_g153418 = ((temp_output_1628_567_g153404).xy*2.0 + -1.0);
				float3 appendResult79_g153418 = (float3(break83_g153418.x , 0.0 , break83_g153418.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153418 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Base_Intensity1623_g153404 = length( Base_Direction893_g153404 );
				float lerpResult1631_g153404 = lerp( 1.0 , ( Base_Intensity1623_g153404 * Base_Intensity1623_g153404 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g153404 = ( _MotionBaseIntensityValue * Base_Mask217_g153404 * Base_Direction893_g153404 * lerpResult1631_g153404 );
				#else
				float2 staticSwitch1573_g153404 = temp_cast_36;
				#endif
				float temp_output_136_0_g153408 = _global_push_layer_value;
				float temp_output_19_0_g153409 = TVE_PushLayers[(int)temp_output_136_0_g153408];
				float3 lerpResult1547_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionPushPivotValue);
				half3 Push_Position1549_g153404 = lerpResult1547_g153404;
				half3 Input_Position180_g153410 = Push_Position1549_g153404;
				float2 temp_output_75_0_g153410 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_82_0_g153410 = temp_output_136_0_g153408;
				float2 temp_output_119_0_g153410 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_7_0_g153415 = 1.0;
				float temp_output_10_0_g153415 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153415 );
				float4 lerpResult131_g153410 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153410,temp_output_82_0_g153410, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153410,temp_output_82_0_g153410, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153410 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153415 ) / temp_output_10_0_g153415 ) ));
				float4 temp_output_17_0_g153409 = lerpResult131_g153410;
				float4 temp_output_3_0_g153409 = TVE_PushParams;
				float4 ifLocalVar18_g153409 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153409 >= 0.5 )
				ifLocalVar18_g153409 = temp_output_17_0_g153409;
				else
				ifLocalVar18_g153409 = temp_output_3_0_g153409;
				float4 lerpResult22_g153409 = lerp( temp_output_3_0_g153409 , temp_output_17_0_g153409 , temp_output_19_0_g153409);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153409 = lerpResult22_g153409;
				#else
				float4 staticSwitch24_g153409 = ifLocalVar18_g153409;
				#endif
				half4 Global_PushParams214_g153404 = staticSwitch24_g153409;
				float2 break83_g153417 = ((Global_PushParams214_g153404).rg*2.0 + -1.0);
				float3 appendResult79_g153417 = (float3(break83_g153417.x , 0.0 , break83_g153417.y));
				half2 Push_Direction1608_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153417 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Push_Intensity1501_g153404 = _MotionPushIntensityValue;
				half Push_Influence1504_g153404 = saturate( ( (Global_PushParams214_g153404).a * Push_Intensity1501_g153404 ) );
				float2 lerpResult1496_g153404 = lerp( staticSwitch1573_g153404 , ( Push_Direction1608_g153404 * Push_Intensity1501_g153404 * Base_Mask217_g153404 ) , Push_Influence1504_g153404);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g153404 = lerpResult1496_g153404;
				#else
				float2 staticSwitch1506_g153404 = staticSwitch1573_g153404;
				#endif
				half2 Base_Motion1440_g153404 = staticSwitch1506_g153404;
				half2 Final_RoationData1570_g153404 = Base_Motion1440_g153404;
				float4 In_RotationData16_g153406 = float4( Final_RoationData1570_g153404, 0.0 , 0.0 );
				Data16_g153406.Dummy = In_Dummy16_g153406;
				Data16_g153406.PositionOS = In_PositionOS16_g153406;
				Data16_g153406.PositionWS = In_PositionWS16_g153406;
				Data16_g153406.PositionWO = In_PositionWO16_g153406;
				Data16_g153406.PositionRawOS = In_PositionRawOS16_g153406;
				Data16_g153406.PositionAddOS = In_PositionAddOS16_g153406;
				Data16_g153406.PivotOS = In_PivotOS16_g153406;
				Data16_g153406.PivotWS = In_PivotWS16_g153406;
				Data16_g153406.PivotWO = In_PivotWO16_g153406;
				Data16_g153406.NormalOS = In_NormalOS16_g153406;
				Data16_g153406.NormalWS = In_NormalWS16_g153406;
				Data16_g153406.NormalRawOS = In_NormalRawOS16_g153406;
				Data16_g153406.NormalRawWS = In_NormalRawWS16_g153406;
				Data16_g153406.TangentOS = In_TangentOS16_g153406;
				Data16_g153406.ViewDirWS = In_ViewDirWS16_g153406;
				Data16_g153406.VertexData = In_VertexData16_g153406;
				Data16_g153406.MotionData = In_MotionData16_g153406;
				Data16_g153406.BoundsData = In_BoundsData16_g153406;
				Data16_g153406.RotationData = In_RotationData16_g153406;
				TVEModelData Data15_g153437 = Data16_g153406;
				float Out_Dummy15_g153437 = 0;
				float3 Out_PositionOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153437 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153437 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153437 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153437 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153437 = float3( 0,0,0 );
				float4 Out_VertexData15_g153437 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153437 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153437 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153437 = float4( 0,0,0,0 );
				Out_Dummy15_g153437 = Data15_g153437.Dummy;
				Out_PositionOS15_g153437 = Data15_g153437.PositionOS;
				Out_PositionWS15_g153437 = Data15_g153437.PositionWS;
				Out_PositionWO15_g153437 = Data15_g153437.PositionWO;
				Out_PositionRawOS15_g153437 = Data15_g153437.PositionRawOS;
				Out_PositionAddOS15_g153437 = Data15_g153437.PositionAddOS;
				Out_PivotOS15_g153437 = Data15_g153437.PivotOS;
				Out_PivotWS15_g153437 = Data15_g153437.PivotWS;
				Out_PivotWO15_g153437 = Data15_g153437.PivotWO;
				Out_NormalOS15_g153437 = Data15_g153437.NormalOS;
				Out_NormalWS15_g153437 = Data15_g153437.NormalWS;
				Out_NormalRawOS15_g153437 = Data15_g153437.NormalRawOS;
				Out_NormalRawWS15_g153437 = Data15_g153437.NormalRawWS;
				Out_TangentOS15_g153437 = Data15_g153437.TangentOS;
				Out_ViewDirWS15_g153437 = Data15_g153437.ViewDirWS;
				Out_VertexData15_g153437 = Data15_g153437.VertexData;
				Out_MotionData15_g153437 = Data15_g153437.MotionData;
				Out_BoundsData15_g153437 = Data15_g153437.BoundsData;
				Out_RotationData15_g153437 = Data15_g153437.RotationData;
				half3 Model_PositionOS147_g153436 = Out_PositionOS15_g153437;
				half3 Input_False58_g153439 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153440 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153441 = VertexPos40_g153440;
				float3 appendResult74_g153441 = (float3(VertexPos40_g153441.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g153441 = appendResult74_g153441;
				float3 break84_g153441 = VertexPos40_g153441;
				float3 appendResult81_g153441 = (float3(0.0 , break84_g153441.y , break84_g153441.z));
				half3 VertexPosOtherAxis82_g153441 = appendResult81_g153441;
				float4 temp_output_1567_33_g153436 = Out_RotationData15_g153437;
				half4 Model_VertexBend1569_g153436 = temp_output_1567_33_g153436;
				half2 Angle44_g153440 = (Model_VertexBend1569_g153436).xy;
				half Angle44_g153441 = (Angle44_g153440).y;
				half3 VertexPos40_g153442 = ( VertexPosRotationAxis50_g153441 + ( VertexPosOtherAxis82_g153441 * cos( Angle44_g153441 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g153441 ) * sin( Angle44_g153441 ) ) );
				float3 appendResult74_g153442 = (float3(0.0 , 0.0 , VertexPos40_g153442.z));
				half3 VertexPosRotationAxis50_g153442 = appendResult74_g153442;
				float3 break84_g153442 = VertexPos40_g153442;
				float3 appendResult81_g153442 = (float3(break84_g153442.x , break84_g153442.y , 0.0));
				half3 VertexPosOtherAxis82_g153442 = appendResult81_g153442;
				half Angle44_g153442 = -(Angle44_g153440).x;
				half3 Input_True57_g153439 = ( VertexPosRotationAxis50_g153442 + ( VertexPosOtherAxis82_g153442 * cos( Angle44_g153442 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g153442 ) * sin( Angle44_g153442 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch65_g153439 = Input_False58_g153439;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch67_g153439 = staticSwitch65_g153439;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch69_g153439 = staticSwitch67_g153439;
				#endif
				float3 temp_output_1578_0_g153436 = staticSwitch69_g153439;
				float3 temp_output_1567_31_g153436 = Out_PositionAddOS15_g153437;
				half3 Model_PositionADD1568_g153436 = temp_output_1567_31_g153436;
				half3 Final_PositionOS178_g153436 = ( temp_output_1578_0_g153436 + Model_PositionADD1568_g153436 );
				float3 In_PositionOS16_g153438 = Final_PositionOS178_g153436;
				float3 In_PositionWS16_g153438 = Out_PositionWS15_g153437;
				float3 In_PositionWO16_g153438 = Out_PositionWO15_g153437;
				float3 In_PositionRawOS16_g153438 = Out_PositionRawOS15_g153437;
				float3 In_PositionAddOS16_g153438 = temp_output_1567_31_g153436;
				float3 In_PivotOS16_g153438 = Out_PivotOS15_g153437;
				float3 In_PivotWS16_g153438 = Out_PivotWS15_g153437;
				float3 In_PivotWO16_g153438 = Out_PivotWO15_g153437;
				float3 In_NormalOS16_g153438 = Out_NormalOS15_g153437;
				float3 In_NormalWS16_g153438 = Out_NormalWS15_g153437;
				float3 In_NormalRawOS16_g153438 = Out_NormalRawOS15_g153437;
				float3 In_NormalRawWS16_g153438 = Out_NormalRawWS15_g153437;
				float4 In_TangentOS16_g153438 = Out_TangentOS15_g153437;
				float3 In_ViewDirWS16_g153438 = Out_ViewDirWS15_g153437;
				float4 In_VertexData16_g153438 = Out_VertexData15_g153437;
				float4 In_MotionData16_g153438 = Out_MotionData15_g153437;
				float4 In_BoundsData16_g153438 = Out_BoundsData15_g153437;
				float4 In_RotationData16_g153438 = temp_output_1567_33_g153436;
				Data16_g153438.Dummy = In_Dummy16_g153438;
				Data16_g153438.PositionOS = In_PositionOS16_g153438;
				Data16_g153438.PositionWS = In_PositionWS16_g153438;
				Data16_g153438.PositionWO = In_PositionWO16_g153438;
				Data16_g153438.PositionRawOS = In_PositionRawOS16_g153438;
				Data16_g153438.PositionAddOS = In_PositionAddOS16_g153438;
				Data16_g153438.PivotOS = In_PivotOS16_g153438;
				Data16_g153438.PivotWS = In_PivotWS16_g153438;
				Data16_g153438.PivotWO = In_PivotWO16_g153438;
				Data16_g153438.NormalOS = In_NormalOS16_g153438;
				Data16_g153438.NormalWS = In_NormalWS16_g153438;
				Data16_g153438.NormalRawOS = In_NormalRawOS16_g153438;
				Data16_g153438.NormalRawWS = In_NormalRawWS16_g153438;
				Data16_g153438.TangentOS = In_TangentOS16_g153438;
				Data16_g153438.ViewDirWS = In_ViewDirWS16_g153438;
				Data16_g153438.VertexData = In_VertexData16_g153438;
				Data16_g153438.MotionData = In_MotionData16_g153438;
				Data16_g153438.BoundsData = In_BoundsData16_g153438;
				Data16_g153438.RotationData = In_RotationData16_g153438;
				TVEModelData Data15_g153458 = Data16_g153438;
				float Out_Dummy15_g153458 = 0;
				float3 Out_PositionOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153458 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153458 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153458 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153458 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153458 = float3( 0,0,0 );
				float4 Out_VertexData15_g153458 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153458 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153458 = float4( 0,0,0,0 );
				Out_Dummy15_g153458 = Data15_g153458.Dummy;
				Out_PositionOS15_g153458 = Data15_g153458.PositionOS;
				Out_PositionWS15_g153458 = Data15_g153458.PositionWS;
				Out_PositionWO15_g153458 = Data15_g153458.PositionWO;
				Out_PositionRawOS15_g153458 = Data15_g153458.PositionRawOS;
				Out_PositionAddOS15_g153458 = Data15_g153458.PositionAddOS;
				Out_PivotOS15_g153458 = Data15_g153458.PivotOS;
				Out_PivotWS15_g153458 = Data15_g153458.PivotWS;
				Out_PivotWO15_g153458 = Data15_g153458.PivotWO;
				Out_NormalOS15_g153458 = Data15_g153458.NormalOS;
				Out_NormalWS15_g153458 = Data15_g153458.NormalWS;
				Out_NormalRawOS15_g153458 = Data15_g153458.NormalRawOS;
				Out_NormalRawWS15_g153458 = Data15_g153458.NormalRawWS;
				Out_TangentOS15_g153458 = Data15_g153458.TangentOS;
				Out_ViewDirWS15_g153458 = Data15_g153458.ViewDirWS;
				Out_VertexData15_g153458 = Data15_g153458.VertexData;
				Out_MotionData15_g153458 = Data15_g153458.MotionData;
				Out_BoundsData15_g153458 = Data15_g153458.BoundsData;
				Out_RotationData15_g153458 = Data15_g153458.RotationData;
				float3 temp_output_31_0_g153451 = Out_PositionOS15_g153458;
				
				outputPackedVaryingsMeshToPS.ase_texcoord13.xyz = vertexToFrag305_g153142;
				
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord13.w = 0;
				inputMesh.positionOS.xyz += ( ( temp_output_31_0_g153451 - Out_PositionRawOS15_g153458 ) + _DisableSRPBatcher );

				float3 positionRWS = TransformObjectToWorld( inputMesh.positionOS.xyz );
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.interp00.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.interp01.xyz = normalWS;
				outputPackedVaryingsMeshToPS.interp02.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.interp03.xyzw = inputMesh.texcoord;
				outputPackedVaryingsMeshToPS.interp04.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.interp05.xyzw = inputMesh.uv2;
				outputPackedVaryingsMeshToPS.interp06.xyzw = inputMesh.uv3;
				outputPackedVaryingsMeshToPS.interp07.xyzw = inputMesh.color;

				return outputPackedVaryingsMeshToPS;
			}

			void Frag(  PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_NORMAL_BUFFER
				, out float4 outNormalBuffer : SV_Target0
					#ifdef WRITE_MSAA_DEPTH
				, out float1 depthColor : SV_Target1
					#endif
				#endif
				, out float outputDepth : SV_Depth
				
			)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				#ifdef LOD_FADE_CROSSFADE
				float3 VC = GetWorldSpaceNormalizeViewDir(packedInput.interp00.xyz);
				LODDitheringTransition(ComputeFadeMaskSeed(VC, packedInput.positionCS.xy), unity_LODFade.x);
				#endif

				FragInputs input;

				ZERO_INITIALIZE(FragInputs, input);
				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				SurfaceOutput o = (SurfaceOutput)0;

				o.Normal = float3( 0, 0, 1 );
				float4 positionCS = 0;
				float3 positionWS = 0;

				float localBreakData4_g153454 = ( 0.0 );
				float localCompData3_g153446 = ( 0.0 );
				TVEVisualData Data3_g153446 = (TVEVisualData)0;
				half Dummy145_g153444 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g153446 = Dummy145_g153444;
				float localBreakData4_g153445 = ( 0.0 );
				float localCompData3_g153399 = ( 0.0 );
				TVEVisualData Data3_g153399 = (TVEVisualData)0;
				half Dummy145_g153389 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + 0.0 );
				float In_Dummy3_g153399 = Dummy145_g153389;
				float localBreakData4_g153398 = ( 0.0 );
				float localCompData3_g153373 = ( 0.0 );
				TVEVisualData Data3_g153373 = (TVEVisualData)0;
				half Dummy594_g153370 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g153373 = Dummy594_g153370;
				float localBreakData4_g153372 = ( 0.0 );
				float localCompData3_g153358 = ( 0.0 );
				TVEVisualData Data3_g153358 = (TVEVisualData)0;
				half Dummy594_g153357 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeInfo );
				float In_Dummy3_g153358 = Dummy594_g153357;
				float localBreakData4_g153368 = ( 0.0 );
				float localCompData3_g153330 = ( 0.0 );
				TVEVisualData Data3_g153330 = (TVEVisualData)0;
				half Dummy594_g153328 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeInfo );
				float In_Dummy3_g153330 = Dummy594_g153328;
				float localBreakData4_g153329 = ( 0.0 );
				float localCompData3_g153295 = ( 0.0 );
				TVEVisualData Data3_g153295 = (TVEVisualData)0;
				half Dummy594_g153292 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeInfo );
				float In_Dummy3_g153295 = Dummy594_g153292;
				float localBreakData4_g153293 = ( 0.0 );
				float localCompData3_g153272 = ( 0.0 );
				TVEVisualData Data3_g153272 = (TVEVisualData)0;
				half Dummy205_g153269 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeInfo );
				float In_Dummy3_g153272 = Dummy205_g153269;
				float localBreakData4_g153271 = ( 0.0 );
				float localCompData3_g153266 = ( 0.0 );
				TVEVisualData Data3_g153266 = (TVEVisualData)0;
				half Dummy205_g153245 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g153266 = Dummy205_g153245;
				float localBreakData4_g153267 = ( 0.0 );
				float localCompData3_g153239 = ( 0.0 );
				TVEVisualData Data3_g153239 = (TVEVisualData)0;
				half Dummy220_g153236 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g153239 = Dummy220_g153236;
				float localBreakData4_g153238 = ( 0.0 );
				float localCompData3_g153152 = ( 0.0 );
				TVEVisualData Data3_g153152 = (TVEVisualData)0;
				float In_Dummy3_g153152 = 0.0;
				float4 output0 = 0;
				float4 output1 = 0;
				float4 output2 = 0;
				OctaImpostorFragment( o, positionCS, positionWS, packedInput.UVsFrame122_g151868, packedInput.UVsFrame222_g151868, packedInput.UVsFrame322_g151868, packedInput.octaframe22_g151868, packedInput.viewPos22_g151868, output0, output1, output2 );
				float4 temp_cast_0 = (1.0).xxxx;
				half4 Input_Tex0377_g153142 = output0;
				half4 Input_Tex1379_g153142 = output1;
				float4 temp_cast_3 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch403_g153142 = temp_cast_3;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch403_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch403_g153142 = temp_cast_3;
				#endif
				half Local_MultiMask249_g153142 = (staticSwitch403_g153142).b;
				float lerpResult289_g153142 = lerp( 1.0 , Local_MultiMask249_g153142 , _ImpostorColorMode);
				float3 lerpResult292_g153142 = lerp( (_ImpostorColorTwo).rgb , (_ImpostorColor).rgb , lerpResult289_g153142);
				half3 Local_Albedo239_g153142 = ( o.Albedo * lerpResult292_g153142 );
				float3 In_Albedo3_g153152 = Local_Albedo239_g153142;
				float3 In_AlbedoRaw3_g153152 = Local_Albedo239_g153142;
				float2 temp_cast_4 = (0.5).xx;
				float2 In_NormalTS3_g153152 = temp_cast_4;
				float3 In_NormalWS3_g153152 = o.Normal;
				float4 temp_cast_5 = (1.0).xxxx;
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch385_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch385_g153142 = temp_cast_6;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch385_g153142 = temp_cast_7;
				#endif
				half Local_Metallic247_g153142 = (staticSwitch385_g153142).r;
				half Final_Metallic238_g153142 = ( Local_Metallic247_g153142 * _ImpostorMetallicValue );
				float4 temp_cast_8 = (1.0).xxxx;
				float4 temp_cast_9 = (1.0).xxxx;
				float4 temp_cast_10 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch392_g153142 = temp_cast_10;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch392_g153142 = temp_cast_9;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch392_g153142 = temp_cast_10;
				#endif
				half Local_OcclusionOrEmissive248_g153142 = (staticSwitch392_g153142).g;
				float lerpResult431_g153142 = lerp( 1.0 , Local_OcclusionOrEmissive248_g153142 , _ImpostorOcclusionValue);
				#ifdef TVE_EMISSIVE
				float staticSwitch428_g153142 = 1.0;
				#else
				float staticSwitch428_g153142 = lerpResult431_g153142;
				#endif
				half Final_Occlusion424_g153142 = staticSwitch428_g153142;
				float4 temp_cast_11 = (1.0).xxxx;
				float4 temp_cast_12 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch408_g153142 = temp_cast_12;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch408_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch408_g153142 = temp_cast_12;
				#endif
				half Local_Smoothness250_g153142 = (staticSwitch408_g153142).a;
				half Final_Smoothness233_g153142 = ( Local_Smoothness250_g153142 * _ImpostorSmoothnessValue );
				float4 appendResult257_g153142 = (float4(Final_Metallic238_g153142 , Final_Occlusion424_g153142 , 1.0 , Final_Smoothness233_g153142));
				float4 In_Shader3_g153152 = appendResult257_g153142;
				float4 appendResult286_g153142 = (float4(Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , 1.0));
				float4 In_Emissive3_g153152 = appendResult286_g153142;
				float3 temp_output_3_0_g153143 = Local_Albedo239_g153142;
				float dotResult20_g153143 = dot( temp_output_3_0_g153143 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale268_g153142 = dotResult20_g153143;
				float In_Grayscale3_g153152 = Local_Grayscale268_g153142;
				float clampResult267_g153142 = clamp( saturate( ( Local_Grayscale268_g153142 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity269_g153142 = clampResult267_g153142;
				float In_Luminosity3_g153152 = Local_Luminosity269_g153142;
				float In_MultiMask3_g153152 = Local_MultiMask249_g153142;
				float In_AlphaClip3_g153152 = 0.0;
				float In_AlphaFade3_g153152 = 1.0;
				float3 temp_cast_13 = (1.0).xxx;
				float3 In_Translucency3_g153152 = temp_cast_13;
				float In_Transmission3_g153152 = 1.0;
				float In_Thickness3_g153152 = 0.0;
				float In_Diffusion3_g153152 = 0.0;
				Data3_g153152.Dummy = In_Dummy3_g153152;
				Data3_g153152.Albedo = In_Albedo3_g153152;
				Data3_g153152.AlbedoRaw = In_AlbedoRaw3_g153152;
				Data3_g153152.NormalTS = In_NormalTS3_g153152;
				Data3_g153152.NormalWS = In_NormalWS3_g153152;
				Data3_g153152.Shader = In_Shader3_g153152;
				Data3_g153152.Emissive= In_Emissive3_g153152;
				Data3_g153152.MultiMask = In_MultiMask3_g153152;
				Data3_g153152.Grayscale = In_Grayscale3_g153152;
				Data3_g153152.Luminosity = In_Luminosity3_g153152;
				Data3_g153152.AlphaClip = In_AlphaClip3_g153152;
				Data3_g153152.AlphaFade = In_AlphaFade3_g153152;
				Data3_g153152.Translucency = In_Translucency3_g153152;
				Data3_g153152.Transmission = In_Transmission3_g153152;
				Data3_g153152.Thickness = In_Thickness3_g153152;
				Data3_g153152.Diffusion = In_Diffusion3_g153152;
				TVEVisualData Data4_g153238 = Data3_g153152;
				float Out_Dummy4_g153238 = 0;
				float3 Out_Albedo4_g153238 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153238 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153238 = float2( 0,0 );
				float3 Out_NormalWS4_g153238 = float3( 0,0,0 );
				float4 Out_Shader4_g153238 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153238 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153238 = 0;
				float Out_Grayscale4_g153238 = 0;
				float Out_Luminosity4_g153238 = 0;
				float Out_AlphaClip4_g153238 = 0;
				float Out_AlphaFade4_g153238 = 0;
				float3 Out_Translucency4_g153238 = float3( 0,0,0 );
				float Out_Transmission4_g153238 = 0;
				float Out_Thickness4_g153238 = 0;
				float Out_Diffusion4_g153238 = 0;
				Out_Dummy4_g153238 = Data4_g153238.Dummy;
				Out_Albedo4_g153238 = Data4_g153238.Albedo;
				Out_AlbedoRaw4_g153238 = Data4_g153238.AlbedoRaw;
				Out_NormalTS4_g153238 = Data4_g153238.NormalTS;
				Out_NormalWS4_g153238 = Data4_g153238.NormalWS;
				Out_Shader4_g153238 = Data4_g153238.Shader;
				Out_Emissive4_g153238= Data4_g153238.Emissive;
				Out_MultiMask4_g153238 = Data4_g153238.MultiMask;
				Out_Grayscale4_g153238 = Data4_g153238.Grayscale;
				Out_Luminosity4_g153238= Data4_g153238.Luminosity;
				Out_AlphaClip4_g153238 = Data4_g153238.AlphaClip;
				Out_AlphaFade4_g153238 = Data4_g153238.AlphaFade;
				Out_Translucency4_g153238 = Data4_g153238.Translucency;
				Out_Transmission4_g153238 = Data4_g153238.Transmission;
				Out_Thickness4_g153238 = Data4_g153238.Thickness;
				Out_Diffusion4_g153238 = Data4_g153238.Diffusion;
				half3 Visual_Albedo127_g153236 = Out_Albedo4_g153238;
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				half3 Input_PositionWS319_g153142 = GetAbsolutePositionWS( positionWS );
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 vertexToFrag305_g153142 = packedInput.ase_texcoord13.xyz;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				half3 Model_Normal_WS314_g153142 = packedInput.interp01;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_14 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = output2;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_17 = (1.0).xxxx;
				float4 temp_cast_18 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_18;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_17;
				#else
				float4 staticSwitch414_g153142 = temp_cast_18;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153244 = Data16_g153151;
				float Out_Dummy15_g153244 = 0;
				float3 Out_PositionWS15_g153244 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153244 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153244 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153244 = float3( 0,0,0 );
				float4 Out_VertexData15_g153244 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153244 = float4( 0,0,0,0 );
				Out_Dummy15_g153244 = Data15_g153244.Dummy;
				Out_PositionWS15_g153244 = Data15_g153244.PositionWS;
				Out_PositionWO15_g153244 = Data15_g153244.PositionWO;
				Out_PivotWS15_g153244 = Data15_g153244.PivotWS;
				Out_PivotWO15_g153244 = Data15_g153244.PivotWO;
				Out_NormalWS15_g153244 = Data15_g153244.NormalWS;
				Out_ViewDirWS15_g153244 = Data15_g153244.ViewDirWS;
				Out_VertexData15_g153244 = Data15_g153244.VertexData;
				Out_BoundsData15_g153244 = Data15_g153244.BoundsData;
				half3 Model_PositionWO224_g153236 = Out_PositionWO15_g153244;
				half3 Model_PivotWO239_g153236 = Out_PivotWO15_g153244;
				float3 lerpResult242_g153236 = lerp( Model_PositionWO224_g153236 , Model_PivotWO239_g153236 , _VariationNoisePivotValue);
				float4 tex3DNode60_g153240 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g153236 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g153242 = clamp( tex3DNode60_g153240.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g153243 = _VariationNoiseRemap.x;
				float temp_output_10_0_g153243 = ( _VariationNoiseRemap.y - temp_output_7_0_g153243 );
				float temp_output_238_0_g153236 = saturate( ( ( clampResult17_g153242 - temp_output_7_0_g153243 ) / ( temp_output_10_0_g153243 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g153236 = temp_output_238_0_g153236;
				half Variaton_Mask200_g153236 = Variaton_NoiseMask82_g153236;
				float3 lerpResult75_g153236 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g153236);
				float temp_output_162_11_g153236 = Out_MultiMask4_g153238;
				half Visual_MultiMask196_g153236 = temp_output_162_11_g153236;
				float lerpResult190_g153236 = lerp( 1.0 , Visual_MultiMask196_g153236 , _VariationMultiValue);
				half Variaton_MultiMask194_g153236 = lerpResult190_g153236;
				float3 lerpResult186_g153236 = lerp( Visual_Albedo127_g153236 , ( Visual_Albedo127_g153236 * lerpResult75_g153236 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g153236 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g153236 = lerpResult186_g153236;
				#else
				float3 staticSwitch171_g153236 = Visual_Albedo127_g153236;
				#endif
				half3 Final_Albedo160_g153236 = staticSwitch171_g153236;
				float3 In_Albedo3_g153239 = Final_Albedo160_g153236;
				float3 In_AlbedoRaw3_g153239 = Final_Albedo160_g153236;
				float2 In_NormalTS3_g153239 = Out_NormalTS4_g153238;
				float3 In_NormalWS3_g153239 = Out_NormalWS4_g153238;
				float4 In_Shader3_g153239 = Out_Shader4_g153238;
				float4 In_Emissive3_g153239 = Out_Emissive4_g153238;
				float3 temp_output_3_0_g153237 = Final_Albedo160_g153236;
				float dotResult20_g153237 = dot( temp_output_3_0_g153237 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g153236 = dotResult20_g153237;
				float In_Grayscale3_g153239 = Final_Grayscale164_g153236;
				float clampResult180_g153236 = clamp( saturate( ( Final_Grayscale164_g153236 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g153236 = clampResult180_g153236;
				float In_Luminosity3_g153239 = Final_Luminosity181_g153236;
				float In_MultiMask3_g153239 = temp_output_162_11_g153236;
				float In_AlphaClip3_g153239 = Out_AlphaClip4_g153238;
				float In_AlphaFade3_g153239 = Out_AlphaFade4_g153238;
				float3 In_Translucency3_g153239 = Out_Translucency4_g153238;
				float In_Transmission3_g153239 = Out_Transmission4_g153238;
				float In_Thickness3_g153239 = Out_Thickness4_g153238;
				float In_Diffusion3_g153239 = Out_Diffusion4_g153238;
				Data3_g153239.Dummy = In_Dummy3_g153239;
				Data3_g153239.Albedo = In_Albedo3_g153239;
				Data3_g153239.AlbedoRaw = In_AlbedoRaw3_g153239;
				Data3_g153239.NormalTS = In_NormalTS3_g153239;
				Data3_g153239.NormalWS = In_NormalWS3_g153239;
				Data3_g153239.Shader = In_Shader3_g153239;
				Data3_g153239.Emissive= In_Emissive3_g153239;
				Data3_g153239.MultiMask = In_MultiMask3_g153239;
				Data3_g153239.Grayscale = In_Grayscale3_g153239;
				Data3_g153239.Luminosity = In_Luminosity3_g153239;
				Data3_g153239.AlphaClip = In_AlphaClip3_g153239;
				Data3_g153239.AlphaFade = In_AlphaFade3_g153239;
				Data3_g153239.Translucency = In_Translucency3_g153239;
				Data3_g153239.Transmission = In_Transmission3_g153239;
				Data3_g153239.Thickness = In_Thickness3_g153239;
				Data3_g153239.Diffusion = In_Diffusion3_g153239;
				TVEVisualData Data4_g153267 = Data3_g153239;
				float Out_Dummy4_g153267 = 0;
				float3 Out_Albedo4_g153267 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153267 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153267 = float2( 0,0 );
				float3 Out_NormalWS4_g153267 = float3( 0,0,0 );
				float4 Out_Shader4_g153267 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153267 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153267 = 0;
				float Out_Grayscale4_g153267 = 0;
				float Out_Luminosity4_g153267 = 0;
				float Out_AlphaClip4_g153267 = 0;
				float Out_AlphaFade4_g153267 = 0;
				float3 Out_Translucency4_g153267 = float3( 0,0,0 );
				float Out_Transmission4_g153267 = 0;
				float Out_Thickness4_g153267 = 0;
				float Out_Diffusion4_g153267 = 0;
				Out_Dummy4_g153267 = Data4_g153267.Dummy;
				Out_Albedo4_g153267 = Data4_g153267.Albedo;
				Out_AlbedoRaw4_g153267 = Data4_g153267.AlbedoRaw;
				Out_NormalTS4_g153267 = Data4_g153267.NormalTS;
				Out_NormalWS4_g153267 = Data4_g153267.NormalWS;
				Out_Shader4_g153267 = Data4_g153267.Shader;
				Out_Emissive4_g153267= Data4_g153267.Emissive;
				Out_MultiMask4_g153267 = Data4_g153267.MultiMask;
				Out_Grayscale4_g153267 = Data4_g153267.Grayscale;
				Out_Luminosity4_g153267= Data4_g153267.Luminosity;
				Out_AlphaClip4_g153267 = Data4_g153267.AlphaClip;
				Out_AlphaFade4_g153267 = Data4_g153267.AlphaFade;
				Out_Translucency4_g153267 = Data4_g153267.Translucency;
				Out_Transmission4_g153267 = Data4_g153267.Transmission;
				Out_Thickness4_g153267 = Data4_g153267.Thickness;
				Out_Diffusion4_g153267 = Data4_g153267.Diffusion;
				half3 Visual_Albedo139_g153245 = Out_Albedo4_g153267;
				float temp_output_200_12_g153245 = Out_Grayscale4_g153267;
				half Visual_Grayscale150_g153245 = temp_output_200_12_g153245;
				float3 temp_cast_20 = (Visual_Grayscale150_g153245).xxx;
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153246 = Data204_g153153;
				float Out_Dummy15_g153246 = 0;
				float4 Out_CoatParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153246 = float4( 0,0,0,0 );
				Out_Dummy15_g153246 = Data15_g153246.Dummy;
				Out_CoatParams15_g153246 = Data15_g153246.CoatParams;
				Out_PaintParams15_g153246 = Data15_g153246.PaintParams;
				Out_GlowParams15_g153246 = Data15_g153246.GlowParams;
				Out_AtmoParams15_g153246= Data15_g153246.AtmoParams;
				Out_FadeParams15_g153246= Data15_g153246.FadeParams;
				Out_FormParams15_g153246 = Data15_g153246.FormParams;
				Out_LandParams15_g153246 = Data15_g153246.LandParams;
				Out_WindParams15_g153246 = Data15_g153246.WindParams;
				Out_PushParams15_g153246 = Data15_g153246.PushParams;
				half4 Global_PaintParams209_g153245 = Out_PaintParams15_g153246;
				float temp_output_6_0_g153247 = ( saturate( (Global_PaintParams209_g153245).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g153247 = ( temp_output_6_0_g153247 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g153247 = temp_output_6_0_g153247;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g153245 = staticSwitch14_g153247;
				#else
				float staticSwitch283_g153245 = 1.0;
				#endif
				half Tinting_GlobalValue285_g153245 = staticSwitch283_g153245;
				float3 lerpResult368_g153245 = lerp( Visual_Albedo139_g153245 , temp_cast_20 , ( Tinting_GlobalValue285_g153245 * _TintingGrayValue ));
				float3 temp_cast_49 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g153245 = (Global_PaintParams209_g153245).xyz;
				#else
				float3 staticSwitch288_g153245 = temp_cast_49;
				#endif
				half3 Tinting_ColorGlobal290_g153245 = staticSwitch288_g153245;
				float temp_output_200_11_g153245 = Out_MultiMask4_g153267;
				half Visual_MultiMask181_g153245 = temp_output_200_11_g153245;
				float lerpResult147_g153245 = lerp( 1.0 , Visual_MultiMask181_g153245 , _TintingMultiValue);
				half Tinting_MutiMask121_g153245 = lerpResult147_g153245;
				half Tinting_TexMask385_g153245 = 1.0;
				float temp_output_200_15_g153245 = Out_Luminosity4_g153267;
				half Visual_Luminosity257_g153245 = temp_output_200_15_g153245;
				float clampResult17_g153259 = clamp( Visual_Luminosity257_g153245 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153258 = _TintingLumaRemap.x;
				float temp_output_10_0_g153258 = ( _TintingLumaRemap.y - temp_output_7_0_g153258 );
				float lerpResult228_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153259 - temp_output_7_0_g153258 ) / ( temp_output_10_0_g153258 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g153245 = lerpResult228_g153245;
				TVEModelData Data15_g153268 = Data16_g153151;
				float Out_Dummy15_g153268 = 0;
				float3 Out_PositionWS15_g153268 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153268 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153268 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153268 = float3( 0,0,0 );
				float4 Out_VertexData15_g153268 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153268 = float4( 0,0,0,0 );
				Out_Dummy15_g153268 = Data15_g153268.Dummy;
				Out_PositionWS15_g153268 = Data15_g153268.PositionWS;
				Out_PositionWO15_g153268 = Data15_g153268.PositionWO;
				Out_PivotWS15_g153268 = Data15_g153268.PivotWS;
				Out_PivotWO15_g153268 = Data15_g153268.PivotWO;
				Out_NormalWS15_g153268 = Data15_g153268.NormalWS;
				Out_ViewDirWS15_g153268 = Data15_g153268.ViewDirWS;
				Out_VertexData15_g153268 = Data15_g153268.VertexData;
				Out_BoundsData15_g153268 = Data15_g153268.BoundsData;
				half4 Model_VertexMasks307_g153245 = Out_VertexData15_g153268;
				float4 break311_g153245 = Model_VertexMasks307_g153245;
				float4 break33_g153251 = _tinting_vert_mode;
				float temp_output_30_0_g153251 = ( break311_g153245.x * break33_g153251.x );
				float temp_output_29_0_g153251 = ( break311_g153245.y * break33_g153251.y );
				float temp_output_31_0_g153251 = ( break311_g153245.z * break33_g153251.z );
				float temp_output_28_0_g153251 = ( temp_output_30_0_g153251 + temp_output_29_0_g153251 + temp_output_31_0_g153251 + ( break311_g153245.w * break33_g153251.w ) );
				float clampResult17_g153257 = clamp( temp_output_28_0_g153251 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153256 = _TintingMeshRemap.x;
				float temp_output_10_0_g153256 = ( _TintingMeshRemap.y - temp_output_7_0_g153256 );
				float lerpResult370_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153257 - temp_output_7_0_g153256 ) / ( temp_output_10_0_g153256 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g153260 = lerpResult370_g153245;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153260 = ( temp_output_6_0_g153260 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153260 = temp_output_6_0_g153260;
				#endif
				float temp_output_333_0_g153245 = staticSwitch14_g153260;
				half Tinting_VertMask309_g153245 = temp_output_333_0_g153245;
				half Tinting_NoiseMask213_g153245 = 1.0;
				half Custom_Mask345_g153245 = 1.0;
				float temp_output_7_0_g153254 = _TintingBlendRemap.x;
				float temp_output_10_0_g153254 = ( _TintingBlendRemap.y - temp_output_7_0_g153254 );
				half Tinting_Mask242_g153245 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g153245 * Tinting_TexMask385_g153245 * Tinting_LumaMask153_g153245 * Tinting_VertMask309_g153245 * Tinting_NoiseMask213_g153245 * Tinting_GlobalValue285_g153245 * Custom_Mask345_g153245 ) - temp_output_7_0_g153254 ) / ( temp_output_10_0_g153254 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g153245 = lerp( Visual_Albedo139_g153245 , ( lerpResult368_g153245 * 4.594794 * Tinting_ColorGlobal290_g153245 * (_TintingColor).rgb ) , Tinting_Mask242_g153245);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g153245 = lerpResult90_g153245;
				#else
				float3 staticSwitch286_g153245 = Visual_Albedo139_g153245;
				#endif
				half3 Final_Albedo97_g153245 = staticSwitch286_g153245;
				float3 In_Albedo3_g153266 = Final_Albedo97_g153245;
				float3 In_AlbedoRaw3_g153266 = Out_AlbedoRaw4_g153267;
				float2 In_NormalTS3_g153266 = Out_NormalTS4_g153267;
				float3 In_NormalWS3_g153266 = Out_NormalWS4_g153267;
				float4 In_Shader3_g153266 = Out_Shader4_g153267;
				float4 In_Emissive3_g153266 = Out_Emissive4_g153267;
				float In_Grayscale3_g153266 = temp_output_200_12_g153245;
				float In_Luminosity3_g153266 = temp_output_200_15_g153245;
				float In_MultiMask3_g153266 = temp_output_200_11_g153245;
				float In_AlphaClip3_g153266 = Out_AlphaClip4_g153267;
				float In_AlphaFade3_g153266 = Out_AlphaFade4_g153267;
				float3 In_Translucency3_g153266 = Out_Translucency4_g153267;
				float In_Transmission3_g153266 = Out_Transmission4_g153267;
				float In_Thickness3_g153266 = Out_Thickness4_g153267;
				float In_Diffusion3_g153266 = Out_Diffusion4_g153267;
				Data3_g153266.Dummy = In_Dummy3_g153266;
				Data3_g153266.Albedo = In_Albedo3_g153266;
				Data3_g153266.AlbedoRaw = In_AlbedoRaw3_g153266;
				Data3_g153266.NormalTS = In_NormalTS3_g153266;
				Data3_g153266.NormalWS = In_NormalWS3_g153266;
				Data3_g153266.Shader = In_Shader3_g153266;
				Data3_g153266.Emissive= In_Emissive3_g153266;
				Data3_g153266.MultiMask = In_MultiMask3_g153266;
				Data3_g153266.Grayscale = In_Grayscale3_g153266;
				Data3_g153266.Luminosity = In_Luminosity3_g153266;
				Data3_g153266.AlphaClip = In_AlphaClip3_g153266;
				Data3_g153266.AlphaFade = In_AlphaFade3_g153266;
				Data3_g153266.Translucency = In_Translucency3_g153266;
				Data3_g153266.Transmission = In_Transmission3_g153266;
				Data3_g153266.Thickness = In_Thickness3_g153266;
				Data3_g153266.Diffusion = In_Diffusion3_g153266;
				TVEVisualData Data4_g153271 = Data3_g153266;
				float Out_Dummy4_g153271 = 0;
				float3 Out_Albedo4_g153271 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153271 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153271 = float2( 0,0 );
				float3 Out_NormalWS4_g153271 = float3( 0,0,0 );
				float4 Out_Shader4_g153271 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153271 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153271 = 0;
				float Out_Grayscale4_g153271 = 0;
				float Out_Luminosity4_g153271 = 0;
				float Out_AlphaClip4_g153271 = 0;
				float Out_AlphaFade4_g153271 = 0;
				float3 Out_Translucency4_g153271 = float3( 0,0,0 );
				float Out_Transmission4_g153271 = 0;
				float Out_Thickness4_g153271 = 0;
				float Out_Diffusion4_g153271 = 0;
				Out_Dummy4_g153271 = Data4_g153271.Dummy;
				Out_Albedo4_g153271 = Data4_g153271.Albedo;
				Out_AlbedoRaw4_g153271 = Data4_g153271.AlbedoRaw;
				Out_NormalTS4_g153271 = Data4_g153271.NormalTS;
				Out_NormalWS4_g153271 = Data4_g153271.NormalWS;
				Out_Shader4_g153271 = Data4_g153271.Shader;
				Out_Emissive4_g153271= Data4_g153271.Emissive;
				Out_MultiMask4_g153271 = Data4_g153271.MultiMask;
				Out_Grayscale4_g153271 = Data4_g153271.Grayscale;
				Out_Luminosity4_g153271= Data4_g153271.Luminosity;
				Out_AlphaClip4_g153271 = Data4_g153271.AlphaClip;
				Out_AlphaFade4_g153271 = Data4_g153271.AlphaFade;
				Out_Translucency4_g153271 = Data4_g153271.Translucency;
				Out_Transmission4_g153271 = Data4_g153271.Transmission;
				Out_Thickness4_g153271 = Data4_g153271.Thickness;
				Out_Diffusion4_g153271 = Data4_g153271.Diffusion;
				half3 Visual_Albedo292_g153269 = Out_Albedo4_g153271;
				float temp_output_280_12_g153269 = Out_Grayscale4_g153271;
				half Visual_Grayscale308_g153269 = temp_output_280_12_g153269;
				float3 temp_cast_50 = (Visual_Grayscale308_g153269).xxx;
				TVEGlobalData Data15_g153270 = Data204_g153153;
				float Out_Dummy15_g153270 = 0;
				float4 Out_CoatParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153270 = float4( 0,0,0,0 );
				Out_Dummy15_g153270 = Data15_g153270.Dummy;
				Out_CoatParams15_g153270 = Data15_g153270.CoatParams;
				Out_PaintParams15_g153270 = Data15_g153270.PaintParams;
				Out_GlowParams15_g153270 = Data15_g153270.GlowParams;
				Out_AtmoParams15_g153270= Data15_g153270.AtmoParams;
				Out_FadeParams15_g153270= Data15_g153270.FadeParams;
				Out_FormParams15_g153270 = Data15_g153270.FormParams;
				Out_LandParams15_g153270 = Data15_g153270.LandParams;
				Out_WindParams15_g153270 = Data15_g153270.WindParams;
				Out_PushParams15_g153270 = Data15_g153270.PushParams;
				half4 Global_AtmoParams314_g153269 = Out_AtmoParams15_g153270;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g153269 = ( (Global_AtmoParams314_g153269).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g153269 = 1.0;
				#endif
				half Dryness_GlobalMask352_g153269 = staticSwitch351_g153269;
				float3 lerpResult485_g153269 = lerp( Visual_Albedo292_g153269 , temp_cast_50 , ( Dryness_GlobalMask352_g153269 * _DrynessGrayValue ));
				half3 hsvTorgb58_g153290 = RGBToHSV( lerpResult485_g153269 );
				half3 hsvTorgb61_g153290 = HSVToRGB( half3(( hsvTorgb58_g153290.x + _DrynessShiftValue ),hsvTorgb58_g153290.y,hsvTorgb58_g153290.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g153269 = hsvTorgb61_g153290;
				#else
				float3 staticSwitch499_g153269 = lerpResult485_g153269;
				#endif
				half Dryness_TexMask478_g153269 = 1.0;
				float temp_output_280_11_g153269 = Out_MultiMask4_g153271;
				half Visual_MultiMask310_g153269 = temp_output_280_11_g153269;
				float lerpResult283_g153269 = lerp( 1.0 , Visual_MultiMask310_g153269 , _DrynessMultiValue);
				half Dryness_MultiMask302_g153269 = lerpResult283_g153269;
				float temp_output_280_15_g153269 = Out_Luminosity4_g153271;
				half Visual_Luminosity309_g153269 = temp_output_280_15_g153269;
				float clampResult17_g153285 = clamp( Visual_Luminosity309_g153269 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153284 = _DrynessLumaRemap.x;
				float temp_output_10_0_g153284 = ( _DrynessLumaRemap.y - temp_output_7_0_g153284 );
				float lerpResult295_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153285 - temp_output_7_0_g153284 ) / ( temp_output_10_0_g153284 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g153269 = lerpResult295_g153269;
				TVEModelData Data15_g153291 = Data16_g153151;
				float Out_Dummy15_g153291 = 0;
				float3 Out_PositionWS15_g153291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153291 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153291 = float3( 0,0,0 );
				float4 Out_VertexData15_g153291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153291 = float4( 0,0,0,0 );
				Out_Dummy15_g153291 = Data15_g153291.Dummy;
				Out_PositionWS15_g153291 = Data15_g153291.PositionWS;
				Out_PositionWO15_g153291 = Data15_g153291.PositionWO;
				Out_PivotWS15_g153291 = Data15_g153291.PivotWS;
				Out_PivotWO15_g153291 = Data15_g153291.PivotWO;
				Out_NormalWS15_g153291 = Data15_g153291.NormalWS;
				Out_ViewDirWS15_g153291 = Data15_g153291.ViewDirWS;
				Out_VertexData15_g153291 = Data15_g153291.VertexData;
				Out_BoundsData15_g153291 = Data15_g153291.BoundsData;
				half4 Model_VertexMasks386_g153269 = Out_VertexData15_g153291;
				float4 break375_g153269 = Model_VertexMasks386_g153269;
				float4 break33_g153278 = _dryness_vert_mode;
				float temp_output_30_0_g153278 = ( break375_g153269.x * break33_g153278.x );
				float temp_output_29_0_g153278 = ( break375_g153269.y * break33_g153278.y );
				float temp_output_31_0_g153278 = ( break375_g153269.z * break33_g153278.z );
				float temp_output_28_0_g153278 = ( temp_output_30_0_g153278 + temp_output_29_0_g153278 + temp_output_31_0_g153278 + ( break375_g153269.w * break33_g153278.w ) );
				float clampResult17_g153279 = clamp( temp_output_28_0_g153278 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153280 = _DrynessMeshRemap.x;
				float temp_output_10_0_g153280 = ( _DrynessMeshRemap.y - temp_output_7_0_g153280 );
				float lerpResult452_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153279 - temp_output_7_0_g153280 ) / ( temp_output_10_0_g153280 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g153286 = lerpResult452_g153269;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153286 = ( temp_output_6_0_g153286 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153286 = temp_output_6_0_g153286;
				#endif
				float temp_output_448_0_g153269 = staticSwitch14_g153286;
				half Dryness_VertMask378_g153269 = temp_output_448_0_g153269;
				half Dryness_MaskNoise291_g153269 = 1.0;
				half Custom_Mask411_g153269 = 1.0;
				float temp_output_7_0_g153283 = _DrynessBlendRemap.x;
				float temp_output_10_0_g153283 = ( _DrynessBlendRemap.y - temp_output_7_0_g153283 );
				half Dryness_Mask329_g153269 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g153269 * Dryness_MultiMask302_g153269 * Dryness_LumaMask301_g153269 * Dryness_VertMask378_g153269 * Dryness_MaskNoise291_g153269 * Dryness_GlobalMask352_g153269 * Custom_Mask411_g153269 ) - temp_output_7_0_g153283 ) / ( temp_output_10_0_g153283 + 0.0001 ) ) );
				float3 lerpResult336_g153269 = lerp( Visual_Albedo292_g153269 , ( staticSwitch499_g153269 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g153269 = lerpResult336_g153269;
				#else
				float3 staticSwitch356_g153269 = Visual_Albedo292_g153269;
				#endif
				half3 Final_Albedo331_g153269 = staticSwitch356_g153269;
				float3 In_Albedo3_g153272 = Final_Albedo331_g153269;
				float3 In_AlbedoRaw3_g153272 = Out_AlbedoRaw4_g153271;
				float2 In_NormalTS3_g153272 = Out_NormalTS4_g153271;
				float3 In_NormalWS3_g153272 = Out_NormalWS4_g153271;
				half4 Visual_Shader415_g153269 = Out_Shader4_g153271;
				float4 break438_g153269 = Visual_Shader415_g153269;
				float4 appendResult439_g153269 = (float4(break438_g153269.x , break438_g153269.y , break438_g153269.z , ( break438_g153269.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g153269 = lerp( Visual_Shader415_g153269 , appendResult439_g153269 , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g153269 = lerpResult427_g153269;
				#else
				float4 staticSwitch426_g153269 = Visual_Shader415_g153269;
				#endif
				half4 Final_Shader433_g153269 = staticSwitch426_g153269;
				float4 In_Shader3_g153272 = Final_Shader433_g153269;
				float4 In_Emissive3_g153272 = Out_Emissive4_g153271;
				float In_Grayscale3_g153272 = temp_output_280_12_g153269;
				float In_Luminosity3_g153272 = temp_output_280_15_g153269;
				float In_MultiMask3_g153272 = temp_output_280_11_g153269;
				float In_AlphaClip3_g153272 = Out_AlphaClip4_g153271;
				float In_AlphaFade3_g153272 = Out_AlphaFade4_g153271;
				float3 In_Translucency3_g153272 = Out_Translucency4_g153271;
				half Visual_Transmission416_g153269 = Out_Transmission4_g153271;
				float lerpResult421_g153269 = lerp( Visual_Transmission416_g153269 , ( Visual_Transmission416_g153269 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g153269 = lerpResult421_g153269;
				#else
				float staticSwitch418_g153269 = Visual_Transmission416_g153269;
				#endif
				half Final_Transmission425_g153269 = staticSwitch418_g153269;
				float In_Transmission3_g153272 = Final_Transmission425_g153269;
				float In_Thickness3_g153272 = Out_Thickness4_g153271;
				float In_Diffusion3_g153272 = Out_Diffusion4_g153271;
				Data3_g153272.Dummy = In_Dummy3_g153272;
				Data3_g153272.Albedo = In_Albedo3_g153272;
				Data3_g153272.AlbedoRaw = In_AlbedoRaw3_g153272;
				Data3_g153272.NormalTS = In_NormalTS3_g153272;
				Data3_g153272.NormalWS = In_NormalWS3_g153272;
				Data3_g153272.Shader = In_Shader3_g153272;
				Data3_g153272.Emissive= In_Emissive3_g153272;
				Data3_g153272.MultiMask = In_MultiMask3_g153272;
				Data3_g153272.Grayscale = In_Grayscale3_g153272;
				Data3_g153272.Luminosity = In_Luminosity3_g153272;
				Data3_g153272.AlphaClip = In_AlphaClip3_g153272;
				Data3_g153272.AlphaFade = In_AlphaFade3_g153272;
				Data3_g153272.Translucency = In_Translucency3_g153272;
				Data3_g153272.Transmission = In_Transmission3_g153272;
				Data3_g153272.Thickness = In_Thickness3_g153272;
				Data3_g153272.Diffusion = In_Diffusion3_g153272;
				TVEVisualData Data4_g153293 = Data3_g153272;
				float Out_Dummy4_g153293 = 0;
				float3 Out_Albedo4_g153293 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153293 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153293 = float2( 0,0 );
				float3 Out_NormalWS4_g153293 = float3( 0,0,0 );
				float4 Out_Shader4_g153293 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153293 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153293 = 0;
				float Out_Grayscale4_g153293 = 0;
				float Out_Luminosity4_g153293 = 0;
				float Out_AlphaClip4_g153293 = 0;
				float Out_AlphaFade4_g153293 = 0;
				float3 Out_Translucency4_g153293 = float3( 0,0,0 );
				float Out_Transmission4_g153293 = 0;
				float Out_Thickness4_g153293 = 0;
				float Out_Diffusion4_g153293 = 0;
				Out_Dummy4_g153293 = Data4_g153293.Dummy;
				Out_Albedo4_g153293 = Data4_g153293.Albedo;
				Out_AlbedoRaw4_g153293 = Data4_g153293.AlbedoRaw;
				Out_NormalTS4_g153293 = Data4_g153293.NormalTS;
				Out_NormalWS4_g153293 = Data4_g153293.NormalWS;
				Out_Shader4_g153293 = Data4_g153293.Shader;
				Out_Emissive4_g153293= Data4_g153293.Emissive;
				Out_MultiMask4_g153293 = Data4_g153293.MultiMask;
				Out_Grayscale4_g153293 = Data4_g153293.Grayscale;
				Out_Luminosity4_g153293= Data4_g153293.Luminosity;
				Out_AlphaClip4_g153293 = Data4_g153293.AlphaClip;
				Out_AlphaFade4_g153293 = Data4_g153293.AlphaFade;
				Out_Translucency4_g153293 = Data4_g153293.Translucency;
				Out_Transmission4_g153293 = Data4_g153293.Transmission;
				Out_Thickness4_g153293 = Data4_g153293.Thickness;
				Out_Diffusion4_g153293 = Data4_g153293.Diffusion;
				half3 Visual_Albedo127_g153292 = Out_Albedo4_g153293;
				float3 temp_output_622_0_g153292 = (_OverlayColor).rgb;
				half Overlay_TexMask908_g153292 = 1.0;
				float3 temp_output_739_21_g153292 = Out_NormalWS4_g153293;
				half3 Visual_NormalWS749_g153292 = temp_output_739_21_g153292;
				float clampResult17_g153313 = clamp( saturate( (Visual_NormalWS749_g153292).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g153312 = _OverlayProjRemap.x;
				float temp_output_10_0_g153312 = ( _OverlayProjRemap.y - temp_output_7_0_g153312 );
				float lerpResult842_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153313 - temp_output_7_0_g153312 ) / ( temp_output_10_0_g153312 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g153292 = lerpResult842_g153292;
				float temp_output_739_15_g153292 = Out_Luminosity4_g153293;
				half Visual_Luminosity654_g153292 = temp_output_739_15_g153292;
				float clampResult17_g153315 = clamp( Visual_Luminosity654_g153292 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153314 = _OverlayLumaRemap.x;
				float temp_output_10_0_g153314 = ( _OverlayLumaRemap.y - temp_output_7_0_g153314 );
				float lerpResult587_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153315 - temp_output_7_0_g153314 ) / ( temp_output_10_0_g153314 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g153292 = lerpResult587_g153292;
				TVEModelData Data15_g153327 = Data16_g153151;
				float Out_Dummy15_g153327 = 0;
				float3 Out_PositionWS15_g153327 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153327 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153327 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153327 = float3( 0,0,0 );
				float4 Out_VertexData15_g153327 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153327 = float4( 0,0,0,0 );
				Out_Dummy15_g153327 = Data15_g153327.Dummy;
				Out_PositionWS15_g153327 = Data15_g153327.PositionWS;
				Out_PositionWO15_g153327 = Data15_g153327.PositionWO;
				Out_PivotWS15_g153327 = Data15_g153327.PivotWS;
				Out_PivotWO15_g153327 = Data15_g153327.PivotWO;
				Out_NormalWS15_g153327 = Data15_g153327.NormalWS;
				Out_ViewDirWS15_g153327 = Data15_g153327.ViewDirWS;
				Out_VertexData15_g153327 = Data15_g153327.VertexData;
				Out_BoundsData15_g153327 = Data15_g153327.BoundsData;
				half4 Model_VertexMasks791_g153292 = Out_VertexData15_g153327;
				float4 break792_g153292 = Model_VertexMasks791_g153292;
				float4 break33_g153305 = _overlay_vert_mode;
				float temp_output_30_0_g153305 = ( break792_g153292.x * break33_g153305.x );
				float temp_output_29_0_g153305 = ( break792_g153292.y * break33_g153305.y );
				float temp_output_31_0_g153305 = ( break792_g153292.z * break33_g153305.z );
				float temp_output_28_0_g153305 = ( temp_output_30_0_g153305 + temp_output_29_0_g153305 + temp_output_31_0_g153305 + ( break792_g153292.w * break33_g153305.w ) );
				float clampResult17_g153306 = clamp( temp_output_28_0_g153305 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153309 = _OverlayMeshRemap.x;
				float temp_output_10_0_g153309 = ( _OverlayMeshRemap.y - temp_output_7_0_g153309 );
				float lerpResult881_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153306 - temp_output_7_0_g153309 ) / ( temp_output_10_0_g153309 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g153316 = lerpResult881_g153292;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153316 = ( temp_output_6_0_g153316 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153316 = temp_output_6_0_g153316;
				#endif
				float temp_output_831_0_g153292 = staticSwitch14_g153316;
				half Overlay_VertMask801_g153292 = temp_output_831_0_g153292;
				half Overlay_MaskNoise427_g153292 = 1.0;
				TVEGlobalData Data15_g153294 = Data204_g153153;
				float Out_Dummy15_g153294 = 0;
				float4 Out_CoatParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153294 = float4( 0,0,0,0 );
				Out_Dummy15_g153294 = Data15_g153294.Dummy;
				Out_CoatParams15_g153294 = Data15_g153294.CoatParams;
				Out_PaintParams15_g153294 = Data15_g153294.PaintParams;
				Out_GlowParams15_g153294 = Data15_g153294.GlowParams;
				Out_AtmoParams15_g153294= Data15_g153294.AtmoParams;
				Out_FadeParams15_g153294= Data15_g153294.FadeParams;
				Out_FormParams15_g153294 = Data15_g153294.FormParams;
				Out_LandParams15_g153294 = Data15_g153294.LandParams;
				Out_WindParams15_g153294 = Data15_g153294.WindParams;
				Out_PushParams15_g153294 = Data15_g153294.PushParams;
				half4 Global_AtmoParams516_g153292 = Out_AtmoParams15_g153294;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g153292 = ( (Global_AtmoParams516_g153292).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g153292 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g153292 = staticSwitch705_g153292;
				half Custom_Mask646_g153292 = 1.0;
				float temp_output_7_0_g153321 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g153321 = ( _OverlayBlendRemap1.y - temp_output_7_0_g153321 );
				half Overlay_Mask494_g153292 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g153292 * Overlay_MaskProj457_g153292 * Overlay_MaskLuma438_g153292 * Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 * Custom_Mask646_g153292 ) - temp_output_7_0_g153321 ) / ( temp_output_10_0_g153321 + 0.0001 ) ) );
				float3 lerpResult467_g153292 = lerp( Visual_Albedo127_g153292 , temp_output_622_0_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g153292 = lerpResult467_g153292;
				#else
				float3 staticSwitch577_g153292 = Visual_Albedo127_g153292;
				#endif
				half3 Final_Albedo493_g153292 = staticSwitch577_g153292;
				float3 In_Albedo3_g153295 = Final_Albedo493_g153292;
				float3 In_AlbedoRaw3_g153295 = Out_AlbedoRaw4_g153293;
				half2 Visual_NormalTS535_g153292 = Out_NormalTS4_g153293;
				float2 lerpResult551_g153292 = lerp( Visual_NormalTS535_g153292 , ( Visual_NormalTS535_g153292 * _OverlayNormalValue ) , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g153292 = lerpResult551_g153292;
				#else
				float2 staticSwitch583_g153292 = Visual_NormalTS535_g153292;
				#endif
				half2 Final_NormalTS499_g153292 = staticSwitch583_g153292;
				float2 In_NormalTS3_g153295 = Final_NormalTS499_g153292;
				float3 In_NormalWS3_g153295 = temp_output_739_21_g153292;
				half4 Visual_Masks536_g153292 = Out_Shader4_g153293;
				float4 appendResult585_g153292 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g153292 = lerp( Visual_Masks536_g153292 , appendResult585_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g153292 = lerpResult584_g153292;
				#else
				float4 staticSwitch586_g153292 = Visual_Masks536_g153292;
				#endif
				half4 Final_Masks482_g153292 = staticSwitch586_g153292;
				float4 In_Shader3_g153295 = Final_Masks482_g153292;
				float4 In_Emissive3_g153295 = Out_Emissive4_g153293;
				float temp_output_739_12_g153292 = Out_Grayscale4_g153293;
				float In_Grayscale3_g153295 = temp_output_739_12_g153292;
				float In_Luminosity3_g153295 = temp_output_739_15_g153292;
				float In_MultiMask3_g153295 = Out_MultiMask4_g153293;
				float In_AlphaClip3_g153295 = Out_AlphaClip4_g153293;
				float In_AlphaFade3_g153295 = Out_AlphaFade4_g153293;
				float3 In_Translucency3_g153295 = Out_Translucency4_g153293;
				half Visual_Transmission699_g153292 = Out_Transmission4_g153293;
				float lerpResult746_g153292 = lerp( Visual_Transmission699_g153292 , ( Visual_Transmission699_g153292 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g153292 = lerpResult746_g153292;
				#else
				float staticSwitch703_g153292 = Visual_Transmission699_g153292;
				#endif
				half Final_Transmission702_g153292 = staticSwitch703_g153292;
				float In_Transmission3_g153295 = Final_Transmission702_g153292;
				float In_Thickness3_g153295 = Out_Thickness4_g153293;
				float In_Diffusion3_g153295 = Out_Diffusion4_g153293;
				Data3_g153295.Dummy = In_Dummy3_g153295;
				Data3_g153295.Albedo = In_Albedo3_g153295;
				Data3_g153295.AlbedoRaw = In_AlbedoRaw3_g153295;
				Data3_g153295.NormalTS = In_NormalTS3_g153295;
				Data3_g153295.NormalWS = In_NormalWS3_g153295;
				Data3_g153295.Shader = In_Shader3_g153295;
				Data3_g153295.Emissive= In_Emissive3_g153295;
				Data3_g153295.MultiMask = In_MultiMask3_g153295;
				Data3_g153295.Grayscale = In_Grayscale3_g153295;
				Data3_g153295.Luminosity = In_Luminosity3_g153295;
				Data3_g153295.AlphaClip = In_AlphaClip3_g153295;
				Data3_g153295.AlphaFade = In_AlphaFade3_g153295;
				Data3_g153295.Translucency = In_Translucency3_g153295;
				Data3_g153295.Transmission = In_Transmission3_g153295;
				Data3_g153295.Thickness = In_Thickness3_g153295;
				Data3_g153295.Diffusion = In_Diffusion3_g153295;
				TVEVisualData Data4_g153329 = Data3_g153295;
				float Out_Dummy4_g153329 = 0;
				float3 Out_Albedo4_g153329 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153329 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153329 = float2( 0,0 );
				float3 Out_NormalWS4_g153329 = float3( 0,0,0 );
				float4 Out_Shader4_g153329 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153329 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153329 = 0;
				float Out_Grayscale4_g153329 = 0;
				float Out_Luminosity4_g153329 = 0;
				float Out_AlphaClip4_g153329 = 0;
				float Out_AlphaFade4_g153329 = 0;
				float3 Out_Translucency4_g153329 = float3( 0,0,0 );
				float Out_Transmission4_g153329 = 0;
				float Out_Thickness4_g153329 = 0;
				float Out_Diffusion4_g153329 = 0;
				Out_Dummy4_g153329 = Data4_g153329.Dummy;
				Out_Albedo4_g153329 = Data4_g153329.Albedo;
				Out_AlbedoRaw4_g153329 = Data4_g153329.AlbedoRaw;
				Out_NormalTS4_g153329 = Data4_g153329.NormalTS;
				Out_NormalWS4_g153329 = Data4_g153329.NormalWS;
				Out_Shader4_g153329 = Data4_g153329.Shader;
				Out_Emissive4_g153329= Data4_g153329.Emissive;
				Out_MultiMask4_g153329 = Data4_g153329.MultiMask;
				Out_Grayscale4_g153329 = Data4_g153329.Grayscale;
				Out_Luminosity4_g153329= Data4_g153329.Luminosity;
				Out_AlphaClip4_g153329 = Data4_g153329.AlphaClip;
				Out_AlphaFade4_g153329 = Data4_g153329.AlphaFade;
				Out_Translucency4_g153329 = Data4_g153329.Translucency;
				Out_Transmission4_g153329 = Data4_g153329.Transmission;
				Out_Thickness4_g153329 = Data4_g153329.Thickness;
				Out_Diffusion4_g153329 = Data4_g153329.Diffusion;
				half3 Visual_Albedo127_g153328 = Out_Albedo4_g153329;
				float3 lerpResult768_g153328 = lerp( Visual_Albedo127_g153328 , ( Visual_Albedo127_g153328 * Visual_Albedo127_g153328 ) , _WetnessContrastValue);
				TVEGlobalData Data15_g153334 = Data204_g153153;
				float Out_Dummy15_g153334 = 0;
				float4 Out_CoatParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153334 = float4( 0,0,0,0 );
				Out_Dummy15_g153334 = Data15_g153334.Dummy;
				Out_CoatParams15_g153334 = Data15_g153334.CoatParams;
				Out_PaintParams15_g153334 = Data15_g153334.PaintParams;
				Out_GlowParams15_g153334 = Data15_g153334.GlowParams;
				Out_AtmoParams15_g153334= Data15_g153334.AtmoParams;
				Out_FadeParams15_g153334= Data15_g153334.FadeParams;
				Out_FormParams15_g153334 = Data15_g153334.FormParams;
				Out_LandParams15_g153334 = Data15_g153334.LandParams;
				Out_WindParams15_g153334 = Data15_g153334.WindParams;
				Out_PushParams15_g153334 = Data15_g153334.PushParams;
				half4 Global_AtmoParams516_g153328 = Out_AtmoParams15_g153334;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g153328 = ( (Global_AtmoParams516_g153328).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g153328 = 1.0;
				#endif
				half Global_Wetness429_g153328 = staticSwitch663_g153328;
				half Wetness_Value1042_g153328 = ( _WetnessIntensityValue * Global_Wetness429_g153328 );
				half Wetness_VertMask1024_g153328 = 1.0;
				float temp_output_1043_0_g153328 = ( Wetness_Value1042_g153328 * Wetness_VertMask1024_g153328 );
				half Wetness_Mask866_g153328 = temp_output_1043_0_g153328;
				float3 lerpResult651_g153328 = lerp( Visual_Albedo127_g153328 , lerpResult768_g153328 , Wetness_Mask866_g153328);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g153328 = lerpResult651_g153328;
				#else
				float3 staticSwitch577_g153328 = Visual_Albedo127_g153328;
				#endif
				half3 Final_Albedo493_g153328 = staticSwitch577_g153328;
				float3 In_Albedo3_g153330 = Final_Albedo493_g153328;
				float3 In_AlbedoRaw3_g153330 = Out_AlbedoRaw4_g153329;
				half2 Visual_Normal535_g153328 = Out_NormalTS4_g153329;
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#else
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#endif
				half2 Final_Normal499_g153328 = staticSwitch774_g153328;
				float2 In_NormalTS3_g153330 = Final_Normal499_g153328;
				float3 In_NormalWS3_g153330 = Out_NormalWS4_g153329;
				half4 Visual_Masks536_g153328 = Out_Shader4_g153329;
				float4 break658_g153328 = Visual_Masks536_g153328;
				float temp_output_935_0_g153328 = ( Wetness_Mask866_g153328 * _WetnessSmoothnessValue );
				float4 appendResult661_g153328 = (float4(break658_g153328.x , break658_g153328.y , break658_g153328.z , saturate( ( break658_g153328.w + temp_output_935_0_g153328 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g153328 = appendResult661_g153328;
				#else
				float4 staticSwitch586_g153328 = Visual_Masks536_g153328;
				#endif
				half4 Final_Masks482_g153328 = staticSwitch586_g153328;
				float4 In_Shader3_g153330 = Final_Masks482_g153328;
				float4 In_Emissive3_g153330 = Out_Emissive4_g153329;
				float In_Grayscale3_g153330 = Out_Grayscale4_g153329;
				float In_Luminosity3_g153330 = Out_Luminosity4_g153329;
				float In_MultiMask3_g153330 = Out_MultiMask4_g153329;
				float In_AlphaClip3_g153330 = Out_AlphaClip4_g153329;
				float In_AlphaFade3_g153330 = Out_AlphaFade4_g153329;
				float3 In_Translucency3_g153330 = Out_Translucency4_g153329;
				float In_Transmission3_g153330 = Out_Transmission4_g153329;
				float In_Thickness3_g153330 = Out_Thickness4_g153329;
				float In_Diffusion3_g153330 = Out_Diffusion4_g153329;
				Data3_g153330.Dummy = In_Dummy3_g153330;
				Data3_g153330.Albedo = In_Albedo3_g153330;
				Data3_g153330.AlbedoRaw = In_AlbedoRaw3_g153330;
				Data3_g153330.NormalTS = In_NormalTS3_g153330;
				Data3_g153330.NormalWS = In_NormalWS3_g153330;
				Data3_g153330.Shader = In_Shader3_g153330;
				Data3_g153330.Emissive= In_Emissive3_g153330;
				Data3_g153330.MultiMask = In_MultiMask3_g153330;
				Data3_g153330.Grayscale = In_Grayscale3_g153330;
				Data3_g153330.Luminosity = In_Luminosity3_g153330;
				Data3_g153330.AlphaClip = In_AlphaClip3_g153330;
				Data3_g153330.AlphaFade = In_AlphaFade3_g153330;
				Data3_g153330.Translucency = In_Translucency3_g153330;
				Data3_g153330.Transmission = In_Transmission3_g153330;
				Data3_g153330.Thickness = In_Thickness3_g153330;
				Data3_g153330.Diffusion = In_Diffusion3_g153330;
				TVEVisualData Data4_g153368 = Data3_g153330;
				float Out_Dummy4_g153368 = 0;
				float3 Out_Albedo4_g153368 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153368 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153368 = float2( 0,0 );
				float3 Out_NormalWS4_g153368 = float3( 0,0,0 );
				float4 Out_Shader4_g153368 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153368 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153368 = 0;
				float Out_Grayscale4_g153368 = 0;
				float Out_Luminosity4_g153368 = 0;
				float Out_AlphaClip4_g153368 = 0;
				float Out_AlphaFade4_g153368 = 0;
				float3 Out_Translucency4_g153368 = float3( 0,0,0 );
				float Out_Transmission4_g153368 = 0;
				float Out_Thickness4_g153368 = 0;
				float Out_Diffusion4_g153368 = 0;
				Out_Dummy4_g153368 = Data4_g153368.Dummy;
				Out_Albedo4_g153368 = Data4_g153368.Albedo;
				Out_AlbedoRaw4_g153368 = Data4_g153368.AlbedoRaw;
				Out_NormalTS4_g153368 = Data4_g153368.NormalTS;
				Out_NormalWS4_g153368 = Data4_g153368.NormalWS;
				Out_Shader4_g153368 = Data4_g153368.Shader;
				Out_Emissive4_g153368= Data4_g153368.Emissive;
				Out_MultiMask4_g153368 = Data4_g153368.MultiMask;
				Out_Grayscale4_g153368 = Data4_g153368.Grayscale;
				Out_Luminosity4_g153368= Data4_g153368.Luminosity;
				Out_AlphaClip4_g153368 = Data4_g153368.AlphaClip;
				Out_AlphaFade4_g153368 = Data4_g153368.AlphaFade;
				Out_Translucency4_g153368 = Data4_g153368.Translucency;
				Out_Transmission4_g153368 = Data4_g153368.Transmission;
				Out_Thickness4_g153368 = Data4_g153368.Thickness;
				Out_Diffusion4_g153368 = Data4_g153368.Diffusion;
				float3 In_Albedo3_g153358 = Out_Albedo4_g153368;
				float3 In_AlbedoRaw3_g153358 = Out_AlbedoRaw4_g153368;
				float2 In_NormalTS3_g153358 = Out_NormalTS4_g153368;
				float3 In_NormalWS3_g153358 = Out_NormalWS4_g153368;
				float4 In_Shader3_g153358 = Out_Shader4_g153368;
				float4 In_Emissive3_g153358 = Out_Emissive4_g153368;
				float In_Grayscale3_g153358 = Out_Grayscale4_g153368;
				float In_Luminosity3_g153358 = Out_Luminosity4_g153368;
				float temp_output_836_11_g153357 = Out_MultiMask4_g153368;
				float In_MultiMask3_g153358 = temp_output_836_11_g153357;
				half Visual_AlphaClip667_g153357 = Out_AlphaClip4_g153368;
				half Input_True57_g153365 = Visual_AlphaClip667_g153357;
				half True36_g153365 = Input_True57_g153365;
				TVEGlobalData Data15_g153367 = Data204_g153153;
				float Out_Dummy15_g153367 = 0;
				float4 Out_CoatParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153367 = float4( 0,0,0,0 );
				Out_Dummy15_g153367 = Data15_g153367.Dummy;
				Out_CoatParams15_g153367 = Data15_g153367.CoatParams;
				Out_PaintParams15_g153367 = Data15_g153367.PaintParams;
				Out_GlowParams15_g153367 = Data15_g153367.GlowParams;
				Out_AtmoParams15_g153367= Data15_g153367.AtmoParams;
				Out_FadeParams15_g153367= Data15_g153367.FadeParams;
				Out_FormParams15_g153367 = Data15_g153367.FormParams;
				Out_LandParams15_g153367 = Data15_g153367.LandParams;
				Out_WindParams15_g153367 = Data15_g153367.WindParams;
				Out_PushParams15_g153367 = Data15_g153367.PushParams;
				half4 Global_FadeParams516_g153357 = Out_FadeParams15_g153367;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g153357 = saturate( (Global_FadeParams516_g153357).w );
				#else
				float staticSwitch663_g153357 = 1.0;
				#endif
				half Local_GlobalMask429_g153357 = staticSwitch663_g153357;
				half Local_AlphaMask814_g153357 = 1.0;
				TVEModelData Data15_g153369 = Data16_g153151;
				float Out_Dummy15_g153369 = 0;
				float3 Out_PositionWS15_g153369 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153369 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153369 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153369 = float3( 0,0,0 );
				float4 Out_VertexData15_g153369 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153369 = float4( 0,0,0,0 );
				Out_Dummy15_g153369 = Data15_g153369.Dummy;
				Out_PositionWS15_g153369 = Data15_g153369.PositionWS;
				Out_PositionWO15_g153369 = Data15_g153369.PositionWO;
				Out_PivotWS15_g153369 = Data15_g153369.PivotWS;
				Out_PivotWO15_g153369 = Data15_g153369.PivotWO;
				Out_NormalWS15_g153369 = Data15_g153369.NormalWS;
				Out_ViewDirWS15_g153369 = Data15_g153369.ViewDirWS;
				Out_VertexData15_g153369 = Data15_g153369.VertexData;
				Out_BoundsData15_g153369 = Data15_g153369.BoundsData;
				half3 Model_PositionWO602_g153357 = Out_PositionWO15_g153369;
				float4 tex3DNode60_g153361 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g153357 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g153357 = lerp( 1.0 , tex3DNode60_g153361.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g153357 = lerpResult673_g153357;
				half4 Model_VertexMasks752_g153357 = Out_VertexData15_g153369;
				float4 break755_g153357 = Model_VertexMasks752_g153357;
				float4 break33_g153359 = _cutout_vert_mode;
				float temp_output_30_0_g153359 = ( break755_g153357.x * break33_g153359.x );
				float temp_output_29_0_g153359 = ( break755_g153357.y * break33_g153359.y );
				float temp_output_31_0_g153359 = ( break755_g153357.z * break33_g153359.z );
				float temp_output_28_0_g153359 = ( temp_output_30_0_g153359 + temp_output_29_0_g153359 + temp_output_31_0_g153359 + ( break755_g153357.w * break33_g153359.w ) );
				float clampResult17_g153360 = clamp( temp_output_28_0_g153359 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153363 = _CutoutMeshRemap.x;
				float temp_output_10_0_g153363 = ( _CutoutMeshRemap.y - temp_output_7_0_g153363 );
				float lerpResult820_g153357 = lerp( 1.0 , saturate( ( ( clampResult17_g153360 - temp_output_7_0_g153363 ) / ( temp_output_10_0_g153363 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g153364 = lerpResult820_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153364 = ( temp_output_6_0_g153364 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153364 = temp_output_6_0_g153364;
				#endif
				float temp_output_801_0_g153357 = staticSwitch14_g153364;
				half Local_VertMask766_g153357 = temp_output_801_0_g153357;
				half Visual_MultiMask671_g153357 = temp_output_836_11_g153357;
				float lerpResult683_g153357 = lerp( 1.0 , Visual_MultiMask671_g153357 , _CutoutMultiValue);
				half Local_MultiMask685_g153357 = lerpResult683_g153357;
				float lerpResult728_g153357 = lerp( Visual_AlphaClip667_g153357 , min( Visual_AlphaClip667_g153357 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g153357 ) - ( Local_AlphaMask814_g153357 * Local_NoiseMask678_g153357 * Local_VertMask766_g153357 ) ) ) ) , Local_MultiMask685_g153357);
				half Local_AlphaClip784_g153357 = lerpResult728_g153357;
				half Input_False58_g153365 = Local_AlphaClip784_g153357;
				half False36_g153365 = Input_False58_g153365;
				half localShadowPassCheck36_g153365 = ShadowPassCheck36_g153365( True36_g153365 , False36_g153365 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g153357 = Local_AlphaClip784_g153357;
				#else
				float staticSwitch791_g153357 = localShadowPassCheck36_g153365;
				#endif
				float temp_output_6_0_g153366 = staticSwitch791_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153366 = ( temp_output_6_0_g153366 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153366 = temp_output_6_0_g153366;
				#endif
				float temp_output_798_0_g153357 = staticSwitch14_g153366;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g153357 = temp_output_798_0_g153357;
				#else
				float staticSwitch577_g153357 = Visual_AlphaClip667_g153357;
				#endif
				half Final_AlphaClip795_g153357 = staticSwitch577_g153357;
				float In_AlphaClip3_g153358 = Final_AlphaClip795_g153357;
				float In_AlphaFade3_g153358 = Out_AlphaFade4_g153368;
				float3 In_Translucency3_g153358 = Out_Translucency4_g153368;
				float In_Transmission3_g153358 = Out_Transmission4_g153368;
				float In_Thickness3_g153358 = Out_Thickness4_g153368;
				float In_Diffusion3_g153358 = Out_Diffusion4_g153368;
				Data3_g153358.Dummy = In_Dummy3_g153358;
				Data3_g153358.Albedo = In_Albedo3_g153358;
				Data3_g153358.AlbedoRaw = In_AlbedoRaw3_g153358;
				Data3_g153358.NormalTS = In_NormalTS3_g153358;
				Data3_g153358.NormalWS = In_NormalWS3_g153358;
				Data3_g153358.Shader = In_Shader3_g153358;
				Data3_g153358.Emissive= In_Emissive3_g153358;
				Data3_g153358.MultiMask = In_MultiMask3_g153358;
				Data3_g153358.Grayscale = In_Grayscale3_g153358;
				Data3_g153358.Luminosity = In_Luminosity3_g153358;
				Data3_g153358.AlphaClip = In_AlphaClip3_g153358;
				Data3_g153358.AlphaFade = In_AlphaFade3_g153358;
				Data3_g153358.Translucency = In_Translucency3_g153358;
				Data3_g153358.Transmission = In_Transmission3_g153358;
				Data3_g153358.Thickness = In_Thickness3_g153358;
				Data3_g153358.Diffusion = In_Diffusion3_g153358;
				TVEVisualData Data4_g153372 = Data3_g153358;
				float Out_Dummy4_g153372 = 0;
				float3 Out_Albedo4_g153372 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153372 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153372 = float2( 0,0 );
				float3 Out_NormalWS4_g153372 = float3( 0,0,0 );
				float4 Out_Shader4_g153372 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153372 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153372 = 0;
				float Out_Grayscale4_g153372 = 0;
				float Out_Luminosity4_g153372 = 0;
				float Out_AlphaClip4_g153372 = 0;
				float Out_AlphaFade4_g153372 = 0;
				float3 Out_Translucency4_g153372 = float3( 0,0,0 );
				float Out_Transmission4_g153372 = 0;
				float Out_Thickness4_g153372 = 0;
				float Out_Diffusion4_g153372 = 0;
				Out_Dummy4_g153372 = Data4_g153372.Dummy;
				Out_Albedo4_g153372 = Data4_g153372.Albedo;
				Out_AlbedoRaw4_g153372 = Data4_g153372.AlbedoRaw;
				Out_NormalTS4_g153372 = Data4_g153372.NormalTS;
				Out_NormalWS4_g153372 = Data4_g153372.NormalWS;
				Out_Shader4_g153372 = Data4_g153372.Shader;
				Out_Emissive4_g153372= Data4_g153372.Emissive;
				Out_MultiMask4_g153372 = Data4_g153372.MultiMask;
				Out_Grayscale4_g153372 = Data4_g153372.Grayscale;
				Out_Luminosity4_g153372= Data4_g153372.Luminosity;
				Out_AlphaClip4_g153372 = Data4_g153372.AlphaClip;
				Out_AlphaFade4_g153372 = Data4_g153372.AlphaFade;
				Out_Translucency4_g153372 = Data4_g153372.Translucency;
				Out_Transmission4_g153372 = Data4_g153372.Transmission;
				Out_Thickness4_g153372 = Data4_g153372.Thickness;
				Out_Diffusion4_g153372 = Data4_g153372.Diffusion;
				float3 In_Albedo3_g153373 = Out_Albedo4_g153372;
				float3 In_AlbedoRaw3_g153373 = Out_AlbedoRaw4_g153372;
				float2 In_NormalTS3_g153373 = Out_NormalTS4_g153372;
				float3 In_NormalWS3_g153373 = Out_NormalWS4_g153372;
				float4 In_Shader3_g153373 = Out_Shader4_g153372;
				float4 In_Emissive3_g153373 = Out_Emissive4_g153372;
				float In_Grayscale3_g153373 = Out_Grayscale4_g153372;
				float In_Luminosity3_g153373 = Out_Luminosity4_g153372;
				float temp_output_821_11_g153370 = Out_MultiMask4_g153372;
				float In_MultiMask3_g153373 = temp_output_821_11_g153370;
				half Visual_AlphaClip754_g153370 = Out_AlphaClip4_g153372;
				half Input_True57_g153374 = Visual_AlphaClip754_g153370;
				half True36_g153374 = Input_True57_g153374;
				half Dither_Constant768_g153370 = _DitherConstantValue;
				TVEModelData Data15_g153379 = Data16_g153151;
				float Out_Dummy15_g153379 = 0;
				float3 Out_PositionWS15_g153379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153379 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153379 = float3( 0,0,0 );
				float4 Out_VertexData15_g153379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153379 = float4( 0,0,0,0 );
				Out_Dummy15_g153379 = Data15_g153379.Dummy;
				Out_PositionWS15_g153379 = Data15_g153379.PositionWS;
				Out_PositionWO15_g153379 = Data15_g153379.PositionWO;
				Out_PivotWS15_g153379 = Data15_g153379.PivotWS;
				Out_PivotWO15_g153379 = Data15_g153379.PivotWO;
				Out_NormalWS15_g153379 = Data15_g153379.NormalWS;
				Out_ViewDirWS15_g153379 = Data15_g153379.ViewDirWS;
				Out_VertexData15_g153379 = Data15_g153379.VertexData;
				Out_BoundsData15_g153379 = Data15_g153379.BoundsData;
				half3 Model_PositionWS776_g153370 = Out_PositionWS15_g153379;
				float temp_output_7_0_g153378 = _DitherDistanceMinValue;
				float temp_output_10_0_g153378 = ( _DitherDistanceMaxValue - temp_output_7_0_g153378 );
				half Dither_Distance856_g153370 = ( saturate( ( ( distance( Model_PositionWS776_g153370 , _WorldSpaceCameraPos ) - temp_output_7_0_g153378 ) / ( temp_output_10_0_g153378 + 0.0001 ) ) ) * _DitherDistanceValue );
				half Dither_Value429_g153370 = max( Dither_Constant768_g153370 , Dither_Distance856_g153370 );
				half3 Model_PositionWO602_g153370 = Out_PositionWO15_g153379;
				float4 tex3DNode60_g153376 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g153370 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g153370 = tex3DNode60_g153376.r;
				half Local_MaskNoise678_g153370 = temp_output_809_0_g153370;
				half Visual_MultiMask671_g153370 = temp_output_821_11_g153370;
				float lerpResult683_g153370 = lerp( 1.0 , Visual_MultiMask671_g153370 , _DitherMultiValue);
				half Local_MaskMulti685_g153370 = lerpResult683_g153370;
				half Custom_Mask826_g153370 = 1.0;
				float lerpResult728_g153370 = lerp( Visual_AlphaClip754_g153370 , min( Visual_AlphaClip754_g153370 , ( -0.001 - ( Dither_Value429_g153370 - Local_MaskNoise678_g153370 ) ) ) , ( Local_MaskMulti685_g153370 * Custom_Mask826_g153370 ));
				half Local_AlphaClip834_g153370 = lerpResult728_g153370;
				half Input_False58_g153374 = Local_AlphaClip834_g153370;
				half False36_g153374 = Input_False58_g153374;
				half localShadowPassCheck36_g153374 = ShadowPassCheck36_g153374( True36_g153374 , False36_g153374 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g153370 = Local_AlphaClip834_g153370;
				#else
				float staticSwitch831_g153370 = localShadowPassCheck36_g153374;
				#endif
				float temp_output_6_0_g153375 = staticSwitch831_g153370;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153375 = ( temp_output_6_0_g153375 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153375 = temp_output_6_0_g153375;
				#endif
				float temp_output_840_0_g153370 = staticSwitch14_g153375;
				#ifdef TVE_DITHER
				float staticSwitch577_g153370 = temp_output_840_0_g153370;
				#else
				float staticSwitch577_g153370 = Visual_AlphaClip754_g153370;
				#endif
				half Final_AlphaClip493_g153370 = staticSwitch577_g153370;
				float In_AlphaClip3_g153373 = Final_AlphaClip493_g153370;
				float In_AlphaFade3_g153373 = Out_AlphaFade4_g153372;
				float3 In_Translucency3_g153373 = Out_Translucency4_g153372;
				float In_Transmission3_g153373 = Out_Transmission4_g153372;
				float In_Thickness3_g153373 = Out_Thickness4_g153372;
				float In_Diffusion3_g153373 = Out_Diffusion4_g153372;
				Data3_g153373.Dummy = In_Dummy3_g153373;
				Data3_g153373.Albedo = In_Albedo3_g153373;
				Data3_g153373.AlbedoRaw = In_AlbedoRaw3_g153373;
				Data3_g153373.NormalTS = In_NormalTS3_g153373;
				Data3_g153373.NormalWS = In_NormalWS3_g153373;
				Data3_g153373.Shader = In_Shader3_g153373;
				Data3_g153373.Emissive= In_Emissive3_g153373;
				Data3_g153373.MultiMask = In_MultiMask3_g153373;
				Data3_g153373.Grayscale = In_Grayscale3_g153373;
				Data3_g153373.Luminosity = In_Luminosity3_g153373;
				Data3_g153373.AlphaClip = In_AlphaClip3_g153373;
				Data3_g153373.AlphaFade = In_AlphaFade3_g153373;
				Data3_g153373.Translucency = In_Translucency3_g153373;
				Data3_g153373.Transmission = In_Transmission3_g153373;
				Data3_g153373.Thickness = In_Thickness3_g153373;
				Data3_g153373.Diffusion = In_Diffusion3_g153373;
				TVEVisualData Data4_g153398 = Data3_g153373;
				float Out_Dummy4_g153398 = 0;
				float3 Out_Albedo4_g153398 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153398 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153398 = float2( 0,0 );
				float3 Out_NormalWS4_g153398 = float3( 0,0,0 );
				float4 Out_Shader4_g153398 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153398 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153398 = 0;
				float Out_Grayscale4_g153398 = 0;
				float Out_Luminosity4_g153398 = 0;
				float Out_AlphaClip4_g153398 = 0;
				float Out_AlphaFade4_g153398 = 0;
				float3 Out_Translucency4_g153398 = float3( 0,0,0 );
				float Out_Transmission4_g153398 = 0;
				float Out_Thickness4_g153398 = 0;
				float Out_Diffusion4_g153398 = 0;
				Out_Dummy4_g153398 = Data4_g153398.Dummy;
				Out_Albedo4_g153398 = Data4_g153398.Albedo;
				Out_AlbedoRaw4_g153398 = Data4_g153398.AlbedoRaw;
				Out_NormalTS4_g153398 = Data4_g153398.NormalTS;
				Out_NormalWS4_g153398 = Data4_g153398.NormalWS;
				Out_Shader4_g153398 = Data4_g153398.Shader;
				Out_Emissive4_g153398= Data4_g153398.Emissive;
				Out_MultiMask4_g153398 = Data4_g153398.MultiMask;
				Out_Grayscale4_g153398 = Data4_g153398.Grayscale;
				Out_Luminosity4_g153398= Data4_g153398.Luminosity;
				Out_AlphaClip4_g153398 = Data4_g153398.AlphaClip;
				Out_AlphaFade4_g153398 = Data4_g153398.AlphaFade;
				Out_Translucency4_g153398 = Data4_g153398.Translucency;
				Out_Transmission4_g153398 = Data4_g153398.Transmission;
				Out_Thickness4_g153398 = Data4_g153398.Thickness;
				Out_Diffusion4_g153398 = Data4_g153398.Diffusion;
				float3 temp_output_297_0_g153389 = Out_Albedo4_g153398;
				float3 In_Albedo3_g153399 = temp_output_297_0_g153389;
				float3 temp_output_297_23_g153389 = Out_AlbedoRaw4_g153398;
				float3 In_AlbedoRaw3_g153399 = temp_output_297_23_g153389;
				float2 In_NormalTS3_g153399 = Out_NormalTS4_g153398;
				float3 In_NormalWS3_g153399 = Out_NormalWS4_g153398;
				float4 In_Shader3_g153399 = Out_Shader4_g153398;
				float4 temp_cast_51 = (0.0).xxxx;
				half4 Visual_Emissive255_g153389 = Out_Emissive4_g153398;
				half Emissive_MeshMask221_g153389 = 1.0;
				half Emissive_Mask103_g153389 = 1.0;
				float temp_output_279_0_g153389 = ( Emissive_MeshMask221_g153389 * Emissive_Mask103_g153389 );
				float3 appendResult293_g153389 = (float3(temp_output_279_0_g153389 , temp_output_279_0_g153389 , temp_output_279_0_g153389));
				half3 Local_EmissiveColor278_g153389 = appendResult293_g153389;
				float3 temp_cast_52 = (1.0).xxx;
				TVEGlobalData Data15_g153390 = Data204_g153153;
				float Out_Dummy15_g153390 = 0;
				float4 Out_CoatParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153390 = float4( 0,0,0,0 );
				Out_Dummy15_g153390 = Data15_g153390.Dummy;
				Out_CoatParams15_g153390 = Data15_g153390.CoatParams;
				Out_PaintParams15_g153390 = Data15_g153390.PaintParams;
				Out_GlowParams15_g153390 = Data15_g153390.GlowParams;
				Out_AtmoParams15_g153390= Data15_g153390.AtmoParams;
				Out_FadeParams15_g153390= Data15_g153390.FadeParams;
				Out_FormParams15_g153390 = Data15_g153390.FormParams;
				Out_LandParams15_g153390 = Data15_g153390.LandParams;
				Out_WindParams15_g153390 = Data15_g153390.WindParams;
				Out_PushParams15_g153390 = Data15_g153390.PushParams;
				half4 Global_GlowParams179_g153389 = Out_GlowParams15_g153390;
				float3 lerpResult299_g153389 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g153389).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g153389 = lerpResult299_g153389;
				#else
				float3 staticSwitch228_g153389 = temp_cast_52;
				#endif
				half3 Emissive_GlobalMask248_g153389 = staticSwitch228_g153389;
				half3 Visual_AlbedoRaw306_g153389 = temp_output_297_23_g153389;
				float3 lerpResult307_g153389 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g153389 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g153389 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g153389 * lerpResult307_g153389 );
				half3 Emissive_Blend260_g153389 = ( ( (Visual_Emissive255_g153389).xyz * Local_EmissiveColor278_g153389 ) * Local_EmissiveValue88_g153389 );
				float3 temp_output_3_0_g153403 = Emissive_Blend260_g153389;
				float temp_output_15_0_g153403 = _emissive_power_value;
				float3 hdEmission22_g153403 = ASEGetEmissionHDRColor(temp_output_3_0_g153403,temp_output_15_0_g153403,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g153389 = temp_output_279_0_g153389;
				float4 appendResult295_g153389 = (float4(hdEmission22_g153403 , Local_EmissiveMask294_g153389));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g153389 = appendResult295_g153389;
				#else
				float4 staticSwitch129_g153389 = temp_cast_51;
				#endif
				half4 Final_Emissive184_g153389 = staticSwitch129_g153389;
				float4 In_Emissive3_g153399 = Final_Emissive184_g153389;
				float In_Grayscale3_g153399 = Out_Grayscale4_g153398;
				float In_Luminosity3_g153399 = Out_Luminosity4_g153398;
				float temp_output_297_11_g153389 = Out_MultiMask4_g153398;
				float In_MultiMask3_g153399 = temp_output_297_11_g153389;
				float In_AlphaClip3_g153399 = Out_AlphaClip4_g153398;
				float In_AlphaFade3_g153399 = Out_AlphaFade4_g153398;
				float3 In_Translucency3_g153399 = Out_Translucency4_g153398;
				float In_Transmission3_g153399 = Out_Transmission4_g153398;
				float In_Thickness3_g153399 = Out_Thickness4_g153398;
				float In_Diffusion3_g153399 = Out_Diffusion4_g153398;
				Data3_g153399.Dummy = In_Dummy3_g153399;
				Data3_g153399.Albedo = In_Albedo3_g153399;
				Data3_g153399.AlbedoRaw = In_AlbedoRaw3_g153399;
				Data3_g153399.NormalTS = In_NormalTS3_g153399;
				Data3_g153399.NormalWS = In_NormalWS3_g153399;
				Data3_g153399.Shader = In_Shader3_g153399;
				Data3_g153399.Emissive= In_Emissive3_g153399;
				Data3_g153399.MultiMask = In_MultiMask3_g153399;
				Data3_g153399.Grayscale = In_Grayscale3_g153399;
				Data3_g153399.Luminosity = In_Luminosity3_g153399;
				Data3_g153399.AlphaClip = In_AlphaClip3_g153399;
				Data3_g153399.AlphaFade = In_AlphaFade3_g153399;
				Data3_g153399.Translucency = In_Translucency3_g153399;
				Data3_g153399.Transmission = In_Transmission3_g153399;
				Data3_g153399.Thickness = In_Thickness3_g153399;
				Data3_g153399.Diffusion = In_Diffusion3_g153399;
				TVEVisualData Data4_g153445 = Data3_g153399;
				float Out_Dummy4_g153445 = 0;
				float3 Out_Albedo4_g153445 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153445 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153445 = float2( 0,0 );
				float3 Out_NormalWS4_g153445 = float3( 0,0,0 );
				float4 Out_Shader4_g153445 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153445 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153445 = 0;
				float Out_Grayscale4_g153445 = 0;
				float Out_Luminosity4_g153445 = 0;
				float Out_AlphaClip4_g153445 = 0;
				float Out_AlphaFade4_g153445 = 0;
				float3 Out_Translucency4_g153445 = float3( 0,0,0 );
				float Out_Transmission4_g153445 = 0;
				float Out_Thickness4_g153445 = 0;
				float Out_Diffusion4_g153445 = 0;
				Out_Dummy4_g153445 = Data4_g153445.Dummy;
				Out_Albedo4_g153445 = Data4_g153445.Albedo;
				Out_AlbedoRaw4_g153445 = Data4_g153445.AlbedoRaw;
				Out_NormalTS4_g153445 = Data4_g153445.NormalTS;
				Out_NormalWS4_g153445 = Data4_g153445.NormalWS;
				Out_Shader4_g153445 = Data4_g153445.Shader;
				Out_Emissive4_g153445= Data4_g153445.Emissive;
				Out_MultiMask4_g153445 = Data4_g153445.MultiMask;
				Out_Grayscale4_g153445 = Data4_g153445.Grayscale;
				Out_Luminosity4_g153445= Data4_g153445.Luminosity;
				Out_AlphaClip4_g153445 = Data4_g153445.AlphaClip;
				Out_AlphaFade4_g153445 = Data4_g153445.AlphaFade;
				Out_Translucency4_g153445 = Data4_g153445.Translucency;
				Out_Transmission4_g153445 = Data4_g153445.Transmission;
				Out_Thickness4_g153445 = Data4_g153445.Thickness;
				Out_Diffusion4_g153445 = Data4_g153445.Diffusion;
				half3 Visual_Albedo199_g153444 = Out_Albedo4_g153445;
				half3 Final_Albedo312_g153444 = Visual_Albedo199_g153444;
				float3 In_Albedo3_g153446 = Final_Albedo312_g153444;
				float3 In_AlbedoRaw3_g153446 = Out_AlbedoRaw4_g153445;
				float2 In_NormalTS3_g153446 = Out_NormalTS4_g153445;
				float3 In_NormalWS3_g153446 = Out_NormalWS4_g153445;
				float4 In_Shader3_g153446 = Out_Shader4_g153445;
				float4 In_Emissive3_g153446 = Out_Emissive4_g153445;
				float In_Grayscale3_g153446 = Out_Grayscale4_g153445;
				float In_Luminosity3_g153446 = Out_Luminosity4_g153445;
				float temp_output_301_11_g153444 = Out_MultiMask4_g153445;
				float In_MultiMask3_g153446 = temp_output_301_11_g153444;
				float In_AlphaClip3_g153446 = Out_AlphaClip4_g153445;
				float In_AlphaFade3_g153446 = Out_AlphaFade4_g153445;
				float3 temp_cast_53 = (0.0).xxx;
				half3 Subsurface_Color264_g153444 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g153444 );
				half Visual_Transmission138_g153444 = Out_Transmission4_g153445;
				half Subsurface_Value268_g153444 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g153447 = Data204_g153153;
				float Out_Dummy15_g153447 = 0;
				float4 Out_CoatParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153447 = float4( 0,0,0,0 );
				Out_Dummy15_g153447 = Data15_g153447.Dummy;
				Out_CoatParams15_g153447 = Data15_g153447.CoatParams;
				Out_PaintParams15_g153447 = Data15_g153447.PaintParams;
				Out_GlowParams15_g153447 = Data15_g153447.GlowParams;
				Out_AtmoParams15_g153447= Data15_g153447.AtmoParams;
				Out_FadeParams15_g153447= Data15_g153447.FadeParams;
				Out_FormParams15_g153447 = Data15_g153447.FormParams;
				Out_LandParams15_g153447 = Data15_g153447.LandParams;
				Out_WindParams15_g153447 = Data15_g153447.WindParams;
				Out_PushParams15_g153447 = Data15_g153447.PushParams;
				half4 Global_GlowParams373_g153444 = Out_GlowParams15_g153447;
				float lerpResult403_g153444 = lerp( 1.0 , saturate( (Global_GlowParams373_g153444).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g153444 = lerpResult403_g153444;
				#else
				float staticSwitch367_g153444 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g153444 = staticSwitch367_g153444;
				half Visual_MultiMask292_g153444 = temp_output_301_11_g153444;
				float lerpResult293_g153444 = lerp( 1.0 , Visual_MultiMask292_g153444 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g153444 = lerpResult293_g153444;
				half Custom_Mask363_g153444 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g153444 = ( Visual_Transmission138_g153444 * Subsurface_Value268_g153444 * Subsurface_GlobalMask369_g153444 * Subsurface_MultiMask296_g153444 * Custom_Mask363_g153444 );
				#else
				float staticSwitch345_g153444 = 0.0;
				#endif
				half Final_Transmission269_g153444 = staticSwitch345_g153444;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g153444 = ( Subsurface_Color264_g153444 * Final_Transmission269_g153444 * 10.0 );
				#else
				float3 staticSwitch348_g153444 = temp_cast_53;
				#endif
				half3 Final_Translucency254_g153444 = staticSwitch348_g153444;
				float3 In_Translucency3_g153446 = Final_Translucency254_g153444;
				float In_Transmission3_g153446 = Final_Transmission269_g153444;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g153444 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g153444 = 1.0;
				#endif
				half Final_Thickness275_g153444 = staticSwitch351_g153444;
				float In_Thickness3_g153446 = Final_Thickness275_g153444;
				float Final_Diffusion340_g153444 = _SubsurfaceDiffusion;
				float In_Diffusion3_g153446 = Final_Diffusion340_g153444;
				Data3_g153446.Dummy = In_Dummy3_g153446;
				Data3_g153446.Albedo = In_Albedo3_g153446;
				Data3_g153446.AlbedoRaw = In_AlbedoRaw3_g153446;
				Data3_g153446.NormalTS = In_NormalTS3_g153446;
				Data3_g153446.NormalWS = In_NormalWS3_g153446;
				Data3_g153446.Shader = In_Shader3_g153446;
				Data3_g153446.Emissive= In_Emissive3_g153446;
				Data3_g153446.MultiMask = In_MultiMask3_g153446;
				Data3_g153446.Grayscale = In_Grayscale3_g153446;
				Data3_g153446.Luminosity = In_Luminosity3_g153446;
				Data3_g153446.AlphaClip = In_AlphaClip3_g153446;
				Data3_g153446.AlphaFade = In_AlphaFade3_g153446;
				Data3_g153446.Translucency = In_Translucency3_g153446;
				Data3_g153446.Transmission = In_Transmission3_g153446;
				Data3_g153446.Thickness = In_Thickness3_g153446;
				Data3_g153446.Diffusion = In_Diffusion3_g153446;
				TVEVisualData Data4_g153454 = Data3_g153446;
				float Out_Dummy4_g153454 = 0;
				float3 Out_Albedo4_g153454 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153454 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153454 = float2( 0,0 );
				float3 Out_NormalWS4_g153454 = float3( 0,0,0 );
				float4 Out_Shader4_g153454 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153454 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153454 = 0;
				float Out_Grayscale4_g153454 = 0;
				float Out_Luminosity4_g153454 = 0;
				float Out_AlphaClip4_g153454 = 0;
				float Out_AlphaFade4_g153454 = 0;
				float3 Out_Translucency4_g153454 = float3( 0,0,0 );
				float Out_Transmission4_g153454 = 0;
				float Out_Thickness4_g153454 = 0;
				float Out_Diffusion4_g153454 = 0;
				Out_Dummy4_g153454 = Data4_g153454.Dummy;
				Out_Albedo4_g153454 = Data4_g153454.Albedo;
				Out_AlbedoRaw4_g153454 = Data4_g153454.AlbedoRaw;
				Out_NormalTS4_g153454 = Data4_g153454.NormalTS;
				Out_NormalWS4_g153454 = Data4_g153454.NormalWS;
				Out_Shader4_g153454 = Data4_g153454.Shader;
				Out_Emissive4_g153454= Data4_g153454.Emissive;
				Out_MultiMask4_g153454 = Data4_g153454.MultiMask;
				Out_Grayscale4_g153454 = Data4_g153454.Grayscale;
				Out_Luminosity4_g153454= Data4_g153454.Luminosity;
				Out_AlphaClip4_g153454 = Data4_g153454.AlphaClip;
				Out_AlphaFade4_g153454 = Data4_g153454.AlphaFade;
				Out_Translucency4_g153454 = Data4_g153454.Translucency;
				Out_Transmission4_g153454 = Data4_g153454.Transmission;
				Out_Thickness4_g153454 = Data4_g153454.Thickness;
				Out_Diffusion4_g153454 = Data4_g153454.Diffusion;
				float4 break24_g153451 = Out_Shader4_g153454;
				
				float localCustomAlphaClip19_g153463 = ( 0.0 );
				float temp_output_3_0_g153463 = Out_AlphaClip4_g153454;
				float Alpha19_g153463 = temp_output_3_0_g153463;
				float temp_output_15_0_g153463 = 0.0;
				float Treshold19_g153463 = temp_output_15_0_g153463;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#else
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#endif
				
				surfaceDescription.Smoothness = break24_g153451.w;
				surfaceDescription.Alpha = Alpha19_g153463;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = 0;
				#endif

				packedInput.positionCS.zw = positionCS.zw;
				float3 positionRWS = positionWS;
				float3 normalWS = o.Normal;
				float4 tangentWS = packedInput.interp02.xyzw;
				float4 texCoord0 = packedInput.interp03.xyzw;
				float4 texCoord1 = packedInput.interp04.xyzw;
				float4 texCoord2 = packedInput.interp05.xyzw;
				float4 texCoord3 = packedInput.interp06.xyzw;
				float4 vertexColor = packedInput.interp07.xyzw;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//input.worldToTangent = BuildWorldToTangent( tangentWS, normalWS );
				//#else
				input.tangentToWorld = BuildTangentToWorld( tangentWS, normalWS );
				//#endif
				input.texCoord0 = texCoord0;
				input.texCoord1 = texCoord1;
				input.texCoord2 = texCoord2;
				input.texCoord3 = texCoord3;
				input.color = vertexColor;

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir( input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GetSurfaceAndBuiltinData(surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData);

				outputDepth = posInput.deviceDepth;

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), posInput.positionSS, outNormalBuffer);
					#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.positionCS.z;
					#endif
				#endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "Motion Vectors"
			Tags { "LightMode"="MotionVectors" }
			Stencil
			{
				Ref 40
				WriteMask 40
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#pragma shader_feature_local_fragment _DISABLE_DECALS
			#pragma shader_feature_local_fragment _DISABLE_SSR
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define _AMBIENT_OCCLUSION 1
			#define ASE_SRP_VERSION 170003
			#ifdef UNITY_COLORSPACE_GAMMA//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301)//AI_SRP
			#else//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.04, 0.04, 0.04, 1.0 - 0.04) //AI_SRP
			#endif//AI_SRP
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex Vert
			#pragma fragment Frag

			#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Wind.hlsl"
			//#endif
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

			#define SHADERPASS SHADERPASS_VELOCITY
			#pragma multi_compile _ WRITE_NORMAL_BUFFER
			#pragma multi_compile _ WRITE_MSAA_DEPTH

			#define VARYINGS_NEED_POSITION_WS

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#define T2W(var, index) var.worldToTangent[index]
			//#else
			#define T2W(var, index) var.tangentToWorld[index]
			//#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ai_ObjectToWorld GetObjectToWorldMatrix()
			#define ai_WorldToObject GetWorldToObjectMatrix()
			#define AI_INV_TWO_PI  INV_TWO_PI
			#define AI_PI          PI
			#define AI_INV_PI      INV_PI
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_fragment TVE_IMPOSTOR_MASK_OFF TVE_IMPOSTOR_MASK_DEFAULT TVE_IMPOSTOR_MASK_PACKED TVE_IMPOSTOR_MASK_SHADING
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 texcoord : TEXCOORD0;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VaryingsMeshToPS
			{
				float4 positionCS : SV_Position;
				float3 positionRWS;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			struct AttributesPass
			{
				float3 previousPositionOS : TEXCOORD4;
			};

			struct VaryingsPassToPS
			{
				float4 positionCS;
				float4 previousPositionCS;
			};

			#define VARYINGS_NEED_PASS
			struct VaryingsToPS
			{
				VaryingsMeshToPS vmesh;
				VaryingsPassToPS vpass;
			};

			struct PackedVaryingsToPS
			{
				float4 vmeshPositionCS : SV_Position;
				float3 vmeshInterp00 : TEXCOORD0;
				float3 vpassInterpolators0 : TEXCOORD1;
				float3 vpassInterpolators1 : TEXCOORD2;
				float4 UVsFrame122_g151868 : TEXCOORD3;
				float4 UVsFrame222_g151868 : TEXCOORD4;
				float4 UVsFrame322_g151868 : TEXCOORD5;
				float4 octaframe22_g151868 : TEXCOORD6;
				float4 viewPos22_g151868 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START( UnityPerMaterial )
			float4 _AI_SizeOffset;
			half4 _TintingBlendRemap;
			half4 _OverlayBlendRemap1;
			half4 _VariationColorTwo;
			half4 _VariationColorOne;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _ImpostorColor;
			half4 _VariationNoiseRemap;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _dryness_vert_mode;
			float4 _TintingColor;
			half4 _DrynessLumaRemap;
			half4 _TintingLumaRemap;
			float4 _DrynessColor;
			half4 _tinting_vert_mode;
			half4 _OverlayColor;
			half4 _ImpostorColorTwo;
			half4 _TintingMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _SubsurfaceColor;
			float3 _AI_Offset;
			half _TintingMultiValue;
			half _WetnessBakeInfo;
			half _TintingIntensityValue;
			half _TintingLumaValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _OverlayEnd;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _OverlaySpace;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _WetnessElementMode;
			half _TintingBakeInfo;
			half _OverlayElementMode;
			half _VariationNoiseTillingValue;
			half _VariationCategory;
			half _VariationEnd;
			half _TintingSpace;
			half _ImpostorColorMode;
			half _ImpostorMetallicValue;
			half _TintingEnd;
			half _OverlayBakeInfo;
			half _ImpostorSmoothnessValue;
			half _DrynessBakeInfo;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _VariationNoisePivotValue;
			half _DrynessCategory;
			half _TintingCategory;
			half _ImpostorOcclusionValue;
			half _ImpostorMaskOffInfo;
			half _TintingMeshMode;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutMeshValue;
			half _CutoutMeshMode;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _DitherConstantValue;
			half _DitherDistanceMinValue;
			half _CutoutIntensityValue;
			half _DitherDistanceMaxValue;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _EmissiveIntensityValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _SubsurfaceIntensityValue;
			half _DitherDistanceValue;
			half _TintingMeshValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessCategory;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _WetnessIntensityValue;
			half _DrynessSmoothnessValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayNormalValue;
			half _OverlaySmoothnessValue;
			half _OverlaySubsurfaceValue;
			half _DrynessSubsurfaceValue;
			half _CutoutBakeInfo;
			half _CutoutEnd;
			half _SubsurfaceMultiValue;
			half _ImpostorCategory;
			half _ImpostorEnd;
			half _IsImpostorShader;
			half _IsSubsurfaceShader;
			half _MotionWindCategory;
			half _MotionWindEnd;
			half _MotionInteractionCategory;
			half _InteractionInteractionEnd;
			half _MotionWindMode;
			half _MotionWindElementMode;
			half _MotionPushElementMode;
			half _MotionWindOffInfo;
			half _MotionWindOptimizedInfo;
			half _MotionWindAdvancedInfo;
			half _SizeFadeCategory;
			half _SizeFadeEnd;
			half _SizeFadeElementMode;
			float _AI_Frames;
			float _AI_FramesX;
			float _AI_FramesY;
			float _AI_ImpostorSize;
			half _RenderShadow;
			half _RenderMotion;
			half _IsIdentifier;
			half _IsConverted;
			half _ImpostorMaskDefaultInfo;
			half _ImpostorMaskPackedInfo;
			half _ImpostorMaskShadingInfo;
			half _ImpostorMaskMode;
			half _ImpostorAlphaClipValue;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceAngleValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceSpace;
			half _IsVersion;
			float _AI_Parallax;
			half _RenderDecals;
			half _CategoryRender;
			half _EndRender;
			half _NoiseCategory;
			half _NoiseEnd;
			half _IsInitialized;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _HasDefaultTextures;
			half _IsCollected;
			half _RenderSSR;
			float _AI_TextureBias;
			float _AI_DepthSize;
			float _AI_ShadowBias;
			half _MotionBaseSpeedValue;
			half _MotionBaseNoiseValue;
			half _global_wind_layer_value;
			half _MotionBaseDelayValue;
			half _global_push_layer_value;
			half _MotionPushPivotValue;
			half _MotionPushIntensityValue;
			half _SubsurfaceCategory;
			half _SubsurfaceEnd;
			half _SubsurfaceDirectValue;
			half _MotionBaseTillingValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceShadowValue;
			half _SubsurfaceElementMode;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DitherCategory;
			half _DitherEnd;
			half _CutoutCategory;
			half _SubsurfaceAmbientValue;
			half _CutoutElementMode;
			half _MotionIntensityValue;
			half _MotionBasePivotValue;
			float _AI_ShadowView;
			float _AI_Clip;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionTillingValue;
			half _GlobalGlowPivotValue;
			half _GlobalAtmoPivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalWindLayerValue;
			half _GlobalPushLayerValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _MotionBaseIntensityValue;
			half _GlobalAtmoLayerValue;
			half _SubsurfaceThicknessValue;
			float _BlendMode;
			CBUFFER_END

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_Albedo);
			SAMPLER(sampler_Albedo);
			TEXTURE2D(_Normals);
			SAMPLER(sampler_Normals);
			float3 TVE_WorldOrigin;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_Shader);
			TEXTURE2D(_Packed);
			TEXTURE2D(_Vertex);
			SAMPLER(sampler_Shader);
			SAMPLER(sampler_Packed);
			SAMPLER(sampler_Vertex);


			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			float2 VectortoHemiOctahedron( float3 N )
			{
				N.xy /= dot( 1.0, abs( N ) );
				return float2( N.x + N.y, N.x - N.y );
			}
			
			float3 HemiOctahedronToVector( float2 Oct )
			{
				Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y ) * 0.5;
				float3 N = float3( Oct, 1 - dot( 1.0, abs( Oct ) ) );
				return normalize( N );
			}
			
			inline void RayPlaneIntersectionUV( float3 normalOS, float3 rayPosition, float3 rayDirection, inout float2 uvs, inout float3 localNormal )
			{
				float lDotN = dot( rayDirection, normalOS ); 
				float p0l0DotN = dot( -rayPosition, normalOS );
				float t = p0l0DotN / lDotN;
				float3 p = rayDirection * t + rayPosition;
				float3 upVector = float3( 0, 1, 0 );
				float3 tangent = normalize( cross( upVector, normalOS ) + float3( -0.001, 0, 0 ) );
				float3 bitangent = cross( tangent, normalOS );
				float frameX = dot( p, tangent );
				float frameZ = dot( p, bitangent );
				uvs = -float2( frameX, frameZ );
				if( t <= 0.0 )
				uvs = 0;
				float3x3 worldToLocal = float3x3( tangent, bitangent, normalOS );
				localNormal = normalize( mul( worldToLocal, rayDirection ) );
			}
			
			inline void OctaImpostorVertex( inout float4 positionOS, inout float3 normalOS, inout float4 uvsFrame1, inout float4 uvsFrame2, inout float4 uvsFrame3, inout float4 octaFrame, inout float4 viewPos )
			{
				float2 uvOffset = _AI_SizeOffset.zw;
				float parallax = -_AI_Parallax; 
				float UVscale = _AI_ImpostorSize;
				float framesXY = _AI_Frames;
				float prevFrame = framesXY - 1;
				float3 fractions = 1.0 / float3( framesXY, prevFrame, UVscale );
				float fractionsFrame = fractions.x;
				float fractionsPrevFrame = fractions.y;
				float fractionsUVscale = fractions.z;
				float3 worldCameraPos;
				#if defined(UNITY_PASS_SHADOWCASTER)
				float3 worldOrigin = 0;
				float4 perspective = float4( 0, 0, 0, 1 );
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				perspective = float4( 0, 0, 5000, 0 );
				worldOrigin = ai_ObjectToWorld._m03_m13_m23;
				}
				worldCameraPos = worldOrigin + mul( UNITY_MATRIX_I_V, perspective ).xyz;
				#else
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				worldCameraPos = ai_ObjectToWorld._m03_m13_m23 + UNITY_MATRIX_I_V._m02_m12_m22 * 5000;
				}
				else
				{
				worldCameraPos = GetCameraRelativePositionWS( _WorldSpaceCameraPos );
				}
				#endif
				float3 objectCameraPosition = mul( ai_WorldToObject, float4( worldCameraPos, 1 ) ).xyz - _AI_Offset.xyz; 
				float3 objectCameraDirection = normalize( objectCameraPosition );
				float3 upVector = float3( 0,1,0 );
				float3 objectHorizontalVector = normalize( cross( objectCameraDirection, upVector ) );
				float3 objectVerticalVector = cross( objectHorizontalVector, objectCameraDirection );
				float2 uvExpansion = positionOS.xy;
				float3 billboard = objectHorizontalVector * uvExpansion.x + objectVerticalVector * uvExpansion.y;
				float3 localDir = billboard - objectCameraPosition; 
				objectCameraDirection = trunc( objectCameraDirection * 65536.0 ) / 65536.0;
				objectCameraDirection.y = max(0.001, objectCameraDirection.y);
				float2 frameOcta = VectortoHemiOctahedron( objectCameraDirection.xzy ) * 0.5 + 0.5;
				float2 prevOctaFrame = frameOcta * prevFrame;
				float2 baseOctaFrame = floor( prevOctaFrame );
				float2 fractionOctaFrame = ( baseOctaFrame * fractionsFrame );
				float2 octaFrame1 = ( baseOctaFrame * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa1WorldY = HemiOctahedronToVector( octaFrame1 ).xzy;
				float3 octa1LocalY;
				float2 uvFrame1;
				RayPlaneIntersectionUV( octa1WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame1, /*inout*/ octa1LocalY );
				float2 uvParallax1 = octa1LocalY.xy * fractionsFrame * parallax;
				uvFrame1 = ( uvFrame1 * fractionsUVscale + 0.5 ) * fractionsFrame + fractionOctaFrame;
				uvsFrame1 = float4( uvParallax1, uvFrame1) - float4( 0, 0, uvOffset );
				float2 fractPrevOctaFrame = frac( prevOctaFrame );
				float2 cornerDifference = lerp( float2( 0,1 ) , float2( 1,0 ) , saturate( ceil( ( fractPrevOctaFrame.x - fractPrevOctaFrame.y ) ) ));
				float2 octaFrame2 = ( ( baseOctaFrame + cornerDifference ) * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa2WorldY = HemiOctahedronToVector( octaFrame2 ).xzy;
				float3 octa2LocalY;
				float2 uvFrame2;
				RayPlaneIntersectionUV( octa2WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame2, /*inout*/ octa2LocalY );
				float2 uvParallax2 = octa2LocalY.xy * fractionsFrame * parallax;
				uvFrame2 = ( uvFrame2 * fractionsUVscale + 0.5 ) * fractionsFrame + ( ( cornerDifference * fractionsFrame ) + fractionOctaFrame );
				uvsFrame2 = float4( uvParallax2, uvFrame2) - float4( 0, 0, uvOffset );
				float2 octaFrame3 = ( ( baseOctaFrame + 1 ) * fractionsPrevFrame  ) * 2.0 - 1.0;
				float3 octa3WorldY = HemiOctahedronToVector( octaFrame3 ).xzy;
				float3 octa3LocalY;
				float2 uvFrame3;
				RayPlaneIntersectionUV( octa3WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame3, /*inout*/ octa3LocalY );
				float2 uvParallax3 = octa3LocalY.xy * fractionsFrame * parallax;
				uvFrame3 = ( uvFrame3 * fractionsUVscale + 0.5 ) * fractionsFrame + ( fractionOctaFrame + fractionsFrame );
				uvsFrame3 = float4( uvParallax3, uvFrame3) - float4( 0, 0, uvOffset );
				octaFrame = 0;
				octaFrame.xy = prevOctaFrame;
				octaFrame.zw = fractionOctaFrame;
				positionOS.xyz = billboard + _AI_Offset.xyz;
				normalOS.xyz = objectCameraDirection;
				viewPos = 0;
				viewPos.xyz = TransformWorldToView( TransformObjectToWorld( positionOS.xyz ) );
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			inline void OctaImpostorFragment( inout SurfaceOutput o, out float4 positionCS, out float3 positionWS, float4 uvsFrame1, float4 uvsFrame2, float4 uvsFrame3, float4 octaFrame, float4 interpViewPos, out float4 output0, out float4 output1, out float4 output2 )
			{
				float depthBias = -1.0;
				float textureBias = _AI_TextureBias;
				float2 fraction = frac( octaFrame.xy );
				float2 invFraction = 1 - fraction;
				float3 weights;
				weights.x = min( invFraction.x, invFraction.y );
				weights.y = abs( fraction.x - fraction.y );
				weights.z = min( fraction.x, fraction.y );
				float4 parallaxSample1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame1.zw, depthBias );
				float2 parallax1 = ( ( 0.5 - parallaxSample1.a ) * uvsFrame1.xy ) + uvsFrame1.zw;
				float4 parallaxSample2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame2.zw, depthBias );
				float2 parallax2 = ( ( 0.5 - parallaxSample2.a ) * uvsFrame2.xy ) + uvsFrame2.zw;
				float4 parallaxSample3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame3.zw, depthBias );
				float2 parallax3 = ( ( 0.5 - parallaxSample3.a ) * uvsFrame3.xy ) + uvsFrame3.zw;
				float4 albedo1 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax1, textureBias );
				float4 albedo2 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax2, textureBias );
				float4 albedo3 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax3, textureBias );
				float4 blendedAlbedo = albedo1 * weights.x + albedo2 * weights.y + albedo3 * weights.z;
				o.Alpha = ( blendedAlbedo.a - _AI_Clip );
				clip( o.Alpha );
				float t = ceil( fraction.x - fraction.y );
				float4 cornerDifference = float4( t, 1 - t, 1, 1 );
				float2 step_1 = ( parallax1 - octaFrame.zw ) * _AI_Frames;
				float4 step23 = ( float4( parallax2, parallax3 ) -  octaFrame.zwzw ) * _AI_Frames - cornerDifference;
				step_1 = step_1 * (1-step_1);
				step23 = step23 * (1-step23);
				float3 steps;
				steps.x = step_1.x * step_1.y;
				steps.y = step23.x * step23.y;
				steps.z = step23.z * step23.w;
				steps = step(-steps, 0);
				float final = dot( steps, weights );
				clip( final - 0.5 );
				o.Albedo = blendedAlbedo.rgb;
				#if defined(AI_HD_RENDERPIPELINE)
				float4 feat1 = _Features.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.Diffusion = feat1.rgb;
				o.Features = feat1.a;
				float4 test1 = _Specular.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.MetalTangent = test1.b;
				#endif
				float4 normals1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax1, textureBias );
				float4 normals2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax2, textureBias );
				float4 normals3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax3, textureBias );
				float4 blendedNormal = normals1 * weights.x  + normals2 * weights.y + normals3 * weights.z;
				float4 output0a = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax1, textureBias );
				float4 output0b = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax2, textureBias );
				float4 output0c = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax3, textureBias );
				output0 = output0a * weights.x  + output0b * weights.y + output0c * weights.z; 
				float4 output1a = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax1, textureBias );
				float4 output1b = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax2, textureBias );
				float4 output1c = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax3, textureBias );
				output1 = output1a * weights.x  + output1b * weights.y + output1c * weights.z; 
				float4 output2a = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax1, textureBias );
				float4 output2b = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax2, textureBias );
				float4 output2c = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax3, textureBias );
				output2 = output2a * weights.x  + output2b * weights.y + output2c * weights.z; 
				float3 localNormal = blendedNormal.rgb * 2.0 - 1.0;
				float3 worldNormal = normalize( mul( (float3x3)ai_ObjectToWorld, localNormal ) );
				o.Normal = worldNormal;
				float3 viewPos = interpViewPos.xyz;
				float depthOffset = ( ( parallaxSample1.a * weights.x + parallaxSample2.a * weights.y + parallaxSample3.a * weights.z ) - 0.5 /** 2.0 - 1.0*/ ) /** 0.5*/ * _AI_DepthSize * length( ai_ObjectToWorld[ 2 ].xyz );
				#if ( defined(SHADERPASS) && ((defined(SHADERPASS_SHADOWS) && SHADERPASS == SHADERPASS_SHADOWS) || (defined(SHADERPASS_SHADOWCASTER) && SHADERPASS == SHADERPASS_SHADOWCASTER)) ) || defined(UNITY_PASS_SHADOWCASTER)
				viewPos.z += depthOffset * _AI_ShadowView;
				viewPos.z += -_AI_ShadowBias;
				#else 
				viewPos.z += depthOffset;
				#endif
				positionWS = mul( UNITY_MATRIX_I_V, float4( viewPos.xyz, 1 ) ).xyz;
				positionCS = mul( UNITY_MATRIX_P, float4( viewPos, 1 ) );
				#if defined(UNITY_PASS_SHADOWCASTER) && !defined(SHADERPASS)
				#if UNITY_REVERSED_Z
				positionCS.z = min( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#else
				positionCS.z = max( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#endif
				#endif
				positionCS.xyz /= positionCS.w;
				if( UNITY_NEAR_CLIP_VALUE < 0 )
				positionCS = positionCS * 0.5 + 0.5;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g153365( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g153374( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif
				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif
				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
					surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
				#endif

				GetNormalWS( fragInputs, float3( 0.0, 0.0, 1.0 ), surfaceData.normalWS, float3( 1.0, 1.0, 1.0 ) );
				bentNormalWS = surfaceData.normalWS;

				surfaceData.geomNormalWS = T2W(fragInputs, 2);

				#ifdef _HAS_REFRACTION
					if (_EnableSSRefraction)
					{

						surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
						surfaceDescription.Alpha = 1.0;
					}
					else
					{
						surfaceData.ior = 1.0;
						surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
						surfaceData.atDistance = 1.0;
						surfaceData.transmittanceMask = 0.0;
						surfaceDescription.Alpha = 1.0;
					}
				#else
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
					surfaceData.atDistance = 1.0;
					surfaceData.transmittanceMask = 0.0;
				#endif

					surfaceData.tangentWS = normalize(T2W(fragInputs, 0).xyz);    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
					surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				#if defined(_SPECULAR_OCCLUSION_CUSTOM)
				#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
				#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
				#else
					surfaceData.specularOcclusion = 1.0;
				#endif
				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
					surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, T2W(fragInputs, 2), surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
				#endif
			}

			void GetSurfaceAndBuiltinData( SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				//#ifdef LOD_FADE_CROSSFADE
				//	uint3 fadeMaskSeed = asuint((int3)(V * _ScreenSize.xyx));
				//	LODDitheringTransition(fadeMaskSeed, unity_LODFade.x);
				//#endif

				#ifdef _ALPHATEST_ON
					DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif
					float3 bentNormalWS;
					BuildSurfaceData(fragInputs, surfaceDescription, V, surfaceData, bentNormalWS);

				#if HAVE_DECALS
				if( _EnableDecals )
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif

				#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
					InitBuiltinData( surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.positionRWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#else
					InitBuiltinData( posInput, surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#endif

				builtinData.depthOffset = 0.0;

				#if (SHADERPASS == SHADERPASS_DISTORTION)
					builtinData.distortion = surfaceDescription.Distortion;
					builtinData.distortionBlur = surfaceDescription.DistortionBlur;
				#else
					builtinData.distortion = float2(0.0, 0.0);
					builtinData.distortionBlur = 0.0;
				#endif

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			VaryingsPassToPS UnpackVaryingsPassToPS(PackedVaryingsToPS input)
			{
				VaryingsPassToPS output;
				output.positionCS = float4(input.vpassInterpolators0.xy, 0.0, input.vpassInterpolators0.z);
				output.previousPositionCS = float4(input.vpassInterpolators1.xy, 0.0, input.vpassInterpolators1.z);

				return output;
			}

#if UNITY_VERSION < 201930
			float3 TransformPreviousObjectToWorldNormal(float3 normalOS)
			{
			#ifdef UNITY_ASSUME_UNIFORM_SCALING
				return normalize(mul((float3x3)unity_MatrixPreviousM, normalOS));
			#else
				return normalize(mul(normalOS, (float3x3)unity_MatrixPreviousMI));
			#endif
			}

			float3 TransformPreviousObjectToWorld(float3 positionOS)
			{
				float4x4 previousModelMatrix = ApplyCameraTranslationToMatrix(unity_MatrixPreviousM);
				return mul(previousModelMatrix, float4(positionOS, 1.0)).xyz;
			}
#endif

			void VelocityPositionZBias(VaryingsToPS input)
			{
			#if defined(UNITY_REVERSED_Z)
				input.vmesh.positionCS.z -= unity_MotionVectorsParams.z * input.vmesh.positionCS.w;
			#else
				input.vmesh.positionCS.z += unity_MotionVectorsParams.z * input.vmesh.positionCS.w;
			#endif
			}

			PackedVaryingsToPS Vert(AttributesMesh inputMesh, AttributesPass inputPass  )
			{
				PackedVaryingsToPS outputPackedVaryingsToPS;
				VaryingsToPS varyingsType;
				VaryingsMeshToPS outputVaryingsMeshToPS;

				ZERO_INITIALIZE( PackedVaryingsToPS, outputPackedVaryingsToPS );
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(outputVaryingsMeshToPS);

				TVEModelData Data16_g153438 = (TVEModelData)0;
				float In_Dummy16_g153438 = 0.0;
				TVEModelData Data16_g153406 = (TVEModelData)0;
				half Dummy181_g153404 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _InteractionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g153406 = Dummy181_g153404;
				TVEModelData Data16_g153386 = (TVEModelData)0;
				half Dummy181_g153383 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g153386 = Dummy181_g153383;
				TVEModelData Data16_g153150 = (TVEModelData)0;
				float In_Dummy16_g153150 = 0.0;
				OctaImpostorVertex( inputMesh.positionOS, inputMesh.normalOS, outputPackedVaryingsToPS.UVsFrame122_g151868, outputPackedVaryingsToPS.UVsFrame222_g151868, outputPackedVaryingsToPS.UVsFrame322_g151868, outputPackedVaryingsToPS.octaframe22_g151868, outputPackedVaryingsToPS.viewPos22_g151868 );
				float3 worldPosOut22_g151868 = GetAbsolutePositionWS( mul( UNITY_MATRIX_I_V, float4( outputPackedVaryingsToPS.viewPos22_g151868.xyz, 1.0 ) ).xyz );
				half3 Input_PositionWS319_g153142 = worldPosOut22_g151868;
				float3 worldToObj315_g153142 = mul( GetWorldToObjectMatrix(), float4( GetCameraRelativePositionWS(Input_PositionWS319_g153142), 1 ) ).xyz;
				half3 Model_PositionOS316_g153142 = worldToObj315_g153142;
				float3 In_PositionOS16_g153150 = Model_PositionOS316_g153142;
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153150 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153150 = Model_PositionWO311_g153142;
				float3 In_PositionRawOS16_g153150 = Model_PositionOS316_g153142;
				float3 In_PositionAddOS16_g153150 = float3( 0,0,0 );
				float3 In_PivotOS16_g153150 = float3( 0,0,0 );
				float3 localObjectPosition_UNITY_MATRIX_M14_g153145 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g153145 = ( localObjectPosition_UNITY_MATRIX_M14_g153145 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g153145 = localObjectPosition_UNITY_MATRIX_M14_g153145;
				#endif
				half3 ObjectData20_g153147 = staticSwitch13_g153145;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				half3 WorldData19_g153147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g153147 = WorldData19_g153147;
				#else
				float3 staticSwitch14_g153147 = ObjectData20_g153147;
				#endif
				float3 temp_output_124_0_g153145 = staticSwitch14_g153147;
				float3 vertexToFrag305_g153142 = temp_output_124_0_g153145;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153150 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153150 = Model_PivotWO312_g153142;
				half3 Model_NormalOS313_g153142 = inputMesh.normalOS;
				float3 In_NormalOS16_g153150 = Model_NormalOS313_g153142;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153150 = Model_Normal_WS314_g153142;
				float3 In_NormalRawOS16_g153150 = Model_NormalOS313_g153142;
				float3 In_NormalRawWS16_g153150 = Model_Normal_WS314_g153142;
				float4 In_TangentOS16_g153150 = float4( 0,1,0,1 );
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153150 = Model_ViewDirWS347_g153142;
				float4 In_VertexData16_g153150 = float4( 1,1,1,1 );
				float4 In_MotionData16_g153150 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g153150 = float4( 1,1,1,1 );
				float4 In_RotationData16_g153150 = float4( 0,0,0,0 );
				Data16_g153150.Dummy = In_Dummy16_g153150;
				Data16_g153150.PositionOS = In_PositionOS16_g153150;
				Data16_g153150.PositionWS = In_PositionWS16_g153150;
				Data16_g153150.PositionWO = In_PositionWO16_g153150;
				Data16_g153150.PositionRawOS = In_PositionRawOS16_g153150;
				Data16_g153150.PositionAddOS = In_PositionAddOS16_g153150;
				Data16_g153150.PivotOS = In_PivotOS16_g153150;
				Data16_g153150.PivotWS = In_PivotWS16_g153150;
				Data16_g153150.PivotWO = In_PivotWO16_g153150;
				Data16_g153150.NormalOS = In_NormalOS16_g153150;
				Data16_g153150.NormalWS = In_NormalWS16_g153150;
				Data16_g153150.NormalRawOS = In_NormalRawOS16_g153150;
				Data16_g153150.NormalRawWS = In_NormalRawWS16_g153150;
				Data16_g153150.TangentOS = In_TangentOS16_g153150;
				Data16_g153150.ViewDirWS = In_ViewDirWS16_g153150;
				Data16_g153150.VertexData = In_VertexData16_g153150;
				Data16_g153150.MotionData = In_MotionData16_g153150;
				Data16_g153150.BoundsData = In_BoundsData16_g153150;
				Data16_g153150.RotationData = In_RotationData16_g153150;
				TVEModelData Data15_g153385 = Data16_g153150;
				float Out_Dummy15_g153385 = 0;
				float3 Out_PositionOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153385 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153385 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153385 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153385 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153385 = float3( 0,0,0 );
				float4 Out_VertexData15_g153385 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153385 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153385 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153385 = float4( 0,0,0,0 );
				Out_Dummy15_g153385 = Data15_g153385.Dummy;
				Out_PositionOS15_g153385 = Data15_g153385.PositionOS;
				Out_PositionWS15_g153385 = Data15_g153385.PositionWS;
				Out_PositionWO15_g153385 = Data15_g153385.PositionWO;
				Out_PositionRawOS15_g153385 = Data15_g153385.PositionRawOS;
				Out_PositionAddOS15_g153385 = Data15_g153385.PositionAddOS;
				Out_PivotOS15_g153385 = Data15_g153385.PivotOS;
				Out_PivotWS15_g153385 = Data15_g153385.PivotWS;
				Out_PivotWO15_g153385 = Data15_g153385.PivotWO;
				Out_NormalOS15_g153385 = Data15_g153385.NormalOS;
				Out_NormalWS15_g153385 = Data15_g153385.NormalWS;
				Out_NormalRawOS15_g153385 = Data15_g153385.NormalRawOS;
				Out_NormalRawWS15_g153385 = Data15_g153385.NormalRawWS;
				Out_TangentOS15_g153385 = Data15_g153385.TangentOS;
				Out_ViewDirWS15_g153385 = Data15_g153385.ViewDirWS;
				Out_VertexData15_g153385 = Data15_g153385.VertexData;
				Out_MotionData15_g153385 = Data15_g153385.MotionData;
				Out_BoundsData15_g153385 = Data15_g153385.BoundsData;
				Out_RotationData15_g153385 = Data15_g153385.RotationData;
				half3 Model_PositionOS147_g153383 = Out_PositionOS15_g153385;
				float3 temp_cast_0 = (1.0).xxx;
				float3 temp_output_210_19_g153383 = Out_PivotWO15_g153385;
				half3 Model_PivotWO162_g153383 = temp_output_210_19_g153383;
				float temp_output_7_0_g153384 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g153384 = ( _SizeFadeDistMinValue - temp_output_7_0_g153384 );
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_2 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = 0;
				half4 Input_Tex1379_g153142 = 0;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_6;
				#else
				float4 staticSwitch414_g153142 = temp_cast_7;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153387 = Data204_g153153;
				float Out_Dummy15_g153387 = 0;
				float4 Out_CoatParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153387 = float4( 0,0,0,0 );
				Out_Dummy15_g153387 = Data15_g153387.Dummy;
				Out_CoatParams15_g153387 = Data15_g153387.CoatParams;
				Out_PaintParams15_g153387 = Data15_g153387.PaintParams;
				Out_GlowParams15_g153387 = Data15_g153387.GlowParams;
				Out_AtmoParams15_g153387= Data15_g153387.AtmoParams;
				Out_FadeParams15_g153387= Data15_g153387.FadeParams;
				Out_FormParams15_g153387 = Data15_g153387.FormParams;
				Out_LandParams15_g153387 = Data15_g153387.LandParams;
				Out_WindParams15_g153387 = Data15_g153387.WindParams;
				Out_PushParams15_g153387 = Data15_g153387.PushParams;
				half4 Input_FormParams188_g153383 = Out_FormParams15_g153387;
				float lerpResult213_g153383 = lerp( 1.0 , (Input_FormParams188_g153383).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g153383 = lerpResult213_g153383;
				#else
				float staticSwitch194_g153383 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g153383 = staticSwitch194_g153383;
				float temp_output_189_0_g153383 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g153383 ) - temp_output_7_0_g153384 ) / ( temp_output_10_0_g153384 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g153383 );
				float3 appendResult200_g153383 = (float3(temp_output_189_0_g153383 , temp_output_189_0_g153383 , temp_output_189_0_g153383));
				float3 appendResult201_g153383 = (float3(1.0 , temp_output_189_0_g153383 , 1.0));
				float3 lerpResult202_g153383 = lerp( appendResult200_g153383 , appendResult201_g153383 , _SizeFadeScaleMode);
				float3 lerpResult184_g153383 = lerp( temp_cast_0 , lerpResult202_g153383 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g153383 = ( lerpResult184_g153383 * Model_PositionOS147_g153383 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g153383 = temp_output_167_0_g153383;
				#else
				float3 staticSwitch199_g153383 = Model_PositionOS147_g153383;
				#endif
				half3 Final_Position178_g153383 = staticSwitch199_g153383;
				float3 In_PositionOS16_g153386 = Final_Position178_g153383;
				float3 In_PositionWS16_g153386 = Out_PositionWS15_g153385;
				float3 In_PositionWO16_g153386 = Out_PositionWO15_g153385;
				float3 In_PositionRawOS16_g153386 = Out_PositionRawOS15_g153385;
				float3 In_PositionAddOS16_g153386 = Out_PositionAddOS15_g153385;
				float3 temp_output_210_24_g153383 = Out_PivotOS15_g153385;
				float3 In_PivotOS16_g153386 = temp_output_210_24_g153383;
				float3 In_PivotWS16_g153386 = Out_PivotWS15_g153385;
				float3 In_PivotWO16_g153386 = temp_output_210_19_g153383;
				float3 In_NormalOS16_g153386 = Out_NormalOS15_g153385;
				float3 In_NormalWS16_g153386 = Out_NormalWS15_g153385;
				float3 In_NormalRawOS16_g153386 = Out_NormalRawOS15_g153385;
				float3 In_NormalRawWS16_g153386 = Out_NormalRawWS15_g153385;
				float4 In_TangentOS16_g153386 = Out_TangentOS15_g153385;
				float3 In_ViewDirWS16_g153386 = Out_ViewDirWS15_g153385;
				float4 In_VertexData16_g153386 = Out_VertexData15_g153385;
				float4 In_MotionData16_g153386 = Out_MotionData15_g153385;
				float4 In_BoundsData16_g153386 = Out_BoundsData15_g153385;
				float4 In_RotationData16_g153386 = Out_RotationData15_g153385;
				Data16_g153386.Dummy = In_Dummy16_g153386;
				Data16_g153386.PositionOS = In_PositionOS16_g153386;
				Data16_g153386.PositionWS = In_PositionWS16_g153386;
				Data16_g153386.PositionWO = In_PositionWO16_g153386;
				Data16_g153386.PositionRawOS = In_PositionRawOS16_g153386;
				Data16_g153386.PositionAddOS = In_PositionAddOS16_g153386;
				Data16_g153386.PivotOS = In_PivotOS16_g153386;
				Data16_g153386.PivotWS = In_PivotWS16_g153386;
				Data16_g153386.PivotWO = In_PivotWO16_g153386;
				Data16_g153386.NormalOS = In_NormalOS16_g153386;
				Data16_g153386.NormalWS = In_NormalWS16_g153386;
				Data16_g153386.NormalRawOS = In_NormalRawOS16_g153386;
				Data16_g153386.NormalRawWS = In_NormalRawWS16_g153386;
				Data16_g153386.TangentOS = In_TangentOS16_g153386;
				Data16_g153386.ViewDirWS = In_ViewDirWS16_g153386;
				Data16_g153386.VertexData = In_VertexData16_g153386;
				Data16_g153386.MotionData = In_MotionData16_g153386;
				Data16_g153386.BoundsData = In_BoundsData16_g153386;
				Data16_g153386.RotationData = In_RotationData16_g153386;
				TVEModelData Data15_g153405 = Data16_g153386;
				float Out_Dummy15_g153405 = 0;
				float3 Out_PositionOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153405 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153405 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153405 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153405 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153405 = float3( 0,0,0 );
				float4 Out_VertexData15_g153405 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153405 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153405 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153405 = float4( 0,0,0,0 );
				Out_Dummy15_g153405 = Data15_g153405.Dummy;
				Out_PositionOS15_g153405 = Data15_g153405.PositionOS;
				Out_PositionWS15_g153405 = Data15_g153405.PositionWS;
				Out_PositionWO15_g153405 = Data15_g153405.PositionWO;
				Out_PositionRawOS15_g153405 = Data15_g153405.PositionRawOS;
				Out_PositionAddOS15_g153405 = Data15_g153405.PositionAddOS;
				Out_PivotOS15_g153405 = Data15_g153405.PivotOS;
				Out_PivotWS15_g153405 = Data15_g153405.PivotWS;
				Out_PivotWO15_g153405 = Data15_g153405.PivotWO;
				Out_NormalOS15_g153405 = Data15_g153405.NormalOS;
				Out_NormalWS15_g153405 = Data15_g153405.NormalWS;
				Out_NormalRawOS15_g153405 = Data15_g153405.NormalRawOS;
				Out_NormalRawWS15_g153405 = Data15_g153405.NormalRawWS;
				Out_TangentOS15_g153405 = Data15_g153405.TangentOS;
				Out_ViewDirWS15_g153405 = Data15_g153405.ViewDirWS;
				Out_VertexData15_g153405 = Data15_g153405.VertexData;
				Out_MotionData15_g153405 = Data15_g153405.MotionData;
				Out_BoundsData15_g153405 = Data15_g153405.BoundsData;
				Out_RotationData15_g153405 = Data15_g153405.RotationData;
				float3 temp_output_1567_0_g153404 = Out_PositionOS15_g153405;
				float3 In_PositionOS16_g153406 = temp_output_1567_0_g153404;
				float3 In_PositionWS16_g153406 = Out_PositionWS15_g153405;
				float3 temp_output_1567_17_g153404 = Out_PositionWO15_g153405;
				float3 In_PositionWO16_g153406 = temp_output_1567_17_g153404;
				float3 In_PositionRawOS16_g153406 = Out_PositionRawOS15_g153405;
				float3 In_PositionAddOS16_g153406 = Out_PositionAddOS15_g153405;
				float3 In_PivotOS16_g153406 = Out_PivotOS15_g153405;
				float3 In_PivotWS16_g153406 = Out_PivotWS15_g153405;
				float3 temp_output_1567_19_g153404 = Out_PivotWO15_g153405;
				float3 In_PivotWO16_g153406 = temp_output_1567_19_g153404;
				float3 In_NormalOS16_g153406 = Out_NormalOS15_g153405;
				float3 In_NormalWS16_g153406 = Out_NormalWS15_g153405;
				float3 In_NormalRawOS16_g153406 = Out_NormalRawOS15_g153405;
				float3 In_NormalRawWS16_g153406 = Out_NormalRawWS15_g153405;
				float4 In_TangentOS16_g153406 = Out_TangentOS15_g153405;
				float3 In_ViewDirWS16_g153406 = Out_ViewDirWS15_g153405;
				float4 In_VertexData16_g153406 = Out_VertexData15_g153405;
				float4 In_MotionData16_g153406 = Out_MotionData15_g153405;
				float4 In_BoundsData16_g153406 = Out_BoundsData15_g153405;
				float2 temp_cast_36 = (0.0).xx;
				half3 Model_PositionOS147_g153404 = temp_output_1567_0_g153404;
				half Base_Mask217_g153404 = saturate( ( Model_PositionOS147_g153404.y / _AI_Offset.y ) );
				half3 Model_PositionWO162_g153404 = temp_output_1567_17_g153404;
				half3 Model_PivotWO402_g153404 = temp_output_1567_19_g153404;
				float3 lerpResult829_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionBasePivotValue);
				half3 Base_Position1394_g153404 = lerpResult829_g153404;
				half3 Input_PositionWO419_g153419 = Base_Position1394_g153404;
				half Flow_Tillling1397_g153404 = _MotionTillingValue;
				half Input_MotionTillingRT670_g153419 = ( Flow_Tillling1397_g153404 + 0.2 );
				half2 Noise_CoordRT668_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTillingRT670_g153419 * 0.005 );
				half4 Noise_ParamsRT535_g153419 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g153419, 0.0 );
				half Flow_Value1599_g153404 = _MotionIntensityValue;
				half Input_MotionValue629_g153419 = Flow_Value1599_g153404;
				float2 lerpResult709_g153419 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult712_g153419 = (float3(lerpResult709_g153419 , ( (Noise_ParamsRT535_g153419).b * Input_MotionValue629_g153419 )));
				float4 lerpResult627_g153419 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g153419 = (lerpResult627_g153419).xy;
				half Input_MotionTilling321_g153419 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTilling321_g153419 * 0.005 );
				float2 temp_output_3_0_g153420 = Noise_Coord515_g153419;
				float2 temp_output_21_0_g153420 = (Global_WindDirection593_g153419*2.0 + -1.0);
				float lerpResult128_g153425 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g153419 = _MotionBaseSpeedValue;
				half Noise_Speed516_g153419 = ( ( lerpResult128_g153425 * Input_MotionSpeed62_g153419 ) * 0.02 );
				float temp_output_15_0_g153420 = Noise_Speed516_g153419;
				float temp_output_23_0_g153420 = frac( temp_output_15_0_g153420 );
				float4 lerpResult39_g153420 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * temp_output_23_0_g153420 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * frac( ( temp_output_15_0_g153420 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g153420 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g153419 = lerpResult39_g153420;
				half Input_MotionNoise552_g153419 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g153419 = (lerpResult627_g153419).z;
				half Motion_Intensity720_g153419 = ( Global_WindIntensity576_g153419 * Input_MotionValue629_g153419 );
				float lerpResult701_g153419 = lerp( 1.0 , Input_MotionNoise552_g153419 , Motion_Intensity720_g153419);
				float2 lerpResult646_g153419 = lerp( Global_WindDirection593_g153419 , (Noise_Params685_g153419).rg , lerpResult701_g153419);
				float2 lerpResult724_g153419 = lerp( float2( 0.5,0.5 ) , lerpResult646_g153419 , Motion_Intensity720_g153419);
				float3 appendResult708_g153419 = (float3(lerpResult724_g153419 , ( (Noise_Params685_g153419).a * Motion_Intensity720_g153419 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g153419 = appendResult712_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g153419 = appendResult708_g153419;
				#else
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g153419 = staticSwitch673_g153419;
				float temp_output_136_0_g153426 = _global_wind_layer_value;
				float temp_output_19_0_g153428 = TVE_WindLayers[(int)temp_output_136_0_g153426];
				half3 Input_Position180_g153429 = Input_PositionWO419_g153419;
				float2 temp_output_75_0_g153429 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_82_0_g153429 = temp_output_136_0_g153426;
				float2 temp_output_119_0_g153429 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_7_0_g153434 = 1.0;
				float temp_output_10_0_g153434 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153434 );
				float4 lerpResult131_g153429 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153429,temp_output_82_0_g153429, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153429,temp_output_82_0_g153429, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153429 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153434 ) / temp_output_10_0_g153434 ) ));
				float4 temp_output_17_0_g153428 = lerpResult131_g153429;
				float4 temp_output_3_0_g153428 = TVE_WindParams;
				float4 ifLocalVar18_g153428 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153428 >= 0.5 )
				ifLocalVar18_g153428 = temp_output_17_0_g153428;
				else
				ifLocalVar18_g153428 = temp_output_3_0_g153428;
				float4 lerpResult22_g153428 = lerp( temp_output_3_0_g153428 , temp_output_17_0_g153428 , temp_output_19_0_g153428);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153428 = lerpResult22_g153428;
				#else
				float4 staticSwitch24_g153428 = ifLocalVar18_g153428;
				#endif
				float4 temp_output_610_0_g153419 = staticSwitch24_g153428;
				float2 lerpResult699_g153419 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult643_g153419 = (float3(lerpResult699_g153419 , ( (temp_output_610_0_g153419).b * Input_MotionValue629_g153419 )));
				float3 lerpResult623_g153419 = lerp( Motion_Local694_g153419 , appendResult643_g153419 , (temp_output_610_0_g153419).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#else
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g153419 = staticSwitch693_g153419;
				#else
				float3 staticSwitch612_g153419 = Motion_Local694_g153419;
				#endif
				float3 temp_output_1628_567_g153404 = staticSwitch612_g153419;
				float2 break83_g153418 = ((temp_output_1628_567_g153404).xy*2.0 + -1.0);
				float3 appendResult79_g153418 = (float3(break83_g153418.x , 0.0 , break83_g153418.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153418 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Base_Intensity1623_g153404 = length( Base_Direction893_g153404 );
				float lerpResult1631_g153404 = lerp( 1.0 , ( Base_Intensity1623_g153404 * Base_Intensity1623_g153404 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g153404 = ( _MotionBaseIntensityValue * Base_Mask217_g153404 * Base_Direction893_g153404 * lerpResult1631_g153404 );
				#else
				float2 staticSwitch1573_g153404 = temp_cast_36;
				#endif
				float temp_output_136_0_g153408 = _global_push_layer_value;
				float temp_output_19_0_g153409 = TVE_PushLayers[(int)temp_output_136_0_g153408];
				float3 lerpResult1547_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionPushPivotValue);
				half3 Push_Position1549_g153404 = lerpResult1547_g153404;
				half3 Input_Position180_g153410 = Push_Position1549_g153404;
				float2 temp_output_75_0_g153410 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_82_0_g153410 = temp_output_136_0_g153408;
				float2 temp_output_119_0_g153410 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_7_0_g153415 = 1.0;
				float temp_output_10_0_g153415 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153415 );
				float4 lerpResult131_g153410 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153410,temp_output_82_0_g153410, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153410,temp_output_82_0_g153410, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153410 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153415 ) / temp_output_10_0_g153415 ) ));
				float4 temp_output_17_0_g153409 = lerpResult131_g153410;
				float4 temp_output_3_0_g153409 = TVE_PushParams;
				float4 ifLocalVar18_g153409 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153409 >= 0.5 )
				ifLocalVar18_g153409 = temp_output_17_0_g153409;
				else
				ifLocalVar18_g153409 = temp_output_3_0_g153409;
				float4 lerpResult22_g153409 = lerp( temp_output_3_0_g153409 , temp_output_17_0_g153409 , temp_output_19_0_g153409);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153409 = lerpResult22_g153409;
				#else
				float4 staticSwitch24_g153409 = ifLocalVar18_g153409;
				#endif
				half4 Global_PushParams214_g153404 = staticSwitch24_g153409;
				float2 break83_g153417 = ((Global_PushParams214_g153404).rg*2.0 + -1.0);
				float3 appendResult79_g153417 = (float3(break83_g153417.x , 0.0 , break83_g153417.y));
				half2 Push_Direction1608_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153417 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Push_Intensity1501_g153404 = _MotionPushIntensityValue;
				half Push_Influence1504_g153404 = saturate( ( (Global_PushParams214_g153404).a * Push_Intensity1501_g153404 ) );
				float2 lerpResult1496_g153404 = lerp( staticSwitch1573_g153404 , ( Push_Direction1608_g153404 * Push_Intensity1501_g153404 * Base_Mask217_g153404 ) , Push_Influence1504_g153404);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g153404 = lerpResult1496_g153404;
				#else
				float2 staticSwitch1506_g153404 = staticSwitch1573_g153404;
				#endif
				half2 Base_Motion1440_g153404 = staticSwitch1506_g153404;
				half2 Final_RoationData1570_g153404 = Base_Motion1440_g153404;
				float4 In_RotationData16_g153406 = float4( Final_RoationData1570_g153404, 0.0 , 0.0 );
				Data16_g153406.Dummy = In_Dummy16_g153406;
				Data16_g153406.PositionOS = In_PositionOS16_g153406;
				Data16_g153406.PositionWS = In_PositionWS16_g153406;
				Data16_g153406.PositionWO = In_PositionWO16_g153406;
				Data16_g153406.PositionRawOS = In_PositionRawOS16_g153406;
				Data16_g153406.PositionAddOS = In_PositionAddOS16_g153406;
				Data16_g153406.PivotOS = In_PivotOS16_g153406;
				Data16_g153406.PivotWS = In_PivotWS16_g153406;
				Data16_g153406.PivotWO = In_PivotWO16_g153406;
				Data16_g153406.NormalOS = In_NormalOS16_g153406;
				Data16_g153406.NormalWS = In_NormalWS16_g153406;
				Data16_g153406.NormalRawOS = In_NormalRawOS16_g153406;
				Data16_g153406.NormalRawWS = In_NormalRawWS16_g153406;
				Data16_g153406.TangentOS = In_TangentOS16_g153406;
				Data16_g153406.ViewDirWS = In_ViewDirWS16_g153406;
				Data16_g153406.VertexData = In_VertexData16_g153406;
				Data16_g153406.MotionData = In_MotionData16_g153406;
				Data16_g153406.BoundsData = In_BoundsData16_g153406;
				Data16_g153406.RotationData = In_RotationData16_g153406;
				TVEModelData Data15_g153437 = Data16_g153406;
				float Out_Dummy15_g153437 = 0;
				float3 Out_PositionOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153437 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153437 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153437 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153437 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153437 = float3( 0,0,0 );
				float4 Out_VertexData15_g153437 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153437 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153437 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153437 = float4( 0,0,0,0 );
				Out_Dummy15_g153437 = Data15_g153437.Dummy;
				Out_PositionOS15_g153437 = Data15_g153437.PositionOS;
				Out_PositionWS15_g153437 = Data15_g153437.PositionWS;
				Out_PositionWO15_g153437 = Data15_g153437.PositionWO;
				Out_PositionRawOS15_g153437 = Data15_g153437.PositionRawOS;
				Out_PositionAddOS15_g153437 = Data15_g153437.PositionAddOS;
				Out_PivotOS15_g153437 = Data15_g153437.PivotOS;
				Out_PivotWS15_g153437 = Data15_g153437.PivotWS;
				Out_PivotWO15_g153437 = Data15_g153437.PivotWO;
				Out_NormalOS15_g153437 = Data15_g153437.NormalOS;
				Out_NormalWS15_g153437 = Data15_g153437.NormalWS;
				Out_NormalRawOS15_g153437 = Data15_g153437.NormalRawOS;
				Out_NormalRawWS15_g153437 = Data15_g153437.NormalRawWS;
				Out_TangentOS15_g153437 = Data15_g153437.TangentOS;
				Out_ViewDirWS15_g153437 = Data15_g153437.ViewDirWS;
				Out_VertexData15_g153437 = Data15_g153437.VertexData;
				Out_MotionData15_g153437 = Data15_g153437.MotionData;
				Out_BoundsData15_g153437 = Data15_g153437.BoundsData;
				Out_RotationData15_g153437 = Data15_g153437.RotationData;
				half3 Model_PositionOS147_g153436 = Out_PositionOS15_g153437;
				half3 Input_False58_g153439 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153440 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153441 = VertexPos40_g153440;
				float3 appendResult74_g153441 = (float3(VertexPos40_g153441.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g153441 = appendResult74_g153441;
				float3 break84_g153441 = VertexPos40_g153441;
				float3 appendResult81_g153441 = (float3(0.0 , break84_g153441.y , break84_g153441.z));
				half3 VertexPosOtherAxis82_g153441 = appendResult81_g153441;
				float4 temp_output_1567_33_g153436 = Out_RotationData15_g153437;
				half4 Model_VertexBend1569_g153436 = temp_output_1567_33_g153436;
				half2 Angle44_g153440 = (Model_VertexBend1569_g153436).xy;
				half Angle44_g153441 = (Angle44_g153440).y;
				half3 VertexPos40_g153442 = ( VertexPosRotationAxis50_g153441 + ( VertexPosOtherAxis82_g153441 * cos( Angle44_g153441 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g153441 ) * sin( Angle44_g153441 ) ) );
				float3 appendResult74_g153442 = (float3(0.0 , 0.0 , VertexPos40_g153442.z));
				half3 VertexPosRotationAxis50_g153442 = appendResult74_g153442;
				float3 break84_g153442 = VertexPos40_g153442;
				float3 appendResult81_g153442 = (float3(break84_g153442.x , break84_g153442.y , 0.0));
				half3 VertexPosOtherAxis82_g153442 = appendResult81_g153442;
				half Angle44_g153442 = -(Angle44_g153440).x;
				half3 Input_True57_g153439 = ( VertexPosRotationAxis50_g153442 + ( VertexPosOtherAxis82_g153442 * cos( Angle44_g153442 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g153442 ) * sin( Angle44_g153442 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch65_g153439 = Input_False58_g153439;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch67_g153439 = staticSwitch65_g153439;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch69_g153439 = staticSwitch67_g153439;
				#endif
				float3 temp_output_1578_0_g153436 = staticSwitch69_g153439;
				float3 temp_output_1567_31_g153436 = Out_PositionAddOS15_g153437;
				half3 Model_PositionADD1568_g153436 = temp_output_1567_31_g153436;
				half3 Final_PositionOS178_g153436 = ( temp_output_1578_0_g153436 + Model_PositionADD1568_g153436 );
				float3 In_PositionOS16_g153438 = Final_PositionOS178_g153436;
				float3 In_PositionWS16_g153438 = Out_PositionWS15_g153437;
				float3 In_PositionWO16_g153438 = Out_PositionWO15_g153437;
				float3 In_PositionRawOS16_g153438 = Out_PositionRawOS15_g153437;
				float3 In_PositionAddOS16_g153438 = temp_output_1567_31_g153436;
				float3 In_PivotOS16_g153438 = Out_PivotOS15_g153437;
				float3 In_PivotWS16_g153438 = Out_PivotWS15_g153437;
				float3 In_PivotWO16_g153438 = Out_PivotWO15_g153437;
				float3 In_NormalOS16_g153438 = Out_NormalOS15_g153437;
				float3 In_NormalWS16_g153438 = Out_NormalWS15_g153437;
				float3 In_NormalRawOS16_g153438 = Out_NormalRawOS15_g153437;
				float3 In_NormalRawWS16_g153438 = Out_NormalRawWS15_g153437;
				float4 In_TangentOS16_g153438 = Out_TangentOS15_g153437;
				float3 In_ViewDirWS16_g153438 = Out_ViewDirWS15_g153437;
				float4 In_VertexData16_g153438 = Out_VertexData15_g153437;
				float4 In_MotionData16_g153438 = Out_MotionData15_g153437;
				float4 In_BoundsData16_g153438 = Out_BoundsData15_g153437;
				float4 In_RotationData16_g153438 = temp_output_1567_33_g153436;
				Data16_g153438.Dummy = In_Dummy16_g153438;
				Data16_g153438.PositionOS = In_PositionOS16_g153438;
				Data16_g153438.PositionWS = In_PositionWS16_g153438;
				Data16_g153438.PositionWO = In_PositionWO16_g153438;
				Data16_g153438.PositionRawOS = In_PositionRawOS16_g153438;
				Data16_g153438.PositionAddOS = In_PositionAddOS16_g153438;
				Data16_g153438.PivotOS = In_PivotOS16_g153438;
				Data16_g153438.PivotWS = In_PivotWS16_g153438;
				Data16_g153438.PivotWO = In_PivotWO16_g153438;
				Data16_g153438.NormalOS = In_NormalOS16_g153438;
				Data16_g153438.NormalWS = In_NormalWS16_g153438;
				Data16_g153438.NormalRawOS = In_NormalRawOS16_g153438;
				Data16_g153438.NormalRawWS = In_NormalRawWS16_g153438;
				Data16_g153438.TangentOS = In_TangentOS16_g153438;
				Data16_g153438.ViewDirWS = In_ViewDirWS16_g153438;
				Data16_g153438.VertexData = In_VertexData16_g153438;
				Data16_g153438.MotionData = In_MotionData16_g153438;
				Data16_g153438.BoundsData = In_BoundsData16_g153438;
				Data16_g153438.RotationData = In_RotationData16_g153438;
				TVEModelData Data15_g153458 = Data16_g153438;
				float Out_Dummy15_g153458 = 0;
				float3 Out_PositionOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153458 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153458 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153458 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153458 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153458 = float3( 0,0,0 );
				float4 Out_VertexData15_g153458 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153458 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153458 = float4( 0,0,0,0 );
				Out_Dummy15_g153458 = Data15_g153458.Dummy;
				Out_PositionOS15_g153458 = Data15_g153458.PositionOS;
				Out_PositionWS15_g153458 = Data15_g153458.PositionWS;
				Out_PositionWO15_g153458 = Data15_g153458.PositionWO;
				Out_PositionRawOS15_g153458 = Data15_g153458.PositionRawOS;
				Out_PositionAddOS15_g153458 = Data15_g153458.PositionAddOS;
				Out_PivotOS15_g153458 = Data15_g153458.PivotOS;
				Out_PivotWS15_g153458 = Data15_g153458.PivotWS;
				Out_PivotWO15_g153458 = Data15_g153458.PivotWO;
				Out_NormalOS15_g153458 = Data15_g153458.NormalOS;
				Out_NormalWS15_g153458 = Data15_g153458.NormalWS;
				Out_NormalRawOS15_g153458 = Data15_g153458.NormalRawOS;
				Out_NormalRawWS15_g153458 = Data15_g153458.NormalRawWS;
				Out_TangentOS15_g153458 = Data15_g153458.TangentOS;
				Out_ViewDirWS15_g153458 = Data15_g153458.ViewDirWS;
				Out_VertexData15_g153458 = Data15_g153458.VertexData;
				Out_MotionData15_g153458 = Data15_g153458.MotionData;
				Out_BoundsData15_g153458 = Data15_g153458.BoundsData;
				Out_RotationData15_g153458 = Data15_g153458.RotationData;
				float3 temp_output_31_0_g153451 = Out_PositionOS15_g153458;
				
				outputPackedVaryingsToPS.ase_texcoord8.xyz = vertexToFrag305_g153142;
				outputPackedVaryingsToPS.ase_texcoord9.xyz = ase_worldNormal;
				
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsToPS.ase_texcoord9.w = 0;
				inputMesh.positionOS.xyz += ( ( temp_output_31_0_g153451 - Out_PositionRawOS15_g153458 ) + _DisableSRPBatcher );

				float3 positionRWS = TransformObjectToWorld( inputMesh.positionOS.xyz );

				outputVaryingsMeshToPS.positionRWS = positionRWS;
				outputVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);

				varyingsType.vmesh = outputVaryingsMeshToPS;

				VelocityPositionZBias(varyingsType);
				varyingsType.vpass.positionCS = mul(_NonJitteredViewProjMatrix, float4(varyingsType.vmesh.positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					varyingsType.vpass.previousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0; // Skin or morph target
					float3 previousPositionRWS = TransformPreviousObjectToWorld(hasDeformation ? inputPass.previousPositionOS : inputMesh.positionOS.xyz );
					varyingsType.vpass.previousPositionCS = mul(_PrevViewProjMatrix, float4(previousPositionRWS, 1.0));
				}

				outputPackedVaryingsToPS.vmeshPositionCS = varyingsType.vmesh.positionCS;
				outputPackedVaryingsToPS.vmeshInterp00.xyz = varyingsType.vmesh.positionRWS;
				outputPackedVaryingsToPS.vpassInterpolators0 = float3(varyingsType.vpass.positionCS.xyw);
				outputPackedVaryingsToPS.vpassInterpolators1 = float3(varyingsType.vpass.previousPositionCS.xyw);
				return outputPackedVaryingsToPS;
			}

			void Frag(  PackedVaryingsToPS packedInput
				, out float4 outVelocity : SV_Target0
				#ifdef WRITE_NORMAL_BUFFER
				, out float4 outNormalBuffer : SV_Target1
					#ifdef WRITE_MSAA_DEPTH
					, out float1 depthColor : SV_Target2
					#endif
				#endif
				, out float outputDepth : SV_Depth
				
			)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				#ifdef LOD_FADE_CROSSFADE
				float3 VC = GetWorldSpaceNormalizeViewDir(packedInput.vmeshInterp00.xyz);
				LODDitheringTransition(ComputeFadeMaskSeed(VC, packedInput.vmeshPositionCS.xy), unity_LODFade.x);
				#endif

				FragInputs input;

				ZERO_INITIALIZE(FragInputs, input);
				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				SurfaceOutput o = (SurfaceOutput)0;

				o.Normal = float3( 0, 0, 1 );
				float4 positionCS = 0;
				float3 positionWS = 0;

				float localBreakData4_g153454 = ( 0.0 );
				float localCompData3_g153446 = ( 0.0 );
				TVEVisualData Data3_g153446 = (TVEVisualData)0;
				half Dummy145_g153444 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g153446 = Dummy145_g153444;
				float localBreakData4_g153445 = ( 0.0 );
				float localCompData3_g153399 = ( 0.0 );
				TVEVisualData Data3_g153399 = (TVEVisualData)0;
				half Dummy145_g153389 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + 0.0 );
				float In_Dummy3_g153399 = Dummy145_g153389;
				float localBreakData4_g153398 = ( 0.0 );
				float localCompData3_g153373 = ( 0.0 );
				TVEVisualData Data3_g153373 = (TVEVisualData)0;
				half Dummy594_g153370 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g153373 = Dummy594_g153370;
				float localBreakData4_g153372 = ( 0.0 );
				float localCompData3_g153358 = ( 0.0 );
				TVEVisualData Data3_g153358 = (TVEVisualData)0;
				half Dummy594_g153357 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeInfo );
				float In_Dummy3_g153358 = Dummy594_g153357;
				float localBreakData4_g153368 = ( 0.0 );
				float localCompData3_g153330 = ( 0.0 );
				TVEVisualData Data3_g153330 = (TVEVisualData)0;
				half Dummy594_g153328 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeInfo );
				float In_Dummy3_g153330 = Dummy594_g153328;
				float localBreakData4_g153329 = ( 0.0 );
				float localCompData3_g153295 = ( 0.0 );
				TVEVisualData Data3_g153295 = (TVEVisualData)0;
				half Dummy594_g153292 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeInfo );
				float In_Dummy3_g153295 = Dummy594_g153292;
				float localBreakData4_g153293 = ( 0.0 );
				float localCompData3_g153272 = ( 0.0 );
				TVEVisualData Data3_g153272 = (TVEVisualData)0;
				half Dummy205_g153269 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeInfo );
				float In_Dummy3_g153272 = Dummy205_g153269;
				float localBreakData4_g153271 = ( 0.0 );
				float localCompData3_g153266 = ( 0.0 );
				TVEVisualData Data3_g153266 = (TVEVisualData)0;
				half Dummy205_g153245 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g153266 = Dummy205_g153245;
				float localBreakData4_g153267 = ( 0.0 );
				float localCompData3_g153239 = ( 0.0 );
				TVEVisualData Data3_g153239 = (TVEVisualData)0;
				half Dummy220_g153236 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g153239 = Dummy220_g153236;
				float localBreakData4_g153238 = ( 0.0 );
				float localCompData3_g153152 = ( 0.0 );
				TVEVisualData Data3_g153152 = (TVEVisualData)0;
				float In_Dummy3_g153152 = 0.0;
				float4 output0 = 0;
				float4 output1 = 0;
				float4 output2 = 0;
				OctaImpostorFragment( o, positionCS, positionWS, packedInput.UVsFrame122_g151868, packedInput.UVsFrame222_g151868, packedInput.UVsFrame322_g151868, packedInput.octaframe22_g151868, packedInput.viewPos22_g151868, output0, output1, output2 );
				float4 temp_cast_0 = (1.0).xxxx;
				half4 Input_Tex0377_g153142 = output0;
				half4 Input_Tex1379_g153142 = output1;
				float4 temp_cast_3 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch403_g153142 = temp_cast_3;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch403_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch403_g153142 = temp_cast_3;
				#endif
				half Local_MultiMask249_g153142 = (staticSwitch403_g153142).b;
				float lerpResult289_g153142 = lerp( 1.0 , Local_MultiMask249_g153142 , _ImpostorColorMode);
				float3 lerpResult292_g153142 = lerp( (_ImpostorColorTwo).rgb , (_ImpostorColor).rgb , lerpResult289_g153142);
				half3 Local_Albedo239_g153142 = ( o.Albedo * lerpResult292_g153142 );
				float3 In_Albedo3_g153152 = Local_Albedo239_g153142;
				float3 In_AlbedoRaw3_g153152 = Local_Albedo239_g153142;
				float2 temp_cast_4 = (0.5).xx;
				float2 In_NormalTS3_g153152 = temp_cast_4;
				float3 In_NormalWS3_g153152 = o.Normal;
				float4 temp_cast_5 = (1.0).xxxx;
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch385_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch385_g153142 = temp_cast_6;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch385_g153142 = temp_cast_7;
				#endif
				half Local_Metallic247_g153142 = (staticSwitch385_g153142).r;
				half Final_Metallic238_g153142 = ( Local_Metallic247_g153142 * _ImpostorMetallicValue );
				float4 temp_cast_8 = (1.0).xxxx;
				float4 temp_cast_9 = (1.0).xxxx;
				float4 temp_cast_10 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch392_g153142 = temp_cast_10;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch392_g153142 = temp_cast_9;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch392_g153142 = temp_cast_10;
				#endif
				half Local_OcclusionOrEmissive248_g153142 = (staticSwitch392_g153142).g;
				float lerpResult431_g153142 = lerp( 1.0 , Local_OcclusionOrEmissive248_g153142 , _ImpostorOcclusionValue);
				#ifdef TVE_EMISSIVE
				float staticSwitch428_g153142 = 1.0;
				#else
				float staticSwitch428_g153142 = lerpResult431_g153142;
				#endif
				half Final_Occlusion424_g153142 = staticSwitch428_g153142;
				float4 temp_cast_11 = (1.0).xxxx;
				float4 temp_cast_12 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch408_g153142 = temp_cast_12;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch408_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch408_g153142 = temp_cast_12;
				#endif
				half Local_Smoothness250_g153142 = (staticSwitch408_g153142).a;
				half Final_Smoothness233_g153142 = ( Local_Smoothness250_g153142 * _ImpostorSmoothnessValue );
				float4 appendResult257_g153142 = (float4(Final_Metallic238_g153142 , Final_Occlusion424_g153142 , 1.0 , Final_Smoothness233_g153142));
				float4 In_Shader3_g153152 = appendResult257_g153142;
				float4 appendResult286_g153142 = (float4(Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , 1.0));
				float4 In_Emissive3_g153152 = appendResult286_g153142;
				float3 temp_output_3_0_g153143 = Local_Albedo239_g153142;
				float dotResult20_g153143 = dot( temp_output_3_0_g153143 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale268_g153142 = dotResult20_g153143;
				float In_Grayscale3_g153152 = Local_Grayscale268_g153142;
				float clampResult267_g153142 = clamp( saturate( ( Local_Grayscale268_g153142 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity269_g153142 = clampResult267_g153142;
				float In_Luminosity3_g153152 = Local_Luminosity269_g153142;
				float In_MultiMask3_g153152 = Local_MultiMask249_g153142;
				float In_AlphaClip3_g153152 = 0.0;
				float In_AlphaFade3_g153152 = 1.0;
				float3 temp_cast_13 = (1.0).xxx;
				float3 In_Translucency3_g153152 = temp_cast_13;
				float In_Transmission3_g153152 = 1.0;
				float In_Thickness3_g153152 = 0.0;
				float In_Diffusion3_g153152 = 0.0;
				Data3_g153152.Dummy = In_Dummy3_g153152;
				Data3_g153152.Albedo = In_Albedo3_g153152;
				Data3_g153152.AlbedoRaw = In_AlbedoRaw3_g153152;
				Data3_g153152.NormalTS = In_NormalTS3_g153152;
				Data3_g153152.NormalWS = In_NormalWS3_g153152;
				Data3_g153152.Shader = In_Shader3_g153152;
				Data3_g153152.Emissive= In_Emissive3_g153152;
				Data3_g153152.MultiMask = In_MultiMask3_g153152;
				Data3_g153152.Grayscale = In_Grayscale3_g153152;
				Data3_g153152.Luminosity = In_Luminosity3_g153152;
				Data3_g153152.AlphaClip = In_AlphaClip3_g153152;
				Data3_g153152.AlphaFade = In_AlphaFade3_g153152;
				Data3_g153152.Translucency = In_Translucency3_g153152;
				Data3_g153152.Transmission = In_Transmission3_g153152;
				Data3_g153152.Thickness = In_Thickness3_g153152;
				Data3_g153152.Diffusion = In_Diffusion3_g153152;
				TVEVisualData Data4_g153238 = Data3_g153152;
				float Out_Dummy4_g153238 = 0;
				float3 Out_Albedo4_g153238 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153238 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153238 = float2( 0,0 );
				float3 Out_NormalWS4_g153238 = float3( 0,0,0 );
				float4 Out_Shader4_g153238 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153238 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153238 = 0;
				float Out_Grayscale4_g153238 = 0;
				float Out_Luminosity4_g153238 = 0;
				float Out_AlphaClip4_g153238 = 0;
				float Out_AlphaFade4_g153238 = 0;
				float3 Out_Translucency4_g153238 = float3( 0,0,0 );
				float Out_Transmission4_g153238 = 0;
				float Out_Thickness4_g153238 = 0;
				float Out_Diffusion4_g153238 = 0;
				Out_Dummy4_g153238 = Data4_g153238.Dummy;
				Out_Albedo4_g153238 = Data4_g153238.Albedo;
				Out_AlbedoRaw4_g153238 = Data4_g153238.AlbedoRaw;
				Out_NormalTS4_g153238 = Data4_g153238.NormalTS;
				Out_NormalWS4_g153238 = Data4_g153238.NormalWS;
				Out_Shader4_g153238 = Data4_g153238.Shader;
				Out_Emissive4_g153238= Data4_g153238.Emissive;
				Out_MultiMask4_g153238 = Data4_g153238.MultiMask;
				Out_Grayscale4_g153238 = Data4_g153238.Grayscale;
				Out_Luminosity4_g153238= Data4_g153238.Luminosity;
				Out_AlphaClip4_g153238 = Data4_g153238.AlphaClip;
				Out_AlphaFade4_g153238 = Data4_g153238.AlphaFade;
				Out_Translucency4_g153238 = Data4_g153238.Translucency;
				Out_Transmission4_g153238 = Data4_g153238.Transmission;
				Out_Thickness4_g153238 = Data4_g153238.Thickness;
				Out_Diffusion4_g153238 = Data4_g153238.Diffusion;
				half3 Visual_Albedo127_g153236 = Out_Albedo4_g153238;
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				half3 Input_PositionWS319_g153142 = GetAbsolutePositionWS( positionWS );
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 vertexToFrag305_g153142 = packedInput.ase_texcoord8.xyz;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 ase_worldNormal = packedInput.ase_texcoord9.xyz;
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_14 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = output2;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_17 = (1.0).xxxx;
				float4 temp_cast_18 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_18;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_17;
				#else
				float4 staticSwitch414_g153142 = temp_cast_18;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153244 = Data16_g153151;
				float Out_Dummy15_g153244 = 0;
				float3 Out_PositionWS15_g153244 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153244 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153244 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153244 = float3( 0,0,0 );
				float4 Out_VertexData15_g153244 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153244 = float4( 0,0,0,0 );
				Out_Dummy15_g153244 = Data15_g153244.Dummy;
				Out_PositionWS15_g153244 = Data15_g153244.PositionWS;
				Out_PositionWO15_g153244 = Data15_g153244.PositionWO;
				Out_PivotWS15_g153244 = Data15_g153244.PivotWS;
				Out_PivotWO15_g153244 = Data15_g153244.PivotWO;
				Out_NormalWS15_g153244 = Data15_g153244.NormalWS;
				Out_ViewDirWS15_g153244 = Data15_g153244.ViewDirWS;
				Out_VertexData15_g153244 = Data15_g153244.VertexData;
				Out_BoundsData15_g153244 = Data15_g153244.BoundsData;
				half3 Model_PositionWO224_g153236 = Out_PositionWO15_g153244;
				half3 Model_PivotWO239_g153236 = Out_PivotWO15_g153244;
				float3 lerpResult242_g153236 = lerp( Model_PositionWO224_g153236 , Model_PivotWO239_g153236 , _VariationNoisePivotValue);
				float4 tex3DNode60_g153240 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g153236 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g153242 = clamp( tex3DNode60_g153240.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g153243 = _VariationNoiseRemap.x;
				float temp_output_10_0_g153243 = ( _VariationNoiseRemap.y - temp_output_7_0_g153243 );
				float temp_output_238_0_g153236 = saturate( ( ( clampResult17_g153242 - temp_output_7_0_g153243 ) / ( temp_output_10_0_g153243 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g153236 = temp_output_238_0_g153236;
				half Variaton_Mask200_g153236 = Variaton_NoiseMask82_g153236;
				float3 lerpResult75_g153236 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g153236);
				float temp_output_162_11_g153236 = Out_MultiMask4_g153238;
				half Visual_MultiMask196_g153236 = temp_output_162_11_g153236;
				float lerpResult190_g153236 = lerp( 1.0 , Visual_MultiMask196_g153236 , _VariationMultiValue);
				half Variaton_MultiMask194_g153236 = lerpResult190_g153236;
				float3 lerpResult186_g153236 = lerp( Visual_Albedo127_g153236 , ( Visual_Albedo127_g153236 * lerpResult75_g153236 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g153236 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g153236 = lerpResult186_g153236;
				#else
				float3 staticSwitch171_g153236 = Visual_Albedo127_g153236;
				#endif
				half3 Final_Albedo160_g153236 = staticSwitch171_g153236;
				float3 In_Albedo3_g153239 = Final_Albedo160_g153236;
				float3 In_AlbedoRaw3_g153239 = Final_Albedo160_g153236;
				float2 In_NormalTS3_g153239 = Out_NormalTS4_g153238;
				float3 In_NormalWS3_g153239 = Out_NormalWS4_g153238;
				float4 In_Shader3_g153239 = Out_Shader4_g153238;
				float4 In_Emissive3_g153239 = Out_Emissive4_g153238;
				float3 temp_output_3_0_g153237 = Final_Albedo160_g153236;
				float dotResult20_g153237 = dot( temp_output_3_0_g153237 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g153236 = dotResult20_g153237;
				float In_Grayscale3_g153239 = Final_Grayscale164_g153236;
				float clampResult180_g153236 = clamp( saturate( ( Final_Grayscale164_g153236 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g153236 = clampResult180_g153236;
				float In_Luminosity3_g153239 = Final_Luminosity181_g153236;
				float In_MultiMask3_g153239 = temp_output_162_11_g153236;
				float In_AlphaClip3_g153239 = Out_AlphaClip4_g153238;
				float In_AlphaFade3_g153239 = Out_AlphaFade4_g153238;
				float3 In_Translucency3_g153239 = Out_Translucency4_g153238;
				float In_Transmission3_g153239 = Out_Transmission4_g153238;
				float In_Thickness3_g153239 = Out_Thickness4_g153238;
				float In_Diffusion3_g153239 = Out_Diffusion4_g153238;
				Data3_g153239.Dummy = In_Dummy3_g153239;
				Data3_g153239.Albedo = In_Albedo3_g153239;
				Data3_g153239.AlbedoRaw = In_AlbedoRaw3_g153239;
				Data3_g153239.NormalTS = In_NormalTS3_g153239;
				Data3_g153239.NormalWS = In_NormalWS3_g153239;
				Data3_g153239.Shader = In_Shader3_g153239;
				Data3_g153239.Emissive= In_Emissive3_g153239;
				Data3_g153239.MultiMask = In_MultiMask3_g153239;
				Data3_g153239.Grayscale = In_Grayscale3_g153239;
				Data3_g153239.Luminosity = In_Luminosity3_g153239;
				Data3_g153239.AlphaClip = In_AlphaClip3_g153239;
				Data3_g153239.AlphaFade = In_AlphaFade3_g153239;
				Data3_g153239.Translucency = In_Translucency3_g153239;
				Data3_g153239.Transmission = In_Transmission3_g153239;
				Data3_g153239.Thickness = In_Thickness3_g153239;
				Data3_g153239.Diffusion = In_Diffusion3_g153239;
				TVEVisualData Data4_g153267 = Data3_g153239;
				float Out_Dummy4_g153267 = 0;
				float3 Out_Albedo4_g153267 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153267 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153267 = float2( 0,0 );
				float3 Out_NormalWS4_g153267 = float3( 0,0,0 );
				float4 Out_Shader4_g153267 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153267 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153267 = 0;
				float Out_Grayscale4_g153267 = 0;
				float Out_Luminosity4_g153267 = 0;
				float Out_AlphaClip4_g153267 = 0;
				float Out_AlphaFade4_g153267 = 0;
				float3 Out_Translucency4_g153267 = float3( 0,0,0 );
				float Out_Transmission4_g153267 = 0;
				float Out_Thickness4_g153267 = 0;
				float Out_Diffusion4_g153267 = 0;
				Out_Dummy4_g153267 = Data4_g153267.Dummy;
				Out_Albedo4_g153267 = Data4_g153267.Albedo;
				Out_AlbedoRaw4_g153267 = Data4_g153267.AlbedoRaw;
				Out_NormalTS4_g153267 = Data4_g153267.NormalTS;
				Out_NormalWS4_g153267 = Data4_g153267.NormalWS;
				Out_Shader4_g153267 = Data4_g153267.Shader;
				Out_Emissive4_g153267= Data4_g153267.Emissive;
				Out_MultiMask4_g153267 = Data4_g153267.MultiMask;
				Out_Grayscale4_g153267 = Data4_g153267.Grayscale;
				Out_Luminosity4_g153267= Data4_g153267.Luminosity;
				Out_AlphaClip4_g153267 = Data4_g153267.AlphaClip;
				Out_AlphaFade4_g153267 = Data4_g153267.AlphaFade;
				Out_Translucency4_g153267 = Data4_g153267.Translucency;
				Out_Transmission4_g153267 = Data4_g153267.Transmission;
				Out_Thickness4_g153267 = Data4_g153267.Thickness;
				Out_Diffusion4_g153267 = Data4_g153267.Diffusion;
				half3 Visual_Albedo139_g153245 = Out_Albedo4_g153267;
				float temp_output_200_12_g153245 = Out_Grayscale4_g153267;
				half Visual_Grayscale150_g153245 = temp_output_200_12_g153245;
				float3 temp_cast_20 = (Visual_Grayscale150_g153245).xxx;
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153246 = Data204_g153153;
				float Out_Dummy15_g153246 = 0;
				float4 Out_CoatParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153246 = float4( 0,0,0,0 );
				Out_Dummy15_g153246 = Data15_g153246.Dummy;
				Out_CoatParams15_g153246 = Data15_g153246.CoatParams;
				Out_PaintParams15_g153246 = Data15_g153246.PaintParams;
				Out_GlowParams15_g153246 = Data15_g153246.GlowParams;
				Out_AtmoParams15_g153246= Data15_g153246.AtmoParams;
				Out_FadeParams15_g153246= Data15_g153246.FadeParams;
				Out_FormParams15_g153246 = Data15_g153246.FormParams;
				Out_LandParams15_g153246 = Data15_g153246.LandParams;
				Out_WindParams15_g153246 = Data15_g153246.WindParams;
				Out_PushParams15_g153246 = Data15_g153246.PushParams;
				half4 Global_PaintParams209_g153245 = Out_PaintParams15_g153246;
				float temp_output_6_0_g153247 = ( saturate( (Global_PaintParams209_g153245).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g153247 = ( temp_output_6_0_g153247 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g153247 = temp_output_6_0_g153247;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g153245 = staticSwitch14_g153247;
				#else
				float staticSwitch283_g153245 = 1.0;
				#endif
				half Tinting_GlobalValue285_g153245 = staticSwitch283_g153245;
				float3 lerpResult368_g153245 = lerp( Visual_Albedo139_g153245 , temp_cast_20 , ( Tinting_GlobalValue285_g153245 * _TintingGrayValue ));
				float3 temp_cast_49 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g153245 = (Global_PaintParams209_g153245).xyz;
				#else
				float3 staticSwitch288_g153245 = temp_cast_49;
				#endif
				half3 Tinting_ColorGlobal290_g153245 = staticSwitch288_g153245;
				float temp_output_200_11_g153245 = Out_MultiMask4_g153267;
				half Visual_MultiMask181_g153245 = temp_output_200_11_g153245;
				float lerpResult147_g153245 = lerp( 1.0 , Visual_MultiMask181_g153245 , _TintingMultiValue);
				half Tinting_MutiMask121_g153245 = lerpResult147_g153245;
				half Tinting_TexMask385_g153245 = 1.0;
				float temp_output_200_15_g153245 = Out_Luminosity4_g153267;
				half Visual_Luminosity257_g153245 = temp_output_200_15_g153245;
				float clampResult17_g153259 = clamp( Visual_Luminosity257_g153245 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153258 = _TintingLumaRemap.x;
				float temp_output_10_0_g153258 = ( _TintingLumaRemap.y - temp_output_7_0_g153258 );
				float lerpResult228_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153259 - temp_output_7_0_g153258 ) / ( temp_output_10_0_g153258 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g153245 = lerpResult228_g153245;
				TVEModelData Data15_g153268 = Data16_g153151;
				float Out_Dummy15_g153268 = 0;
				float3 Out_PositionWS15_g153268 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153268 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153268 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153268 = float3( 0,0,0 );
				float4 Out_VertexData15_g153268 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153268 = float4( 0,0,0,0 );
				Out_Dummy15_g153268 = Data15_g153268.Dummy;
				Out_PositionWS15_g153268 = Data15_g153268.PositionWS;
				Out_PositionWO15_g153268 = Data15_g153268.PositionWO;
				Out_PivotWS15_g153268 = Data15_g153268.PivotWS;
				Out_PivotWO15_g153268 = Data15_g153268.PivotWO;
				Out_NormalWS15_g153268 = Data15_g153268.NormalWS;
				Out_ViewDirWS15_g153268 = Data15_g153268.ViewDirWS;
				Out_VertexData15_g153268 = Data15_g153268.VertexData;
				Out_BoundsData15_g153268 = Data15_g153268.BoundsData;
				half4 Model_VertexMasks307_g153245 = Out_VertexData15_g153268;
				float4 break311_g153245 = Model_VertexMasks307_g153245;
				float4 break33_g153251 = _tinting_vert_mode;
				float temp_output_30_0_g153251 = ( break311_g153245.x * break33_g153251.x );
				float temp_output_29_0_g153251 = ( break311_g153245.y * break33_g153251.y );
				float temp_output_31_0_g153251 = ( break311_g153245.z * break33_g153251.z );
				float temp_output_28_0_g153251 = ( temp_output_30_0_g153251 + temp_output_29_0_g153251 + temp_output_31_0_g153251 + ( break311_g153245.w * break33_g153251.w ) );
				float clampResult17_g153257 = clamp( temp_output_28_0_g153251 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153256 = _TintingMeshRemap.x;
				float temp_output_10_0_g153256 = ( _TintingMeshRemap.y - temp_output_7_0_g153256 );
				float lerpResult370_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153257 - temp_output_7_0_g153256 ) / ( temp_output_10_0_g153256 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g153260 = lerpResult370_g153245;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153260 = ( temp_output_6_0_g153260 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153260 = temp_output_6_0_g153260;
				#endif
				float temp_output_333_0_g153245 = staticSwitch14_g153260;
				half Tinting_VertMask309_g153245 = temp_output_333_0_g153245;
				half Tinting_NoiseMask213_g153245 = 1.0;
				half Custom_Mask345_g153245 = 1.0;
				float temp_output_7_0_g153254 = _TintingBlendRemap.x;
				float temp_output_10_0_g153254 = ( _TintingBlendRemap.y - temp_output_7_0_g153254 );
				half Tinting_Mask242_g153245 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g153245 * Tinting_TexMask385_g153245 * Tinting_LumaMask153_g153245 * Tinting_VertMask309_g153245 * Tinting_NoiseMask213_g153245 * Tinting_GlobalValue285_g153245 * Custom_Mask345_g153245 ) - temp_output_7_0_g153254 ) / ( temp_output_10_0_g153254 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g153245 = lerp( Visual_Albedo139_g153245 , ( lerpResult368_g153245 * 4.594794 * Tinting_ColorGlobal290_g153245 * (_TintingColor).rgb ) , Tinting_Mask242_g153245);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g153245 = lerpResult90_g153245;
				#else
				float3 staticSwitch286_g153245 = Visual_Albedo139_g153245;
				#endif
				half3 Final_Albedo97_g153245 = staticSwitch286_g153245;
				float3 In_Albedo3_g153266 = Final_Albedo97_g153245;
				float3 In_AlbedoRaw3_g153266 = Out_AlbedoRaw4_g153267;
				float2 In_NormalTS3_g153266 = Out_NormalTS4_g153267;
				float3 In_NormalWS3_g153266 = Out_NormalWS4_g153267;
				float4 In_Shader3_g153266 = Out_Shader4_g153267;
				float4 In_Emissive3_g153266 = Out_Emissive4_g153267;
				float In_Grayscale3_g153266 = temp_output_200_12_g153245;
				float In_Luminosity3_g153266 = temp_output_200_15_g153245;
				float In_MultiMask3_g153266 = temp_output_200_11_g153245;
				float In_AlphaClip3_g153266 = Out_AlphaClip4_g153267;
				float In_AlphaFade3_g153266 = Out_AlphaFade4_g153267;
				float3 In_Translucency3_g153266 = Out_Translucency4_g153267;
				float In_Transmission3_g153266 = Out_Transmission4_g153267;
				float In_Thickness3_g153266 = Out_Thickness4_g153267;
				float In_Diffusion3_g153266 = Out_Diffusion4_g153267;
				Data3_g153266.Dummy = In_Dummy3_g153266;
				Data3_g153266.Albedo = In_Albedo3_g153266;
				Data3_g153266.AlbedoRaw = In_AlbedoRaw3_g153266;
				Data3_g153266.NormalTS = In_NormalTS3_g153266;
				Data3_g153266.NormalWS = In_NormalWS3_g153266;
				Data3_g153266.Shader = In_Shader3_g153266;
				Data3_g153266.Emissive= In_Emissive3_g153266;
				Data3_g153266.MultiMask = In_MultiMask3_g153266;
				Data3_g153266.Grayscale = In_Grayscale3_g153266;
				Data3_g153266.Luminosity = In_Luminosity3_g153266;
				Data3_g153266.AlphaClip = In_AlphaClip3_g153266;
				Data3_g153266.AlphaFade = In_AlphaFade3_g153266;
				Data3_g153266.Translucency = In_Translucency3_g153266;
				Data3_g153266.Transmission = In_Transmission3_g153266;
				Data3_g153266.Thickness = In_Thickness3_g153266;
				Data3_g153266.Diffusion = In_Diffusion3_g153266;
				TVEVisualData Data4_g153271 = Data3_g153266;
				float Out_Dummy4_g153271 = 0;
				float3 Out_Albedo4_g153271 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153271 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153271 = float2( 0,0 );
				float3 Out_NormalWS4_g153271 = float3( 0,0,0 );
				float4 Out_Shader4_g153271 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153271 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153271 = 0;
				float Out_Grayscale4_g153271 = 0;
				float Out_Luminosity4_g153271 = 0;
				float Out_AlphaClip4_g153271 = 0;
				float Out_AlphaFade4_g153271 = 0;
				float3 Out_Translucency4_g153271 = float3( 0,0,0 );
				float Out_Transmission4_g153271 = 0;
				float Out_Thickness4_g153271 = 0;
				float Out_Diffusion4_g153271 = 0;
				Out_Dummy4_g153271 = Data4_g153271.Dummy;
				Out_Albedo4_g153271 = Data4_g153271.Albedo;
				Out_AlbedoRaw4_g153271 = Data4_g153271.AlbedoRaw;
				Out_NormalTS4_g153271 = Data4_g153271.NormalTS;
				Out_NormalWS4_g153271 = Data4_g153271.NormalWS;
				Out_Shader4_g153271 = Data4_g153271.Shader;
				Out_Emissive4_g153271= Data4_g153271.Emissive;
				Out_MultiMask4_g153271 = Data4_g153271.MultiMask;
				Out_Grayscale4_g153271 = Data4_g153271.Grayscale;
				Out_Luminosity4_g153271= Data4_g153271.Luminosity;
				Out_AlphaClip4_g153271 = Data4_g153271.AlphaClip;
				Out_AlphaFade4_g153271 = Data4_g153271.AlphaFade;
				Out_Translucency4_g153271 = Data4_g153271.Translucency;
				Out_Transmission4_g153271 = Data4_g153271.Transmission;
				Out_Thickness4_g153271 = Data4_g153271.Thickness;
				Out_Diffusion4_g153271 = Data4_g153271.Diffusion;
				half3 Visual_Albedo292_g153269 = Out_Albedo4_g153271;
				float temp_output_280_12_g153269 = Out_Grayscale4_g153271;
				half Visual_Grayscale308_g153269 = temp_output_280_12_g153269;
				float3 temp_cast_50 = (Visual_Grayscale308_g153269).xxx;
				TVEGlobalData Data15_g153270 = Data204_g153153;
				float Out_Dummy15_g153270 = 0;
				float4 Out_CoatParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153270 = float4( 0,0,0,0 );
				Out_Dummy15_g153270 = Data15_g153270.Dummy;
				Out_CoatParams15_g153270 = Data15_g153270.CoatParams;
				Out_PaintParams15_g153270 = Data15_g153270.PaintParams;
				Out_GlowParams15_g153270 = Data15_g153270.GlowParams;
				Out_AtmoParams15_g153270= Data15_g153270.AtmoParams;
				Out_FadeParams15_g153270= Data15_g153270.FadeParams;
				Out_FormParams15_g153270 = Data15_g153270.FormParams;
				Out_LandParams15_g153270 = Data15_g153270.LandParams;
				Out_WindParams15_g153270 = Data15_g153270.WindParams;
				Out_PushParams15_g153270 = Data15_g153270.PushParams;
				half4 Global_AtmoParams314_g153269 = Out_AtmoParams15_g153270;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g153269 = ( (Global_AtmoParams314_g153269).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g153269 = 1.0;
				#endif
				half Dryness_GlobalMask352_g153269 = staticSwitch351_g153269;
				float3 lerpResult485_g153269 = lerp( Visual_Albedo292_g153269 , temp_cast_50 , ( Dryness_GlobalMask352_g153269 * _DrynessGrayValue ));
				half3 hsvTorgb58_g153290 = RGBToHSV( lerpResult485_g153269 );
				half3 hsvTorgb61_g153290 = HSVToRGB( half3(( hsvTorgb58_g153290.x + _DrynessShiftValue ),hsvTorgb58_g153290.y,hsvTorgb58_g153290.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g153269 = hsvTorgb61_g153290;
				#else
				float3 staticSwitch499_g153269 = lerpResult485_g153269;
				#endif
				half Dryness_TexMask478_g153269 = 1.0;
				float temp_output_280_11_g153269 = Out_MultiMask4_g153271;
				half Visual_MultiMask310_g153269 = temp_output_280_11_g153269;
				float lerpResult283_g153269 = lerp( 1.0 , Visual_MultiMask310_g153269 , _DrynessMultiValue);
				half Dryness_MultiMask302_g153269 = lerpResult283_g153269;
				float temp_output_280_15_g153269 = Out_Luminosity4_g153271;
				half Visual_Luminosity309_g153269 = temp_output_280_15_g153269;
				float clampResult17_g153285 = clamp( Visual_Luminosity309_g153269 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153284 = _DrynessLumaRemap.x;
				float temp_output_10_0_g153284 = ( _DrynessLumaRemap.y - temp_output_7_0_g153284 );
				float lerpResult295_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153285 - temp_output_7_0_g153284 ) / ( temp_output_10_0_g153284 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g153269 = lerpResult295_g153269;
				TVEModelData Data15_g153291 = Data16_g153151;
				float Out_Dummy15_g153291 = 0;
				float3 Out_PositionWS15_g153291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153291 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153291 = float3( 0,0,0 );
				float4 Out_VertexData15_g153291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153291 = float4( 0,0,0,0 );
				Out_Dummy15_g153291 = Data15_g153291.Dummy;
				Out_PositionWS15_g153291 = Data15_g153291.PositionWS;
				Out_PositionWO15_g153291 = Data15_g153291.PositionWO;
				Out_PivotWS15_g153291 = Data15_g153291.PivotWS;
				Out_PivotWO15_g153291 = Data15_g153291.PivotWO;
				Out_NormalWS15_g153291 = Data15_g153291.NormalWS;
				Out_ViewDirWS15_g153291 = Data15_g153291.ViewDirWS;
				Out_VertexData15_g153291 = Data15_g153291.VertexData;
				Out_BoundsData15_g153291 = Data15_g153291.BoundsData;
				half4 Model_VertexMasks386_g153269 = Out_VertexData15_g153291;
				float4 break375_g153269 = Model_VertexMasks386_g153269;
				float4 break33_g153278 = _dryness_vert_mode;
				float temp_output_30_0_g153278 = ( break375_g153269.x * break33_g153278.x );
				float temp_output_29_0_g153278 = ( break375_g153269.y * break33_g153278.y );
				float temp_output_31_0_g153278 = ( break375_g153269.z * break33_g153278.z );
				float temp_output_28_0_g153278 = ( temp_output_30_0_g153278 + temp_output_29_0_g153278 + temp_output_31_0_g153278 + ( break375_g153269.w * break33_g153278.w ) );
				float clampResult17_g153279 = clamp( temp_output_28_0_g153278 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153280 = _DrynessMeshRemap.x;
				float temp_output_10_0_g153280 = ( _DrynessMeshRemap.y - temp_output_7_0_g153280 );
				float lerpResult452_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153279 - temp_output_7_0_g153280 ) / ( temp_output_10_0_g153280 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g153286 = lerpResult452_g153269;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153286 = ( temp_output_6_0_g153286 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153286 = temp_output_6_0_g153286;
				#endif
				float temp_output_448_0_g153269 = staticSwitch14_g153286;
				half Dryness_VertMask378_g153269 = temp_output_448_0_g153269;
				half Dryness_MaskNoise291_g153269 = 1.0;
				half Custom_Mask411_g153269 = 1.0;
				float temp_output_7_0_g153283 = _DrynessBlendRemap.x;
				float temp_output_10_0_g153283 = ( _DrynessBlendRemap.y - temp_output_7_0_g153283 );
				half Dryness_Mask329_g153269 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g153269 * Dryness_MultiMask302_g153269 * Dryness_LumaMask301_g153269 * Dryness_VertMask378_g153269 * Dryness_MaskNoise291_g153269 * Dryness_GlobalMask352_g153269 * Custom_Mask411_g153269 ) - temp_output_7_0_g153283 ) / ( temp_output_10_0_g153283 + 0.0001 ) ) );
				float3 lerpResult336_g153269 = lerp( Visual_Albedo292_g153269 , ( staticSwitch499_g153269 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g153269 = lerpResult336_g153269;
				#else
				float3 staticSwitch356_g153269 = Visual_Albedo292_g153269;
				#endif
				half3 Final_Albedo331_g153269 = staticSwitch356_g153269;
				float3 In_Albedo3_g153272 = Final_Albedo331_g153269;
				float3 In_AlbedoRaw3_g153272 = Out_AlbedoRaw4_g153271;
				float2 In_NormalTS3_g153272 = Out_NormalTS4_g153271;
				float3 In_NormalWS3_g153272 = Out_NormalWS4_g153271;
				half4 Visual_Shader415_g153269 = Out_Shader4_g153271;
				float4 break438_g153269 = Visual_Shader415_g153269;
				float4 appendResult439_g153269 = (float4(break438_g153269.x , break438_g153269.y , break438_g153269.z , ( break438_g153269.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g153269 = lerp( Visual_Shader415_g153269 , appendResult439_g153269 , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g153269 = lerpResult427_g153269;
				#else
				float4 staticSwitch426_g153269 = Visual_Shader415_g153269;
				#endif
				half4 Final_Shader433_g153269 = staticSwitch426_g153269;
				float4 In_Shader3_g153272 = Final_Shader433_g153269;
				float4 In_Emissive3_g153272 = Out_Emissive4_g153271;
				float In_Grayscale3_g153272 = temp_output_280_12_g153269;
				float In_Luminosity3_g153272 = temp_output_280_15_g153269;
				float In_MultiMask3_g153272 = temp_output_280_11_g153269;
				float In_AlphaClip3_g153272 = Out_AlphaClip4_g153271;
				float In_AlphaFade3_g153272 = Out_AlphaFade4_g153271;
				float3 In_Translucency3_g153272 = Out_Translucency4_g153271;
				half Visual_Transmission416_g153269 = Out_Transmission4_g153271;
				float lerpResult421_g153269 = lerp( Visual_Transmission416_g153269 , ( Visual_Transmission416_g153269 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g153269 = lerpResult421_g153269;
				#else
				float staticSwitch418_g153269 = Visual_Transmission416_g153269;
				#endif
				half Final_Transmission425_g153269 = staticSwitch418_g153269;
				float In_Transmission3_g153272 = Final_Transmission425_g153269;
				float In_Thickness3_g153272 = Out_Thickness4_g153271;
				float In_Diffusion3_g153272 = Out_Diffusion4_g153271;
				Data3_g153272.Dummy = In_Dummy3_g153272;
				Data3_g153272.Albedo = In_Albedo3_g153272;
				Data3_g153272.AlbedoRaw = In_AlbedoRaw3_g153272;
				Data3_g153272.NormalTS = In_NormalTS3_g153272;
				Data3_g153272.NormalWS = In_NormalWS3_g153272;
				Data3_g153272.Shader = In_Shader3_g153272;
				Data3_g153272.Emissive= In_Emissive3_g153272;
				Data3_g153272.MultiMask = In_MultiMask3_g153272;
				Data3_g153272.Grayscale = In_Grayscale3_g153272;
				Data3_g153272.Luminosity = In_Luminosity3_g153272;
				Data3_g153272.AlphaClip = In_AlphaClip3_g153272;
				Data3_g153272.AlphaFade = In_AlphaFade3_g153272;
				Data3_g153272.Translucency = In_Translucency3_g153272;
				Data3_g153272.Transmission = In_Transmission3_g153272;
				Data3_g153272.Thickness = In_Thickness3_g153272;
				Data3_g153272.Diffusion = In_Diffusion3_g153272;
				TVEVisualData Data4_g153293 = Data3_g153272;
				float Out_Dummy4_g153293 = 0;
				float3 Out_Albedo4_g153293 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153293 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153293 = float2( 0,0 );
				float3 Out_NormalWS4_g153293 = float3( 0,0,0 );
				float4 Out_Shader4_g153293 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153293 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153293 = 0;
				float Out_Grayscale4_g153293 = 0;
				float Out_Luminosity4_g153293 = 0;
				float Out_AlphaClip4_g153293 = 0;
				float Out_AlphaFade4_g153293 = 0;
				float3 Out_Translucency4_g153293 = float3( 0,0,0 );
				float Out_Transmission4_g153293 = 0;
				float Out_Thickness4_g153293 = 0;
				float Out_Diffusion4_g153293 = 0;
				Out_Dummy4_g153293 = Data4_g153293.Dummy;
				Out_Albedo4_g153293 = Data4_g153293.Albedo;
				Out_AlbedoRaw4_g153293 = Data4_g153293.AlbedoRaw;
				Out_NormalTS4_g153293 = Data4_g153293.NormalTS;
				Out_NormalWS4_g153293 = Data4_g153293.NormalWS;
				Out_Shader4_g153293 = Data4_g153293.Shader;
				Out_Emissive4_g153293= Data4_g153293.Emissive;
				Out_MultiMask4_g153293 = Data4_g153293.MultiMask;
				Out_Grayscale4_g153293 = Data4_g153293.Grayscale;
				Out_Luminosity4_g153293= Data4_g153293.Luminosity;
				Out_AlphaClip4_g153293 = Data4_g153293.AlphaClip;
				Out_AlphaFade4_g153293 = Data4_g153293.AlphaFade;
				Out_Translucency4_g153293 = Data4_g153293.Translucency;
				Out_Transmission4_g153293 = Data4_g153293.Transmission;
				Out_Thickness4_g153293 = Data4_g153293.Thickness;
				Out_Diffusion4_g153293 = Data4_g153293.Diffusion;
				half3 Visual_Albedo127_g153292 = Out_Albedo4_g153293;
				float3 temp_output_622_0_g153292 = (_OverlayColor).rgb;
				half Overlay_TexMask908_g153292 = 1.0;
				float3 temp_output_739_21_g153292 = Out_NormalWS4_g153293;
				half3 Visual_NormalWS749_g153292 = temp_output_739_21_g153292;
				float clampResult17_g153313 = clamp( saturate( (Visual_NormalWS749_g153292).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g153312 = _OverlayProjRemap.x;
				float temp_output_10_0_g153312 = ( _OverlayProjRemap.y - temp_output_7_0_g153312 );
				float lerpResult842_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153313 - temp_output_7_0_g153312 ) / ( temp_output_10_0_g153312 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g153292 = lerpResult842_g153292;
				float temp_output_739_15_g153292 = Out_Luminosity4_g153293;
				half Visual_Luminosity654_g153292 = temp_output_739_15_g153292;
				float clampResult17_g153315 = clamp( Visual_Luminosity654_g153292 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153314 = _OverlayLumaRemap.x;
				float temp_output_10_0_g153314 = ( _OverlayLumaRemap.y - temp_output_7_0_g153314 );
				float lerpResult587_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153315 - temp_output_7_0_g153314 ) / ( temp_output_10_0_g153314 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g153292 = lerpResult587_g153292;
				TVEModelData Data15_g153327 = Data16_g153151;
				float Out_Dummy15_g153327 = 0;
				float3 Out_PositionWS15_g153327 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153327 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153327 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153327 = float3( 0,0,0 );
				float4 Out_VertexData15_g153327 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153327 = float4( 0,0,0,0 );
				Out_Dummy15_g153327 = Data15_g153327.Dummy;
				Out_PositionWS15_g153327 = Data15_g153327.PositionWS;
				Out_PositionWO15_g153327 = Data15_g153327.PositionWO;
				Out_PivotWS15_g153327 = Data15_g153327.PivotWS;
				Out_PivotWO15_g153327 = Data15_g153327.PivotWO;
				Out_NormalWS15_g153327 = Data15_g153327.NormalWS;
				Out_ViewDirWS15_g153327 = Data15_g153327.ViewDirWS;
				Out_VertexData15_g153327 = Data15_g153327.VertexData;
				Out_BoundsData15_g153327 = Data15_g153327.BoundsData;
				half4 Model_VertexMasks791_g153292 = Out_VertexData15_g153327;
				float4 break792_g153292 = Model_VertexMasks791_g153292;
				float4 break33_g153305 = _overlay_vert_mode;
				float temp_output_30_0_g153305 = ( break792_g153292.x * break33_g153305.x );
				float temp_output_29_0_g153305 = ( break792_g153292.y * break33_g153305.y );
				float temp_output_31_0_g153305 = ( break792_g153292.z * break33_g153305.z );
				float temp_output_28_0_g153305 = ( temp_output_30_0_g153305 + temp_output_29_0_g153305 + temp_output_31_0_g153305 + ( break792_g153292.w * break33_g153305.w ) );
				float clampResult17_g153306 = clamp( temp_output_28_0_g153305 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153309 = _OverlayMeshRemap.x;
				float temp_output_10_0_g153309 = ( _OverlayMeshRemap.y - temp_output_7_0_g153309 );
				float lerpResult881_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153306 - temp_output_7_0_g153309 ) / ( temp_output_10_0_g153309 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g153316 = lerpResult881_g153292;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153316 = ( temp_output_6_0_g153316 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153316 = temp_output_6_0_g153316;
				#endif
				float temp_output_831_0_g153292 = staticSwitch14_g153316;
				half Overlay_VertMask801_g153292 = temp_output_831_0_g153292;
				half Overlay_MaskNoise427_g153292 = 1.0;
				TVEGlobalData Data15_g153294 = Data204_g153153;
				float Out_Dummy15_g153294 = 0;
				float4 Out_CoatParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153294 = float4( 0,0,0,0 );
				Out_Dummy15_g153294 = Data15_g153294.Dummy;
				Out_CoatParams15_g153294 = Data15_g153294.CoatParams;
				Out_PaintParams15_g153294 = Data15_g153294.PaintParams;
				Out_GlowParams15_g153294 = Data15_g153294.GlowParams;
				Out_AtmoParams15_g153294= Data15_g153294.AtmoParams;
				Out_FadeParams15_g153294= Data15_g153294.FadeParams;
				Out_FormParams15_g153294 = Data15_g153294.FormParams;
				Out_LandParams15_g153294 = Data15_g153294.LandParams;
				Out_WindParams15_g153294 = Data15_g153294.WindParams;
				Out_PushParams15_g153294 = Data15_g153294.PushParams;
				half4 Global_AtmoParams516_g153292 = Out_AtmoParams15_g153294;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g153292 = ( (Global_AtmoParams516_g153292).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g153292 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g153292 = staticSwitch705_g153292;
				half Custom_Mask646_g153292 = 1.0;
				float temp_output_7_0_g153321 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g153321 = ( _OverlayBlendRemap1.y - temp_output_7_0_g153321 );
				half Overlay_Mask494_g153292 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g153292 * Overlay_MaskProj457_g153292 * Overlay_MaskLuma438_g153292 * Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 * Custom_Mask646_g153292 ) - temp_output_7_0_g153321 ) / ( temp_output_10_0_g153321 + 0.0001 ) ) );
				float3 lerpResult467_g153292 = lerp( Visual_Albedo127_g153292 , temp_output_622_0_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g153292 = lerpResult467_g153292;
				#else
				float3 staticSwitch577_g153292 = Visual_Albedo127_g153292;
				#endif
				half3 Final_Albedo493_g153292 = staticSwitch577_g153292;
				float3 In_Albedo3_g153295 = Final_Albedo493_g153292;
				float3 In_AlbedoRaw3_g153295 = Out_AlbedoRaw4_g153293;
				half2 Visual_NormalTS535_g153292 = Out_NormalTS4_g153293;
				float2 lerpResult551_g153292 = lerp( Visual_NormalTS535_g153292 , ( Visual_NormalTS535_g153292 * _OverlayNormalValue ) , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g153292 = lerpResult551_g153292;
				#else
				float2 staticSwitch583_g153292 = Visual_NormalTS535_g153292;
				#endif
				half2 Final_NormalTS499_g153292 = staticSwitch583_g153292;
				float2 In_NormalTS3_g153295 = Final_NormalTS499_g153292;
				float3 In_NormalWS3_g153295 = temp_output_739_21_g153292;
				half4 Visual_Masks536_g153292 = Out_Shader4_g153293;
				float4 appendResult585_g153292 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g153292 = lerp( Visual_Masks536_g153292 , appendResult585_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g153292 = lerpResult584_g153292;
				#else
				float4 staticSwitch586_g153292 = Visual_Masks536_g153292;
				#endif
				half4 Final_Masks482_g153292 = staticSwitch586_g153292;
				float4 In_Shader3_g153295 = Final_Masks482_g153292;
				float4 In_Emissive3_g153295 = Out_Emissive4_g153293;
				float temp_output_739_12_g153292 = Out_Grayscale4_g153293;
				float In_Grayscale3_g153295 = temp_output_739_12_g153292;
				float In_Luminosity3_g153295 = temp_output_739_15_g153292;
				float In_MultiMask3_g153295 = Out_MultiMask4_g153293;
				float In_AlphaClip3_g153295 = Out_AlphaClip4_g153293;
				float In_AlphaFade3_g153295 = Out_AlphaFade4_g153293;
				float3 In_Translucency3_g153295 = Out_Translucency4_g153293;
				half Visual_Transmission699_g153292 = Out_Transmission4_g153293;
				float lerpResult746_g153292 = lerp( Visual_Transmission699_g153292 , ( Visual_Transmission699_g153292 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g153292 = lerpResult746_g153292;
				#else
				float staticSwitch703_g153292 = Visual_Transmission699_g153292;
				#endif
				half Final_Transmission702_g153292 = staticSwitch703_g153292;
				float In_Transmission3_g153295 = Final_Transmission702_g153292;
				float In_Thickness3_g153295 = Out_Thickness4_g153293;
				float In_Diffusion3_g153295 = Out_Diffusion4_g153293;
				Data3_g153295.Dummy = In_Dummy3_g153295;
				Data3_g153295.Albedo = In_Albedo3_g153295;
				Data3_g153295.AlbedoRaw = In_AlbedoRaw3_g153295;
				Data3_g153295.NormalTS = In_NormalTS3_g153295;
				Data3_g153295.NormalWS = In_NormalWS3_g153295;
				Data3_g153295.Shader = In_Shader3_g153295;
				Data3_g153295.Emissive= In_Emissive3_g153295;
				Data3_g153295.MultiMask = In_MultiMask3_g153295;
				Data3_g153295.Grayscale = In_Grayscale3_g153295;
				Data3_g153295.Luminosity = In_Luminosity3_g153295;
				Data3_g153295.AlphaClip = In_AlphaClip3_g153295;
				Data3_g153295.AlphaFade = In_AlphaFade3_g153295;
				Data3_g153295.Translucency = In_Translucency3_g153295;
				Data3_g153295.Transmission = In_Transmission3_g153295;
				Data3_g153295.Thickness = In_Thickness3_g153295;
				Data3_g153295.Diffusion = In_Diffusion3_g153295;
				TVEVisualData Data4_g153329 = Data3_g153295;
				float Out_Dummy4_g153329 = 0;
				float3 Out_Albedo4_g153329 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153329 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153329 = float2( 0,0 );
				float3 Out_NormalWS4_g153329 = float3( 0,0,0 );
				float4 Out_Shader4_g153329 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153329 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153329 = 0;
				float Out_Grayscale4_g153329 = 0;
				float Out_Luminosity4_g153329 = 0;
				float Out_AlphaClip4_g153329 = 0;
				float Out_AlphaFade4_g153329 = 0;
				float3 Out_Translucency4_g153329 = float3( 0,0,0 );
				float Out_Transmission4_g153329 = 0;
				float Out_Thickness4_g153329 = 0;
				float Out_Diffusion4_g153329 = 0;
				Out_Dummy4_g153329 = Data4_g153329.Dummy;
				Out_Albedo4_g153329 = Data4_g153329.Albedo;
				Out_AlbedoRaw4_g153329 = Data4_g153329.AlbedoRaw;
				Out_NormalTS4_g153329 = Data4_g153329.NormalTS;
				Out_NormalWS4_g153329 = Data4_g153329.NormalWS;
				Out_Shader4_g153329 = Data4_g153329.Shader;
				Out_Emissive4_g153329= Data4_g153329.Emissive;
				Out_MultiMask4_g153329 = Data4_g153329.MultiMask;
				Out_Grayscale4_g153329 = Data4_g153329.Grayscale;
				Out_Luminosity4_g153329= Data4_g153329.Luminosity;
				Out_AlphaClip4_g153329 = Data4_g153329.AlphaClip;
				Out_AlphaFade4_g153329 = Data4_g153329.AlphaFade;
				Out_Translucency4_g153329 = Data4_g153329.Translucency;
				Out_Transmission4_g153329 = Data4_g153329.Transmission;
				Out_Thickness4_g153329 = Data4_g153329.Thickness;
				Out_Diffusion4_g153329 = Data4_g153329.Diffusion;
				half3 Visual_Albedo127_g153328 = Out_Albedo4_g153329;
				float3 lerpResult768_g153328 = lerp( Visual_Albedo127_g153328 , ( Visual_Albedo127_g153328 * Visual_Albedo127_g153328 ) , _WetnessContrastValue);
				TVEGlobalData Data15_g153334 = Data204_g153153;
				float Out_Dummy15_g153334 = 0;
				float4 Out_CoatParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153334 = float4( 0,0,0,0 );
				Out_Dummy15_g153334 = Data15_g153334.Dummy;
				Out_CoatParams15_g153334 = Data15_g153334.CoatParams;
				Out_PaintParams15_g153334 = Data15_g153334.PaintParams;
				Out_GlowParams15_g153334 = Data15_g153334.GlowParams;
				Out_AtmoParams15_g153334= Data15_g153334.AtmoParams;
				Out_FadeParams15_g153334= Data15_g153334.FadeParams;
				Out_FormParams15_g153334 = Data15_g153334.FormParams;
				Out_LandParams15_g153334 = Data15_g153334.LandParams;
				Out_WindParams15_g153334 = Data15_g153334.WindParams;
				Out_PushParams15_g153334 = Data15_g153334.PushParams;
				half4 Global_AtmoParams516_g153328 = Out_AtmoParams15_g153334;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g153328 = ( (Global_AtmoParams516_g153328).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g153328 = 1.0;
				#endif
				half Global_Wetness429_g153328 = staticSwitch663_g153328;
				half Wetness_Value1042_g153328 = ( _WetnessIntensityValue * Global_Wetness429_g153328 );
				half Wetness_VertMask1024_g153328 = 1.0;
				float temp_output_1043_0_g153328 = ( Wetness_Value1042_g153328 * Wetness_VertMask1024_g153328 );
				half Wetness_Mask866_g153328 = temp_output_1043_0_g153328;
				float3 lerpResult651_g153328 = lerp( Visual_Albedo127_g153328 , lerpResult768_g153328 , Wetness_Mask866_g153328);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g153328 = lerpResult651_g153328;
				#else
				float3 staticSwitch577_g153328 = Visual_Albedo127_g153328;
				#endif
				half3 Final_Albedo493_g153328 = staticSwitch577_g153328;
				float3 In_Albedo3_g153330 = Final_Albedo493_g153328;
				float3 In_AlbedoRaw3_g153330 = Out_AlbedoRaw4_g153329;
				half2 Visual_Normal535_g153328 = Out_NormalTS4_g153329;
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#else
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#endif
				half2 Final_Normal499_g153328 = staticSwitch774_g153328;
				float2 In_NormalTS3_g153330 = Final_Normal499_g153328;
				float3 In_NormalWS3_g153330 = Out_NormalWS4_g153329;
				half4 Visual_Masks536_g153328 = Out_Shader4_g153329;
				float4 break658_g153328 = Visual_Masks536_g153328;
				float temp_output_935_0_g153328 = ( Wetness_Mask866_g153328 * _WetnessSmoothnessValue );
				float4 appendResult661_g153328 = (float4(break658_g153328.x , break658_g153328.y , break658_g153328.z , saturate( ( break658_g153328.w + temp_output_935_0_g153328 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g153328 = appendResult661_g153328;
				#else
				float4 staticSwitch586_g153328 = Visual_Masks536_g153328;
				#endif
				half4 Final_Masks482_g153328 = staticSwitch586_g153328;
				float4 In_Shader3_g153330 = Final_Masks482_g153328;
				float4 In_Emissive3_g153330 = Out_Emissive4_g153329;
				float In_Grayscale3_g153330 = Out_Grayscale4_g153329;
				float In_Luminosity3_g153330 = Out_Luminosity4_g153329;
				float In_MultiMask3_g153330 = Out_MultiMask4_g153329;
				float In_AlphaClip3_g153330 = Out_AlphaClip4_g153329;
				float In_AlphaFade3_g153330 = Out_AlphaFade4_g153329;
				float3 In_Translucency3_g153330 = Out_Translucency4_g153329;
				float In_Transmission3_g153330 = Out_Transmission4_g153329;
				float In_Thickness3_g153330 = Out_Thickness4_g153329;
				float In_Diffusion3_g153330 = Out_Diffusion4_g153329;
				Data3_g153330.Dummy = In_Dummy3_g153330;
				Data3_g153330.Albedo = In_Albedo3_g153330;
				Data3_g153330.AlbedoRaw = In_AlbedoRaw3_g153330;
				Data3_g153330.NormalTS = In_NormalTS3_g153330;
				Data3_g153330.NormalWS = In_NormalWS3_g153330;
				Data3_g153330.Shader = In_Shader3_g153330;
				Data3_g153330.Emissive= In_Emissive3_g153330;
				Data3_g153330.MultiMask = In_MultiMask3_g153330;
				Data3_g153330.Grayscale = In_Grayscale3_g153330;
				Data3_g153330.Luminosity = In_Luminosity3_g153330;
				Data3_g153330.AlphaClip = In_AlphaClip3_g153330;
				Data3_g153330.AlphaFade = In_AlphaFade3_g153330;
				Data3_g153330.Translucency = In_Translucency3_g153330;
				Data3_g153330.Transmission = In_Transmission3_g153330;
				Data3_g153330.Thickness = In_Thickness3_g153330;
				Data3_g153330.Diffusion = In_Diffusion3_g153330;
				TVEVisualData Data4_g153368 = Data3_g153330;
				float Out_Dummy4_g153368 = 0;
				float3 Out_Albedo4_g153368 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153368 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153368 = float2( 0,0 );
				float3 Out_NormalWS4_g153368 = float3( 0,0,0 );
				float4 Out_Shader4_g153368 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153368 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153368 = 0;
				float Out_Grayscale4_g153368 = 0;
				float Out_Luminosity4_g153368 = 0;
				float Out_AlphaClip4_g153368 = 0;
				float Out_AlphaFade4_g153368 = 0;
				float3 Out_Translucency4_g153368 = float3( 0,0,0 );
				float Out_Transmission4_g153368 = 0;
				float Out_Thickness4_g153368 = 0;
				float Out_Diffusion4_g153368 = 0;
				Out_Dummy4_g153368 = Data4_g153368.Dummy;
				Out_Albedo4_g153368 = Data4_g153368.Albedo;
				Out_AlbedoRaw4_g153368 = Data4_g153368.AlbedoRaw;
				Out_NormalTS4_g153368 = Data4_g153368.NormalTS;
				Out_NormalWS4_g153368 = Data4_g153368.NormalWS;
				Out_Shader4_g153368 = Data4_g153368.Shader;
				Out_Emissive4_g153368= Data4_g153368.Emissive;
				Out_MultiMask4_g153368 = Data4_g153368.MultiMask;
				Out_Grayscale4_g153368 = Data4_g153368.Grayscale;
				Out_Luminosity4_g153368= Data4_g153368.Luminosity;
				Out_AlphaClip4_g153368 = Data4_g153368.AlphaClip;
				Out_AlphaFade4_g153368 = Data4_g153368.AlphaFade;
				Out_Translucency4_g153368 = Data4_g153368.Translucency;
				Out_Transmission4_g153368 = Data4_g153368.Transmission;
				Out_Thickness4_g153368 = Data4_g153368.Thickness;
				Out_Diffusion4_g153368 = Data4_g153368.Diffusion;
				float3 In_Albedo3_g153358 = Out_Albedo4_g153368;
				float3 In_AlbedoRaw3_g153358 = Out_AlbedoRaw4_g153368;
				float2 In_NormalTS3_g153358 = Out_NormalTS4_g153368;
				float3 In_NormalWS3_g153358 = Out_NormalWS4_g153368;
				float4 In_Shader3_g153358 = Out_Shader4_g153368;
				float4 In_Emissive3_g153358 = Out_Emissive4_g153368;
				float In_Grayscale3_g153358 = Out_Grayscale4_g153368;
				float In_Luminosity3_g153358 = Out_Luminosity4_g153368;
				float temp_output_836_11_g153357 = Out_MultiMask4_g153368;
				float In_MultiMask3_g153358 = temp_output_836_11_g153357;
				half Visual_AlphaClip667_g153357 = Out_AlphaClip4_g153368;
				half Input_True57_g153365 = Visual_AlphaClip667_g153357;
				half True36_g153365 = Input_True57_g153365;
				TVEGlobalData Data15_g153367 = Data204_g153153;
				float Out_Dummy15_g153367 = 0;
				float4 Out_CoatParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153367 = float4( 0,0,0,0 );
				Out_Dummy15_g153367 = Data15_g153367.Dummy;
				Out_CoatParams15_g153367 = Data15_g153367.CoatParams;
				Out_PaintParams15_g153367 = Data15_g153367.PaintParams;
				Out_GlowParams15_g153367 = Data15_g153367.GlowParams;
				Out_AtmoParams15_g153367= Data15_g153367.AtmoParams;
				Out_FadeParams15_g153367= Data15_g153367.FadeParams;
				Out_FormParams15_g153367 = Data15_g153367.FormParams;
				Out_LandParams15_g153367 = Data15_g153367.LandParams;
				Out_WindParams15_g153367 = Data15_g153367.WindParams;
				Out_PushParams15_g153367 = Data15_g153367.PushParams;
				half4 Global_FadeParams516_g153357 = Out_FadeParams15_g153367;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g153357 = saturate( (Global_FadeParams516_g153357).w );
				#else
				float staticSwitch663_g153357 = 1.0;
				#endif
				half Local_GlobalMask429_g153357 = staticSwitch663_g153357;
				half Local_AlphaMask814_g153357 = 1.0;
				TVEModelData Data15_g153369 = Data16_g153151;
				float Out_Dummy15_g153369 = 0;
				float3 Out_PositionWS15_g153369 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153369 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153369 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153369 = float3( 0,0,0 );
				float4 Out_VertexData15_g153369 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153369 = float4( 0,0,0,0 );
				Out_Dummy15_g153369 = Data15_g153369.Dummy;
				Out_PositionWS15_g153369 = Data15_g153369.PositionWS;
				Out_PositionWO15_g153369 = Data15_g153369.PositionWO;
				Out_PivotWS15_g153369 = Data15_g153369.PivotWS;
				Out_PivotWO15_g153369 = Data15_g153369.PivotWO;
				Out_NormalWS15_g153369 = Data15_g153369.NormalWS;
				Out_ViewDirWS15_g153369 = Data15_g153369.ViewDirWS;
				Out_VertexData15_g153369 = Data15_g153369.VertexData;
				Out_BoundsData15_g153369 = Data15_g153369.BoundsData;
				half3 Model_PositionWO602_g153357 = Out_PositionWO15_g153369;
				float4 tex3DNode60_g153361 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g153357 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g153357 = lerp( 1.0 , tex3DNode60_g153361.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g153357 = lerpResult673_g153357;
				half4 Model_VertexMasks752_g153357 = Out_VertexData15_g153369;
				float4 break755_g153357 = Model_VertexMasks752_g153357;
				float4 break33_g153359 = _cutout_vert_mode;
				float temp_output_30_0_g153359 = ( break755_g153357.x * break33_g153359.x );
				float temp_output_29_0_g153359 = ( break755_g153357.y * break33_g153359.y );
				float temp_output_31_0_g153359 = ( break755_g153357.z * break33_g153359.z );
				float temp_output_28_0_g153359 = ( temp_output_30_0_g153359 + temp_output_29_0_g153359 + temp_output_31_0_g153359 + ( break755_g153357.w * break33_g153359.w ) );
				float clampResult17_g153360 = clamp( temp_output_28_0_g153359 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153363 = _CutoutMeshRemap.x;
				float temp_output_10_0_g153363 = ( _CutoutMeshRemap.y - temp_output_7_0_g153363 );
				float lerpResult820_g153357 = lerp( 1.0 , saturate( ( ( clampResult17_g153360 - temp_output_7_0_g153363 ) / ( temp_output_10_0_g153363 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g153364 = lerpResult820_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153364 = ( temp_output_6_0_g153364 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153364 = temp_output_6_0_g153364;
				#endif
				float temp_output_801_0_g153357 = staticSwitch14_g153364;
				half Local_VertMask766_g153357 = temp_output_801_0_g153357;
				half Visual_MultiMask671_g153357 = temp_output_836_11_g153357;
				float lerpResult683_g153357 = lerp( 1.0 , Visual_MultiMask671_g153357 , _CutoutMultiValue);
				half Local_MultiMask685_g153357 = lerpResult683_g153357;
				float lerpResult728_g153357 = lerp( Visual_AlphaClip667_g153357 , min( Visual_AlphaClip667_g153357 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g153357 ) - ( Local_AlphaMask814_g153357 * Local_NoiseMask678_g153357 * Local_VertMask766_g153357 ) ) ) ) , Local_MultiMask685_g153357);
				half Local_AlphaClip784_g153357 = lerpResult728_g153357;
				half Input_False58_g153365 = Local_AlphaClip784_g153357;
				half False36_g153365 = Input_False58_g153365;
				half localShadowPassCheck36_g153365 = ShadowPassCheck36_g153365( True36_g153365 , False36_g153365 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g153357 = Local_AlphaClip784_g153357;
				#else
				float staticSwitch791_g153357 = localShadowPassCheck36_g153365;
				#endif
				float temp_output_6_0_g153366 = staticSwitch791_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153366 = ( temp_output_6_0_g153366 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153366 = temp_output_6_0_g153366;
				#endif
				float temp_output_798_0_g153357 = staticSwitch14_g153366;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g153357 = temp_output_798_0_g153357;
				#else
				float staticSwitch577_g153357 = Visual_AlphaClip667_g153357;
				#endif
				half Final_AlphaClip795_g153357 = staticSwitch577_g153357;
				float In_AlphaClip3_g153358 = Final_AlphaClip795_g153357;
				float In_AlphaFade3_g153358 = Out_AlphaFade4_g153368;
				float3 In_Translucency3_g153358 = Out_Translucency4_g153368;
				float In_Transmission3_g153358 = Out_Transmission4_g153368;
				float In_Thickness3_g153358 = Out_Thickness4_g153368;
				float In_Diffusion3_g153358 = Out_Diffusion4_g153368;
				Data3_g153358.Dummy = In_Dummy3_g153358;
				Data3_g153358.Albedo = In_Albedo3_g153358;
				Data3_g153358.AlbedoRaw = In_AlbedoRaw3_g153358;
				Data3_g153358.NormalTS = In_NormalTS3_g153358;
				Data3_g153358.NormalWS = In_NormalWS3_g153358;
				Data3_g153358.Shader = In_Shader3_g153358;
				Data3_g153358.Emissive= In_Emissive3_g153358;
				Data3_g153358.MultiMask = In_MultiMask3_g153358;
				Data3_g153358.Grayscale = In_Grayscale3_g153358;
				Data3_g153358.Luminosity = In_Luminosity3_g153358;
				Data3_g153358.AlphaClip = In_AlphaClip3_g153358;
				Data3_g153358.AlphaFade = In_AlphaFade3_g153358;
				Data3_g153358.Translucency = In_Translucency3_g153358;
				Data3_g153358.Transmission = In_Transmission3_g153358;
				Data3_g153358.Thickness = In_Thickness3_g153358;
				Data3_g153358.Diffusion = In_Diffusion3_g153358;
				TVEVisualData Data4_g153372 = Data3_g153358;
				float Out_Dummy4_g153372 = 0;
				float3 Out_Albedo4_g153372 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153372 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153372 = float2( 0,0 );
				float3 Out_NormalWS4_g153372 = float3( 0,0,0 );
				float4 Out_Shader4_g153372 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153372 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153372 = 0;
				float Out_Grayscale4_g153372 = 0;
				float Out_Luminosity4_g153372 = 0;
				float Out_AlphaClip4_g153372 = 0;
				float Out_AlphaFade4_g153372 = 0;
				float3 Out_Translucency4_g153372 = float3( 0,0,0 );
				float Out_Transmission4_g153372 = 0;
				float Out_Thickness4_g153372 = 0;
				float Out_Diffusion4_g153372 = 0;
				Out_Dummy4_g153372 = Data4_g153372.Dummy;
				Out_Albedo4_g153372 = Data4_g153372.Albedo;
				Out_AlbedoRaw4_g153372 = Data4_g153372.AlbedoRaw;
				Out_NormalTS4_g153372 = Data4_g153372.NormalTS;
				Out_NormalWS4_g153372 = Data4_g153372.NormalWS;
				Out_Shader4_g153372 = Data4_g153372.Shader;
				Out_Emissive4_g153372= Data4_g153372.Emissive;
				Out_MultiMask4_g153372 = Data4_g153372.MultiMask;
				Out_Grayscale4_g153372 = Data4_g153372.Grayscale;
				Out_Luminosity4_g153372= Data4_g153372.Luminosity;
				Out_AlphaClip4_g153372 = Data4_g153372.AlphaClip;
				Out_AlphaFade4_g153372 = Data4_g153372.AlphaFade;
				Out_Translucency4_g153372 = Data4_g153372.Translucency;
				Out_Transmission4_g153372 = Data4_g153372.Transmission;
				Out_Thickness4_g153372 = Data4_g153372.Thickness;
				Out_Diffusion4_g153372 = Data4_g153372.Diffusion;
				float3 In_Albedo3_g153373 = Out_Albedo4_g153372;
				float3 In_AlbedoRaw3_g153373 = Out_AlbedoRaw4_g153372;
				float2 In_NormalTS3_g153373 = Out_NormalTS4_g153372;
				float3 In_NormalWS3_g153373 = Out_NormalWS4_g153372;
				float4 In_Shader3_g153373 = Out_Shader4_g153372;
				float4 In_Emissive3_g153373 = Out_Emissive4_g153372;
				float In_Grayscale3_g153373 = Out_Grayscale4_g153372;
				float In_Luminosity3_g153373 = Out_Luminosity4_g153372;
				float temp_output_821_11_g153370 = Out_MultiMask4_g153372;
				float In_MultiMask3_g153373 = temp_output_821_11_g153370;
				half Visual_AlphaClip754_g153370 = Out_AlphaClip4_g153372;
				half Input_True57_g153374 = Visual_AlphaClip754_g153370;
				half True36_g153374 = Input_True57_g153374;
				half Dither_Constant768_g153370 = _DitherConstantValue;
				TVEModelData Data15_g153379 = Data16_g153151;
				float Out_Dummy15_g153379 = 0;
				float3 Out_PositionWS15_g153379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153379 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153379 = float3( 0,0,0 );
				float4 Out_VertexData15_g153379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153379 = float4( 0,0,0,0 );
				Out_Dummy15_g153379 = Data15_g153379.Dummy;
				Out_PositionWS15_g153379 = Data15_g153379.PositionWS;
				Out_PositionWO15_g153379 = Data15_g153379.PositionWO;
				Out_PivotWS15_g153379 = Data15_g153379.PivotWS;
				Out_PivotWO15_g153379 = Data15_g153379.PivotWO;
				Out_NormalWS15_g153379 = Data15_g153379.NormalWS;
				Out_ViewDirWS15_g153379 = Data15_g153379.ViewDirWS;
				Out_VertexData15_g153379 = Data15_g153379.VertexData;
				Out_BoundsData15_g153379 = Data15_g153379.BoundsData;
				half3 Model_PositionWS776_g153370 = Out_PositionWS15_g153379;
				float temp_output_7_0_g153378 = _DitherDistanceMinValue;
				float temp_output_10_0_g153378 = ( _DitherDistanceMaxValue - temp_output_7_0_g153378 );
				half Dither_Distance856_g153370 = ( saturate( ( ( distance( Model_PositionWS776_g153370 , _WorldSpaceCameraPos ) - temp_output_7_0_g153378 ) / ( temp_output_10_0_g153378 + 0.0001 ) ) ) * _DitherDistanceValue );
				half Dither_Value429_g153370 = max( Dither_Constant768_g153370 , Dither_Distance856_g153370 );
				half3 Model_PositionWO602_g153370 = Out_PositionWO15_g153379;
				float4 tex3DNode60_g153376 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g153370 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g153370 = tex3DNode60_g153376.r;
				half Local_MaskNoise678_g153370 = temp_output_809_0_g153370;
				half Visual_MultiMask671_g153370 = temp_output_821_11_g153370;
				float lerpResult683_g153370 = lerp( 1.0 , Visual_MultiMask671_g153370 , _DitherMultiValue);
				half Local_MaskMulti685_g153370 = lerpResult683_g153370;
				half Custom_Mask826_g153370 = 1.0;
				float lerpResult728_g153370 = lerp( Visual_AlphaClip754_g153370 , min( Visual_AlphaClip754_g153370 , ( -0.001 - ( Dither_Value429_g153370 - Local_MaskNoise678_g153370 ) ) ) , ( Local_MaskMulti685_g153370 * Custom_Mask826_g153370 ));
				half Local_AlphaClip834_g153370 = lerpResult728_g153370;
				half Input_False58_g153374 = Local_AlphaClip834_g153370;
				half False36_g153374 = Input_False58_g153374;
				half localShadowPassCheck36_g153374 = ShadowPassCheck36_g153374( True36_g153374 , False36_g153374 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g153370 = Local_AlphaClip834_g153370;
				#else
				float staticSwitch831_g153370 = localShadowPassCheck36_g153374;
				#endif
				float temp_output_6_0_g153375 = staticSwitch831_g153370;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153375 = ( temp_output_6_0_g153375 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153375 = temp_output_6_0_g153375;
				#endif
				float temp_output_840_0_g153370 = staticSwitch14_g153375;
				#ifdef TVE_DITHER
				float staticSwitch577_g153370 = temp_output_840_0_g153370;
				#else
				float staticSwitch577_g153370 = Visual_AlphaClip754_g153370;
				#endif
				half Final_AlphaClip493_g153370 = staticSwitch577_g153370;
				float In_AlphaClip3_g153373 = Final_AlphaClip493_g153370;
				float In_AlphaFade3_g153373 = Out_AlphaFade4_g153372;
				float3 In_Translucency3_g153373 = Out_Translucency4_g153372;
				float In_Transmission3_g153373 = Out_Transmission4_g153372;
				float In_Thickness3_g153373 = Out_Thickness4_g153372;
				float In_Diffusion3_g153373 = Out_Diffusion4_g153372;
				Data3_g153373.Dummy = In_Dummy3_g153373;
				Data3_g153373.Albedo = In_Albedo3_g153373;
				Data3_g153373.AlbedoRaw = In_AlbedoRaw3_g153373;
				Data3_g153373.NormalTS = In_NormalTS3_g153373;
				Data3_g153373.NormalWS = In_NormalWS3_g153373;
				Data3_g153373.Shader = In_Shader3_g153373;
				Data3_g153373.Emissive= In_Emissive3_g153373;
				Data3_g153373.MultiMask = In_MultiMask3_g153373;
				Data3_g153373.Grayscale = In_Grayscale3_g153373;
				Data3_g153373.Luminosity = In_Luminosity3_g153373;
				Data3_g153373.AlphaClip = In_AlphaClip3_g153373;
				Data3_g153373.AlphaFade = In_AlphaFade3_g153373;
				Data3_g153373.Translucency = In_Translucency3_g153373;
				Data3_g153373.Transmission = In_Transmission3_g153373;
				Data3_g153373.Thickness = In_Thickness3_g153373;
				Data3_g153373.Diffusion = In_Diffusion3_g153373;
				TVEVisualData Data4_g153398 = Data3_g153373;
				float Out_Dummy4_g153398 = 0;
				float3 Out_Albedo4_g153398 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153398 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153398 = float2( 0,0 );
				float3 Out_NormalWS4_g153398 = float3( 0,0,0 );
				float4 Out_Shader4_g153398 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153398 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153398 = 0;
				float Out_Grayscale4_g153398 = 0;
				float Out_Luminosity4_g153398 = 0;
				float Out_AlphaClip4_g153398 = 0;
				float Out_AlphaFade4_g153398 = 0;
				float3 Out_Translucency4_g153398 = float3( 0,0,0 );
				float Out_Transmission4_g153398 = 0;
				float Out_Thickness4_g153398 = 0;
				float Out_Diffusion4_g153398 = 0;
				Out_Dummy4_g153398 = Data4_g153398.Dummy;
				Out_Albedo4_g153398 = Data4_g153398.Albedo;
				Out_AlbedoRaw4_g153398 = Data4_g153398.AlbedoRaw;
				Out_NormalTS4_g153398 = Data4_g153398.NormalTS;
				Out_NormalWS4_g153398 = Data4_g153398.NormalWS;
				Out_Shader4_g153398 = Data4_g153398.Shader;
				Out_Emissive4_g153398= Data4_g153398.Emissive;
				Out_MultiMask4_g153398 = Data4_g153398.MultiMask;
				Out_Grayscale4_g153398 = Data4_g153398.Grayscale;
				Out_Luminosity4_g153398= Data4_g153398.Luminosity;
				Out_AlphaClip4_g153398 = Data4_g153398.AlphaClip;
				Out_AlphaFade4_g153398 = Data4_g153398.AlphaFade;
				Out_Translucency4_g153398 = Data4_g153398.Translucency;
				Out_Transmission4_g153398 = Data4_g153398.Transmission;
				Out_Thickness4_g153398 = Data4_g153398.Thickness;
				Out_Diffusion4_g153398 = Data4_g153398.Diffusion;
				float3 temp_output_297_0_g153389 = Out_Albedo4_g153398;
				float3 In_Albedo3_g153399 = temp_output_297_0_g153389;
				float3 temp_output_297_23_g153389 = Out_AlbedoRaw4_g153398;
				float3 In_AlbedoRaw3_g153399 = temp_output_297_23_g153389;
				float2 In_NormalTS3_g153399 = Out_NormalTS4_g153398;
				float3 In_NormalWS3_g153399 = Out_NormalWS4_g153398;
				float4 In_Shader3_g153399 = Out_Shader4_g153398;
				float4 temp_cast_51 = (0.0).xxxx;
				half4 Visual_Emissive255_g153389 = Out_Emissive4_g153398;
				half Emissive_MeshMask221_g153389 = 1.0;
				half Emissive_Mask103_g153389 = 1.0;
				float temp_output_279_0_g153389 = ( Emissive_MeshMask221_g153389 * Emissive_Mask103_g153389 );
				float3 appendResult293_g153389 = (float3(temp_output_279_0_g153389 , temp_output_279_0_g153389 , temp_output_279_0_g153389));
				half3 Local_EmissiveColor278_g153389 = appendResult293_g153389;
				float3 temp_cast_52 = (1.0).xxx;
				TVEGlobalData Data15_g153390 = Data204_g153153;
				float Out_Dummy15_g153390 = 0;
				float4 Out_CoatParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153390 = float4( 0,0,0,0 );
				Out_Dummy15_g153390 = Data15_g153390.Dummy;
				Out_CoatParams15_g153390 = Data15_g153390.CoatParams;
				Out_PaintParams15_g153390 = Data15_g153390.PaintParams;
				Out_GlowParams15_g153390 = Data15_g153390.GlowParams;
				Out_AtmoParams15_g153390= Data15_g153390.AtmoParams;
				Out_FadeParams15_g153390= Data15_g153390.FadeParams;
				Out_FormParams15_g153390 = Data15_g153390.FormParams;
				Out_LandParams15_g153390 = Data15_g153390.LandParams;
				Out_WindParams15_g153390 = Data15_g153390.WindParams;
				Out_PushParams15_g153390 = Data15_g153390.PushParams;
				half4 Global_GlowParams179_g153389 = Out_GlowParams15_g153390;
				float3 lerpResult299_g153389 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g153389).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g153389 = lerpResult299_g153389;
				#else
				float3 staticSwitch228_g153389 = temp_cast_52;
				#endif
				half3 Emissive_GlobalMask248_g153389 = staticSwitch228_g153389;
				half3 Visual_AlbedoRaw306_g153389 = temp_output_297_23_g153389;
				float3 lerpResult307_g153389 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g153389 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g153389 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g153389 * lerpResult307_g153389 );
				half3 Emissive_Blend260_g153389 = ( ( (Visual_Emissive255_g153389).xyz * Local_EmissiveColor278_g153389 ) * Local_EmissiveValue88_g153389 );
				float3 temp_output_3_0_g153403 = Emissive_Blend260_g153389;
				float temp_output_15_0_g153403 = _emissive_power_value;
				float3 hdEmission22_g153403 = ASEGetEmissionHDRColor(temp_output_3_0_g153403,temp_output_15_0_g153403,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g153389 = temp_output_279_0_g153389;
				float4 appendResult295_g153389 = (float4(hdEmission22_g153403 , Local_EmissiveMask294_g153389));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g153389 = appendResult295_g153389;
				#else
				float4 staticSwitch129_g153389 = temp_cast_51;
				#endif
				half4 Final_Emissive184_g153389 = staticSwitch129_g153389;
				float4 In_Emissive3_g153399 = Final_Emissive184_g153389;
				float In_Grayscale3_g153399 = Out_Grayscale4_g153398;
				float In_Luminosity3_g153399 = Out_Luminosity4_g153398;
				float temp_output_297_11_g153389 = Out_MultiMask4_g153398;
				float In_MultiMask3_g153399 = temp_output_297_11_g153389;
				float In_AlphaClip3_g153399 = Out_AlphaClip4_g153398;
				float In_AlphaFade3_g153399 = Out_AlphaFade4_g153398;
				float3 In_Translucency3_g153399 = Out_Translucency4_g153398;
				float In_Transmission3_g153399 = Out_Transmission4_g153398;
				float In_Thickness3_g153399 = Out_Thickness4_g153398;
				float In_Diffusion3_g153399 = Out_Diffusion4_g153398;
				Data3_g153399.Dummy = In_Dummy3_g153399;
				Data3_g153399.Albedo = In_Albedo3_g153399;
				Data3_g153399.AlbedoRaw = In_AlbedoRaw3_g153399;
				Data3_g153399.NormalTS = In_NormalTS3_g153399;
				Data3_g153399.NormalWS = In_NormalWS3_g153399;
				Data3_g153399.Shader = In_Shader3_g153399;
				Data3_g153399.Emissive= In_Emissive3_g153399;
				Data3_g153399.MultiMask = In_MultiMask3_g153399;
				Data3_g153399.Grayscale = In_Grayscale3_g153399;
				Data3_g153399.Luminosity = In_Luminosity3_g153399;
				Data3_g153399.AlphaClip = In_AlphaClip3_g153399;
				Data3_g153399.AlphaFade = In_AlphaFade3_g153399;
				Data3_g153399.Translucency = In_Translucency3_g153399;
				Data3_g153399.Transmission = In_Transmission3_g153399;
				Data3_g153399.Thickness = In_Thickness3_g153399;
				Data3_g153399.Diffusion = In_Diffusion3_g153399;
				TVEVisualData Data4_g153445 = Data3_g153399;
				float Out_Dummy4_g153445 = 0;
				float3 Out_Albedo4_g153445 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153445 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153445 = float2( 0,0 );
				float3 Out_NormalWS4_g153445 = float3( 0,0,0 );
				float4 Out_Shader4_g153445 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153445 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153445 = 0;
				float Out_Grayscale4_g153445 = 0;
				float Out_Luminosity4_g153445 = 0;
				float Out_AlphaClip4_g153445 = 0;
				float Out_AlphaFade4_g153445 = 0;
				float3 Out_Translucency4_g153445 = float3( 0,0,0 );
				float Out_Transmission4_g153445 = 0;
				float Out_Thickness4_g153445 = 0;
				float Out_Diffusion4_g153445 = 0;
				Out_Dummy4_g153445 = Data4_g153445.Dummy;
				Out_Albedo4_g153445 = Data4_g153445.Albedo;
				Out_AlbedoRaw4_g153445 = Data4_g153445.AlbedoRaw;
				Out_NormalTS4_g153445 = Data4_g153445.NormalTS;
				Out_NormalWS4_g153445 = Data4_g153445.NormalWS;
				Out_Shader4_g153445 = Data4_g153445.Shader;
				Out_Emissive4_g153445= Data4_g153445.Emissive;
				Out_MultiMask4_g153445 = Data4_g153445.MultiMask;
				Out_Grayscale4_g153445 = Data4_g153445.Grayscale;
				Out_Luminosity4_g153445= Data4_g153445.Luminosity;
				Out_AlphaClip4_g153445 = Data4_g153445.AlphaClip;
				Out_AlphaFade4_g153445 = Data4_g153445.AlphaFade;
				Out_Translucency4_g153445 = Data4_g153445.Translucency;
				Out_Transmission4_g153445 = Data4_g153445.Transmission;
				Out_Thickness4_g153445 = Data4_g153445.Thickness;
				Out_Diffusion4_g153445 = Data4_g153445.Diffusion;
				half3 Visual_Albedo199_g153444 = Out_Albedo4_g153445;
				half3 Final_Albedo312_g153444 = Visual_Albedo199_g153444;
				float3 In_Albedo3_g153446 = Final_Albedo312_g153444;
				float3 In_AlbedoRaw3_g153446 = Out_AlbedoRaw4_g153445;
				float2 In_NormalTS3_g153446 = Out_NormalTS4_g153445;
				float3 In_NormalWS3_g153446 = Out_NormalWS4_g153445;
				float4 In_Shader3_g153446 = Out_Shader4_g153445;
				float4 In_Emissive3_g153446 = Out_Emissive4_g153445;
				float In_Grayscale3_g153446 = Out_Grayscale4_g153445;
				float In_Luminosity3_g153446 = Out_Luminosity4_g153445;
				float temp_output_301_11_g153444 = Out_MultiMask4_g153445;
				float In_MultiMask3_g153446 = temp_output_301_11_g153444;
				float In_AlphaClip3_g153446 = Out_AlphaClip4_g153445;
				float In_AlphaFade3_g153446 = Out_AlphaFade4_g153445;
				float3 temp_cast_53 = (0.0).xxx;
				half3 Subsurface_Color264_g153444 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g153444 );
				half Visual_Transmission138_g153444 = Out_Transmission4_g153445;
				half Subsurface_Value268_g153444 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g153447 = Data204_g153153;
				float Out_Dummy15_g153447 = 0;
				float4 Out_CoatParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153447 = float4( 0,0,0,0 );
				Out_Dummy15_g153447 = Data15_g153447.Dummy;
				Out_CoatParams15_g153447 = Data15_g153447.CoatParams;
				Out_PaintParams15_g153447 = Data15_g153447.PaintParams;
				Out_GlowParams15_g153447 = Data15_g153447.GlowParams;
				Out_AtmoParams15_g153447= Data15_g153447.AtmoParams;
				Out_FadeParams15_g153447= Data15_g153447.FadeParams;
				Out_FormParams15_g153447 = Data15_g153447.FormParams;
				Out_LandParams15_g153447 = Data15_g153447.LandParams;
				Out_WindParams15_g153447 = Data15_g153447.WindParams;
				Out_PushParams15_g153447 = Data15_g153447.PushParams;
				half4 Global_GlowParams373_g153444 = Out_GlowParams15_g153447;
				float lerpResult403_g153444 = lerp( 1.0 , saturate( (Global_GlowParams373_g153444).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g153444 = lerpResult403_g153444;
				#else
				float staticSwitch367_g153444 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g153444 = staticSwitch367_g153444;
				half Visual_MultiMask292_g153444 = temp_output_301_11_g153444;
				float lerpResult293_g153444 = lerp( 1.0 , Visual_MultiMask292_g153444 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g153444 = lerpResult293_g153444;
				half Custom_Mask363_g153444 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g153444 = ( Visual_Transmission138_g153444 * Subsurface_Value268_g153444 * Subsurface_GlobalMask369_g153444 * Subsurface_MultiMask296_g153444 * Custom_Mask363_g153444 );
				#else
				float staticSwitch345_g153444 = 0.0;
				#endif
				half Final_Transmission269_g153444 = staticSwitch345_g153444;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g153444 = ( Subsurface_Color264_g153444 * Final_Transmission269_g153444 * 10.0 );
				#else
				float3 staticSwitch348_g153444 = temp_cast_53;
				#endif
				half3 Final_Translucency254_g153444 = staticSwitch348_g153444;
				float3 In_Translucency3_g153446 = Final_Translucency254_g153444;
				float In_Transmission3_g153446 = Final_Transmission269_g153444;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g153444 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g153444 = 1.0;
				#endif
				half Final_Thickness275_g153444 = staticSwitch351_g153444;
				float In_Thickness3_g153446 = Final_Thickness275_g153444;
				float Final_Diffusion340_g153444 = _SubsurfaceDiffusion;
				float In_Diffusion3_g153446 = Final_Diffusion340_g153444;
				Data3_g153446.Dummy = In_Dummy3_g153446;
				Data3_g153446.Albedo = In_Albedo3_g153446;
				Data3_g153446.AlbedoRaw = In_AlbedoRaw3_g153446;
				Data3_g153446.NormalTS = In_NormalTS3_g153446;
				Data3_g153446.NormalWS = In_NormalWS3_g153446;
				Data3_g153446.Shader = In_Shader3_g153446;
				Data3_g153446.Emissive= In_Emissive3_g153446;
				Data3_g153446.MultiMask = In_MultiMask3_g153446;
				Data3_g153446.Grayscale = In_Grayscale3_g153446;
				Data3_g153446.Luminosity = In_Luminosity3_g153446;
				Data3_g153446.AlphaClip = In_AlphaClip3_g153446;
				Data3_g153446.AlphaFade = In_AlphaFade3_g153446;
				Data3_g153446.Translucency = In_Translucency3_g153446;
				Data3_g153446.Transmission = In_Transmission3_g153446;
				Data3_g153446.Thickness = In_Thickness3_g153446;
				Data3_g153446.Diffusion = In_Diffusion3_g153446;
				TVEVisualData Data4_g153454 = Data3_g153446;
				float Out_Dummy4_g153454 = 0;
				float3 Out_Albedo4_g153454 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153454 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153454 = float2( 0,0 );
				float3 Out_NormalWS4_g153454 = float3( 0,0,0 );
				float4 Out_Shader4_g153454 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153454 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153454 = 0;
				float Out_Grayscale4_g153454 = 0;
				float Out_Luminosity4_g153454 = 0;
				float Out_AlphaClip4_g153454 = 0;
				float Out_AlphaFade4_g153454 = 0;
				float3 Out_Translucency4_g153454 = float3( 0,0,0 );
				float Out_Transmission4_g153454 = 0;
				float Out_Thickness4_g153454 = 0;
				float Out_Diffusion4_g153454 = 0;
				Out_Dummy4_g153454 = Data4_g153454.Dummy;
				Out_Albedo4_g153454 = Data4_g153454.Albedo;
				Out_AlbedoRaw4_g153454 = Data4_g153454.AlbedoRaw;
				Out_NormalTS4_g153454 = Data4_g153454.NormalTS;
				Out_NormalWS4_g153454 = Data4_g153454.NormalWS;
				Out_Shader4_g153454 = Data4_g153454.Shader;
				Out_Emissive4_g153454= Data4_g153454.Emissive;
				Out_MultiMask4_g153454 = Data4_g153454.MultiMask;
				Out_Grayscale4_g153454 = Data4_g153454.Grayscale;
				Out_Luminosity4_g153454= Data4_g153454.Luminosity;
				Out_AlphaClip4_g153454 = Data4_g153454.AlphaClip;
				Out_AlphaFade4_g153454 = Data4_g153454.AlphaFade;
				Out_Translucency4_g153454 = Data4_g153454.Translucency;
				Out_Transmission4_g153454 = Data4_g153454.Transmission;
				Out_Thickness4_g153454 = Data4_g153454.Thickness;
				Out_Diffusion4_g153454 = Data4_g153454.Diffusion;
				float4 break24_g153451 = Out_Shader4_g153454;
				
				float localCustomAlphaClip19_g153463 = ( 0.0 );
				float temp_output_3_0_g153463 = Out_AlphaClip4_g153454;
				float Alpha19_g153463 = temp_output_3_0_g153463;
				float temp_output_15_0_g153463 = 0.0;
				float Treshold19_g153463 = temp_output_15_0_g153463;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#else
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#endif
				
				surfaceDescription.Smoothness = break24_g153451.w;
				surfaceDescription.Alpha = Alpha19_g153463;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = 0;
				#endif

				packedInput.vmeshPositionCS.zw = positionCS.zw;
				float3 positionRWS = positionWS;
				float3 normalWS = o.Normal;

				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//input.worldToTangent = k_identity3x3;
				//#else
				input.tangentToWorld = k_identity3x3;
				//#endif
				input.positionSS = packedInput.vmeshPositionCS;
				input.positionRWS = positionRWS;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir( input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GetSurfaceAndBuiltinData(surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData);

				VaryingsPassToPS inputPass = UnpackVaryingsPassToPS(packedInput);
				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
				//float2 velocity = CalculateVelocity(inputPass.positionCS, inputPass.previousPositionCS);
				//EncodeVelocity(velocity * 0.5, outVelocity);
				//#else
				float2 velocity = CalculateMotionVector( inputPass.positionCS, inputPass.previousPositionCS );
				EncodeMotionVector( velocity * 0.5, outVelocity );
				//#endif

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
					outVelocity = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), posInput.positionSS, outNormalBuffer);

					#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmeshPositionCS.z;
					#endif
				#endif

				outputDepth = posInput.deviceDepth;
			}

			ENDHLSL
		}

		
		Pass
        {
			
			Name "Forward"
			Tags { "LightMode"="Forward" }
			Stencil
			{
				Ref 10
				WriteMask 14
				Comp Always
				Pass Replace
			}


			ColorMask [_ColorMaskTransparentVelOne] 1
			ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM

			#pragma shader_feature_local_fragment _DISABLE_DECALS
			#pragma shader_feature_local_fragment _DISABLE_SSR
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define _AMBIENT_OCCLUSION 1
			#define ASE_SRP_VERSION 170003
			#ifdef UNITY_COLORSPACE_GAMMA//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301)//AI_SRP
			#else//AI_SRP
			#define unity_ColorSpaceDielectricSpec half4(0.04, 0.04, 0.04, 1.0 - 0.04) //AI_SRP
			#endif//AI_SRP
			#define ASE_USING_SAMPLING_MACROS 1


			#pragma vertex Vert
			#pragma fragment Frag



			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
			//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
			//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Wind.hlsl"
			//#endif
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

			#define SHADERPASS SHADERPASS_FORWARD
			//#pragma multi_compile _ LIGHTMAP_ON
			//#pragma multi_compile _ DIRLIGHTMAP_COMBINED
			//#pragma multi_compile _ DYNAMICLIGHTMAP_ON
			//#pragma multi_compile _ SHADOWS_SHADOWMASK
			//#pragma multi_compile DECALS_OFF DECALS_3RT DECALS_4RT
			//#define LIGHTLOOP_TILE_PASS
			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
			#pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
			#pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
			#pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
			#pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
			#pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#define VARYINGS_NEED_POSITION_WS
			#define VARYINGS_NEED_TANGENT_TO_WORLD
			#define VARYINGS_NEED_TEXCOORD1
			#define VARYINGS_NEED_TEXCOORD2

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"

			#define HAS_LIGHTLOOP
			
			#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
			#endif

			#define T2W(var, index) var.tangentToWorld[index]

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ai_ObjectToWorld GetObjectToWorldMatrix()
			#define ai_WorldToObject GetWorldToObjectMatrix()
			#define AI_INV_TWO_PI  INV_TWO_PI
			#define AI_PI          PI
			#define AI_INV_PI      INV_PI
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_fragment TVE_IMPOSTOR_MASK_OFF TVE_IMPOSTOR_MASK_DEFAULT TVE_IMPOSTOR_MASK_PACKED TVE_IMPOSTOR_MASK_SHADING
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_OFF TVE_MOTION_WIND_OPTIMIZED TVE_MOTION_WIND_ADVANCED
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				float4 positionCS : SV_Position;
				float3 interp00 : TEXCOORD0;
				float3 interp01 : TEXCOORD1;
				float4 interp02 : TEXCOORD2;
				float4 interp03 : TEXCOORD3;
				float4 interp04 : TEXCOORD4;
				float4 interp05 : TEXCOORD5;
				float4 UVsFrame122_g151868 : TEXCOORD6;
				float4 UVsFrame222_g151868 : TEXCOORD7;
				float4 UVsFrame322_g151868 : TEXCOORD8;
				float4 octaframe22_g151868 : TEXCOORD9;
				float4 viewPos22_g151868 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START( UnityPerMaterial )
			float4 _AI_SizeOffset;
			half4 _TintingBlendRemap;
			half4 _OverlayBlendRemap1;
			half4 _VariationColorTwo;
			half4 _VariationColorOne;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _ImpostorColor;
			half4 _VariationNoiseRemap;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _dryness_vert_mode;
			float4 _TintingColor;
			half4 _DrynessLumaRemap;
			half4 _TintingLumaRemap;
			float4 _DrynessColor;
			half4 _tinting_vert_mode;
			half4 _OverlayColor;
			half4 _ImpostorColorTwo;
			half4 _TintingMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _SubsurfaceColor;
			float3 _AI_Offset;
			half _TintingMultiValue;
			half _WetnessBakeInfo;
			half _TintingIntensityValue;
			half _TintingLumaValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _OverlayEnd;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _OverlaySpace;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _WetnessElementMode;
			half _TintingBakeInfo;
			half _OverlayElementMode;
			half _VariationNoiseTillingValue;
			half _VariationCategory;
			half _VariationEnd;
			half _TintingSpace;
			half _ImpostorColorMode;
			half _ImpostorMetallicValue;
			half _TintingEnd;
			half _OverlayBakeInfo;
			half _ImpostorSmoothnessValue;
			half _DrynessBakeInfo;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _VariationNoisePivotValue;
			half _DrynessCategory;
			half _TintingCategory;
			half _ImpostorOcclusionValue;
			half _ImpostorMaskOffInfo;
			half _TintingMeshMode;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutMeshValue;
			half _CutoutMeshMode;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _DitherConstantValue;
			half _DitherDistanceMinValue;
			half _CutoutIntensityValue;
			half _DitherDistanceMaxValue;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _EmissiveIntensityValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _SubsurfaceIntensityValue;
			half _DitherDistanceValue;
			half _TintingMeshValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _DrynessGrayValue;
			half _DrynessShiftValue;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessCategory;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _WetnessIntensityValue;
			half _DrynessSmoothnessValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayNormalValue;
			half _OverlaySmoothnessValue;
			half _OverlaySubsurfaceValue;
			half _DrynessSubsurfaceValue;
			half _CutoutBakeInfo;
			half _CutoutEnd;
			half _SubsurfaceMultiValue;
			half _ImpostorCategory;
			half _ImpostorEnd;
			half _IsImpostorShader;
			half _IsSubsurfaceShader;
			half _MotionWindCategory;
			half _MotionWindEnd;
			half _MotionInteractionCategory;
			half _InteractionInteractionEnd;
			half _MotionWindMode;
			half _MotionWindElementMode;
			half _MotionPushElementMode;
			half _MotionWindOffInfo;
			half _MotionWindOptimizedInfo;
			half _MotionWindAdvancedInfo;
			half _SizeFadeCategory;
			half _SizeFadeEnd;
			half _SizeFadeElementMode;
			float _AI_Frames;
			float _AI_FramesX;
			float _AI_FramesY;
			float _AI_ImpostorSize;
			half _RenderShadow;
			half _RenderMotion;
			half _IsIdentifier;
			half _IsConverted;
			half _ImpostorMaskDefaultInfo;
			half _ImpostorMaskPackedInfo;
			half _ImpostorMaskShadingInfo;
			half _ImpostorMaskMode;
			half _ImpostorAlphaClipValue;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceAngleValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceSpace;
			half _IsVersion;
			float _AI_Parallax;
			half _RenderDecals;
			half _CategoryRender;
			half _EndRender;
			half _NoiseCategory;
			half _NoiseEnd;
			half _IsInitialized;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _HasDefaultTextures;
			half _IsCollected;
			half _RenderSSR;
			float _AI_TextureBias;
			float _AI_DepthSize;
			float _AI_ShadowBias;
			half _MotionBaseSpeedValue;
			half _MotionBaseNoiseValue;
			half _global_wind_layer_value;
			half _MotionBaseDelayValue;
			half _global_push_layer_value;
			half _MotionPushPivotValue;
			half _MotionPushIntensityValue;
			half _SubsurfaceCategory;
			half _SubsurfaceEnd;
			half _SubsurfaceDirectValue;
			half _MotionBaseTillingValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceShadowValue;
			half _SubsurfaceElementMode;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DitherCategory;
			half _DitherEnd;
			half _CutoutCategory;
			half _SubsurfaceAmbientValue;
			half _CutoutElementMode;
			half _MotionIntensityValue;
			half _MotionBasePivotValue;
			float _AI_ShadowView;
			float _AI_Clip;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalGlowLayerValue;
			half _MotionTillingValue;
			half _GlobalGlowPivotValue;
			half _GlobalAtmoPivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalWindLayerValue;
			half _GlobalPushLayerValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _MotionBaseIntensityValue;
			half _GlobalAtmoLayerValue;
			half _SubsurfaceThicknessValue;
			float _BlendMode;
			CBUFFER_END

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_Albedo);
			SAMPLER(sampler_Albedo);
			TEXTURE2D(_Normals);
			SAMPLER(sampler_Normals);
			float3 TVE_WorldOrigin;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_MotionNoiseTexRT);
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_Shader);
			TEXTURE2D(_Packed);
			TEXTURE2D(_Vertex);
			SAMPLER(sampler_Shader);
			SAMPLER(sampler_Packed);
			SAMPLER(sampler_Vertex);


			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			float2 VectortoHemiOctahedron( float3 N )
			{
				N.xy /= dot( 1.0, abs( N ) );
				return float2( N.x + N.y, N.x - N.y );
			}
			
			float3 HemiOctahedronToVector( float2 Oct )
			{
				Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y ) * 0.5;
				float3 N = float3( Oct, 1 - dot( 1.0, abs( Oct ) ) );
				return normalize( N );
			}
			
			inline void RayPlaneIntersectionUV( float3 normalOS, float3 rayPosition, float3 rayDirection, inout float2 uvs, inout float3 localNormal )
			{
				float lDotN = dot( rayDirection, normalOS ); 
				float p0l0DotN = dot( -rayPosition, normalOS );
				float t = p0l0DotN / lDotN;
				float3 p = rayDirection * t + rayPosition;
				float3 upVector = float3( 0, 1, 0 );
				float3 tangent = normalize( cross( upVector, normalOS ) + float3( -0.001, 0, 0 ) );
				float3 bitangent = cross( tangent, normalOS );
				float frameX = dot( p, tangent );
				float frameZ = dot( p, bitangent );
				uvs = -float2( frameX, frameZ );
				if( t <= 0.0 )
				uvs = 0;
				float3x3 worldToLocal = float3x3( tangent, bitangent, normalOS );
				localNormal = normalize( mul( worldToLocal, rayDirection ) );
			}
			
			inline void OctaImpostorVertex( inout float4 positionOS, inout float3 normalOS, inout float4 uvsFrame1, inout float4 uvsFrame2, inout float4 uvsFrame3, inout float4 octaFrame, inout float4 viewPos )
			{
				float2 uvOffset = _AI_SizeOffset.zw;
				float parallax = -_AI_Parallax; 
				float UVscale = _AI_ImpostorSize;
				float framesXY = _AI_Frames;
				float prevFrame = framesXY - 1;
				float3 fractions = 1.0 / float3( framesXY, prevFrame, UVscale );
				float fractionsFrame = fractions.x;
				float fractionsPrevFrame = fractions.y;
				float fractionsUVscale = fractions.z;
				float3 worldCameraPos;
				#if defined(UNITY_PASS_SHADOWCASTER)
				float3 worldOrigin = 0;
				float4 perspective = float4( 0, 0, 0, 1 );
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				perspective = float4( 0, 0, 5000, 0 );
				worldOrigin = ai_ObjectToWorld._m03_m13_m23;
				}
				worldCameraPos = worldOrigin + mul( UNITY_MATRIX_I_V, perspective ).xyz;
				#else
				if ( UNITY_MATRIX_P[ 3 ][ 3 ] == 1 )
				{
				worldCameraPos = ai_ObjectToWorld._m03_m13_m23 + UNITY_MATRIX_I_V._m02_m12_m22 * 5000;
				}
				else
				{
				worldCameraPos = GetCameraRelativePositionWS( _WorldSpaceCameraPos );
				}
				#endif
				float3 objectCameraPosition = mul( ai_WorldToObject, float4( worldCameraPos, 1 ) ).xyz - _AI_Offset.xyz; 
				float3 objectCameraDirection = normalize( objectCameraPosition );
				float3 upVector = float3( 0,1,0 );
				float3 objectHorizontalVector = normalize( cross( objectCameraDirection, upVector ) );
				float3 objectVerticalVector = cross( objectHorizontalVector, objectCameraDirection );
				float2 uvExpansion = positionOS.xy;
				float3 billboard = objectHorizontalVector * uvExpansion.x + objectVerticalVector * uvExpansion.y;
				float3 localDir = billboard - objectCameraPosition; 
				objectCameraDirection = trunc( objectCameraDirection * 65536.0 ) / 65536.0;
				objectCameraDirection.y = max(0.001, objectCameraDirection.y);
				float2 frameOcta = VectortoHemiOctahedron( objectCameraDirection.xzy ) * 0.5 + 0.5;
				float2 prevOctaFrame = frameOcta * prevFrame;
				float2 baseOctaFrame = floor( prevOctaFrame );
				float2 fractionOctaFrame = ( baseOctaFrame * fractionsFrame );
				float2 octaFrame1 = ( baseOctaFrame * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa1WorldY = HemiOctahedronToVector( octaFrame1 ).xzy;
				float3 octa1LocalY;
				float2 uvFrame1;
				RayPlaneIntersectionUV( octa1WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame1, /*inout*/ octa1LocalY );
				float2 uvParallax1 = octa1LocalY.xy * fractionsFrame * parallax;
				uvFrame1 = ( uvFrame1 * fractionsUVscale + 0.5 ) * fractionsFrame + fractionOctaFrame;
				uvsFrame1 = float4( uvParallax1, uvFrame1) - float4( 0, 0, uvOffset );
				float2 fractPrevOctaFrame = frac( prevOctaFrame );
				float2 cornerDifference = lerp( float2( 0,1 ) , float2( 1,0 ) , saturate( ceil( ( fractPrevOctaFrame.x - fractPrevOctaFrame.y ) ) ));
				float2 octaFrame2 = ( ( baseOctaFrame + cornerDifference ) * fractionsPrevFrame ) * 2.0 - 1.0;
				float3 octa2WorldY = HemiOctahedronToVector( octaFrame2 ).xzy;
				float3 octa2LocalY;
				float2 uvFrame2;
				RayPlaneIntersectionUV( octa2WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame2, /*inout*/ octa2LocalY );
				float2 uvParallax2 = octa2LocalY.xy * fractionsFrame * parallax;
				uvFrame2 = ( uvFrame2 * fractionsUVscale + 0.5 ) * fractionsFrame + ( ( cornerDifference * fractionsFrame ) + fractionOctaFrame );
				uvsFrame2 = float4( uvParallax2, uvFrame2) - float4( 0, 0, uvOffset );
				float2 octaFrame3 = ( ( baseOctaFrame + 1 ) * fractionsPrevFrame  ) * 2.0 - 1.0;
				float3 octa3WorldY = HemiOctahedronToVector( octaFrame3 ).xzy;
				float3 octa3LocalY;
				float2 uvFrame3;
				RayPlaneIntersectionUV( octa3WorldY, objectCameraPosition, localDir, /*inout*/ uvFrame3, /*inout*/ octa3LocalY );
				float2 uvParallax3 = octa3LocalY.xy * fractionsFrame * parallax;
				uvFrame3 = ( uvFrame3 * fractionsUVscale + 0.5 ) * fractionsFrame + ( fractionOctaFrame + fractionsFrame );
				uvsFrame3 = float4( uvParallax3, uvFrame3) - float4( 0, 0, uvOffset );
				octaFrame = 0;
				octaFrame.xy = prevOctaFrame;
				octaFrame.zw = fractionOctaFrame;
				positionOS.xyz = billboard + _AI_Offset.xyz;
				normalOS.xyz = objectCameraDirection;
				viewPos = 0;
				viewPos.xyz = TransformWorldToView( TransformObjectToWorld( positionOS.xyz ) );
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			inline void OctaImpostorFragment( inout SurfaceOutput o, out float4 positionCS, out float3 positionWS, float4 uvsFrame1, float4 uvsFrame2, float4 uvsFrame3, float4 octaFrame, float4 interpViewPos, out float4 output0, out float4 output1, out float4 output2 )
			{
				float depthBias = -1.0;
				float textureBias = _AI_TextureBias;
				float2 fraction = frac( octaFrame.xy );
				float2 invFraction = 1 - fraction;
				float3 weights;
				weights.x = min( invFraction.x, invFraction.y );
				weights.y = abs( fraction.x - fraction.y );
				weights.z = min( fraction.x, fraction.y );
				float4 parallaxSample1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame1.zw, depthBias );
				float2 parallax1 = ( ( 0.5 - parallaxSample1.a ) * uvsFrame1.xy ) + uvsFrame1.zw;
				float4 parallaxSample2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame2.zw, depthBias );
				float2 parallax2 = ( ( 0.5 - parallaxSample2.a ) * uvsFrame2.xy ) + uvsFrame2.zw;
				float4 parallaxSample3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, uvsFrame3.zw, depthBias );
				float2 parallax3 = ( ( 0.5 - parallaxSample3.a ) * uvsFrame3.xy ) + uvsFrame3.zw;
				float4 albedo1 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax1, textureBias );
				float4 albedo2 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax2, textureBias );
				float4 albedo3 = SAMPLE_TEXTURE2D_BIAS( _Albedo, sampler_Albedo, parallax3, textureBias );
				float4 blendedAlbedo = albedo1 * weights.x + albedo2 * weights.y + albedo3 * weights.z;
				o.Alpha = ( blendedAlbedo.a - _AI_Clip );
				clip( o.Alpha );
				float t = ceil( fraction.x - fraction.y );
				float4 cornerDifference = float4( t, 1 - t, 1, 1 );
				float2 step_1 = ( parallax1 - octaFrame.zw ) * _AI_Frames;
				float4 step23 = ( float4( parallax2, parallax3 ) -  octaFrame.zwzw ) * _AI_Frames - cornerDifference;
				step_1 = step_1 * (1-step_1);
				step23 = step23 * (1-step23);
				float3 steps;
				steps.x = step_1.x * step_1.y;
				steps.y = step23.x * step23.y;
				steps.z = step23.z * step23.w;
				steps = step(-steps, 0);
				float final = dot( steps, weights );
				clip( final - 0.5 );
				o.Albedo = blendedAlbedo.rgb;
				#if defined(AI_HD_RENDERPIPELINE)
				float4 feat1 = _Features.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.Diffusion = feat1.rgb;
				o.Features = feat1.a;
				float4 test1 = _Specular.SampleLevel( SamplerState_Point_Repeat, parallax1, 0);
				o.MetalTangent = test1.b;
				#endif
				float4 normals1 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax1, textureBias );
				float4 normals2 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax2, textureBias );
				float4 normals3 = SAMPLE_TEXTURE2D_BIAS( _Normals, sampler_Normals, parallax3, textureBias );
				float4 blendedNormal = normals1 * weights.x  + normals2 * weights.y + normals3 * weights.z;
				float4 output0a = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax1, textureBias );
				float4 output0b = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax2, textureBias );
				float4 output0c = SAMPLE_TEXTURE2D_BIAS( _Shader, sampler_Shader, parallax3, textureBias );
				output0 = output0a * weights.x  + output0b * weights.y + output0c * weights.z; 
				float4 output1a = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax1, textureBias );
				float4 output1b = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax2, textureBias );
				float4 output1c = SAMPLE_TEXTURE2D_BIAS( _Packed, sampler_Packed, parallax3, textureBias );
				output1 = output1a * weights.x  + output1b * weights.y + output1c * weights.z; 
				float4 output2a = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax1, textureBias );
				float4 output2b = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax2, textureBias );
				float4 output2c = SAMPLE_TEXTURE2D_BIAS( _Vertex, sampler_Vertex, parallax3, textureBias );
				output2 = output2a * weights.x  + output2b * weights.y + output2c * weights.z; 
				float3 localNormal = blendedNormal.rgb * 2.0 - 1.0;
				float3 worldNormal = normalize( mul( (float3x3)ai_ObjectToWorld, localNormal ) );
				o.Normal = worldNormal;
				float3 viewPos = interpViewPos.xyz;
				float depthOffset = ( ( parallaxSample1.a * weights.x + parallaxSample2.a * weights.y + parallaxSample3.a * weights.z ) - 0.5 /** 2.0 - 1.0*/ ) /** 0.5*/ * _AI_DepthSize * length( ai_ObjectToWorld[ 2 ].xyz );
				#if ( defined(SHADERPASS) && ((defined(SHADERPASS_SHADOWS) && SHADERPASS == SHADERPASS_SHADOWS) || (defined(SHADERPASS_SHADOWCASTER) && SHADERPASS == SHADERPASS_SHADOWCASTER)) ) || defined(UNITY_PASS_SHADOWCASTER)
				viewPos.z += depthOffset * _AI_ShadowView;
				viewPos.z += -_AI_ShadowBias;
				#else 
				viewPos.z += depthOffset;
				#endif
				positionWS = mul( UNITY_MATRIX_I_V, float4( viewPos.xyz, 1 ) ).xyz;
				positionCS = mul( UNITY_MATRIX_P, float4( viewPos, 1 ) );
				#if defined(UNITY_PASS_SHADOWCASTER) && !defined(SHADERPASS)
				#if UNITY_REVERSED_Z
				positionCS.z = min( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#else
				positionCS.z = max( positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE );
				#endif
				#endif
				positionCS.xyz /= positionCS.w;
				if( UNITY_NEAR_CLIP_VALUE < 0 )
				positionCS = positionCS * 0.5 + 0.5;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g153365( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g153374( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.baseColor =                 surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
				surfaceData.specularColor =             surfaceDescription.Specular;
				surfaceData.coatMask =                  surfaceDescription.CoatMask;

				#ifdef _HAS_REFRACTION
					if (_EnableSSRefraction)
					{
						surfaceData.ior =                       surfaceDescription.RefractionIndex;
						surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
						surfaceData.atDistance =                surfaceDescription.RefractionDistance;

						surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
						surfaceDescription.Alpha = 1.0;
					}
					else
					{
						surfaceData.ior = 1.0;
						surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
						surfaceData.atDistance = 1.0;
						surfaceData.transmittanceMask = 0.0;
						surfaceDescription.Alpha = 1.0;
					}
				#else
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
					surfaceData.atDistance = 1.0;
					surfaceData.transmittanceMask = 0.0;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.iridescenceMask =           surfaceDescription.IridescenceMask;
					surfaceData.iridescenceThickness =      surfaceDescription.IridescenceThickness;
				#endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif
				#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				#endif
				#ifdef ASE_LIT_CLEAR_COAT
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif
				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif
				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
					surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
				#endif

				GetNormalWS( fragInputs, float3( 0.0, 0.0, 1.0 ), surfaceData.normalWS, float3( 1.0, 1.0, 1.0 ) );

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
					GetNormalWS(fragInputs, surfaceDescription.BentNormal, bentNormalWS, float3( 1, 1, 1 ) );
				#endif

				surfaceData.geomNormalWS = T2W(fragInputs, 2);

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
					surfaceData.thickness = surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask = surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
					surfaceData.diffusionProfileHash = asuint(surfaceDescription.DiffusionProfile);
				#endif

				surfaceData.tangentWS = normalize( T2W(fragInputs, 0).xyz );
				#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.anisotropy = surfaceDescription.Anisotropy;
					surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.worldToTangent);
				#endif
				surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				#if defined(_SPECULAR_OCCLUSION_CUSTOM)
					surfaceData.specularOcclusion = surfaceDescription.SpecularOcclusion;
				#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
				#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
				#else
					surfaceData.specularOcclusion = 1.0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
					surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, T2W(fragInputs, 2), surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
				#endif
			}

			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription,FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				//#ifdef LOD_FADE_CROSSFADE
				//	uint3 fadeMaskSeed = asuint((int3)(V * _ScreenSize.xyx));
				//	LODDitheringTransition(fadeMaskSeed, unity_LODFade.x);
				//#endif

				#ifdef _ALPHATEST_ON
						DoAlphaTest(surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold);
				#endif

				float3 bentNormalWS;
				BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);

				#if HAVE_DECALS
				if( _EnableDecals )
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif

				#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION <= 50702
					InitBuiltinData( surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.positionRWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#else
					InitBuiltinData( posInput, surfaceDescription.Alpha, bentNormalWS, -T2W(fragInputs, 2), fragInputs.texCoord1, fragInputs.texCoord2, builtinData );
				#endif

				builtinData.emissiveColor = surfaceDescription.Emission;

				builtinData.depthOffset = 0.0;

				#if (SHADERPASS == SHADERPASS_DISTORTION)
					builtinData.distortion = surfaceDescription.Distortion;
					builtinData.distortionBlur = surfaceDescription.DistortionBlur;
				#else
					builtinData.distortion = float2(0.0, 0.0);
					builtinData.distortionBlur = 0.0;
				#endif

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID( inputMesh, outputPackedVaryingsMeshToPS );
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g153438 = (TVEModelData)0;
				float In_Dummy16_g153438 = 0.0;
				TVEModelData Data16_g153406 = (TVEModelData)0;
				half Dummy181_g153404 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _InteractionInteractionEnd ) + _MotionWindMode + _MotionWindElementMode + _MotionPushElementMode + ( _MotionWindOffInfo + _MotionWindOptimizedInfo + _MotionWindAdvancedInfo ) );
				float In_Dummy16_g153406 = Dummy181_g153404;
				TVEModelData Data16_g153386 = (TVEModelData)0;
				half Dummy181_g153383 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g153386 = Dummy181_g153383;
				TVEModelData Data16_g153150 = (TVEModelData)0;
				float In_Dummy16_g153150 = 0.0;
				OctaImpostorVertex( inputMesh.positionOS, inputMesh.normalOS, outputPackedVaryingsMeshToPS.UVsFrame122_g151868, outputPackedVaryingsMeshToPS.UVsFrame222_g151868, outputPackedVaryingsMeshToPS.UVsFrame322_g151868, outputPackedVaryingsMeshToPS.octaframe22_g151868, outputPackedVaryingsMeshToPS.viewPos22_g151868 );
				float3 worldPosOut22_g151868 = GetAbsolutePositionWS( mul( UNITY_MATRIX_I_V, float4( outputPackedVaryingsMeshToPS.viewPos22_g151868.xyz, 1.0 ) ).xyz );
				half3 Input_PositionWS319_g153142 = worldPosOut22_g151868;
				float3 worldToObj315_g153142 = mul( GetWorldToObjectMatrix(), float4( GetCameraRelativePositionWS(Input_PositionWS319_g153142), 1 ) ).xyz;
				half3 Model_PositionOS316_g153142 = worldToObj315_g153142;
				float3 In_PositionOS16_g153150 = Model_PositionOS316_g153142;
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153150 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153150 = Model_PositionWO311_g153142;
				float3 In_PositionRawOS16_g153150 = Model_PositionOS316_g153142;
				float3 In_PositionAddOS16_g153150 = float3( 0,0,0 );
				float3 In_PivotOS16_g153150 = float3( 0,0,0 );
				float3 localObjectPosition_UNITY_MATRIX_M14_g153145 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g153145 = ( localObjectPosition_UNITY_MATRIX_M14_g153145 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g153145 = localObjectPosition_UNITY_MATRIX_M14_g153145;
				#endif
				half3 ObjectData20_g153147 = staticSwitch13_g153145;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				half3 WorldData19_g153147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g153147 = WorldData19_g153147;
				#else
				float3 staticSwitch14_g153147 = ObjectData20_g153147;
				#endif
				float3 temp_output_124_0_g153145 = staticSwitch14_g153147;
				float3 vertexToFrag305_g153142 = temp_output_124_0_g153145;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153150 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153150 = Model_PivotWO312_g153142;
				half3 Model_NormalOS313_g153142 = inputMesh.normalOS;
				float3 In_NormalOS16_g153150 = Model_NormalOS313_g153142;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				half3 Model_Normal_WS314_g153142 = ase_worldNormal;
				float3 In_NormalWS16_g153150 = Model_Normal_WS314_g153142;
				float3 In_NormalRawOS16_g153150 = Model_NormalOS313_g153142;
				float3 In_NormalRawWS16_g153150 = Model_Normal_WS314_g153142;
				float4 In_TangentOS16_g153150 = float4( 0,1,0,1 );
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153150 = Model_ViewDirWS347_g153142;
				float4 In_VertexData16_g153150 = float4( 1,1,1,1 );
				float4 In_MotionData16_g153150 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g153150 = float4( 1,1,1,1 );
				float4 In_RotationData16_g153150 = float4( 0,0,0,0 );
				Data16_g153150.Dummy = In_Dummy16_g153150;
				Data16_g153150.PositionOS = In_PositionOS16_g153150;
				Data16_g153150.PositionWS = In_PositionWS16_g153150;
				Data16_g153150.PositionWO = In_PositionWO16_g153150;
				Data16_g153150.PositionRawOS = In_PositionRawOS16_g153150;
				Data16_g153150.PositionAddOS = In_PositionAddOS16_g153150;
				Data16_g153150.PivotOS = In_PivotOS16_g153150;
				Data16_g153150.PivotWS = In_PivotWS16_g153150;
				Data16_g153150.PivotWO = In_PivotWO16_g153150;
				Data16_g153150.NormalOS = In_NormalOS16_g153150;
				Data16_g153150.NormalWS = In_NormalWS16_g153150;
				Data16_g153150.NormalRawOS = In_NormalRawOS16_g153150;
				Data16_g153150.NormalRawWS = In_NormalRawWS16_g153150;
				Data16_g153150.TangentOS = In_TangentOS16_g153150;
				Data16_g153150.ViewDirWS = In_ViewDirWS16_g153150;
				Data16_g153150.VertexData = In_VertexData16_g153150;
				Data16_g153150.MotionData = In_MotionData16_g153150;
				Data16_g153150.BoundsData = In_BoundsData16_g153150;
				Data16_g153150.RotationData = In_RotationData16_g153150;
				TVEModelData Data15_g153385 = Data16_g153150;
				float Out_Dummy15_g153385 = 0;
				float3 Out_PositionOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153385 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153385 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153385 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153385 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153385 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153385 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153385 = float3( 0,0,0 );
				float4 Out_VertexData15_g153385 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153385 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153385 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153385 = float4( 0,0,0,0 );
				Out_Dummy15_g153385 = Data15_g153385.Dummy;
				Out_PositionOS15_g153385 = Data15_g153385.PositionOS;
				Out_PositionWS15_g153385 = Data15_g153385.PositionWS;
				Out_PositionWO15_g153385 = Data15_g153385.PositionWO;
				Out_PositionRawOS15_g153385 = Data15_g153385.PositionRawOS;
				Out_PositionAddOS15_g153385 = Data15_g153385.PositionAddOS;
				Out_PivotOS15_g153385 = Data15_g153385.PivotOS;
				Out_PivotWS15_g153385 = Data15_g153385.PivotWS;
				Out_PivotWO15_g153385 = Data15_g153385.PivotWO;
				Out_NormalOS15_g153385 = Data15_g153385.NormalOS;
				Out_NormalWS15_g153385 = Data15_g153385.NormalWS;
				Out_NormalRawOS15_g153385 = Data15_g153385.NormalRawOS;
				Out_NormalRawWS15_g153385 = Data15_g153385.NormalRawWS;
				Out_TangentOS15_g153385 = Data15_g153385.TangentOS;
				Out_ViewDirWS15_g153385 = Data15_g153385.ViewDirWS;
				Out_VertexData15_g153385 = Data15_g153385.VertexData;
				Out_MotionData15_g153385 = Data15_g153385.MotionData;
				Out_BoundsData15_g153385 = Data15_g153385.BoundsData;
				Out_RotationData15_g153385 = Data15_g153385.RotationData;
				half3 Model_PositionOS147_g153383 = Out_PositionOS15_g153385;
				float3 temp_cast_0 = (1.0).xxx;
				float3 temp_output_210_19_g153383 = Out_PivotWO15_g153385;
				half3 Model_PivotWO162_g153383 = temp_output_210_19_g153383;
				float temp_output_7_0_g153384 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g153384 = ( _SizeFadeDistMinValue - temp_output_7_0_g153384 );
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_2 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = 0;
				half4 Input_Tex1379_g153142 = 0;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_6;
				#else
				float4 staticSwitch414_g153142 = temp_cast_7;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153387 = Data204_g153153;
				float Out_Dummy15_g153387 = 0;
				float4 Out_CoatParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153387 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153387 = float4( 0,0,0,0 );
				Out_Dummy15_g153387 = Data15_g153387.Dummy;
				Out_CoatParams15_g153387 = Data15_g153387.CoatParams;
				Out_PaintParams15_g153387 = Data15_g153387.PaintParams;
				Out_GlowParams15_g153387 = Data15_g153387.GlowParams;
				Out_AtmoParams15_g153387= Data15_g153387.AtmoParams;
				Out_FadeParams15_g153387= Data15_g153387.FadeParams;
				Out_FormParams15_g153387 = Data15_g153387.FormParams;
				Out_LandParams15_g153387 = Data15_g153387.LandParams;
				Out_WindParams15_g153387 = Data15_g153387.WindParams;
				Out_PushParams15_g153387 = Data15_g153387.PushParams;
				half4 Input_FormParams188_g153383 = Out_FormParams15_g153387;
				float lerpResult213_g153383 = lerp( 1.0 , (Input_FormParams188_g153383).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g153383 = lerpResult213_g153383;
				#else
				float staticSwitch194_g153383 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g153383 = staticSwitch194_g153383;
				float temp_output_189_0_g153383 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g153383 ) - temp_output_7_0_g153384 ) / ( temp_output_10_0_g153384 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g153383 );
				float3 appendResult200_g153383 = (float3(temp_output_189_0_g153383 , temp_output_189_0_g153383 , temp_output_189_0_g153383));
				float3 appendResult201_g153383 = (float3(1.0 , temp_output_189_0_g153383 , 1.0));
				float3 lerpResult202_g153383 = lerp( appendResult200_g153383 , appendResult201_g153383 , _SizeFadeScaleMode);
				float3 lerpResult184_g153383 = lerp( temp_cast_0 , lerpResult202_g153383 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g153383 = ( lerpResult184_g153383 * Model_PositionOS147_g153383 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g153383 = temp_output_167_0_g153383;
				#else
				float3 staticSwitch199_g153383 = Model_PositionOS147_g153383;
				#endif
				half3 Final_Position178_g153383 = staticSwitch199_g153383;
				float3 In_PositionOS16_g153386 = Final_Position178_g153383;
				float3 In_PositionWS16_g153386 = Out_PositionWS15_g153385;
				float3 In_PositionWO16_g153386 = Out_PositionWO15_g153385;
				float3 In_PositionRawOS16_g153386 = Out_PositionRawOS15_g153385;
				float3 In_PositionAddOS16_g153386 = Out_PositionAddOS15_g153385;
				float3 temp_output_210_24_g153383 = Out_PivotOS15_g153385;
				float3 In_PivotOS16_g153386 = temp_output_210_24_g153383;
				float3 In_PivotWS16_g153386 = Out_PivotWS15_g153385;
				float3 In_PivotWO16_g153386 = temp_output_210_19_g153383;
				float3 In_NormalOS16_g153386 = Out_NormalOS15_g153385;
				float3 In_NormalWS16_g153386 = Out_NormalWS15_g153385;
				float3 In_NormalRawOS16_g153386 = Out_NormalRawOS15_g153385;
				float3 In_NormalRawWS16_g153386 = Out_NormalRawWS15_g153385;
				float4 In_TangentOS16_g153386 = Out_TangentOS15_g153385;
				float3 In_ViewDirWS16_g153386 = Out_ViewDirWS15_g153385;
				float4 In_VertexData16_g153386 = Out_VertexData15_g153385;
				float4 In_MotionData16_g153386 = Out_MotionData15_g153385;
				float4 In_BoundsData16_g153386 = Out_BoundsData15_g153385;
				float4 In_RotationData16_g153386 = Out_RotationData15_g153385;
				Data16_g153386.Dummy = In_Dummy16_g153386;
				Data16_g153386.PositionOS = In_PositionOS16_g153386;
				Data16_g153386.PositionWS = In_PositionWS16_g153386;
				Data16_g153386.PositionWO = In_PositionWO16_g153386;
				Data16_g153386.PositionRawOS = In_PositionRawOS16_g153386;
				Data16_g153386.PositionAddOS = In_PositionAddOS16_g153386;
				Data16_g153386.PivotOS = In_PivotOS16_g153386;
				Data16_g153386.PivotWS = In_PivotWS16_g153386;
				Data16_g153386.PivotWO = In_PivotWO16_g153386;
				Data16_g153386.NormalOS = In_NormalOS16_g153386;
				Data16_g153386.NormalWS = In_NormalWS16_g153386;
				Data16_g153386.NormalRawOS = In_NormalRawOS16_g153386;
				Data16_g153386.NormalRawWS = In_NormalRawWS16_g153386;
				Data16_g153386.TangentOS = In_TangentOS16_g153386;
				Data16_g153386.ViewDirWS = In_ViewDirWS16_g153386;
				Data16_g153386.VertexData = In_VertexData16_g153386;
				Data16_g153386.MotionData = In_MotionData16_g153386;
				Data16_g153386.BoundsData = In_BoundsData16_g153386;
				Data16_g153386.RotationData = In_RotationData16_g153386;
				TVEModelData Data15_g153405 = Data16_g153386;
				float Out_Dummy15_g153405 = 0;
				float3 Out_PositionOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153405 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153405 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153405 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153405 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153405 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153405 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153405 = float3( 0,0,0 );
				float4 Out_VertexData15_g153405 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153405 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153405 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153405 = float4( 0,0,0,0 );
				Out_Dummy15_g153405 = Data15_g153405.Dummy;
				Out_PositionOS15_g153405 = Data15_g153405.PositionOS;
				Out_PositionWS15_g153405 = Data15_g153405.PositionWS;
				Out_PositionWO15_g153405 = Data15_g153405.PositionWO;
				Out_PositionRawOS15_g153405 = Data15_g153405.PositionRawOS;
				Out_PositionAddOS15_g153405 = Data15_g153405.PositionAddOS;
				Out_PivotOS15_g153405 = Data15_g153405.PivotOS;
				Out_PivotWS15_g153405 = Data15_g153405.PivotWS;
				Out_PivotWO15_g153405 = Data15_g153405.PivotWO;
				Out_NormalOS15_g153405 = Data15_g153405.NormalOS;
				Out_NormalWS15_g153405 = Data15_g153405.NormalWS;
				Out_NormalRawOS15_g153405 = Data15_g153405.NormalRawOS;
				Out_NormalRawWS15_g153405 = Data15_g153405.NormalRawWS;
				Out_TangentOS15_g153405 = Data15_g153405.TangentOS;
				Out_ViewDirWS15_g153405 = Data15_g153405.ViewDirWS;
				Out_VertexData15_g153405 = Data15_g153405.VertexData;
				Out_MotionData15_g153405 = Data15_g153405.MotionData;
				Out_BoundsData15_g153405 = Data15_g153405.BoundsData;
				Out_RotationData15_g153405 = Data15_g153405.RotationData;
				float3 temp_output_1567_0_g153404 = Out_PositionOS15_g153405;
				float3 In_PositionOS16_g153406 = temp_output_1567_0_g153404;
				float3 In_PositionWS16_g153406 = Out_PositionWS15_g153405;
				float3 temp_output_1567_17_g153404 = Out_PositionWO15_g153405;
				float3 In_PositionWO16_g153406 = temp_output_1567_17_g153404;
				float3 In_PositionRawOS16_g153406 = Out_PositionRawOS15_g153405;
				float3 In_PositionAddOS16_g153406 = Out_PositionAddOS15_g153405;
				float3 In_PivotOS16_g153406 = Out_PivotOS15_g153405;
				float3 In_PivotWS16_g153406 = Out_PivotWS15_g153405;
				float3 temp_output_1567_19_g153404 = Out_PivotWO15_g153405;
				float3 In_PivotWO16_g153406 = temp_output_1567_19_g153404;
				float3 In_NormalOS16_g153406 = Out_NormalOS15_g153405;
				float3 In_NormalWS16_g153406 = Out_NormalWS15_g153405;
				float3 In_NormalRawOS16_g153406 = Out_NormalRawOS15_g153405;
				float3 In_NormalRawWS16_g153406 = Out_NormalRawWS15_g153405;
				float4 In_TangentOS16_g153406 = Out_TangentOS15_g153405;
				float3 In_ViewDirWS16_g153406 = Out_ViewDirWS15_g153405;
				float4 In_VertexData16_g153406 = Out_VertexData15_g153405;
				float4 In_MotionData16_g153406 = Out_MotionData15_g153405;
				float4 In_BoundsData16_g153406 = Out_BoundsData15_g153405;
				float2 temp_cast_36 = (0.0).xx;
				half3 Model_PositionOS147_g153404 = temp_output_1567_0_g153404;
				half Base_Mask217_g153404 = saturate( ( Model_PositionOS147_g153404.y / _AI_Offset.y ) );
				half3 Model_PositionWO162_g153404 = temp_output_1567_17_g153404;
				half3 Model_PivotWO402_g153404 = temp_output_1567_19_g153404;
				float3 lerpResult829_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionBasePivotValue);
				half3 Base_Position1394_g153404 = lerpResult829_g153404;
				half3 Input_PositionWO419_g153419 = Base_Position1394_g153404;
				half Flow_Tillling1397_g153404 = _MotionTillingValue;
				half Input_MotionTillingRT670_g153419 = ( Flow_Tillling1397_g153404 + 0.2 );
				half2 Noise_CoordRT668_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTillingRT670_g153419 * 0.005 );
				half4 Noise_ParamsRT535_g153419 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTexRT, sampler_Linear_Repeat, Noise_CoordRT668_g153419, 0.0 );
				half Flow_Value1599_g153404 = _MotionIntensityValue;
				half Input_MotionValue629_g153419 = Flow_Value1599_g153404;
				float2 lerpResult709_g153419 = lerp( float2( 0.5,0.5 ) , (Noise_ParamsRT535_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult712_g153419 = (float3(lerpResult709_g153419 , ( (Noise_ParamsRT535_g153419).b * Input_MotionValue629_g153419 )));
				float4 lerpResult627_g153419 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g153419 = (lerpResult627_g153419).xy;
				half Input_MotionTilling321_g153419 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g153419 = ( -(Input_PositionWO419_g153419).xz * Input_MotionTilling321_g153419 * 0.005 );
				float2 temp_output_3_0_g153420 = Noise_Coord515_g153419;
				float2 temp_output_21_0_g153420 = (Global_WindDirection593_g153419*2.0 + -1.0);
				float lerpResult128_g153425 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g153419 = _MotionBaseSpeedValue;
				half Noise_Speed516_g153419 = ( ( lerpResult128_g153425 * Input_MotionSpeed62_g153419 ) * 0.02 );
				float temp_output_15_0_g153420 = Noise_Speed516_g153419;
				float temp_output_23_0_g153420 = frac( temp_output_15_0_g153420 );
				float4 lerpResult39_g153420 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * temp_output_23_0_g153420 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g153420 + ( temp_output_21_0_g153420 * frac( ( temp_output_15_0_g153420 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g153420 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params685_g153419 = lerpResult39_g153420;
				half Input_MotionNoise552_g153419 = _MotionBaseNoiseValue;
				half Global_WindIntensity576_g153419 = (lerpResult627_g153419).z;
				half Motion_Intensity720_g153419 = ( Global_WindIntensity576_g153419 * Input_MotionValue629_g153419 );
				float lerpResult701_g153419 = lerp( 1.0 , Input_MotionNoise552_g153419 , Motion_Intensity720_g153419);
				float2 lerpResult646_g153419 = lerp( Global_WindDirection593_g153419 , (Noise_Params685_g153419).rg , lerpResult701_g153419);
				float2 lerpResult724_g153419 = lerp( float2( 0.5,0.5 ) , lerpResult646_g153419 , Motion_Intensity720_g153419);
				float3 appendResult708_g153419 = (float3(lerpResult724_g153419 , ( (Noise_Params685_g153419).a * Motion_Intensity720_g153419 )));
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch673_g153419 = appendResult712_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch673_g153419 = appendResult708_g153419;
				#else
				float3 staticSwitch673_g153419 = half3(0.5,0.5,0);
				#endif
				half3 Motion_Local694_g153419 = staticSwitch673_g153419;
				float temp_output_136_0_g153426 = _global_wind_layer_value;
				float temp_output_19_0_g153428 = TVE_WindLayers[(int)temp_output_136_0_g153426];
				half3 Input_Position180_g153429 = Input_PositionWO419_g153419;
				float2 temp_output_75_0_g153429 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_82_0_g153429 = temp_output_136_0_g153426;
				float2 temp_output_119_0_g153429 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153429).xz ) );
				float temp_output_7_0_g153434 = 1.0;
				float temp_output_10_0_g153434 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153434 );
				float4 lerpResult131_g153429 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153429,temp_output_82_0_g153429, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153429,temp_output_82_0_g153429, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153429 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153434 ) / temp_output_10_0_g153434 ) ));
				float4 temp_output_17_0_g153428 = lerpResult131_g153429;
				float4 temp_output_3_0_g153428 = TVE_WindParams;
				float4 ifLocalVar18_g153428 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153428 >= 0.5 )
				ifLocalVar18_g153428 = temp_output_17_0_g153428;
				else
				ifLocalVar18_g153428 = temp_output_3_0_g153428;
				float4 lerpResult22_g153428 = lerp( temp_output_3_0_g153428 , temp_output_17_0_g153428 , temp_output_19_0_g153428);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153428 = lerpResult22_g153428;
				#else
				float4 staticSwitch24_g153428 = ifLocalVar18_g153428;
				#endif
				float4 temp_output_610_0_g153419 = staticSwitch24_g153428;
				float2 lerpResult699_g153419 = lerp( float2( 0.5,0.5 ) , (temp_output_610_0_g153419).rg , Input_MotionValue629_g153419);
				float3 appendResult643_g153419 = (float3(lerpResult699_g153419 , ( (temp_output_610_0_g153419).b * Input_MotionValue629_g153419 )));
				float3 lerpResult623_g153419 = lerp( Motion_Local694_g153419 , appendResult643_g153419 , (temp_output_610_0_g153419).a);
				#if defined( TVE_MOTION_WIND_OFF )
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#elif defined( TVE_MOTION_WIND_OPTIMIZED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#elif defined( TVE_MOTION_WIND_ADVANCED )
				float3 staticSwitch693_g153419 = lerpResult623_g153419;
				#else
				float3 staticSwitch693_g153419 = appendResult643_g153419;
				#endif
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g153419 = staticSwitch693_g153419;
				#else
				float3 staticSwitch612_g153419 = Motion_Local694_g153419;
				#endif
				float3 temp_output_1628_567_g153404 = staticSwitch612_g153419;
				float2 break83_g153418 = ((temp_output_1628_567_g153404).xy*2.0 + -1.0);
				float3 appendResult79_g153418 = (float3(break83_g153418.x , 0.0 , break83_g153418.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153418 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Base_Intensity1623_g153404 = length( Base_Direction893_g153404 );
				float lerpResult1631_g153404 = lerp( 1.0 , ( Base_Intensity1623_g153404 * Base_Intensity1623_g153404 ) , _MotionBaseDelayValue);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g153404 = ( _MotionBaseIntensityValue * Base_Mask217_g153404 * Base_Direction893_g153404 * lerpResult1631_g153404 );
				#else
				float2 staticSwitch1573_g153404 = temp_cast_36;
				#endif
				float temp_output_136_0_g153408 = _global_push_layer_value;
				float temp_output_19_0_g153409 = TVE_PushLayers[(int)temp_output_136_0_g153408];
				float3 lerpResult1547_g153404 = lerp( Model_PositionWO162_g153404 , Model_PivotWO402_g153404 , _MotionPushPivotValue);
				half3 Push_Position1549_g153404 = lerpResult1547_g153404;
				half3 Input_Position180_g153410 = Push_Position1549_g153404;
				float2 temp_output_75_0_g153410 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_82_0_g153410 = temp_output_136_0_g153408;
				float2 temp_output_119_0_g153410 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153410).xz ) );
				float temp_output_7_0_g153415 = 1.0;
				float temp_output_10_0_g153415 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153415 );
				float4 lerpResult131_g153410 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153410,temp_output_82_0_g153410, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153410,temp_output_82_0_g153410, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153410 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153415 ) / temp_output_10_0_g153415 ) ));
				float4 temp_output_17_0_g153409 = lerpResult131_g153410;
				float4 temp_output_3_0_g153409 = TVE_PushParams;
				float4 ifLocalVar18_g153409 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153409 >= 0.5 )
				ifLocalVar18_g153409 = temp_output_17_0_g153409;
				else
				ifLocalVar18_g153409 = temp_output_3_0_g153409;
				float4 lerpResult22_g153409 = lerp( temp_output_3_0_g153409 , temp_output_17_0_g153409 , temp_output_19_0_g153409);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153409 = lerpResult22_g153409;
				#else
				float4 staticSwitch24_g153409 = ifLocalVar18_g153409;
				#endif
				half4 Global_PushParams214_g153404 = staticSwitch24_g153409;
				float2 break83_g153417 = ((Global_PushParams214_g153404).rg*2.0 + -1.0);
				float3 appendResult79_g153417 = (float3(break83_g153417.x , 0.0 , break83_g153417.y));
				half2 Push_Direction1608_g153404 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g153417 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half Push_Intensity1501_g153404 = _MotionPushIntensityValue;
				half Push_Influence1504_g153404 = saturate( ( (Global_PushParams214_g153404).a * Push_Intensity1501_g153404 ) );
				float2 lerpResult1496_g153404 = lerp( staticSwitch1573_g153404 , ( Push_Direction1608_g153404 * Push_Intensity1501_g153404 * Base_Mask217_g153404 ) , Push_Influence1504_g153404);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g153404 = lerpResult1496_g153404;
				#else
				float2 staticSwitch1506_g153404 = staticSwitch1573_g153404;
				#endif
				half2 Base_Motion1440_g153404 = staticSwitch1506_g153404;
				half2 Final_RoationData1570_g153404 = Base_Motion1440_g153404;
				float4 In_RotationData16_g153406 = float4( Final_RoationData1570_g153404, 0.0 , 0.0 );
				Data16_g153406.Dummy = In_Dummy16_g153406;
				Data16_g153406.PositionOS = In_PositionOS16_g153406;
				Data16_g153406.PositionWS = In_PositionWS16_g153406;
				Data16_g153406.PositionWO = In_PositionWO16_g153406;
				Data16_g153406.PositionRawOS = In_PositionRawOS16_g153406;
				Data16_g153406.PositionAddOS = In_PositionAddOS16_g153406;
				Data16_g153406.PivotOS = In_PivotOS16_g153406;
				Data16_g153406.PivotWS = In_PivotWS16_g153406;
				Data16_g153406.PivotWO = In_PivotWO16_g153406;
				Data16_g153406.NormalOS = In_NormalOS16_g153406;
				Data16_g153406.NormalWS = In_NormalWS16_g153406;
				Data16_g153406.NormalRawOS = In_NormalRawOS16_g153406;
				Data16_g153406.NormalRawWS = In_NormalRawWS16_g153406;
				Data16_g153406.TangentOS = In_TangentOS16_g153406;
				Data16_g153406.ViewDirWS = In_ViewDirWS16_g153406;
				Data16_g153406.VertexData = In_VertexData16_g153406;
				Data16_g153406.MotionData = In_MotionData16_g153406;
				Data16_g153406.BoundsData = In_BoundsData16_g153406;
				Data16_g153406.RotationData = In_RotationData16_g153406;
				TVEModelData Data15_g153437 = Data16_g153406;
				float Out_Dummy15_g153437 = 0;
				float3 Out_PositionOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153437 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153437 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153437 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153437 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153437 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153437 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153437 = float3( 0,0,0 );
				float4 Out_VertexData15_g153437 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153437 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153437 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153437 = float4( 0,0,0,0 );
				Out_Dummy15_g153437 = Data15_g153437.Dummy;
				Out_PositionOS15_g153437 = Data15_g153437.PositionOS;
				Out_PositionWS15_g153437 = Data15_g153437.PositionWS;
				Out_PositionWO15_g153437 = Data15_g153437.PositionWO;
				Out_PositionRawOS15_g153437 = Data15_g153437.PositionRawOS;
				Out_PositionAddOS15_g153437 = Data15_g153437.PositionAddOS;
				Out_PivotOS15_g153437 = Data15_g153437.PivotOS;
				Out_PivotWS15_g153437 = Data15_g153437.PivotWS;
				Out_PivotWO15_g153437 = Data15_g153437.PivotWO;
				Out_NormalOS15_g153437 = Data15_g153437.NormalOS;
				Out_NormalWS15_g153437 = Data15_g153437.NormalWS;
				Out_NormalRawOS15_g153437 = Data15_g153437.NormalRawOS;
				Out_NormalRawWS15_g153437 = Data15_g153437.NormalRawWS;
				Out_TangentOS15_g153437 = Data15_g153437.TangentOS;
				Out_ViewDirWS15_g153437 = Data15_g153437.ViewDirWS;
				Out_VertexData15_g153437 = Data15_g153437.VertexData;
				Out_MotionData15_g153437 = Data15_g153437.MotionData;
				Out_BoundsData15_g153437 = Data15_g153437.BoundsData;
				Out_RotationData15_g153437 = Data15_g153437.RotationData;
				half3 Model_PositionOS147_g153436 = Out_PositionOS15_g153437;
				half3 Input_False58_g153439 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153440 = Model_PositionOS147_g153436;
				half3 VertexPos40_g153441 = VertexPos40_g153440;
				float3 appendResult74_g153441 = (float3(VertexPos40_g153441.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g153441 = appendResult74_g153441;
				float3 break84_g153441 = VertexPos40_g153441;
				float3 appendResult81_g153441 = (float3(0.0 , break84_g153441.y , break84_g153441.z));
				half3 VertexPosOtherAxis82_g153441 = appendResult81_g153441;
				float4 temp_output_1567_33_g153436 = Out_RotationData15_g153437;
				half4 Model_VertexBend1569_g153436 = temp_output_1567_33_g153436;
				half2 Angle44_g153440 = (Model_VertexBend1569_g153436).xy;
				half Angle44_g153441 = (Angle44_g153440).y;
				half3 VertexPos40_g153442 = ( VertexPosRotationAxis50_g153441 + ( VertexPosOtherAxis82_g153441 * cos( Angle44_g153441 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g153441 ) * sin( Angle44_g153441 ) ) );
				float3 appendResult74_g153442 = (float3(0.0 , 0.0 , VertexPos40_g153442.z));
				half3 VertexPosRotationAxis50_g153442 = appendResult74_g153442;
				float3 break84_g153442 = VertexPos40_g153442;
				float3 appendResult81_g153442 = (float3(break84_g153442.x , break84_g153442.y , 0.0));
				half3 VertexPosOtherAxis82_g153442 = appendResult81_g153442;
				half Angle44_g153442 = -(Angle44_g153440).x;
				half3 Input_True57_g153439 = ( VertexPosRotationAxis50_g153442 + ( VertexPosOtherAxis82_g153442 * cos( Angle44_g153442 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g153442 ) * sin( Angle44_g153442 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch65_g153439 = Input_False58_g153439;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch67_g153439 = staticSwitch65_g153439;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g153439 = Input_True57_g153439;
				#else
				float3 staticSwitch69_g153439 = staticSwitch67_g153439;
				#endif
				float3 temp_output_1578_0_g153436 = staticSwitch69_g153439;
				float3 temp_output_1567_31_g153436 = Out_PositionAddOS15_g153437;
				half3 Model_PositionADD1568_g153436 = temp_output_1567_31_g153436;
				half3 Final_PositionOS178_g153436 = ( temp_output_1578_0_g153436 + Model_PositionADD1568_g153436 );
				float3 In_PositionOS16_g153438 = Final_PositionOS178_g153436;
				float3 In_PositionWS16_g153438 = Out_PositionWS15_g153437;
				float3 In_PositionWO16_g153438 = Out_PositionWO15_g153437;
				float3 In_PositionRawOS16_g153438 = Out_PositionRawOS15_g153437;
				float3 In_PositionAddOS16_g153438 = temp_output_1567_31_g153436;
				float3 In_PivotOS16_g153438 = Out_PivotOS15_g153437;
				float3 In_PivotWS16_g153438 = Out_PivotWS15_g153437;
				float3 In_PivotWO16_g153438 = Out_PivotWO15_g153437;
				float3 In_NormalOS16_g153438 = Out_NormalOS15_g153437;
				float3 In_NormalWS16_g153438 = Out_NormalWS15_g153437;
				float3 In_NormalRawOS16_g153438 = Out_NormalRawOS15_g153437;
				float3 In_NormalRawWS16_g153438 = Out_NormalRawWS15_g153437;
				float4 In_TangentOS16_g153438 = Out_TangentOS15_g153437;
				float3 In_ViewDirWS16_g153438 = Out_ViewDirWS15_g153437;
				float4 In_VertexData16_g153438 = Out_VertexData15_g153437;
				float4 In_MotionData16_g153438 = Out_MotionData15_g153437;
				float4 In_BoundsData16_g153438 = Out_BoundsData15_g153437;
				float4 In_RotationData16_g153438 = temp_output_1567_33_g153436;
				Data16_g153438.Dummy = In_Dummy16_g153438;
				Data16_g153438.PositionOS = In_PositionOS16_g153438;
				Data16_g153438.PositionWS = In_PositionWS16_g153438;
				Data16_g153438.PositionWO = In_PositionWO16_g153438;
				Data16_g153438.PositionRawOS = In_PositionRawOS16_g153438;
				Data16_g153438.PositionAddOS = In_PositionAddOS16_g153438;
				Data16_g153438.PivotOS = In_PivotOS16_g153438;
				Data16_g153438.PivotWS = In_PivotWS16_g153438;
				Data16_g153438.PivotWO = In_PivotWO16_g153438;
				Data16_g153438.NormalOS = In_NormalOS16_g153438;
				Data16_g153438.NormalWS = In_NormalWS16_g153438;
				Data16_g153438.NormalRawOS = In_NormalRawOS16_g153438;
				Data16_g153438.NormalRawWS = In_NormalRawWS16_g153438;
				Data16_g153438.TangentOS = In_TangentOS16_g153438;
				Data16_g153438.ViewDirWS = In_ViewDirWS16_g153438;
				Data16_g153438.VertexData = In_VertexData16_g153438;
				Data16_g153438.MotionData = In_MotionData16_g153438;
				Data16_g153438.BoundsData = In_BoundsData16_g153438;
				Data16_g153438.RotationData = In_RotationData16_g153438;
				TVEModelData Data15_g153458 = Data16_g153438;
				float Out_Dummy15_g153458 = 0;
				float3 Out_PositionOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153458 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotOS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153458 = float3( 0,0,0 );
				float3 Out_NormalOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g153458 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g153458 = float3( 0,0,0 );
				float4 Out_TangentOS15_g153458 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g153458 = float3( 0,0,0 );
				float4 Out_VertexData15_g153458 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g153458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153458 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g153458 = float4( 0,0,0,0 );
				Out_Dummy15_g153458 = Data15_g153458.Dummy;
				Out_PositionOS15_g153458 = Data15_g153458.PositionOS;
				Out_PositionWS15_g153458 = Data15_g153458.PositionWS;
				Out_PositionWO15_g153458 = Data15_g153458.PositionWO;
				Out_PositionRawOS15_g153458 = Data15_g153458.PositionRawOS;
				Out_PositionAddOS15_g153458 = Data15_g153458.PositionAddOS;
				Out_PivotOS15_g153458 = Data15_g153458.PivotOS;
				Out_PivotWS15_g153458 = Data15_g153458.PivotWS;
				Out_PivotWO15_g153458 = Data15_g153458.PivotWO;
				Out_NormalOS15_g153458 = Data15_g153458.NormalOS;
				Out_NormalWS15_g153458 = Data15_g153458.NormalWS;
				Out_NormalRawOS15_g153458 = Data15_g153458.NormalRawOS;
				Out_NormalRawWS15_g153458 = Data15_g153458.NormalRawWS;
				Out_TangentOS15_g153458 = Data15_g153458.TangentOS;
				Out_ViewDirWS15_g153458 = Data15_g153458.ViewDirWS;
				Out_VertexData15_g153458 = Data15_g153458.VertexData;
				Out_MotionData15_g153458 = Data15_g153458.MotionData;
				Out_BoundsData15_g153458 = Data15_g153458.BoundsData;
				Out_RotationData15_g153458 = Data15_g153458.RotationData;
				float3 temp_output_31_0_g153451 = Out_PositionOS15_g153458;
				
				outputPackedVaryingsMeshToPS.ase_texcoord11.xyz = vertexToFrag305_g153142;
				
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord11.w = 0;
				inputMesh.positionOS.xyz += ( ( temp_output_31_0_g153451 - Out_PositionRawOS15_g153458 ) + _DisableSRPBatcher );

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS.xyz );
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.interp00.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.interp01.xyz = normalWS;
				outputPackedVaryingsMeshToPS.interp02.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.interp03.xyzw = inputMesh.texcoord;
				outputPackedVaryingsMeshToPS.interp04.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.interp05.xyzw = inputMesh.uv2;
				return outputPackedVaryingsMeshToPS;
			}

			void Frag(PackedVaryingsMeshToPS packedInput,
				#ifdef OUTPUT_SPLIT_LIGHTING
					out float4 outColor : SV_Target0,
					out float4 outDiffuseLighting : SV_Target1,
					OUTPUT_SSSBUFFER(outSSSBuffer)
				#else
					out float4 outColor : SV_Target0
				#endif
					, out float outputDepth : SV_Depth
				
			)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID( packedInput );

				#ifdef LOD_FADE_CROSSFADE
				float3 VC = GetWorldSpaceNormalizeViewDir(packedInput.interp00.xyz);
				LODDitheringTransition(ComputeFadeMaskSeed(VC, packedInput.positionCS.xy), unity_LODFade.x);
				#endif

				FragInputs input;

				ZERO_INITIALIZE(FragInputs, input);
				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				SurfaceOutput o = (SurfaceOutput)0;

				o.Normal = packedInput.interp01.xyz; //float3( 0, 0, 1 );
				float4 positionCS = packedInput.positionCS;  //0;
				float3 positionWS = packedInput.interp00.xyz; //0;

				float localBreakData4_g153454 = ( 0.0 );
				float localCompData3_g153446 = ( 0.0 );
				TVEVisualData Data3_g153446 = (TVEVisualData)0;
				half Dummy145_g153444 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g153446 = Dummy145_g153444;
				float localBreakData4_g153445 = ( 0.0 );
				float localCompData3_g153399 = ( 0.0 );
				TVEVisualData Data3_g153399 = (TVEVisualData)0;
				half Dummy145_g153389 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + 0.0 );
				float In_Dummy3_g153399 = Dummy145_g153389;
				float localBreakData4_g153398 = ( 0.0 );
				float localCompData3_g153373 = ( 0.0 );
				TVEVisualData Data3_g153373 = (TVEVisualData)0;
				half Dummy594_g153370 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g153373 = Dummy594_g153370;
				float localBreakData4_g153372 = ( 0.0 );
				float localCompData3_g153358 = ( 0.0 );
				TVEVisualData Data3_g153358 = (TVEVisualData)0;
				half Dummy594_g153357 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeInfo );
				float In_Dummy3_g153358 = Dummy594_g153357;
				float localBreakData4_g153368 = ( 0.0 );
				float localCompData3_g153330 = ( 0.0 );
				TVEVisualData Data3_g153330 = (TVEVisualData)0;
				half Dummy594_g153328 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeInfo );
				float In_Dummy3_g153330 = Dummy594_g153328;
				float localBreakData4_g153329 = ( 0.0 );
				float localCompData3_g153295 = ( 0.0 );
				TVEVisualData Data3_g153295 = (TVEVisualData)0;
				half Dummy594_g153292 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeInfo );
				float In_Dummy3_g153295 = Dummy594_g153292;
				float localBreakData4_g153293 = ( 0.0 );
				float localCompData3_g153272 = ( 0.0 );
				TVEVisualData Data3_g153272 = (TVEVisualData)0;
				half Dummy205_g153269 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeInfo );
				float In_Dummy3_g153272 = Dummy205_g153269;
				float localBreakData4_g153271 = ( 0.0 );
				float localCompData3_g153266 = ( 0.0 );
				TVEVisualData Data3_g153266 = (TVEVisualData)0;
				half Dummy205_g153245 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g153266 = Dummy205_g153245;
				float localBreakData4_g153267 = ( 0.0 );
				float localCompData3_g153239 = ( 0.0 );
				TVEVisualData Data3_g153239 = (TVEVisualData)0;
				half Dummy220_g153236 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g153239 = Dummy220_g153236;
				float localBreakData4_g153238 = ( 0.0 );
				float localCompData3_g153152 = ( 0.0 );
				TVEVisualData Data3_g153152 = (TVEVisualData)0;
				float In_Dummy3_g153152 = 0.0;
				float4 output0 = 0;
				float4 output1 = 0;
				float4 output2 = 0;
				OctaImpostorFragment( o, positionCS, positionWS, packedInput.UVsFrame122_g151868, packedInput.UVsFrame222_g151868, packedInput.UVsFrame322_g151868, packedInput.octaframe22_g151868, packedInput.viewPos22_g151868, output0, output1, output2 );
				float4 temp_cast_0 = (1.0).xxxx;
				half4 Input_Tex0377_g153142 = output0;
				half4 Input_Tex1379_g153142 = output1;
				float4 temp_cast_3 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch403_g153142 = temp_cast_3;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch403_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch403_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch403_g153142 = temp_cast_3;
				#endif
				half Local_MultiMask249_g153142 = (staticSwitch403_g153142).b;
				float lerpResult289_g153142 = lerp( 1.0 , Local_MultiMask249_g153142 , _ImpostorColorMode);
				float3 lerpResult292_g153142 = lerp( (_ImpostorColorTwo).rgb , (_ImpostorColor).rgb , lerpResult289_g153142);
				half3 Local_Albedo239_g153142 = ( o.Albedo * lerpResult292_g153142 );
				float3 In_Albedo3_g153152 = Local_Albedo239_g153142;
				float3 In_AlbedoRaw3_g153152 = Local_Albedo239_g153142;
				float2 temp_cast_4 = (0.5).xx;
				float2 In_NormalTS3_g153152 = temp_cast_4;
				float3 In_NormalWS3_g153152 = o.Normal;
				float4 temp_cast_5 = (1.0).xxxx;
				float4 temp_cast_6 = (1.0).xxxx;
				float4 temp_cast_7 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch385_g153142 = temp_cast_7;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch385_g153142 = temp_cast_6;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch385_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch385_g153142 = temp_cast_7;
				#endif
				half Local_Metallic247_g153142 = (staticSwitch385_g153142).r;
				half Final_Metallic238_g153142 = ( Local_Metallic247_g153142 * _ImpostorMetallicValue );
				float4 temp_cast_8 = (1.0).xxxx;
				float4 temp_cast_9 = (1.0).xxxx;
				float4 temp_cast_10 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch392_g153142 = temp_cast_10;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch392_g153142 = temp_cast_9;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch392_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch392_g153142 = temp_cast_10;
				#endif
				half Local_OcclusionOrEmissive248_g153142 = (staticSwitch392_g153142).g;
				float lerpResult431_g153142 = lerp( 1.0 , Local_OcclusionOrEmissive248_g153142 , _ImpostorOcclusionValue);
				#ifdef TVE_EMISSIVE
				float staticSwitch428_g153142 = 1.0;
				#else
				float staticSwitch428_g153142 = lerpResult431_g153142;
				#endif
				half Final_Occlusion424_g153142 = staticSwitch428_g153142;
				float4 temp_cast_11 = (1.0).xxxx;
				float4 temp_cast_12 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch408_g153142 = temp_cast_12;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch408_g153142 = Input_Tex1379_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch408_g153142 = Input_Tex0377_g153142;
				#else
				float4 staticSwitch408_g153142 = temp_cast_12;
				#endif
				half Local_Smoothness250_g153142 = (staticSwitch408_g153142).a;
				half Final_Smoothness233_g153142 = ( Local_Smoothness250_g153142 * _ImpostorSmoothnessValue );
				float4 appendResult257_g153142 = (float4(Final_Metallic238_g153142 , Final_Occlusion424_g153142 , 1.0 , Final_Smoothness233_g153142));
				float4 In_Shader3_g153152 = appendResult257_g153142;
				float4 appendResult286_g153142 = (float4(Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , Local_OcclusionOrEmissive248_g153142 , 1.0));
				float4 In_Emissive3_g153152 = appendResult286_g153142;
				float3 temp_output_3_0_g153143 = Local_Albedo239_g153142;
				float dotResult20_g153143 = dot( temp_output_3_0_g153143 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale268_g153142 = dotResult20_g153143;
				float In_Grayscale3_g153152 = Local_Grayscale268_g153142;
				float clampResult267_g153142 = clamp( saturate( ( Local_Grayscale268_g153142 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity269_g153142 = clampResult267_g153142;
				float In_Luminosity3_g153152 = Local_Luminosity269_g153142;
				float In_MultiMask3_g153152 = Local_MultiMask249_g153142;
				float In_AlphaClip3_g153152 = 0.0;
				float In_AlphaFade3_g153152 = 1.0;
				float3 temp_cast_13 = (1.0).xxx;
				float3 In_Translucency3_g153152 = temp_cast_13;
				float In_Transmission3_g153152 = 1.0;
				float In_Thickness3_g153152 = 0.0;
				float In_Diffusion3_g153152 = 0.0;
				Data3_g153152.Dummy = In_Dummy3_g153152;
				Data3_g153152.Albedo = In_Albedo3_g153152;
				Data3_g153152.AlbedoRaw = In_AlbedoRaw3_g153152;
				Data3_g153152.NormalTS = In_NormalTS3_g153152;
				Data3_g153152.NormalWS = In_NormalWS3_g153152;
				Data3_g153152.Shader = In_Shader3_g153152;
				Data3_g153152.Emissive= In_Emissive3_g153152;
				Data3_g153152.MultiMask = In_MultiMask3_g153152;
				Data3_g153152.Grayscale = In_Grayscale3_g153152;
				Data3_g153152.Luminosity = In_Luminosity3_g153152;
				Data3_g153152.AlphaClip = In_AlphaClip3_g153152;
				Data3_g153152.AlphaFade = In_AlphaFade3_g153152;
				Data3_g153152.Translucency = In_Translucency3_g153152;
				Data3_g153152.Transmission = In_Transmission3_g153152;
				Data3_g153152.Thickness = In_Thickness3_g153152;
				Data3_g153152.Diffusion = In_Diffusion3_g153152;
				TVEVisualData Data4_g153238 = Data3_g153152;
				float Out_Dummy4_g153238 = 0;
				float3 Out_Albedo4_g153238 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153238 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153238 = float2( 0,0 );
				float3 Out_NormalWS4_g153238 = float3( 0,0,0 );
				float4 Out_Shader4_g153238 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153238 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153238 = 0;
				float Out_Grayscale4_g153238 = 0;
				float Out_Luminosity4_g153238 = 0;
				float Out_AlphaClip4_g153238 = 0;
				float Out_AlphaFade4_g153238 = 0;
				float3 Out_Translucency4_g153238 = float3( 0,0,0 );
				float Out_Transmission4_g153238 = 0;
				float Out_Thickness4_g153238 = 0;
				float Out_Diffusion4_g153238 = 0;
				Out_Dummy4_g153238 = Data4_g153238.Dummy;
				Out_Albedo4_g153238 = Data4_g153238.Albedo;
				Out_AlbedoRaw4_g153238 = Data4_g153238.AlbedoRaw;
				Out_NormalTS4_g153238 = Data4_g153238.NormalTS;
				Out_NormalWS4_g153238 = Data4_g153238.NormalWS;
				Out_Shader4_g153238 = Data4_g153238.Shader;
				Out_Emissive4_g153238= Data4_g153238.Emissive;
				Out_MultiMask4_g153238 = Data4_g153238.MultiMask;
				Out_Grayscale4_g153238 = Data4_g153238.Grayscale;
				Out_Luminosity4_g153238= Data4_g153238.Luminosity;
				Out_AlphaClip4_g153238 = Data4_g153238.AlphaClip;
				Out_AlphaFade4_g153238 = Data4_g153238.AlphaFade;
				Out_Translucency4_g153238 = Data4_g153238.Translucency;
				Out_Transmission4_g153238 = Data4_g153238.Transmission;
				Out_Thickness4_g153238 = Data4_g153238.Thickness;
				Out_Diffusion4_g153238 = Data4_g153238.Diffusion;
				half3 Visual_Albedo127_g153236 = Out_Albedo4_g153238;
				TVEModelData Data16_g153151 = (TVEModelData)0;
				float In_Dummy16_g153151 = 0.0;
				half3 Input_PositionWS319_g153142 = GetAbsolutePositionWS( positionWS );
				half3 Model_PositionWS309_g153142 = Input_PositionWS319_g153142;
				float3 In_PositionWS16_g153151 = Model_PositionWS309_g153142;
				half3 Model_PositionWO311_g153142 = ( Model_PositionWS309_g153142 - TVE_WorldOrigin );
				float3 In_PositionWO16_g153151 = Model_PositionWO311_g153142;
				float3 vertexToFrag305_g153142 = packedInput.ase_texcoord11.xyz;
				half3 Model_PivotWS310_g153142 = vertexToFrag305_g153142;
				float3 In_PivotWS16_g153151 = Model_PivotWS310_g153142;
				half3 Model_PivotWO312_g153142 = ( Model_PivotWS310_g153142 - TVE_WorldOrigin );
				float3 In_PivotWO16_g153151 = Model_PivotWO312_g153142;
				half3 Model_Normal_WS314_g153142 = packedInput.interp01;
				float3 In_NormalWS16_g153151 = Model_Normal_WS314_g153142;
				float3 normalizeResult351_g153142 = normalize( ( _WorldSpaceCameraPos - Model_PositionWS309_g153142 ) );
				half3 Model_ViewDirWS347_g153142 = normalizeResult351_g153142;
				float3 In_ViewDirWS16_g153151 = Model_ViewDirWS347_g153142;
				float4 temp_cast_14 = (1.0).xxxx;
				half4 Input_Tex2380_g153142 = output2;
				float4 appendResult420_g153142 = (float4((Input_Tex1379_g153142).rg , 1.0 , 1.0));
				float4 temp_cast_17 = (1.0).xxxx;
				float4 temp_cast_18 = (1.0).xxxx;
				#if defined( TVE_IMPOSTOR_MASK_OFF )
				float4 staticSwitch414_g153142 = temp_cast_18;
				#elif defined( TVE_IMPOSTOR_MASK_DEFAULT )
				float4 staticSwitch414_g153142 = Input_Tex2380_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_PACKED )
				float4 staticSwitch414_g153142 = appendResult420_g153142;
				#elif defined( TVE_IMPOSTOR_MASK_SHADING )
				float4 staticSwitch414_g153142 = temp_cast_17;
				#else
				float4 staticSwitch414_g153142 = temp_cast_18;
				#endif
				half4 Local_VertexColor422_g153142 = staticSwitch414_g153142;
				float4 In_VertexData16_g153151 = Local_VertexColor422_g153142;
				float4 In_BoundsData16_g153151 = float4( 1,1,1,1 );
				Data16_g153151.Dummy = In_Dummy16_g153151;
				Data16_g153151.PositionWS = In_PositionWS16_g153151;
				Data16_g153151.PositionWO = In_PositionWO16_g153151;
				Data16_g153151.PivotWS = In_PivotWS16_g153151;
				Data16_g153151.PivotWO = In_PivotWO16_g153151;
				Data16_g153151.NormalWS = In_NormalWS16_g153151;
				Data16_g153151.ViewDirWS = In_ViewDirWS16_g153151;
				Data16_g153151.VertexData = In_VertexData16_g153151;
				Data16_g153151.BoundsData = In_BoundsData16_g153151;
				TVEModelData Data15_g153244 = Data16_g153151;
				float Out_Dummy15_g153244 = 0;
				float3 Out_PositionWS15_g153244 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153244 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153244 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153244 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153244 = float3( 0,0,0 );
				float4 Out_VertexData15_g153244 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153244 = float4( 0,0,0,0 );
				Out_Dummy15_g153244 = Data15_g153244.Dummy;
				Out_PositionWS15_g153244 = Data15_g153244.PositionWS;
				Out_PositionWO15_g153244 = Data15_g153244.PositionWO;
				Out_PivotWS15_g153244 = Data15_g153244.PivotWS;
				Out_PivotWO15_g153244 = Data15_g153244.PivotWO;
				Out_NormalWS15_g153244 = Data15_g153244.NormalWS;
				Out_ViewDirWS15_g153244 = Data15_g153244.ViewDirWS;
				Out_VertexData15_g153244 = Data15_g153244.VertexData;
				Out_BoundsData15_g153244 = Data15_g153244.BoundsData;
				half3 Model_PositionWO224_g153236 = Out_PositionWO15_g153244;
				half3 Model_PivotWO239_g153236 = Out_PivotWO15_g153244;
				float3 lerpResult242_g153236 = lerp( Model_PositionWO224_g153236 , Model_PivotWO239_g153236 , _VariationNoisePivotValue);
				float4 tex3DNode60_g153240 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g153236 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g153242 = clamp( tex3DNode60_g153240.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g153243 = _VariationNoiseRemap.x;
				float temp_output_10_0_g153243 = ( _VariationNoiseRemap.y - temp_output_7_0_g153243 );
				float temp_output_238_0_g153236 = saturate( ( ( clampResult17_g153242 - temp_output_7_0_g153243 ) / ( temp_output_10_0_g153243 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g153236 = temp_output_238_0_g153236;
				half Variaton_Mask200_g153236 = Variaton_NoiseMask82_g153236;
				float3 lerpResult75_g153236 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g153236);
				float temp_output_162_11_g153236 = Out_MultiMask4_g153238;
				half Visual_MultiMask196_g153236 = temp_output_162_11_g153236;
				float lerpResult190_g153236 = lerp( 1.0 , Visual_MultiMask196_g153236 , _VariationMultiValue);
				half Variaton_MultiMask194_g153236 = lerpResult190_g153236;
				float3 lerpResult186_g153236 = lerp( Visual_Albedo127_g153236 , ( Visual_Albedo127_g153236 * lerpResult75_g153236 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g153236 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g153236 = lerpResult186_g153236;
				#else
				float3 staticSwitch171_g153236 = Visual_Albedo127_g153236;
				#endif
				half3 Final_Albedo160_g153236 = staticSwitch171_g153236;
				float3 In_Albedo3_g153239 = Final_Albedo160_g153236;
				float3 In_AlbedoRaw3_g153239 = Final_Albedo160_g153236;
				float2 In_NormalTS3_g153239 = Out_NormalTS4_g153238;
				float3 In_NormalWS3_g153239 = Out_NormalWS4_g153238;
				float4 In_Shader3_g153239 = Out_Shader4_g153238;
				float4 In_Emissive3_g153239 = Out_Emissive4_g153238;
				float3 temp_output_3_0_g153237 = Final_Albedo160_g153236;
				float dotResult20_g153237 = dot( temp_output_3_0_g153237 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g153236 = dotResult20_g153237;
				float In_Grayscale3_g153239 = Final_Grayscale164_g153236;
				float clampResult180_g153236 = clamp( saturate( ( Final_Grayscale164_g153236 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g153236 = clampResult180_g153236;
				float In_Luminosity3_g153239 = Final_Luminosity181_g153236;
				float In_MultiMask3_g153239 = temp_output_162_11_g153236;
				float In_AlphaClip3_g153239 = Out_AlphaClip4_g153238;
				float In_AlphaFade3_g153239 = Out_AlphaFade4_g153238;
				float3 In_Translucency3_g153239 = Out_Translucency4_g153238;
				float In_Transmission3_g153239 = Out_Transmission4_g153238;
				float In_Thickness3_g153239 = Out_Thickness4_g153238;
				float In_Diffusion3_g153239 = Out_Diffusion4_g153238;
				Data3_g153239.Dummy = In_Dummy3_g153239;
				Data3_g153239.Albedo = In_Albedo3_g153239;
				Data3_g153239.AlbedoRaw = In_AlbedoRaw3_g153239;
				Data3_g153239.NormalTS = In_NormalTS3_g153239;
				Data3_g153239.NormalWS = In_NormalWS3_g153239;
				Data3_g153239.Shader = In_Shader3_g153239;
				Data3_g153239.Emissive= In_Emissive3_g153239;
				Data3_g153239.MultiMask = In_MultiMask3_g153239;
				Data3_g153239.Grayscale = In_Grayscale3_g153239;
				Data3_g153239.Luminosity = In_Luminosity3_g153239;
				Data3_g153239.AlphaClip = In_AlphaClip3_g153239;
				Data3_g153239.AlphaFade = In_AlphaFade3_g153239;
				Data3_g153239.Translucency = In_Translucency3_g153239;
				Data3_g153239.Transmission = In_Transmission3_g153239;
				Data3_g153239.Thickness = In_Thickness3_g153239;
				Data3_g153239.Diffusion = In_Diffusion3_g153239;
				TVEVisualData Data4_g153267 = Data3_g153239;
				float Out_Dummy4_g153267 = 0;
				float3 Out_Albedo4_g153267 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153267 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153267 = float2( 0,0 );
				float3 Out_NormalWS4_g153267 = float3( 0,0,0 );
				float4 Out_Shader4_g153267 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153267 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153267 = 0;
				float Out_Grayscale4_g153267 = 0;
				float Out_Luminosity4_g153267 = 0;
				float Out_AlphaClip4_g153267 = 0;
				float Out_AlphaFade4_g153267 = 0;
				float3 Out_Translucency4_g153267 = float3( 0,0,0 );
				float Out_Transmission4_g153267 = 0;
				float Out_Thickness4_g153267 = 0;
				float Out_Diffusion4_g153267 = 0;
				Out_Dummy4_g153267 = Data4_g153267.Dummy;
				Out_Albedo4_g153267 = Data4_g153267.Albedo;
				Out_AlbedoRaw4_g153267 = Data4_g153267.AlbedoRaw;
				Out_NormalTS4_g153267 = Data4_g153267.NormalTS;
				Out_NormalWS4_g153267 = Data4_g153267.NormalWS;
				Out_Shader4_g153267 = Data4_g153267.Shader;
				Out_Emissive4_g153267= Data4_g153267.Emissive;
				Out_MultiMask4_g153267 = Data4_g153267.MultiMask;
				Out_Grayscale4_g153267 = Data4_g153267.Grayscale;
				Out_Luminosity4_g153267= Data4_g153267.Luminosity;
				Out_AlphaClip4_g153267 = Data4_g153267.AlphaClip;
				Out_AlphaFade4_g153267 = Data4_g153267.AlphaFade;
				Out_Translucency4_g153267 = Data4_g153267.Translucency;
				Out_Transmission4_g153267 = Data4_g153267.Transmission;
				Out_Thickness4_g153267 = Data4_g153267.Thickness;
				Out_Diffusion4_g153267 = Data4_g153267.Diffusion;
				half3 Visual_Albedo139_g153245 = Out_Albedo4_g153267;
				float temp_output_200_12_g153245 = Out_Grayscale4_g153267;
				half Visual_Grayscale150_g153245 = temp_output_200_12_g153245;
				float3 temp_cast_20 = (Visual_Grayscale150_g153245).xxx;
				float localBuildGlobalData204_g153153 = ( 0.0 );
				TVEGlobalData Data204_g153153 = (TVEGlobalData)0;
				half Dummy211_g153153 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g153153 = Dummy211_g153153;
				half4 Coat_Params302_g153153 = TVE_CoatParams;
				float4 In_CoatParams204_g153153 = Coat_Params302_g153153;
				float temp_output_82_0_g153154 = _GlobalPaintLayerValue;
				float temp_output_19_0_g153156 = TVE_PaintLayers[(int)temp_output_82_0_g153154];
				TVEModelData Data15_g153235 = Data16_g153151;
				float Out_Dummy15_g153235 = 0;
				float3 Out_PositionWS15_g153235 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153235 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153235 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153235 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153235 = float3( 0,0,0 );
				float4 Out_VertexData15_g153235 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153235 = float4( 0,0,0,0 );
				Out_Dummy15_g153235 = Data15_g153235.Dummy;
				Out_PositionWS15_g153235 = Data15_g153235.PositionWS;
				Out_PositionWO15_g153235 = Data15_g153235.PositionWO;
				Out_PivotWS15_g153235 = Data15_g153235.PivotWS;
				Out_PivotWO15_g153235 = Data15_g153235.PivotWO;
				Out_NormalWS15_g153235 = Data15_g153235.NormalWS;
				Out_ViewDirWS15_g153235 = Data15_g153235.ViewDirWS;
				Out_VertexData15_g153235 = Data15_g153235.VertexData;
				Out_BoundsData15_g153235 = Data15_g153235.BoundsData;
				half3 Model_PositionWS143_g153153 = Out_PositionWS15_g153235;
				half3 Model_PivotWS145_g153153 = Out_PivotWS15_g153235;
				float3 lerpResult85_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalPaintPivotValue);
				half3 Input_Position180_g153157 = lerpResult85_g153153;
				float2 temp_output_75_0_g153157 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_82_0_g153157 = temp_output_82_0_g153154;
				float2 temp_output_119_0_g153157 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153157).xz ) );
				float temp_output_7_0_g153162 = 1.0;
				float temp_output_10_0_g153162 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153162 );
				float4 lerpResult131_g153157 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153157,temp_output_82_0_g153157, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g153157,temp_output_82_0_g153157, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153157 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153162 ) / temp_output_10_0_g153162 ) ));
				float4 temp_output_17_0_g153156 = lerpResult131_g153157;
				float4 temp_output_3_0_g153156 = TVE_PaintParams;
				float4 ifLocalVar18_g153156 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153156 >= 0.5 )
				ifLocalVar18_g153156 = temp_output_17_0_g153156;
				else
				ifLocalVar18_g153156 = temp_output_3_0_g153156;
				float4 lerpResult22_g153156 = lerp( temp_output_3_0_g153156 , temp_output_17_0_g153156 , temp_output_19_0_g153156);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153156 = lerpResult22_g153156;
				#else
				float4 staticSwitch24_g153156 = ifLocalVar18_g153156;
				#endif
				half4 Paint_Params71_g153153 = staticSwitch24_g153156;
				float4 In_PaintParams204_g153153 = Paint_Params71_g153153;
				float temp_output_82_0_g153172 = _GlobalGlowLayerValue;
				float temp_output_19_0_g153174 = TVE_GlowLayers[(int)temp_output_82_0_g153172];
				float3 lerpResult247_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalGlowPivotValue);
				half3 Input_Position180_g153175 = lerpResult247_g153153;
				float2 temp_output_75_0_g153175 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_82_0_g153175 = temp_output_82_0_g153172;
				float2 temp_output_119_0_g153175 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153175).xz ) );
				float temp_output_7_0_g153180 = 1.0;
				float temp_output_10_0_g153180 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153180 );
				float4 lerpResult131_g153175 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153175,temp_output_82_0_g153175, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g153175,temp_output_82_0_g153175, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153175 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153180 ) / temp_output_10_0_g153180 ) ));
				float4 temp_output_17_0_g153174 = lerpResult131_g153175;
				float4 temp_output_3_0_g153174 = TVE_GlowParams;
				float4 ifLocalVar18_g153174 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153174 >= 0.5 )
				ifLocalVar18_g153174 = temp_output_17_0_g153174;
				else
				ifLocalVar18_g153174 = temp_output_3_0_g153174;
				float4 lerpResult22_g153174 = lerp( temp_output_3_0_g153174 , temp_output_17_0_g153174 , temp_output_19_0_g153174);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153174 = lerpResult22_g153174;
				#else
				float4 staticSwitch24_g153174 = ifLocalVar18_g153174;
				#endif
				half4 Glow_Params248_g153153 = staticSwitch24_g153174;
				float4 In_GlowParams204_g153153 = Glow_Params248_g153153;
				float temp_output_132_0_g153217 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g153219 = TVE_AtmoLayers[(int)temp_output_132_0_g153217];
				float3 lerpResult104_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g153220 = lerpResult104_g153153;
				float2 temp_output_75_0_g153220 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_82_0_g153220 = temp_output_132_0_g153217;
				float2 temp_output_119_0_g153220 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153220).xz ) );
				float temp_output_7_0_g153225 = 1.0;
				float temp_output_10_0_g153225 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153225 );
				float4 lerpResult131_g153220 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153220,temp_output_82_0_g153220, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g153220,temp_output_82_0_g153220, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153220 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153225 ) / temp_output_10_0_g153225 ) ));
				float4 temp_output_17_0_g153219 = lerpResult131_g153220;
				float4 temp_output_3_0_g153219 = TVE_AtmoParams;
				float4 ifLocalVar18_g153219 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153219 >= 0.5 )
				ifLocalVar18_g153219 = temp_output_17_0_g153219;
				else
				ifLocalVar18_g153219 = temp_output_3_0_g153219;
				float4 lerpResult22_g153219 = lerp( temp_output_3_0_g153219 , temp_output_17_0_g153219 , temp_output_19_0_g153219);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153219 = lerpResult22_g153219;
				#else
				float4 staticSwitch24_g153219 = ifLocalVar18_g153219;
				#endif
				half4 Atmo_Params80_g153153 = staticSwitch24_g153219;
				float4 In_AtmoParams204_g153153 = Atmo_Params80_g153153;
				float temp_output_132_0_g153226 = _GlobalFadeLayerValue;
				float temp_output_19_0_g153228 = TVE_FadeLayers[(int)temp_output_132_0_g153226];
				float3 lerpResult382_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFadePivotValue);
				half3 Input_Position180_g153229 = lerpResult382_g153153;
				float2 temp_output_75_0_g153229 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_82_0_g153229 = temp_output_132_0_g153226;
				float2 temp_output_119_0_g153229 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153229).xz ) );
				float temp_output_7_0_g153234 = 1.0;
				float temp_output_10_0_g153234 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153234 );
				float4 lerpResult131_g153229 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153229,temp_output_82_0_g153229, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g153229,temp_output_82_0_g153229, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153229 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153234 ) / temp_output_10_0_g153234 ) ));
				float4 temp_output_17_0_g153228 = lerpResult131_g153229;
				float4 temp_output_3_0_g153228 = TVE_FadeParams;
				float4 ifLocalVar18_g153228 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153228 >= 0.5 )
				ifLocalVar18_g153228 = temp_output_17_0_g153228;
				else
				ifLocalVar18_g153228 = temp_output_3_0_g153228;
				float4 lerpResult22_g153228 = lerp( temp_output_3_0_g153228 , temp_output_17_0_g153228 , temp_output_19_0_g153228);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153228 = lerpResult22_g153228;
				#else
				float4 staticSwitch24_g153228 = ifLocalVar18_g153228;
				#endif
				half4 Fade_Params387_g153153 = staticSwitch24_g153228;
				float4 In_FadeParams204_g153153 = Fade_Params387_g153153;
				float temp_output_130_0_g153208 = _GlobalFormLayerValue;
				float temp_output_19_0_g153210 = TVE_FormLayers[(int)temp_output_130_0_g153208];
				float3 lerpResult168_g153153 = lerp( Model_PositionWS143_g153153 , Model_PivotWS145_g153153 , _GlobalFormPivotValue);
				half3 Input_Position180_g153211 = lerpResult168_g153153;
				float2 temp_output_75_0_g153211 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_82_0_g153211 = temp_output_130_0_g153208;
				float2 temp_output_119_0_g153211 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153211).xz ) );
				float temp_output_7_0_g153216 = 1.0;
				float temp_output_10_0_g153216 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153216 );
				float4 lerpResult131_g153211 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153211,temp_output_82_0_g153211, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g153211,temp_output_82_0_g153211, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153211 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153216 ) / temp_output_10_0_g153216 ) ));
				float4 temp_output_17_0_g153210 = lerpResult131_g153211;
				float4 temp_output_3_0_g153210 = TVE_FormParams;
				float4 ifLocalVar18_g153210 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153210 >= 0.5 )
				ifLocalVar18_g153210 = temp_output_17_0_g153210;
				else
				ifLocalVar18_g153210 = temp_output_3_0_g153210;
				float4 lerpResult22_g153210 = lerp( temp_output_3_0_g153210 , temp_output_17_0_g153210 , temp_output_19_0_g153210);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153210 = lerpResult22_g153210;
				#else
				float4 staticSwitch24_g153210 = ifLocalVar18_g153210;
				#endif
				half4 Form_Params112_g153153 = staticSwitch24_g153210;
				float4 In_FormParams204_g153153 = Form_Params112_g153153;
				half4 Land_Params375_g153153 = TVE_LandParams;
				float4 In_LandParams204_g153153 = Land_Params375_g153153;
				float temp_output_136_0_g153199 = _GlobalWindLayerValue;
				float temp_output_19_0_g153201 = TVE_WindLayers[(int)temp_output_136_0_g153199];
				half3 Input_Position180_g153202 = Model_PositionWS143_g153153;
				float2 temp_output_75_0_g153202 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_82_0_g153202 = temp_output_136_0_g153199;
				float2 temp_output_119_0_g153202 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153202).xz ) );
				float temp_output_7_0_g153207 = 1.0;
				float temp_output_10_0_g153207 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153207 );
				float4 lerpResult131_g153202 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153202,temp_output_82_0_g153202, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g153202,temp_output_82_0_g153202, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153202 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153207 ) / temp_output_10_0_g153207 ) ));
				float4 temp_output_17_0_g153201 = lerpResult131_g153202;
				float4 temp_output_3_0_g153201 = TVE_WindParams;
				float4 ifLocalVar18_g153201 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153201 >= 0.5 )
				ifLocalVar18_g153201 = temp_output_17_0_g153201;
				else
				ifLocalVar18_g153201 = temp_output_3_0_g153201;
				float4 lerpResult22_g153201 = lerp( temp_output_3_0_g153201 , temp_output_17_0_g153201 , temp_output_19_0_g153201);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153201 = lerpResult22_g153201;
				#else
				float4 staticSwitch24_g153201 = ifLocalVar18_g153201;
				#endif
				half4 Wind_Params88_g153153 = staticSwitch24_g153201;
				float4 In_WindParams204_g153153 = Wind_Params88_g153153;
				float temp_output_136_0_g153181 = _GlobalPushLayerValue;
				float temp_output_19_0_g153182 = TVE_PushLayers[(int)temp_output_136_0_g153181];
				half3 Input_Position180_g153183 = Model_PivotWS145_g153153;
				float2 temp_output_75_0_g153183 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_82_0_g153183 = temp_output_136_0_g153181;
				float2 temp_output_119_0_g153183 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g153183).xz ) );
				float temp_output_7_0_g153188 = 1.0;
				float temp_output_10_0_g153188 = ( TVE_RenderNearFadeValue - temp_output_7_0_g153188 );
				float4 lerpResult131_g153183 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g153183,temp_output_82_0_g153183, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g153183,temp_output_82_0_g153183, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g153183 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g153188 ) / temp_output_10_0_g153188 ) ));
				float4 temp_output_17_0_g153182 = lerpResult131_g153183;
				float4 temp_output_3_0_g153182 = TVE_PushParams;
				float4 ifLocalVar18_g153182 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g153182 >= 0.5 )
				ifLocalVar18_g153182 = temp_output_17_0_g153182;
				else
				ifLocalVar18_g153182 = temp_output_3_0_g153182;
				float4 lerpResult22_g153182 = lerp( temp_output_3_0_g153182 , temp_output_17_0_g153182 , temp_output_19_0_g153182);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g153182 = lerpResult22_g153182;
				#else
				float4 staticSwitch24_g153182 = ifLocalVar18_g153182;
				#endif
				half4 Push_Params335_g153153 = staticSwitch24_g153182;
				float4 In_PushParams204_g153153 = Push_Params335_g153153;
				Data204_g153153.Dummy = In_Dummy204_g153153;
				Data204_g153153.CoatParams = In_CoatParams204_g153153;
				Data204_g153153.PaintParams = In_PaintParams204_g153153;
				Data204_g153153.GlowParams = In_GlowParams204_g153153;
				Data204_g153153.AtmoParams = In_AtmoParams204_g153153;
				Data204_g153153.FadeParams = In_FadeParams204_g153153;
				Data204_g153153.FormParams= In_FormParams204_g153153;
				Data204_g153153.LandParams = In_LandParams204_g153153;
				Data204_g153153.WindParams = In_WindParams204_g153153;
				Data204_g153153.PushParams = In_PushParams204_g153153;
				TVEGlobalData Data15_g153246 = Data204_g153153;
				float Out_Dummy15_g153246 = 0;
				float4 Out_CoatParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153246 = float4( 0,0,0,0 );
				Out_Dummy15_g153246 = Data15_g153246.Dummy;
				Out_CoatParams15_g153246 = Data15_g153246.CoatParams;
				Out_PaintParams15_g153246 = Data15_g153246.PaintParams;
				Out_GlowParams15_g153246 = Data15_g153246.GlowParams;
				Out_AtmoParams15_g153246= Data15_g153246.AtmoParams;
				Out_FadeParams15_g153246= Data15_g153246.FadeParams;
				Out_FormParams15_g153246 = Data15_g153246.FormParams;
				Out_LandParams15_g153246 = Data15_g153246.LandParams;
				Out_WindParams15_g153246 = Data15_g153246.WindParams;
				Out_PushParams15_g153246 = Data15_g153246.PushParams;
				half4 Global_PaintParams209_g153245 = Out_PaintParams15_g153246;
				float temp_output_6_0_g153247 = ( saturate( (Global_PaintParams209_g153245).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g153247 = ( temp_output_6_0_g153247 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g153247 = temp_output_6_0_g153247;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g153245 = staticSwitch14_g153247;
				#else
				float staticSwitch283_g153245 = 1.0;
				#endif
				half Tinting_GlobalValue285_g153245 = staticSwitch283_g153245;
				float3 lerpResult368_g153245 = lerp( Visual_Albedo139_g153245 , temp_cast_20 , ( Tinting_GlobalValue285_g153245 * _TintingGrayValue ));
				float3 temp_cast_49 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g153245 = (Global_PaintParams209_g153245).xyz;
				#else
				float3 staticSwitch288_g153245 = temp_cast_49;
				#endif
				half3 Tinting_ColorGlobal290_g153245 = staticSwitch288_g153245;
				float temp_output_200_11_g153245 = Out_MultiMask4_g153267;
				half Visual_MultiMask181_g153245 = temp_output_200_11_g153245;
				float lerpResult147_g153245 = lerp( 1.0 , Visual_MultiMask181_g153245 , _TintingMultiValue);
				half Tinting_MutiMask121_g153245 = lerpResult147_g153245;
				half Tinting_TexMask385_g153245 = 1.0;
				float temp_output_200_15_g153245 = Out_Luminosity4_g153267;
				half Visual_Luminosity257_g153245 = temp_output_200_15_g153245;
				float clampResult17_g153259 = clamp( Visual_Luminosity257_g153245 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153258 = _TintingLumaRemap.x;
				float temp_output_10_0_g153258 = ( _TintingLumaRemap.y - temp_output_7_0_g153258 );
				float lerpResult228_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153259 - temp_output_7_0_g153258 ) / ( temp_output_10_0_g153258 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g153245 = lerpResult228_g153245;
				TVEModelData Data15_g153268 = Data16_g153151;
				float Out_Dummy15_g153268 = 0;
				float3 Out_PositionWS15_g153268 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153268 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153268 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153268 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153268 = float3( 0,0,0 );
				float4 Out_VertexData15_g153268 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153268 = float4( 0,0,0,0 );
				Out_Dummy15_g153268 = Data15_g153268.Dummy;
				Out_PositionWS15_g153268 = Data15_g153268.PositionWS;
				Out_PositionWO15_g153268 = Data15_g153268.PositionWO;
				Out_PivotWS15_g153268 = Data15_g153268.PivotWS;
				Out_PivotWO15_g153268 = Data15_g153268.PivotWO;
				Out_NormalWS15_g153268 = Data15_g153268.NormalWS;
				Out_ViewDirWS15_g153268 = Data15_g153268.ViewDirWS;
				Out_VertexData15_g153268 = Data15_g153268.VertexData;
				Out_BoundsData15_g153268 = Data15_g153268.BoundsData;
				half4 Model_VertexMasks307_g153245 = Out_VertexData15_g153268;
				float4 break311_g153245 = Model_VertexMasks307_g153245;
				float4 break33_g153251 = _tinting_vert_mode;
				float temp_output_30_0_g153251 = ( break311_g153245.x * break33_g153251.x );
				float temp_output_29_0_g153251 = ( break311_g153245.y * break33_g153251.y );
				float temp_output_31_0_g153251 = ( break311_g153245.z * break33_g153251.z );
				float temp_output_28_0_g153251 = ( temp_output_30_0_g153251 + temp_output_29_0_g153251 + temp_output_31_0_g153251 + ( break311_g153245.w * break33_g153251.w ) );
				float clampResult17_g153257 = clamp( temp_output_28_0_g153251 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153256 = _TintingMeshRemap.x;
				float temp_output_10_0_g153256 = ( _TintingMeshRemap.y - temp_output_7_0_g153256 );
				float lerpResult370_g153245 = lerp( 1.0 , saturate( ( ( clampResult17_g153257 - temp_output_7_0_g153256 ) / ( temp_output_10_0_g153256 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g153260 = lerpResult370_g153245;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153260 = ( temp_output_6_0_g153260 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153260 = temp_output_6_0_g153260;
				#endif
				float temp_output_333_0_g153245 = staticSwitch14_g153260;
				half Tinting_VertMask309_g153245 = temp_output_333_0_g153245;
				half Tinting_NoiseMask213_g153245 = 1.0;
				half Custom_Mask345_g153245 = 1.0;
				float temp_output_7_0_g153254 = _TintingBlendRemap.x;
				float temp_output_10_0_g153254 = ( _TintingBlendRemap.y - temp_output_7_0_g153254 );
				half Tinting_Mask242_g153245 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g153245 * Tinting_TexMask385_g153245 * Tinting_LumaMask153_g153245 * Tinting_VertMask309_g153245 * Tinting_NoiseMask213_g153245 * Tinting_GlobalValue285_g153245 * Custom_Mask345_g153245 ) - temp_output_7_0_g153254 ) / ( temp_output_10_0_g153254 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g153245 = lerp( Visual_Albedo139_g153245 , ( lerpResult368_g153245 * 4.594794 * Tinting_ColorGlobal290_g153245 * (_TintingColor).rgb ) , Tinting_Mask242_g153245);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g153245 = lerpResult90_g153245;
				#else
				float3 staticSwitch286_g153245 = Visual_Albedo139_g153245;
				#endif
				half3 Final_Albedo97_g153245 = staticSwitch286_g153245;
				float3 In_Albedo3_g153266 = Final_Albedo97_g153245;
				float3 In_AlbedoRaw3_g153266 = Out_AlbedoRaw4_g153267;
				float2 In_NormalTS3_g153266 = Out_NormalTS4_g153267;
				float3 In_NormalWS3_g153266 = Out_NormalWS4_g153267;
				float4 In_Shader3_g153266 = Out_Shader4_g153267;
				float4 In_Emissive3_g153266 = Out_Emissive4_g153267;
				float In_Grayscale3_g153266 = temp_output_200_12_g153245;
				float In_Luminosity3_g153266 = temp_output_200_15_g153245;
				float In_MultiMask3_g153266 = temp_output_200_11_g153245;
				float In_AlphaClip3_g153266 = Out_AlphaClip4_g153267;
				float In_AlphaFade3_g153266 = Out_AlphaFade4_g153267;
				float3 In_Translucency3_g153266 = Out_Translucency4_g153267;
				float In_Transmission3_g153266 = Out_Transmission4_g153267;
				float In_Thickness3_g153266 = Out_Thickness4_g153267;
				float In_Diffusion3_g153266 = Out_Diffusion4_g153267;
				Data3_g153266.Dummy = In_Dummy3_g153266;
				Data3_g153266.Albedo = In_Albedo3_g153266;
				Data3_g153266.AlbedoRaw = In_AlbedoRaw3_g153266;
				Data3_g153266.NormalTS = In_NormalTS3_g153266;
				Data3_g153266.NormalWS = In_NormalWS3_g153266;
				Data3_g153266.Shader = In_Shader3_g153266;
				Data3_g153266.Emissive= In_Emissive3_g153266;
				Data3_g153266.MultiMask = In_MultiMask3_g153266;
				Data3_g153266.Grayscale = In_Grayscale3_g153266;
				Data3_g153266.Luminosity = In_Luminosity3_g153266;
				Data3_g153266.AlphaClip = In_AlphaClip3_g153266;
				Data3_g153266.AlphaFade = In_AlphaFade3_g153266;
				Data3_g153266.Translucency = In_Translucency3_g153266;
				Data3_g153266.Transmission = In_Transmission3_g153266;
				Data3_g153266.Thickness = In_Thickness3_g153266;
				Data3_g153266.Diffusion = In_Diffusion3_g153266;
				TVEVisualData Data4_g153271 = Data3_g153266;
				float Out_Dummy4_g153271 = 0;
				float3 Out_Albedo4_g153271 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153271 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153271 = float2( 0,0 );
				float3 Out_NormalWS4_g153271 = float3( 0,0,0 );
				float4 Out_Shader4_g153271 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153271 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153271 = 0;
				float Out_Grayscale4_g153271 = 0;
				float Out_Luminosity4_g153271 = 0;
				float Out_AlphaClip4_g153271 = 0;
				float Out_AlphaFade4_g153271 = 0;
				float3 Out_Translucency4_g153271 = float3( 0,0,0 );
				float Out_Transmission4_g153271 = 0;
				float Out_Thickness4_g153271 = 0;
				float Out_Diffusion4_g153271 = 0;
				Out_Dummy4_g153271 = Data4_g153271.Dummy;
				Out_Albedo4_g153271 = Data4_g153271.Albedo;
				Out_AlbedoRaw4_g153271 = Data4_g153271.AlbedoRaw;
				Out_NormalTS4_g153271 = Data4_g153271.NormalTS;
				Out_NormalWS4_g153271 = Data4_g153271.NormalWS;
				Out_Shader4_g153271 = Data4_g153271.Shader;
				Out_Emissive4_g153271= Data4_g153271.Emissive;
				Out_MultiMask4_g153271 = Data4_g153271.MultiMask;
				Out_Grayscale4_g153271 = Data4_g153271.Grayscale;
				Out_Luminosity4_g153271= Data4_g153271.Luminosity;
				Out_AlphaClip4_g153271 = Data4_g153271.AlphaClip;
				Out_AlphaFade4_g153271 = Data4_g153271.AlphaFade;
				Out_Translucency4_g153271 = Data4_g153271.Translucency;
				Out_Transmission4_g153271 = Data4_g153271.Transmission;
				Out_Thickness4_g153271 = Data4_g153271.Thickness;
				Out_Diffusion4_g153271 = Data4_g153271.Diffusion;
				half3 Visual_Albedo292_g153269 = Out_Albedo4_g153271;
				float temp_output_280_12_g153269 = Out_Grayscale4_g153271;
				half Visual_Grayscale308_g153269 = temp_output_280_12_g153269;
				float3 temp_cast_50 = (Visual_Grayscale308_g153269).xxx;
				TVEGlobalData Data15_g153270 = Data204_g153153;
				float Out_Dummy15_g153270 = 0;
				float4 Out_CoatParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153270 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153270 = float4( 0,0,0,0 );
				Out_Dummy15_g153270 = Data15_g153270.Dummy;
				Out_CoatParams15_g153270 = Data15_g153270.CoatParams;
				Out_PaintParams15_g153270 = Data15_g153270.PaintParams;
				Out_GlowParams15_g153270 = Data15_g153270.GlowParams;
				Out_AtmoParams15_g153270= Data15_g153270.AtmoParams;
				Out_FadeParams15_g153270= Data15_g153270.FadeParams;
				Out_FormParams15_g153270 = Data15_g153270.FormParams;
				Out_LandParams15_g153270 = Data15_g153270.LandParams;
				Out_WindParams15_g153270 = Data15_g153270.WindParams;
				Out_PushParams15_g153270 = Data15_g153270.PushParams;
				half4 Global_AtmoParams314_g153269 = Out_AtmoParams15_g153270;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g153269 = ( (Global_AtmoParams314_g153269).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g153269 = 1.0;
				#endif
				half Dryness_GlobalMask352_g153269 = staticSwitch351_g153269;
				float3 lerpResult485_g153269 = lerp( Visual_Albedo292_g153269 , temp_cast_50 , ( Dryness_GlobalMask352_g153269 * _DrynessGrayValue ));
				half3 hsvTorgb58_g153290 = RGBToHSV( lerpResult485_g153269 );
				half3 hsvTorgb61_g153290 = HSVToRGB( half3(( hsvTorgb58_g153290.x + _DrynessShiftValue ),hsvTorgb58_g153290.y,hsvTorgb58_g153290.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g153269 = hsvTorgb61_g153290;
				#else
				float3 staticSwitch499_g153269 = lerpResult485_g153269;
				#endif
				half Dryness_TexMask478_g153269 = 1.0;
				float temp_output_280_11_g153269 = Out_MultiMask4_g153271;
				half Visual_MultiMask310_g153269 = temp_output_280_11_g153269;
				float lerpResult283_g153269 = lerp( 1.0 , Visual_MultiMask310_g153269 , _DrynessMultiValue);
				half Dryness_MultiMask302_g153269 = lerpResult283_g153269;
				float temp_output_280_15_g153269 = Out_Luminosity4_g153271;
				half Visual_Luminosity309_g153269 = temp_output_280_15_g153269;
				float clampResult17_g153285 = clamp( Visual_Luminosity309_g153269 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153284 = _DrynessLumaRemap.x;
				float temp_output_10_0_g153284 = ( _DrynessLumaRemap.y - temp_output_7_0_g153284 );
				float lerpResult295_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153285 - temp_output_7_0_g153284 ) / ( temp_output_10_0_g153284 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g153269 = lerpResult295_g153269;
				TVEModelData Data15_g153291 = Data16_g153151;
				float Out_Dummy15_g153291 = 0;
				float3 Out_PositionWS15_g153291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153291 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153291 = float3( 0,0,0 );
				float4 Out_VertexData15_g153291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153291 = float4( 0,0,0,0 );
				Out_Dummy15_g153291 = Data15_g153291.Dummy;
				Out_PositionWS15_g153291 = Data15_g153291.PositionWS;
				Out_PositionWO15_g153291 = Data15_g153291.PositionWO;
				Out_PivotWS15_g153291 = Data15_g153291.PivotWS;
				Out_PivotWO15_g153291 = Data15_g153291.PivotWO;
				Out_NormalWS15_g153291 = Data15_g153291.NormalWS;
				Out_ViewDirWS15_g153291 = Data15_g153291.ViewDirWS;
				Out_VertexData15_g153291 = Data15_g153291.VertexData;
				Out_BoundsData15_g153291 = Data15_g153291.BoundsData;
				half4 Model_VertexMasks386_g153269 = Out_VertexData15_g153291;
				float4 break375_g153269 = Model_VertexMasks386_g153269;
				float4 break33_g153278 = _dryness_vert_mode;
				float temp_output_30_0_g153278 = ( break375_g153269.x * break33_g153278.x );
				float temp_output_29_0_g153278 = ( break375_g153269.y * break33_g153278.y );
				float temp_output_31_0_g153278 = ( break375_g153269.z * break33_g153278.z );
				float temp_output_28_0_g153278 = ( temp_output_30_0_g153278 + temp_output_29_0_g153278 + temp_output_31_0_g153278 + ( break375_g153269.w * break33_g153278.w ) );
				float clampResult17_g153279 = clamp( temp_output_28_0_g153278 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153280 = _DrynessMeshRemap.x;
				float temp_output_10_0_g153280 = ( _DrynessMeshRemap.y - temp_output_7_0_g153280 );
				float lerpResult452_g153269 = lerp( 1.0 , saturate( ( ( clampResult17_g153279 - temp_output_7_0_g153280 ) / ( temp_output_10_0_g153280 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g153286 = lerpResult452_g153269;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153286 = ( temp_output_6_0_g153286 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153286 = temp_output_6_0_g153286;
				#endif
				float temp_output_448_0_g153269 = staticSwitch14_g153286;
				half Dryness_VertMask378_g153269 = temp_output_448_0_g153269;
				half Dryness_MaskNoise291_g153269 = 1.0;
				half Custom_Mask411_g153269 = 1.0;
				float temp_output_7_0_g153283 = _DrynessBlendRemap.x;
				float temp_output_10_0_g153283 = ( _DrynessBlendRemap.y - temp_output_7_0_g153283 );
				half Dryness_Mask329_g153269 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g153269 * Dryness_MultiMask302_g153269 * Dryness_LumaMask301_g153269 * Dryness_VertMask378_g153269 * Dryness_MaskNoise291_g153269 * Dryness_GlobalMask352_g153269 * Custom_Mask411_g153269 ) - temp_output_7_0_g153283 ) / ( temp_output_10_0_g153283 + 0.0001 ) ) );
				float3 lerpResult336_g153269 = lerp( Visual_Albedo292_g153269 , ( staticSwitch499_g153269 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g153269 = lerpResult336_g153269;
				#else
				float3 staticSwitch356_g153269 = Visual_Albedo292_g153269;
				#endif
				half3 Final_Albedo331_g153269 = staticSwitch356_g153269;
				float3 In_Albedo3_g153272 = Final_Albedo331_g153269;
				float3 In_AlbedoRaw3_g153272 = Out_AlbedoRaw4_g153271;
				float2 In_NormalTS3_g153272 = Out_NormalTS4_g153271;
				float3 In_NormalWS3_g153272 = Out_NormalWS4_g153271;
				half4 Visual_Shader415_g153269 = Out_Shader4_g153271;
				float4 break438_g153269 = Visual_Shader415_g153269;
				float4 appendResult439_g153269 = (float4(break438_g153269.x , break438_g153269.y , break438_g153269.z , ( break438_g153269.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g153269 = lerp( Visual_Shader415_g153269 , appendResult439_g153269 , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g153269 = lerpResult427_g153269;
				#else
				float4 staticSwitch426_g153269 = Visual_Shader415_g153269;
				#endif
				half4 Final_Shader433_g153269 = staticSwitch426_g153269;
				float4 In_Shader3_g153272 = Final_Shader433_g153269;
				float4 In_Emissive3_g153272 = Out_Emissive4_g153271;
				float In_Grayscale3_g153272 = temp_output_280_12_g153269;
				float In_Luminosity3_g153272 = temp_output_280_15_g153269;
				float In_MultiMask3_g153272 = temp_output_280_11_g153269;
				float In_AlphaClip3_g153272 = Out_AlphaClip4_g153271;
				float In_AlphaFade3_g153272 = Out_AlphaFade4_g153271;
				float3 In_Translucency3_g153272 = Out_Translucency4_g153271;
				half Visual_Transmission416_g153269 = Out_Transmission4_g153271;
				float lerpResult421_g153269 = lerp( Visual_Transmission416_g153269 , ( Visual_Transmission416_g153269 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g153269);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g153269 = lerpResult421_g153269;
				#else
				float staticSwitch418_g153269 = Visual_Transmission416_g153269;
				#endif
				half Final_Transmission425_g153269 = staticSwitch418_g153269;
				float In_Transmission3_g153272 = Final_Transmission425_g153269;
				float In_Thickness3_g153272 = Out_Thickness4_g153271;
				float In_Diffusion3_g153272 = Out_Diffusion4_g153271;
				Data3_g153272.Dummy = In_Dummy3_g153272;
				Data3_g153272.Albedo = In_Albedo3_g153272;
				Data3_g153272.AlbedoRaw = In_AlbedoRaw3_g153272;
				Data3_g153272.NormalTS = In_NormalTS3_g153272;
				Data3_g153272.NormalWS = In_NormalWS3_g153272;
				Data3_g153272.Shader = In_Shader3_g153272;
				Data3_g153272.Emissive= In_Emissive3_g153272;
				Data3_g153272.MultiMask = In_MultiMask3_g153272;
				Data3_g153272.Grayscale = In_Grayscale3_g153272;
				Data3_g153272.Luminosity = In_Luminosity3_g153272;
				Data3_g153272.AlphaClip = In_AlphaClip3_g153272;
				Data3_g153272.AlphaFade = In_AlphaFade3_g153272;
				Data3_g153272.Translucency = In_Translucency3_g153272;
				Data3_g153272.Transmission = In_Transmission3_g153272;
				Data3_g153272.Thickness = In_Thickness3_g153272;
				Data3_g153272.Diffusion = In_Diffusion3_g153272;
				TVEVisualData Data4_g153293 = Data3_g153272;
				float Out_Dummy4_g153293 = 0;
				float3 Out_Albedo4_g153293 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153293 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153293 = float2( 0,0 );
				float3 Out_NormalWS4_g153293 = float3( 0,0,0 );
				float4 Out_Shader4_g153293 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153293 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153293 = 0;
				float Out_Grayscale4_g153293 = 0;
				float Out_Luminosity4_g153293 = 0;
				float Out_AlphaClip4_g153293 = 0;
				float Out_AlphaFade4_g153293 = 0;
				float3 Out_Translucency4_g153293 = float3( 0,0,0 );
				float Out_Transmission4_g153293 = 0;
				float Out_Thickness4_g153293 = 0;
				float Out_Diffusion4_g153293 = 0;
				Out_Dummy4_g153293 = Data4_g153293.Dummy;
				Out_Albedo4_g153293 = Data4_g153293.Albedo;
				Out_AlbedoRaw4_g153293 = Data4_g153293.AlbedoRaw;
				Out_NormalTS4_g153293 = Data4_g153293.NormalTS;
				Out_NormalWS4_g153293 = Data4_g153293.NormalWS;
				Out_Shader4_g153293 = Data4_g153293.Shader;
				Out_Emissive4_g153293= Data4_g153293.Emissive;
				Out_MultiMask4_g153293 = Data4_g153293.MultiMask;
				Out_Grayscale4_g153293 = Data4_g153293.Grayscale;
				Out_Luminosity4_g153293= Data4_g153293.Luminosity;
				Out_AlphaClip4_g153293 = Data4_g153293.AlphaClip;
				Out_AlphaFade4_g153293 = Data4_g153293.AlphaFade;
				Out_Translucency4_g153293 = Data4_g153293.Translucency;
				Out_Transmission4_g153293 = Data4_g153293.Transmission;
				Out_Thickness4_g153293 = Data4_g153293.Thickness;
				Out_Diffusion4_g153293 = Data4_g153293.Diffusion;
				half3 Visual_Albedo127_g153292 = Out_Albedo4_g153293;
				float3 temp_output_622_0_g153292 = (_OverlayColor).rgb;
				half Overlay_TexMask908_g153292 = 1.0;
				float3 temp_output_739_21_g153292 = Out_NormalWS4_g153293;
				half3 Visual_NormalWS749_g153292 = temp_output_739_21_g153292;
				float clampResult17_g153313 = clamp( saturate( (Visual_NormalWS749_g153292).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g153312 = _OverlayProjRemap.x;
				float temp_output_10_0_g153312 = ( _OverlayProjRemap.y - temp_output_7_0_g153312 );
				float lerpResult842_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153313 - temp_output_7_0_g153312 ) / ( temp_output_10_0_g153312 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g153292 = lerpResult842_g153292;
				float temp_output_739_15_g153292 = Out_Luminosity4_g153293;
				half Visual_Luminosity654_g153292 = temp_output_739_15_g153292;
				float clampResult17_g153315 = clamp( Visual_Luminosity654_g153292 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153314 = _OverlayLumaRemap.x;
				float temp_output_10_0_g153314 = ( _OverlayLumaRemap.y - temp_output_7_0_g153314 );
				float lerpResult587_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153315 - temp_output_7_0_g153314 ) / ( temp_output_10_0_g153314 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g153292 = lerpResult587_g153292;
				TVEModelData Data15_g153327 = Data16_g153151;
				float Out_Dummy15_g153327 = 0;
				float3 Out_PositionWS15_g153327 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153327 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153327 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153327 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153327 = float3( 0,0,0 );
				float4 Out_VertexData15_g153327 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153327 = float4( 0,0,0,0 );
				Out_Dummy15_g153327 = Data15_g153327.Dummy;
				Out_PositionWS15_g153327 = Data15_g153327.PositionWS;
				Out_PositionWO15_g153327 = Data15_g153327.PositionWO;
				Out_PivotWS15_g153327 = Data15_g153327.PivotWS;
				Out_PivotWO15_g153327 = Data15_g153327.PivotWO;
				Out_NormalWS15_g153327 = Data15_g153327.NormalWS;
				Out_ViewDirWS15_g153327 = Data15_g153327.ViewDirWS;
				Out_VertexData15_g153327 = Data15_g153327.VertexData;
				Out_BoundsData15_g153327 = Data15_g153327.BoundsData;
				half4 Model_VertexMasks791_g153292 = Out_VertexData15_g153327;
				float4 break792_g153292 = Model_VertexMasks791_g153292;
				float4 break33_g153305 = _overlay_vert_mode;
				float temp_output_30_0_g153305 = ( break792_g153292.x * break33_g153305.x );
				float temp_output_29_0_g153305 = ( break792_g153292.y * break33_g153305.y );
				float temp_output_31_0_g153305 = ( break792_g153292.z * break33_g153305.z );
				float temp_output_28_0_g153305 = ( temp_output_30_0_g153305 + temp_output_29_0_g153305 + temp_output_31_0_g153305 + ( break792_g153292.w * break33_g153305.w ) );
				float clampResult17_g153306 = clamp( temp_output_28_0_g153305 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153309 = _OverlayMeshRemap.x;
				float temp_output_10_0_g153309 = ( _OverlayMeshRemap.y - temp_output_7_0_g153309 );
				float lerpResult881_g153292 = lerp( 1.0 , saturate( ( ( clampResult17_g153306 - temp_output_7_0_g153309 ) / ( temp_output_10_0_g153309 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g153316 = lerpResult881_g153292;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153316 = ( temp_output_6_0_g153316 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153316 = temp_output_6_0_g153316;
				#endif
				float temp_output_831_0_g153292 = staticSwitch14_g153316;
				half Overlay_VertMask801_g153292 = temp_output_831_0_g153292;
				half Overlay_MaskNoise427_g153292 = 1.0;
				TVEGlobalData Data15_g153294 = Data204_g153153;
				float Out_Dummy15_g153294 = 0;
				float4 Out_CoatParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153294 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153294 = float4( 0,0,0,0 );
				Out_Dummy15_g153294 = Data15_g153294.Dummy;
				Out_CoatParams15_g153294 = Data15_g153294.CoatParams;
				Out_PaintParams15_g153294 = Data15_g153294.PaintParams;
				Out_GlowParams15_g153294 = Data15_g153294.GlowParams;
				Out_AtmoParams15_g153294= Data15_g153294.AtmoParams;
				Out_FadeParams15_g153294= Data15_g153294.FadeParams;
				Out_FormParams15_g153294 = Data15_g153294.FormParams;
				Out_LandParams15_g153294 = Data15_g153294.LandParams;
				Out_WindParams15_g153294 = Data15_g153294.WindParams;
				Out_PushParams15_g153294 = Data15_g153294.PushParams;
				half4 Global_AtmoParams516_g153292 = Out_AtmoParams15_g153294;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g153292 = ( (Global_AtmoParams516_g153292).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g153292 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g153292 = staticSwitch705_g153292;
				half Custom_Mask646_g153292 = 1.0;
				float temp_output_7_0_g153321 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g153321 = ( _OverlayBlendRemap1.y - temp_output_7_0_g153321 );
				half Overlay_Mask494_g153292 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g153292 * Overlay_MaskProj457_g153292 * Overlay_MaskLuma438_g153292 * Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 * Custom_Mask646_g153292 ) - temp_output_7_0_g153321 ) / ( temp_output_10_0_g153321 + 0.0001 ) ) );
				float3 lerpResult467_g153292 = lerp( Visual_Albedo127_g153292 , temp_output_622_0_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g153292 = lerpResult467_g153292;
				#else
				float3 staticSwitch577_g153292 = Visual_Albedo127_g153292;
				#endif
				half3 Final_Albedo493_g153292 = staticSwitch577_g153292;
				float3 In_Albedo3_g153295 = Final_Albedo493_g153292;
				float3 In_AlbedoRaw3_g153295 = Out_AlbedoRaw4_g153293;
				half2 Visual_NormalTS535_g153292 = Out_NormalTS4_g153293;
				float2 lerpResult551_g153292 = lerp( Visual_NormalTS535_g153292 , ( Visual_NormalTS535_g153292 * _OverlayNormalValue ) , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g153292 = lerpResult551_g153292;
				#else
				float2 staticSwitch583_g153292 = Visual_NormalTS535_g153292;
				#endif
				half2 Final_NormalTS499_g153292 = staticSwitch583_g153292;
				float2 In_NormalTS3_g153295 = Final_NormalTS499_g153292;
				float3 In_NormalWS3_g153295 = temp_output_739_21_g153292;
				half4 Visual_Masks536_g153292 = Out_Shader4_g153293;
				float4 appendResult585_g153292 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g153292 = lerp( Visual_Masks536_g153292 , appendResult585_g153292 , Overlay_Mask494_g153292);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g153292 = lerpResult584_g153292;
				#else
				float4 staticSwitch586_g153292 = Visual_Masks536_g153292;
				#endif
				half4 Final_Masks482_g153292 = staticSwitch586_g153292;
				float4 In_Shader3_g153295 = Final_Masks482_g153292;
				float4 In_Emissive3_g153295 = Out_Emissive4_g153293;
				float temp_output_739_12_g153292 = Out_Grayscale4_g153293;
				float In_Grayscale3_g153295 = temp_output_739_12_g153292;
				float In_Luminosity3_g153295 = temp_output_739_15_g153292;
				float In_MultiMask3_g153295 = Out_MultiMask4_g153293;
				float In_AlphaClip3_g153295 = Out_AlphaClip4_g153293;
				float In_AlphaFade3_g153295 = Out_AlphaFade4_g153293;
				float3 In_Translucency3_g153295 = Out_Translucency4_g153293;
				half Visual_Transmission699_g153292 = Out_Transmission4_g153293;
				float lerpResult746_g153292 = lerp( Visual_Transmission699_g153292 , ( Visual_Transmission699_g153292 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g153292 * Overlay_MaskNoise427_g153292 * Overlay_MaskGlobal429_g153292 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g153292 = lerpResult746_g153292;
				#else
				float staticSwitch703_g153292 = Visual_Transmission699_g153292;
				#endif
				half Final_Transmission702_g153292 = staticSwitch703_g153292;
				float In_Transmission3_g153295 = Final_Transmission702_g153292;
				float In_Thickness3_g153295 = Out_Thickness4_g153293;
				float In_Diffusion3_g153295 = Out_Diffusion4_g153293;
				Data3_g153295.Dummy = In_Dummy3_g153295;
				Data3_g153295.Albedo = In_Albedo3_g153295;
				Data3_g153295.AlbedoRaw = In_AlbedoRaw3_g153295;
				Data3_g153295.NormalTS = In_NormalTS3_g153295;
				Data3_g153295.NormalWS = In_NormalWS3_g153295;
				Data3_g153295.Shader = In_Shader3_g153295;
				Data3_g153295.Emissive= In_Emissive3_g153295;
				Data3_g153295.MultiMask = In_MultiMask3_g153295;
				Data3_g153295.Grayscale = In_Grayscale3_g153295;
				Data3_g153295.Luminosity = In_Luminosity3_g153295;
				Data3_g153295.AlphaClip = In_AlphaClip3_g153295;
				Data3_g153295.AlphaFade = In_AlphaFade3_g153295;
				Data3_g153295.Translucency = In_Translucency3_g153295;
				Data3_g153295.Transmission = In_Transmission3_g153295;
				Data3_g153295.Thickness = In_Thickness3_g153295;
				Data3_g153295.Diffusion = In_Diffusion3_g153295;
				TVEVisualData Data4_g153329 = Data3_g153295;
				float Out_Dummy4_g153329 = 0;
				float3 Out_Albedo4_g153329 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153329 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153329 = float2( 0,0 );
				float3 Out_NormalWS4_g153329 = float3( 0,0,0 );
				float4 Out_Shader4_g153329 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153329 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153329 = 0;
				float Out_Grayscale4_g153329 = 0;
				float Out_Luminosity4_g153329 = 0;
				float Out_AlphaClip4_g153329 = 0;
				float Out_AlphaFade4_g153329 = 0;
				float3 Out_Translucency4_g153329 = float3( 0,0,0 );
				float Out_Transmission4_g153329 = 0;
				float Out_Thickness4_g153329 = 0;
				float Out_Diffusion4_g153329 = 0;
				Out_Dummy4_g153329 = Data4_g153329.Dummy;
				Out_Albedo4_g153329 = Data4_g153329.Albedo;
				Out_AlbedoRaw4_g153329 = Data4_g153329.AlbedoRaw;
				Out_NormalTS4_g153329 = Data4_g153329.NormalTS;
				Out_NormalWS4_g153329 = Data4_g153329.NormalWS;
				Out_Shader4_g153329 = Data4_g153329.Shader;
				Out_Emissive4_g153329= Data4_g153329.Emissive;
				Out_MultiMask4_g153329 = Data4_g153329.MultiMask;
				Out_Grayscale4_g153329 = Data4_g153329.Grayscale;
				Out_Luminosity4_g153329= Data4_g153329.Luminosity;
				Out_AlphaClip4_g153329 = Data4_g153329.AlphaClip;
				Out_AlphaFade4_g153329 = Data4_g153329.AlphaFade;
				Out_Translucency4_g153329 = Data4_g153329.Translucency;
				Out_Transmission4_g153329 = Data4_g153329.Transmission;
				Out_Thickness4_g153329 = Data4_g153329.Thickness;
				Out_Diffusion4_g153329 = Data4_g153329.Diffusion;
				half3 Visual_Albedo127_g153328 = Out_Albedo4_g153329;
				float3 lerpResult768_g153328 = lerp( Visual_Albedo127_g153328 , ( Visual_Albedo127_g153328 * Visual_Albedo127_g153328 ) , _WetnessContrastValue);
				TVEGlobalData Data15_g153334 = Data204_g153153;
				float Out_Dummy15_g153334 = 0;
				float4 Out_CoatParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153334 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153334 = float4( 0,0,0,0 );
				Out_Dummy15_g153334 = Data15_g153334.Dummy;
				Out_CoatParams15_g153334 = Data15_g153334.CoatParams;
				Out_PaintParams15_g153334 = Data15_g153334.PaintParams;
				Out_GlowParams15_g153334 = Data15_g153334.GlowParams;
				Out_AtmoParams15_g153334= Data15_g153334.AtmoParams;
				Out_FadeParams15_g153334= Data15_g153334.FadeParams;
				Out_FormParams15_g153334 = Data15_g153334.FormParams;
				Out_LandParams15_g153334 = Data15_g153334.LandParams;
				Out_WindParams15_g153334 = Data15_g153334.WindParams;
				Out_PushParams15_g153334 = Data15_g153334.PushParams;
				half4 Global_AtmoParams516_g153328 = Out_AtmoParams15_g153334;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g153328 = ( (Global_AtmoParams516_g153328).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g153328 = 1.0;
				#endif
				half Global_Wetness429_g153328 = staticSwitch663_g153328;
				half Wetness_Value1042_g153328 = ( _WetnessIntensityValue * Global_Wetness429_g153328 );
				half Wetness_VertMask1024_g153328 = 1.0;
				float temp_output_1043_0_g153328 = ( Wetness_Value1042_g153328 * Wetness_VertMask1024_g153328 );
				half Wetness_Mask866_g153328 = temp_output_1043_0_g153328;
				float3 lerpResult651_g153328 = lerp( Visual_Albedo127_g153328 , lerpResult768_g153328 , Wetness_Mask866_g153328);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g153328 = lerpResult651_g153328;
				#else
				float3 staticSwitch577_g153328 = Visual_Albedo127_g153328;
				#endif
				half3 Final_Albedo493_g153328 = staticSwitch577_g153328;
				float3 In_Albedo3_g153330 = Final_Albedo493_g153328;
				float3 In_AlbedoRaw3_g153330 = Out_AlbedoRaw4_g153329;
				half2 Visual_Normal535_g153328 = Out_NormalTS4_g153329;
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#else
				float2 staticSwitch774_g153328 = Visual_Normal535_g153328;
				#endif
				half2 Final_Normal499_g153328 = staticSwitch774_g153328;
				float2 In_NormalTS3_g153330 = Final_Normal499_g153328;
				float3 In_NormalWS3_g153330 = Out_NormalWS4_g153329;
				half4 Visual_Masks536_g153328 = Out_Shader4_g153329;
				float4 break658_g153328 = Visual_Masks536_g153328;
				float temp_output_935_0_g153328 = ( Wetness_Mask866_g153328 * _WetnessSmoothnessValue );
				float4 appendResult661_g153328 = (float4(break658_g153328.x , break658_g153328.y , break658_g153328.z , saturate( ( break658_g153328.w + temp_output_935_0_g153328 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g153328 = appendResult661_g153328;
				#else
				float4 staticSwitch586_g153328 = Visual_Masks536_g153328;
				#endif
				half4 Final_Masks482_g153328 = staticSwitch586_g153328;
				float4 In_Shader3_g153330 = Final_Masks482_g153328;
				float4 In_Emissive3_g153330 = Out_Emissive4_g153329;
				float In_Grayscale3_g153330 = Out_Grayscale4_g153329;
				float In_Luminosity3_g153330 = Out_Luminosity4_g153329;
				float In_MultiMask3_g153330 = Out_MultiMask4_g153329;
				float In_AlphaClip3_g153330 = Out_AlphaClip4_g153329;
				float In_AlphaFade3_g153330 = Out_AlphaFade4_g153329;
				float3 In_Translucency3_g153330 = Out_Translucency4_g153329;
				float In_Transmission3_g153330 = Out_Transmission4_g153329;
				float In_Thickness3_g153330 = Out_Thickness4_g153329;
				float In_Diffusion3_g153330 = Out_Diffusion4_g153329;
				Data3_g153330.Dummy = In_Dummy3_g153330;
				Data3_g153330.Albedo = In_Albedo3_g153330;
				Data3_g153330.AlbedoRaw = In_AlbedoRaw3_g153330;
				Data3_g153330.NormalTS = In_NormalTS3_g153330;
				Data3_g153330.NormalWS = In_NormalWS3_g153330;
				Data3_g153330.Shader = In_Shader3_g153330;
				Data3_g153330.Emissive= In_Emissive3_g153330;
				Data3_g153330.MultiMask = In_MultiMask3_g153330;
				Data3_g153330.Grayscale = In_Grayscale3_g153330;
				Data3_g153330.Luminosity = In_Luminosity3_g153330;
				Data3_g153330.AlphaClip = In_AlphaClip3_g153330;
				Data3_g153330.AlphaFade = In_AlphaFade3_g153330;
				Data3_g153330.Translucency = In_Translucency3_g153330;
				Data3_g153330.Transmission = In_Transmission3_g153330;
				Data3_g153330.Thickness = In_Thickness3_g153330;
				Data3_g153330.Diffusion = In_Diffusion3_g153330;
				TVEVisualData Data4_g153368 = Data3_g153330;
				float Out_Dummy4_g153368 = 0;
				float3 Out_Albedo4_g153368 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153368 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153368 = float2( 0,0 );
				float3 Out_NormalWS4_g153368 = float3( 0,0,0 );
				float4 Out_Shader4_g153368 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153368 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153368 = 0;
				float Out_Grayscale4_g153368 = 0;
				float Out_Luminosity4_g153368 = 0;
				float Out_AlphaClip4_g153368 = 0;
				float Out_AlphaFade4_g153368 = 0;
				float3 Out_Translucency4_g153368 = float3( 0,0,0 );
				float Out_Transmission4_g153368 = 0;
				float Out_Thickness4_g153368 = 0;
				float Out_Diffusion4_g153368 = 0;
				Out_Dummy4_g153368 = Data4_g153368.Dummy;
				Out_Albedo4_g153368 = Data4_g153368.Albedo;
				Out_AlbedoRaw4_g153368 = Data4_g153368.AlbedoRaw;
				Out_NormalTS4_g153368 = Data4_g153368.NormalTS;
				Out_NormalWS4_g153368 = Data4_g153368.NormalWS;
				Out_Shader4_g153368 = Data4_g153368.Shader;
				Out_Emissive4_g153368= Data4_g153368.Emissive;
				Out_MultiMask4_g153368 = Data4_g153368.MultiMask;
				Out_Grayscale4_g153368 = Data4_g153368.Grayscale;
				Out_Luminosity4_g153368= Data4_g153368.Luminosity;
				Out_AlphaClip4_g153368 = Data4_g153368.AlphaClip;
				Out_AlphaFade4_g153368 = Data4_g153368.AlphaFade;
				Out_Translucency4_g153368 = Data4_g153368.Translucency;
				Out_Transmission4_g153368 = Data4_g153368.Transmission;
				Out_Thickness4_g153368 = Data4_g153368.Thickness;
				Out_Diffusion4_g153368 = Data4_g153368.Diffusion;
				float3 In_Albedo3_g153358 = Out_Albedo4_g153368;
				float3 In_AlbedoRaw3_g153358 = Out_AlbedoRaw4_g153368;
				float2 In_NormalTS3_g153358 = Out_NormalTS4_g153368;
				float3 In_NormalWS3_g153358 = Out_NormalWS4_g153368;
				float4 In_Shader3_g153358 = Out_Shader4_g153368;
				float4 In_Emissive3_g153358 = Out_Emissive4_g153368;
				float In_Grayscale3_g153358 = Out_Grayscale4_g153368;
				float In_Luminosity3_g153358 = Out_Luminosity4_g153368;
				float temp_output_836_11_g153357 = Out_MultiMask4_g153368;
				float In_MultiMask3_g153358 = temp_output_836_11_g153357;
				half Visual_AlphaClip667_g153357 = Out_AlphaClip4_g153368;
				half Input_True57_g153365 = Visual_AlphaClip667_g153357;
				half True36_g153365 = Input_True57_g153365;
				TVEGlobalData Data15_g153367 = Data204_g153153;
				float Out_Dummy15_g153367 = 0;
				float4 Out_CoatParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153367 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153367 = float4( 0,0,0,0 );
				Out_Dummy15_g153367 = Data15_g153367.Dummy;
				Out_CoatParams15_g153367 = Data15_g153367.CoatParams;
				Out_PaintParams15_g153367 = Data15_g153367.PaintParams;
				Out_GlowParams15_g153367 = Data15_g153367.GlowParams;
				Out_AtmoParams15_g153367= Data15_g153367.AtmoParams;
				Out_FadeParams15_g153367= Data15_g153367.FadeParams;
				Out_FormParams15_g153367 = Data15_g153367.FormParams;
				Out_LandParams15_g153367 = Data15_g153367.LandParams;
				Out_WindParams15_g153367 = Data15_g153367.WindParams;
				Out_PushParams15_g153367 = Data15_g153367.PushParams;
				half4 Global_FadeParams516_g153357 = Out_FadeParams15_g153367;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g153357 = saturate( (Global_FadeParams516_g153357).w );
				#else
				float staticSwitch663_g153357 = 1.0;
				#endif
				half Local_GlobalMask429_g153357 = staticSwitch663_g153357;
				half Local_AlphaMask814_g153357 = 1.0;
				TVEModelData Data15_g153369 = Data16_g153151;
				float Out_Dummy15_g153369 = 0;
				float3 Out_PositionWS15_g153369 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153369 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153369 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153369 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153369 = float3( 0,0,0 );
				float4 Out_VertexData15_g153369 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153369 = float4( 0,0,0,0 );
				Out_Dummy15_g153369 = Data15_g153369.Dummy;
				Out_PositionWS15_g153369 = Data15_g153369.PositionWS;
				Out_PositionWO15_g153369 = Data15_g153369.PositionWO;
				Out_PivotWS15_g153369 = Data15_g153369.PivotWS;
				Out_PivotWO15_g153369 = Data15_g153369.PivotWO;
				Out_NormalWS15_g153369 = Data15_g153369.NormalWS;
				Out_ViewDirWS15_g153369 = Data15_g153369.ViewDirWS;
				Out_VertexData15_g153369 = Data15_g153369.VertexData;
				Out_BoundsData15_g153369 = Data15_g153369.BoundsData;
				half3 Model_PositionWO602_g153357 = Out_PositionWO15_g153369;
				float4 tex3DNode60_g153361 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g153357 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g153357 = lerp( 1.0 , tex3DNode60_g153361.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g153357 = lerpResult673_g153357;
				half4 Model_VertexMasks752_g153357 = Out_VertexData15_g153369;
				float4 break755_g153357 = Model_VertexMasks752_g153357;
				float4 break33_g153359 = _cutout_vert_mode;
				float temp_output_30_0_g153359 = ( break755_g153357.x * break33_g153359.x );
				float temp_output_29_0_g153359 = ( break755_g153357.y * break33_g153359.y );
				float temp_output_31_0_g153359 = ( break755_g153357.z * break33_g153359.z );
				float temp_output_28_0_g153359 = ( temp_output_30_0_g153359 + temp_output_29_0_g153359 + temp_output_31_0_g153359 + ( break755_g153357.w * break33_g153359.w ) );
				float clampResult17_g153360 = clamp( temp_output_28_0_g153359 , 0.0001 , 0.9999 );
				float temp_output_7_0_g153363 = _CutoutMeshRemap.x;
				float temp_output_10_0_g153363 = ( _CutoutMeshRemap.y - temp_output_7_0_g153363 );
				float lerpResult820_g153357 = lerp( 1.0 , saturate( ( ( clampResult17_g153360 - temp_output_7_0_g153363 ) / ( temp_output_10_0_g153363 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g153364 = lerpResult820_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153364 = ( temp_output_6_0_g153364 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g153364 = temp_output_6_0_g153364;
				#endif
				float temp_output_801_0_g153357 = staticSwitch14_g153364;
				half Local_VertMask766_g153357 = temp_output_801_0_g153357;
				half Visual_MultiMask671_g153357 = temp_output_836_11_g153357;
				float lerpResult683_g153357 = lerp( 1.0 , Visual_MultiMask671_g153357 , _CutoutMultiValue);
				half Local_MultiMask685_g153357 = lerpResult683_g153357;
				float lerpResult728_g153357 = lerp( Visual_AlphaClip667_g153357 , min( Visual_AlphaClip667_g153357 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g153357 ) - ( Local_AlphaMask814_g153357 * Local_NoiseMask678_g153357 * Local_VertMask766_g153357 ) ) ) ) , Local_MultiMask685_g153357);
				half Local_AlphaClip784_g153357 = lerpResult728_g153357;
				half Input_False58_g153365 = Local_AlphaClip784_g153357;
				half False36_g153365 = Input_False58_g153365;
				half localShadowPassCheck36_g153365 = ShadowPassCheck36_g153365( True36_g153365 , False36_g153365 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g153357 = Local_AlphaClip784_g153357;
				#else
				float staticSwitch791_g153357 = localShadowPassCheck36_g153365;
				#endif
				float temp_output_6_0_g153366 = staticSwitch791_g153357;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153366 = ( temp_output_6_0_g153366 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153366 = temp_output_6_0_g153366;
				#endif
				float temp_output_798_0_g153357 = staticSwitch14_g153366;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g153357 = temp_output_798_0_g153357;
				#else
				float staticSwitch577_g153357 = Visual_AlphaClip667_g153357;
				#endif
				half Final_AlphaClip795_g153357 = staticSwitch577_g153357;
				float In_AlphaClip3_g153358 = Final_AlphaClip795_g153357;
				float In_AlphaFade3_g153358 = Out_AlphaFade4_g153368;
				float3 In_Translucency3_g153358 = Out_Translucency4_g153368;
				float In_Transmission3_g153358 = Out_Transmission4_g153368;
				float In_Thickness3_g153358 = Out_Thickness4_g153368;
				float In_Diffusion3_g153358 = Out_Diffusion4_g153368;
				Data3_g153358.Dummy = In_Dummy3_g153358;
				Data3_g153358.Albedo = In_Albedo3_g153358;
				Data3_g153358.AlbedoRaw = In_AlbedoRaw3_g153358;
				Data3_g153358.NormalTS = In_NormalTS3_g153358;
				Data3_g153358.NormalWS = In_NormalWS3_g153358;
				Data3_g153358.Shader = In_Shader3_g153358;
				Data3_g153358.Emissive= In_Emissive3_g153358;
				Data3_g153358.MultiMask = In_MultiMask3_g153358;
				Data3_g153358.Grayscale = In_Grayscale3_g153358;
				Data3_g153358.Luminosity = In_Luminosity3_g153358;
				Data3_g153358.AlphaClip = In_AlphaClip3_g153358;
				Data3_g153358.AlphaFade = In_AlphaFade3_g153358;
				Data3_g153358.Translucency = In_Translucency3_g153358;
				Data3_g153358.Transmission = In_Transmission3_g153358;
				Data3_g153358.Thickness = In_Thickness3_g153358;
				Data3_g153358.Diffusion = In_Diffusion3_g153358;
				TVEVisualData Data4_g153372 = Data3_g153358;
				float Out_Dummy4_g153372 = 0;
				float3 Out_Albedo4_g153372 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153372 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153372 = float2( 0,0 );
				float3 Out_NormalWS4_g153372 = float3( 0,0,0 );
				float4 Out_Shader4_g153372 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153372 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153372 = 0;
				float Out_Grayscale4_g153372 = 0;
				float Out_Luminosity4_g153372 = 0;
				float Out_AlphaClip4_g153372 = 0;
				float Out_AlphaFade4_g153372 = 0;
				float3 Out_Translucency4_g153372 = float3( 0,0,0 );
				float Out_Transmission4_g153372 = 0;
				float Out_Thickness4_g153372 = 0;
				float Out_Diffusion4_g153372 = 0;
				Out_Dummy4_g153372 = Data4_g153372.Dummy;
				Out_Albedo4_g153372 = Data4_g153372.Albedo;
				Out_AlbedoRaw4_g153372 = Data4_g153372.AlbedoRaw;
				Out_NormalTS4_g153372 = Data4_g153372.NormalTS;
				Out_NormalWS4_g153372 = Data4_g153372.NormalWS;
				Out_Shader4_g153372 = Data4_g153372.Shader;
				Out_Emissive4_g153372= Data4_g153372.Emissive;
				Out_MultiMask4_g153372 = Data4_g153372.MultiMask;
				Out_Grayscale4_g153372 = Data4_g153372.Grayscale;
				Out_Luminosity4_g153372= Data4_g153372.Luminosity;
				Out_AlphaClip4_g153372 = Data4_g153372.AlphaClip;
				Out_AlphaFade4_g153372 = Data4_g153372.AlphaFade;
				Out_Translucency4_g153372 = Data4_g153372.Translucency;
				Out_Transmission4_g153372 = Data4_g153372.Transmission;
				Out_Thickness4_g153372 = Data4_g153372.Thickness;
				Out_Diffusion4_g153372 = Data4_g153372.Diffusion;
				float3 In_Albedo3_g153373 = Out_Albedo4_g153372;
				float3 In_AlbedoRaw3_g153373 = Out_AlbedoRaw4_g153372;
				float2 In_NormalTS3_g153373 = Out_NormalTS4_g153372;
				float3 In_NormalWS3_g153373 = Out_NormalWS4_g153372;
				float4 In_Shader3_g153373 = Out_Shader4_g153372;
				float4 In_Emissive3_g153373 = Out_Emissive4_g153372;
				float In_Grayscale3_g153373 = Out_Grayscale4_g153372;
				float In_Luminosity3_g153373 = Out_Luminosity4_g153372;
				float temp_output_821_11_g153370 = Out_MultiMask4_g153372;
				float In_MultiMask3_g153373 = temp_output_821_11_g153370;
				half Visual_AlphaClip754_g153370 = Out_AlphaClip4_g153372;
				half Input_True57_g153374 = Visual_AlphaClip754_g153370;
				half True36_g153374 = Input_True57_g153374;
				half Dither_Constant768_g153370 = _DitherConstantValue;
				TVEModelData Data15_g153379 = Data16_g153151;
				float Out_Dummy15_g153379 = 0;
				float3 Out_PositionWS15_g153379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g153379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g153379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g153379 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g153379 = float3( 0,0,0 );
				float4 Out_VertexData15_g153379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g153379 = float4( 0,0,0,0 );
				Out_Dummy15_g153379 = Data15_g153379.Dummy;
				Out_PositionWS15_g153379 = Data15_g153379.PositionWS;
				Out_PositionWO15_g153379 = Data15_g153379.PositionWO;
				Out_PivotWS15_g153379 = Data15_g153379.PivotWS;
				Out_PivotWO15_g153379 = Data15_g153379.PivotWO;
				Out_NormalWS15_g153379 = Data15_g153379.NormalWS;
				Out_ViewDirWS15_g153379 = Data15_g153379.ViewDirWS;
				Out_VertexData15_g153379 = Data15_g153379.VertexData;
				Out_BoundsData15_g153379 = Data15_g153379.BoundsData;
				half3 Model_PositionWS776_g153370 = Out_PositionWS15_g153379;
				float temp_output_7_0_g153378 = _DitherDistanceMinValue;
				float temp_output_10_0_g153378 = ( _DitherDistanceMaxValue - temp_output_7_0_g153378 );
				half Dither_Distance856_g153370 = ( saturate( ( ( distance( Model_PositionWS776_g153370 , _WorldSpaceCameraPos ) - temp_output_7_0_g153378 ) / ( temp_output_10_0_g153378 + 0.0001 ) ) ) * _DitherDistanceValue );
				half Dither_Value429_g153370 = max( Dither_Constant768_g153370 , Dither_Distance856_g153370 );
				half3 Model_PositionWO602_g153370 = Out_PositionWO15_g153379;
				float4 tex3DNode60_g153376 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g153370 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g153370 = tex3DNode60_g153376.r;
				half Local_MaskNoise678_g153370 = temp_output_809_0_g153370;
				half Visual_MultiMask671_g153370 = temp_output_821_11_g153370;
				float lerpResult683_g153370 = lerp( 1.0 , Visual_MultiMask671_g153370 , _DitherMultiValue);
				half Local_MaskMulti685_g153370 = lerpResult683_g153370;
				half Custom_Mask826_g153370 = 1.0;
				float lerpResult728_g153370 = lerp( Visual_AlphaClip754_g153370 , min( Visual_AlphaClip754_g153370 , ( -0.001 - ( Dither_Value429_g153370 - Local_MaskNoise678_g153370 ) ) ) , ( Local_MaskMulti685_g153370 * Custom_Mask826_g153370 ));
				half Local_AlphaClip834_g153370 = lerpResult728_g153370;
				half Input_False58_g153374 = Local_AlphaClip834_g153370;
				half False36_g153374 = Input_False58_g153374;
				half localShadowPassCheck36_g153374 = ShadowPassCheck36_g153374( True36_g153374 , False36_g153374 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g153370 = Local_AlphaClip834_g153370;
				#else
				float staticSwitch831_g153370 = localShadowPassCheck36_g153374;
				#endif
				float temp_output_6_0_g153375 = staticSwitch831_g153370;
				#ifdef TVE_REGISTER
				float staticSwitch14_g153375 = ( temp_output_6_0_g153375 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g153375 = temp_output_6_0_g153375;
				#endif
				float temp_output_840_0_g153370 = staticSwitch14_g153375;
				#ifdef TVE_DITHER
				float staticSwitch577_g153370 = temp_output_840_0_g153370;
				#else
				float staticSwitch577_g153370 = Visual_AlphaClip754_g153370;
				#endif
				half Final_AlphaClip493_g153370 = staticSwitch577_g153370;
				float In_AlphaClip3_g153373 = Final_AlphaClip493_g153370;
				float In_AlphaFade3_g153373 = Out_AlphaFade4_g153372;
				float3 In_Translucency3_g153373 = Out_Translucency4_g153372;
				float In_Transmission3_g153373 = Out_Transmission4_g153372;
				float In_Thickness3_g153373 = Out_Thickness4_g153372;
				float In_Diffusion3_g153373 = Out_Diffusion4_g153372;
				Data3_g153373.Dummy = In_Dummy3_g153373;
				Data3_g153373.Albedo = In_Albedo3_g153373;
				Data3_g153373.AlbedoRaw = In_AlbedoRaw3_g153373;
				Data3_g153373.NormalTS = In_NormalTS3_g153373;
				Data3_g153373.NormalWS = In_NormalWS3_g153373;
				Data3_g153373.Shader = In_Shader3_g153373;
				Data3_g153373.Emissive= In_Emissive3_g153373;
				Data3_g153373.MultiMask = In_MultiMask3_g153373;
				Data3_g153373.Grayscale = In_Grayscale3_g153373;
				Data3_g153373.Luminosity = In_Luminosity3_g153373;
				Data3_g153373.AlphaClip = In_AlphaClip3_g153373;
				Data3_g153373.AlphaFade = In_AlphaFade3_g153373;
				Data3_g153373.Translucency = In_Translucency3_g153373;
				Data3_g153373.Transmission = In_Transmission3_g153373;
				Data3_g153373.Thickness = In_Thickness3_g153373;
				Data3_g153373.Diffusion = In_Diffusion3_g153373;
				TVEVisualData Data4_g153398 = Data3_g153373;
				float Out_Dummy4_g153398 = 0;
				float3 Out_Albedo4_g153398 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153398 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153398 = float2( 0,0 );
				float3 Out_NormalWS4_g153398 = float3( 0,0,0 );
				float4 Out_Shader4_g153398 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153398 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153398 = 0;
				float Out_Grayscale4_g153398 = 0;
				float Out_Luminosity4_g153398 = 0;
				float Out_AlphaClip4_g153398 = 0;
				float Out_AlphaFade4_g153398 = 0;
				float3 Out_Translucency4_g153398 = float3( 0,0,0 );
				float Out_Transmission4_g153398 = 0;
				float Out_Thickness4_g153398 = 0;
				float Out_Diffusion4_g153398 = 0;
				Out_Dummy4_g153398 = Data4_g153398.Dummy;
				Out_Albedo4_g153398 = Data4_g153398.Albedo;
				Out_AlbedoRaw4_g153398 = Data4_g153398.AlbedoRaw;
				Out_NormalTS4_g153398 = Data4_g153398.NormalTS;
				Out_NormalWS4_g153398 = Data4_g153398.NormalWS;
				Out_Shader4_g153398 = Data4_g153398.Shader;
				Out_Emissive4_g153398= Data4_g153398.Emissive;
				Out_MultiMask4_g153398 = Data4_g153398.MultiMask;
				Out_Grayscale4_g153398 = Data4_g153398.Grayscale;
				Out_Luminosity4_g153398= Data4_g153398.Luminosity;
				Out_AlphaClip4_g153398 = Data4_g153398.AlphaClip;
				Out_AlphaFade4_g153398 = Data4_g153398.AlphaFade;
				Out_Translucency4_g153398 = Data4_g153398.Translucency;
				Out_Transmission4_g153398 = Data4_g153398.Transmission;
				Out_Thickness4_g153398 = Data4_g153398.Thickness;
				Out_Diffusion4_g153398 = Data4_g153398.Diffusion;
				float3 temp_output_297_0_g153389 = Out_Albedo4_g153398;
				float3 In_Albedo3_g153399 = temp_output_297_0_g153389;
				float3 temp_output_297_23_g153389 = Out_AlbedoRaw4_g153398;
				float3 In_AlbedoRaw3_g153399 = temp_output_297_23_g153389;
				float2 In_NormalTS3_g153399 = Out_NormalTS4_g153398;
				float3 In_NormalWS3_g153399 = Out_NormalWS4_g153398;
				float4 In_Shader3_g153399 = Out_Shader4_g153398;
				float4 temp_cast_51 = (0.0).xxxx;
				half4 Visual_Emissive255_g153389 = Out_Emissive4_g153398;
				half Emissive_MeshMask221_g153389 = 1.0;
				half Emissive_Mask103_g153389 = 1.0;
				float temp_output_279_0_g153389 = ( Emissive_MeshMask221_g153389 * Emissive_Mask103_g153389 );
				float3 appendResult293_g153389 = (float3(temp_output_279_0_g153389 , temp_output_279_0_g153389 , temp_output_279_0_g153389));
				half3 Local_EmissiveColor278_g153389 = appendResult293_g153389;
				float3 temp_cast_52 = (1.0).xxx;
				TVEGlobalData Data15_g153390 = Data204_g153153;
				float Out_Dummy15_g153390 = 0;
				float4 Out_CoatParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153390 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153390 = float4( 0,0,0,0 );
				Out_Dummy15_g153390 = Data15_g153390.Dummy;
				Out_CoatParams15_g153390 = Data15_g153390.CoatParams;
				Out_PaintParams15_g153390 = Data15_g153390.PaintParams;
				Out_GlowParams15_g153390 = Data15_g153390.GlowParams;
				Out_AtmoParams15_g153390= Data15_g153390.AtmoParams;
				Out_FadeParams15_g153390= Data15_g153390.FadeParams;
				Out_FormParams15_g153390 = Data15_g153390.FormParams;
				Out_LandParams15_g153390 = Data15_g153390.LandParams;
				Out_WindParams15_g153390 = Data15_g153390.WindParams;
				Out_PushParams15_g153390 = Data15_g153390.PushParams;
				half4 Global_GlowParams179_g153389 = Out_GlowParams15_g153390;
				float3 lerpResult299_g153389 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g153389).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g153389 = lerpResult299_g153389;
				#else
				float3 staticSwitch228_g153389 = temp_cast_52;
				#endif
				half3 Emissive_GlobalMask248_g153389 = staticSwitch228_g153389;
				half3 Visual_AlbedoRaw306_g153389 = temp_output_297_23_g153389;
				float3 lerpResult307_g153389 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g153389 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g153389 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g153389 * lerpResult307_g153389 );
				half3 Emissive_Blend260_g153389 = ( ( (Visual_Emissive255_g153389).xyz * Local_EmissiveColor278_g153389 ) * Local_EmissiveValue88_g153389 );
				float3 temp_output_3_0_g153403 = Emissive_Blend260_g153389;
				float temp_output_15_0_g153403 = _emissive_power_value;
				float3 hdEmission22_g153403 = ASEGetEmissionHDRColor(temp_output_3_0_g153403,temp_output_15_0_g153403,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g153389 = temp_output_279_0_g153389;
				float4 appendResult295_g153389 = (float4(hdEmission22_g153403 , Local_EmissiveMask294_g153389));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g153389 = appendResult295_g153389;
				#else
				float4 staticSwitch129_g153389 = temp_cast_51;
				#endif
				half4 Final_Emissive184_g153389 = staticSwitch129_g153389;
				float4 In_Emissive3_g153399 = Final_Emissive184_g153389;
				float In_Grayscale3_g153399 = Out_Grayscale4_g153398;
				float In_Luminosity3_g153399 = Out_Luminosity4_g153398;
				float temp_output_297_11_g153389 = Out_MultiMask4_g153398;
				float In_MultiMask3_g153399 = temp_output_297_11_g153389;
				float In_AlphaClip3_g153399 = Out_AlphaClip4_g153398;
				float In_AlphaFade3_g153399 = Out_AlphaFade4_g153398;
				float3 In_Translucency3_g153399 = Out_Translucency4_g153398;
				float In_Transmission3_g153399 = Out_Transmission4_g153398;
				float In_Thickness3_g153399 = Out_Thickness4_g153398;
				float In_Diffusion3_g153399 = Out_Diffusion4_g153398;
				Data3_g153399.Dummy = In_Dummy3_g153399;
				Data3_g153399.Albedo = In_Albedo3_g153399;
				Data3_g153399.AlbedoRaw = In_AlbedoRaw3_g153399;
				Data3_g153399.NormalTS = In_NormalTS3_g153399;
				Data3_g153399.NormalWS = In_NormalWS3_g153399;
				Data3_g153399.Shader = In_Shader3_g153399;
				Data3_g153399.Emissive= In_Emissive3_g153399;
				Data3_g153399.MultiMask = In_MultiMask3_g153399;
				Data3_g153399.Grayscale = In_Grayscale3_g153399;
				Data3_g153399.Luminosity = In_Luminosity3_g153399;
				Data3_g153399.AlphaClip = In_AlphaClip3_g153399;
				Data3_g153399.AlphaFade = In_AlphaFade3_g153399;
				Data3_g153399.Translucency = In_Translucency3_g153399;
				Data3_g153399.Transmission = In_Transmission3_g153399;
				Data3_g153399.Thickness = In_Thickness3_g153399;
				Data3_g153399.Diffusion = In_Diffusion3_g153399;
				TVEVisualData Data4_g153445 = Data3_g153399;
				float Out_Dummy4_g153445 = 0;
				float3 Out_Albedo4_g153445 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153445 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153445 = float2( 0,0 );
				float3 Out_NormalWS4_g153445 = float3( 0,0,0 );
				float4 Out_Shader4_g153445 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153445 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153445 = 0;
				float Out_Grayscale4_g153445 = 0;
				float Out_Luminosity4_g153445 = 0;
				float Out_AlphaClip4_g153445 = 0;
				float Out_AlphaFade4_g153445 = 0;
				float3 Out_Translucency4_g153445 = float3( 0,0,0 );
				float Out_Transmission4_g153445 = 0;
				float Out_Thickness4_g153445 = 0;
				float Out_Diffusion4_g153445 = 0;
				Out_Dummy4_g153445 = Data4_g153445.Dummy;
				Out_Albedo4_g153445 = Data4_g153445.Albedo;
				Out_AlbedoRaw4_g153445 = Data4_g153445.AlbedoRaw;
				Out_NormalTS4_g153445 = Data4_g153445.NormalTS;
				Out_NormalWS4_g153445 = Data4_g153445.NormalWS;
				Out_Shader4_g153445 = Data4_g153445.Shader;
				Out_Emissive4_g153445= Data4_g153445.Emissive;
				Out_MultiMask4_g153445 = Data4_g153445.MultiMask;
				Out_Grayscale4_g153445 = Data4_g153445.Grayscale;
				Out_Luminosity4_g153445= Data4_g153445.Luminosity;
				Out_AlphaClip4_g153445 = Data4_g153445.AlphaClip;
				Out_AlphaFade4_g153445 = Data4_g153445.AlphaFade;
				Out_Translucency4_g153445 = Data4_g153445.Translucency;
				Out_Transmission4_g153445 = Data4_g153445.Transmission;
				Out_Thickness4_g153445 = Data4_g153445.Thickness;
				Out_Diffusion4_g153445 = Data4_g153445.Diffusion;
				half3 Visual_Albedo199_g153444 = Out_Albedo4_g153445;
				half3 Final_Albedo312_g153444 = Visual_Albedo199_g153444;
				float3 In_Albedo3_g153446 = Final_Albedo312_g153444;
				float3 In_AlbedoRaw3_g153446 = Out_AlbedoRaw4_g153445;
				float2 In_NormalTS3_g153446 = Out_NormalTS4_g153445;
				float3 In_NormalWS3_g153446 = Out_NormalWS4_g153445;
				float4 In_Shader3_g153446 = Out_Shader4_g153445;
				float4 In_Emissive3_g153446 = Out_Emissive4_g153445;
				float In_Grayscale3_g153446 = Out_Grayscale4_g153445;
				float In_Luminosity3_g153446 = Out_Luminosity4_g153445;
				float temp_output_301_11_g153444 = Out_MultiMask4_g153445;
				float In_MultiMask3_g153446 = temp_output_301_11_g153444;
				float In_AlphaClip3_g153446 = Out_AlphaClip4_g153445;
				float In_AlphaFade3_g153446 = Out_AlphaFade4_g153445;
				float3 temp_cast_53 = (0.0).xxx;
				half3 Subsurface_Color264_g153444 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g153444 );
				half Visual_Transmission138_g153444 = Out_Transmission4_g153445;
				half Subsurface_Value268_g153444 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g153447 = Data204_g153153;
				float Out_Dummy15_g153447 = 0;
				float4 Out_CoatParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g153447 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g153447 = float4( 0,0,0,0 );
				Out_Dummy15_g153447 = Data15_g153447.Dummy;
				Out_CoatParams15_g153447 = Data15_g153447.CoatParams;
				Out_PaintParams15_g153447 = Data15_g153447.PaintParams;
				Out_GlowParams15_g153447 = Data15_g153447.GlowParams;
				Out_AtmoParams15_g153447= Data15_g153447.AtmoParams;
				Out_FadeParams15_g153447= Data15_g153447.FadeParams;
				Out_FormParams15_g153447 = Data15_g153447.FormParams;
				Out_LandParams15_g153447 = Data15_g153447.LandParams;
				Out_WindParams15_g153447 = Data15_g153447.WindParams;
				Out_PushParams15_g153447 = Data15_g153447.PushParams;
				half4 Global_GlowParams373_g153444 = Out_GlowParams15_g153447;
				float lerpResult403_g153444 = lerp( 1.0 , saturate( (Global_GlowParams373_g153444).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g153444 = lerpResult403_g153444;
				#else
				float staticSwitch367_g153444 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g153444 = staticSwitch367_g153444;
				half Visual_MultiMask292_g153444 = temp_output_301_11_g153444;
				float lerpResult293_g153444 = lerp( 1.0 , Visual_MultiMask292_g153444 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g153444 = lerpResult293_g153444;
				half Custom_Mask363_g153444 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g153444 = ( Visual_Transmission138_g153444 * Subsurface_Value268_g153444 * Subsurface_GlobalMask369_g153444 * Subsurface_MultiMask296_g153444 * Custom_Mask363_g153444 );
				#else
				float staticSwitch345_g153444 = 0.0;
				#endif
				half Final_Transmission269_g153444 = staticSwitch345_g153444;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g153444 = ( Subsurface_Color264_g153444 * Final_Transmission269_g153444 * 10.0 );
				#else
				float3 staticSwitch348_g153444 = temp_cast_53;
				#endif
				half3 Final_Translucency254_g153444 = staticSwitch348_g153444;
				float3 In_Translucency3_g153446 = Final_Translucency254_g153444;
				float In_Transmission3_g153446 = Final_Transmission269_g153444;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g153444 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g153444 = 1.0;
				#endif
				half Final_Thickness275_g153444 = staticSwitch351_g153444;
				float In_Thickness3_g153446 = Final_Thickness275_g153444;
				float Final_Diffusion340_g153444 = _SubsurfaceDiffusion;
				float In_Diffusion3_g153446 = Final_Diffusion340_g153444;
				Data3_g153446.Dummy = In_Dummy3_g153446;
				Data3_g153446.Albedo = In_Albedo3_g153446;
				Data3_g153446.AlbedoRaw = In_AlbedoRaw3_g153446;
				Data3_g153446.NormalTS = In_NormalTS3_g153446;
				Data3_g153446.NormalWS = In_NormalWS3_g153446;
				Data3_g153446.Shader = In_Shader3_g153446;
				Data3_g153446.Emissive= In_Emissive3_g153446;
				Data3_g153446.MultiMask = In_MultiMask3_g153446;
				Data3_g153446.Grayscale = In_Grayscale3_g153446;
				Data3_g153446.Luminosity = In_Luminosity3_g153446;
				Data3_g153446.AlphaClip = In_AlphaClip3_g153446;
				Data3_g153446.AlphaFade = In_AlphaFade3_g153446;
				Data3_g153446.Translucency = In_Translucency3_g153446;
				Data3_g153446.Transmission = In_Transmission3_g153446;
				Data3_g153446.Thickness = In_Thickness3_g153446;
				Data3_g153446.Diffusion = In_Diffusion3_g153446;
				TVEVisualData Data4_g153454 = Data3_g153446;
				float Out_Dummy4_g153454 = 0;
				float3 Out_Albedo4_g153454 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g153454 = float3( 0,0,0 );
				float2 Out_NormalTS4_g153454 = float2( 0,0 );
				float3 Out_NormalWS4_g153454 = float3( 0,0,0 );
				float4 Out_Shader4_g153454 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g153454 = float4( 0,0,0,0 );
				float Out_MultiMask4_g153454 = 0;
				float Out_Grayscale4_g153454 = 0;
				float Out_Luminosity4_g153454 = 0;
				float Out_AlphaClip4_g153454 = 0;
				float Out_AlphaFade4_g153454 = 0;
				float3 Out_Translucency4_g153454 = float3( 0,0,0 );
				float Out_Transmission4_g153454 = 0;
				float Out_Thickness4_g153454 = 0;
				float Out_Diffusion4_g153454 = 0;
				Out_Dummy4_g153454 = Data4_g153454.Dummy;
				Out_Albedo4_g153454 = Data4_g153454.Albedo;
				Out_AlbedoRaw4_g153454 = Data4_g153454.AlbedoRaw;
				Out_NormalTS4_g153454 = Data4_g153454.NormalTS;
				Out_NormalWS4_g153454 = Data4_g153454.NormalWS;
				Out_Shader4_g153454 = Data4_g153454.Shader;
				Out_Emissive4_g153454= Data4_g153454.Emissive;
				Out_MultiMask4_g153454 = Data4_g153454.MultiMask;
				Out_Grayscale4_g153454 = Data4_g153454.Grayscale;
				Out_Luminosity4_g153454= Data4_g153454.Luminosity;
				Out_AlphaClip4_g153454 = Data4_g153454.AlphaClip;
				Out_AlphaFade4_g153454 = Data4_g153454.AlphaFade;
				Out_Translucency4_g153454 = Data4_g153454.Translucency;
				Out_Transmission4_g153454 = Data4_g153454.Transmission;
				Out_Thickness4_g153454 = Data4_g153454.Thickness;
				Out_Diffusion4_g153454 = Data4_g153454.Diffusion;
				half3 Input_Albedo24_g153452 = Out_Albedo4_g153454;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g153452 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g153452 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g153452 = staticSwitch22_g153452;
				float4 break24_g153451 = Out_Shader4_g153454;
				half Metallic117_g153451 = break24_g153451.x;
				half Input_Metallic25_g153452 = Metallic117_g153451;
				half OneMinusReflectivity31_g153452 = ( (ColorSpaceDielectricSpec23_g153452).w - ( (ColorSpaceDielectricSpec23_g153452).w * Input_Metallic25_g153452 ) );
				float3 lerpResult87_g153451 = lerp( half3(1,0,0) , ( Input_Albedo24_g153452 * OneMinusReflectivity31_g153452 ) , _IsInitialized);
				
				float localCustomAlphaClip19_g153463 = ( 0.0 );
				float temp_output_3_0_g153463 = Out_AlphaClip4_g153454;
				float Alpha19_g153463 = temp_output_3_0_g153463;
				float temp_output_15_0_g153463 = 0.0;
				float Treshold19_g153463 = temp_output_15_0_g153463;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#else
				clip(Alpha19_g153463 - Treshold19_g153463);
				#endif
				#endif
				
				surfaceDescription.Albedo = lerpResult87_g153451;
				o.Normal = Out_NormalWS4_g153454;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g153454).xyz;
				surfaceDescription.Smoothness = break24_g153451.w;
				surfaceDescription.Occlusion = break24_g153451.y;
				surfaceDescription.Alpha = Alpha19_g153463;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g153454;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3(1,1,1);
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g153454;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g153454;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3(1,0,0);
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				float4 bakedGI = float4( 0, 0, 0, 0 );

				packedInput.positionCS.zw = positionCS.zw;
				float3 positionRWS = positionWS;
				float3 normalWS = o.Normal;
				float4 tangentWS = packedInput.interp02.xyzw;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//input.worldToTangent = BuildWorldToTangent( tangentWS, normalWS );
				//#else
				input.tangentToWorld = BuildTangentToWorld( tangentWS, normalWS );
				//#endif
				input.texCoord0 = packedInput.interp03.xyzw;
				input.texCoord1 = packedInput.interp04.xyzw;
				input.texCoord2 = packedInput.interp05.xyzw;

				uint2 tileIndex = uint2( input.positionSS.xy ) / GetTileSize();
				//#if defined( ASE_SRP_VERSION ) && ASE_SRP_VERSION < 60900
				//#if defined(UNITY_SINGLE_PASS_STEREO)
				//	tileIndex.x -= unity_StereoEyeIndex * _NumTileClusteredX;
				//#endif
				//PositionInputs posInput = GetPositionInput_Stereo( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex, unity_StereoEyeIndex );
				//#else
				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );
				//#endif
				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir( input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GetSurfaceAndBuiltinData( surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				PreLightData preLightData = GetPreLightData(normalizedWorldViewDir, posInput, bsdfData);

				#ifdef CUSTOM_BAKED_GI
					half4 decodeInstructions = half4( LIGHTMAP_HDR_MULTIPLIER, LIGHTMAP_HDR_EXPONENT, 0.0h, 0.0h );
					builtinData.bakeDiffuseLighting = UnpackLightmapRGBM( bakedGI, decodeInstructions ) * EMISSIVE_RGBM_SCALE * bsdfData.diffuseColor;
				#endif

				outColor = float4(0.0, 0.0, 0.0, 0.0);
				#ifdef _SURFACE_TYPE_TRANSPARENT
					uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
				#else
					uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
				#endif
				//float3 diffuseLighting;
				//float3 specularLighting;

				//LightLoop(normalizedWorldViewDir, posInput, preLightData, bsdfData, builtinData, featureFlags, diffuseLighting, specularLighting);
				LightLoopOutput lightLoopOutput;
				LightLoop(normalizedWorldViewDir, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

				// Alias
				float3 diffuseLighting = lightLoopOutput.diffuseLighting;
				float3 specularLighting = lightLoopOutput.specularLighting;

				diffuseLighting *= GetCurrentExposureMultiplier();
				specularLighting *= GetCurrentExposureMultiplier();

				#ifdef OUTPUT_SPLIT_LIGHTING
					if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
					{
						outColor = float4(specularLighting, 1.0);
						outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
					}
					else
					{
						outColor = float4(diffuseLighting + specularLighting, 1.0);
						outDiffuseLighting = 0;
					}
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#else
					outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);
					outColor = EvaluateAtmosphericScattering(posInput, normalizedWorldViewDir, outColor);
				#endif

				outputDepth = posInput.deviceDepth;
			}
			ENDHLSL
		}
		
	}
	Fallback Off
	
	CustomEditor "TVEShaderGUICore"
}
/*ASEBEGIN
Version=19603
Node;AmplifyShaderEditor.FunctionNode;583;-640,-256;Inherit;False;Impostor Pass Hemi;86;;151868;2a8c64b889d9fa74b8e311e6b999116e;0;0;6;FLOAT4;0;FLOAT4;23;FLOAT4;29;FLOAT3;25;FLOAT3;26;FLOAT3;27
Node;AmplifyShaderEditor.FunctionNode;595;-384,-256;Inherit;False;Block Impostor Builder;113;;153142;f5a6295b5f4a3004ebbb03db403bc544;0;6;229;COLOR;0,0,0,0;False;285;COLOR;0,0,0,0;False;372;COLOR;0,0,0,0;False;224;FLOAT3;0,0,0;False;217;FLOAT3;0,0,0;False;360;FLOAT3;0,0,0;False;3;OBJECT;272;OBJECT;375;OBJECT;374
Node;AmplifyShaderEditor.RegisterLocalVarNode;594;64,-128;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;596;512,-256;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;597;768,-256;Inherit;False;Block Global;36;;153153;212e17d4006dc88449d56ce0340cb5ff;20,315,0,311,1,388,1,317,1,321,1,319,1,376,0,323,1,337,1,282,1,371,1,349,1,385,1,287,1,285,1,276,1,283,1,308,1,348,0,289,0;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.RegisterLocalVarNode;598;64,-256;Half;False;Visual  Raw;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;599;3328,-256;Inherit;False;598;Visual  Raw;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;601;1088,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;600;3328,-128;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;602;3712,-256;Inherit;False;Block Variation;126;;153236;f25afe21028a28a4e8dee6f6da7bc1a5;0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;603;3712,-64;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;629;3712,-128;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;604;4096,-64;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;630;4096,-128;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;605;4096,-256;Inherit;False;Block Tinting;139;;153245;9f39e156ea8d89e4997ea2a1e194137e;7,352,0,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.GetLocalVarNode;606;4480,-64;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;631;4480,-128;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;607;4480,-256;Inherit;False;Block Dryness;168;;153269;f05795de23f951c45bb73c8b4321e4b7;7,398,0,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode;608;4864,-128;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;609;4864,-256;Inherit;False;Block Overlay;200;;153292;8ae9c8285a7817844a51243251284d21;9,821,0,819,0,813,0,910,0,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;610;5248,-64;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;611;5248,-256;Inherit;False;Block Wetness;246;;153328;52c5a1f52507fc44e926833b126e7855;8,850,0,1075,0,857,0,945,0,930,0,1092,0,851,0,1107,0;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;612;5248,-128;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;613;64,-192;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;614;5632,-128;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;616;1536,-256;Inherit;False;613;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;617;1536,-128;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;615;5632,-256;Inherit;False;Block Cutout;287;;153357;866b4a5fe67e7f34085520e1bb5be2b7;5,775,0,777,1,815,0,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.FunctionNode;618;6016,-256;Inherit;False;Block Dithering;305;;153370;c7e02d28445e979479d493926695e6f3;6,843,0,859,1,844,0,827,1,879,0,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;619;6016,-128;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;620;1792,-256;Inherit;False;Block Size Fade;368;;153383;467c36a7402d0274b9ad844bbc95de33;0;2;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;621;6400,-64;Inherit;False;601;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;623;6400,-256;Inherit;False;Block Emissive;325;;153389;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,0,275,0,264,0,267,0;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;624;2176,-256;Inherit;False;Block Impostor Motion;377;;153404;75e928d51589496409227d347748f6c7;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;626;2560,-256;Inherit;False;Block Transform;-1;;153436;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;625;6784,-256;Inherit;False;Block Subsurface;349;;153444;d738d295ada6b1f409db6776b5efe789;3,315,0,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.RegisterLocalVarNode;627;7104,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;628;2880,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;351;7808,-256;Inherit;False;627;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;352;7808,-192;Inherit;False;628;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;622;6400,-128;Inherit;False;594;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;576;8064,-256;Inherit;False;Block Impostor Render;0;;153451;1dac90ed7ee26b743a17d6c74e115d86;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;83;FLOAT3;34;FLOAT3;77;FLOAT;123;FLOAT;27;FLOAT;114;FLOAT;113;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.FunctionNode;320;8960,-768;Inherit;False;Base Compile;-1;;153464;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;111;7808,-768;Half;False;Property;_ImpostorCategory;[ Impostor Category ];85;0;Create;True;0;0;0;True;1;StyledCategory(Impostor Settings, true, 0, 10);False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;355;8064,-768;Half;False;Property;_ImpostorEnd;[ Impostor End ];125;0;Create;True;0;0;0;True;1;StyledSpace(10);False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;328;7808,-640;Half;False;Property;_render_coverage;_render_coverage;415;0;Create;True;0;2;Off;0;On;1;0;False;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;577;8448,-768;Half;False;Property;_IsImpostorShader;_IsImpostorShader;413;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;579;8672,-768;Half;False;Property;_IsSubsurfaceShader;_IsSubsurfaceShader;414;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;586;8608,-256;Float;False;False;-1;2;ASEMaterialInspector;0;1;New Amplify Shader;4e5791d7c677cf540a160f0a09e2385a;True;SceneSelectionPass;0;1;SceneSelectionPass;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;8;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;Hidden/InternalErrorShader;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;587;8608,-256;Float;False;False;-1;2;ASEMaterialInspector;0;1;New Amplify Shader;4e5791d7c677cf540a160f0a09e2385a;True;META;0;2;META;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;8;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;Hidden/InternalErrorShader;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;588;8608,-256;Float;False;False;-1;2;ASEMaterialInspector;0;1;New Amplify Shader;4e5791d7c677cf540a160f0a09e2385a;True;ShadowCaster;0;3;ShadowCaster;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;8;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ShadowCaster;False;False;0;Hidden/InternalErrorShader;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;589;8608,-256;Float;False;False;-1;2;ASEMaterialInspector;0;1;New Amplify Shader;4e5791d7c677cf540a160f0a09e2385a;True;DepthOnly;0;4;DepthOnly;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;8;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=DepthOnly;False;False;0;Hidden/InternalErrorShader;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;590;8608,-256;Float;False;False;-1;2;ASEMaterialInspector;0;1;New Amplify Shader;4e5791d7c677cf540a160f0a09e2385a;True;Motion Vectors;0;5;Motion Vectors;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;8;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;True;40;False;;255;False;;40;False;;7;False;;3;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;False;False;False;True;1;LightMode=MotionVectors;False;False;0;Hidden/InternalErrorShader;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;591;8608,-256;Float;False;False;-1;2;ASEMaterialInspector;0;1;New Amplify Shader;4e5791d7c677cf540a160f0a09e2385a;True;Forward;0;6;Forward;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;8;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;10;False;;255;False;;14;False;;7;False;;3;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;False;False;False;True;1;LightMode=Forward;False;False;0;Hidden/InternalErrorShader;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;585;8576,-256;Float;False;True;-1;2;TVEShaderGUICore;0;14;BOXOPHOBIC/The Visual Engine/Impostors/Hemi Subsurface Lit;4e5791d7c677cf540a160f0a09e2385a;True;GBuffer;0;0;GBuffer;27;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;True;10;False;;255;False;;14;False;;7;False;;3;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;False;False;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;16;Material Type,InvertActionOnDeselection;5;638519779124466640;Energy Conserving Specular,InvertActionOnDeselection;1;638519779093250385;  Transmission,InvertActionOnDeselection;0;0;Surface Type;0;0;Alpha Cutoff;0;0;Receive Decals;1;0;Receives SSR;1;0;Specular AA;0;0;Specular Occlusion Mode;1;638660780116804923;Distortion;0;0;Distortion Mode;0;0;Distortion Depth Test;0;0;Blend Preserves Specular;1;0;Fog;1;0;Draw Before Refraction;0;0;Refraction Model;0;0;0;7;True;True;True;True;True;True;True;False;;True;0
WireConnection;595;229;583;0
WireConnection;595;285;583;23
WireConnection;595;372;583;29
WireConnection;595;224;583;25
WireConnection;595;217;583;26
WireConnection;595;360;583;27
WireConnection;594;0;595;374
WireConnection;597;206;596;0
WireConnection;598;0;595;272
WireConnection;601;0;597;151
WireConnection;602;144;599;0
WireConnection;602;222;600;0
WireConnection;605;198;602;116
WireConnection;605;223;629;0
WireConnection;605;207;603;0
WireConnection;607;279;605;204
WireConnection;607;297;630;0
WireConnection;607;281;604;0
WireConnection;609;572;607;346
WireConnection;609;596;631;0
WireConnection;609;600;606;0
WireConnection;611;572;609;566
WireConnection;611;600;608;0
WireConnection;613;0;595;375
WireConnection;615;572;611;566
WireConnection;615;596;612;0
WireConnection;615;600;610;0
WireConnection;618;572;615;566
WireConnection;618;596;614;0
WireConnection;620;146;616;0
WireConnection;620;186;617;0
WireConnection;623;146;618;566
WireConnection;623;178;619;0
WireConnection;624;146;620;128
WireConnection;626;146;624;128
WireConnection;625;146;623;183
WireConnection;625;371;621;0
WireConnection;627;0;625;183
WireConnection;628;0;626;128
WireConnection;576;17;351;0
WireConnection;576;19;352;0
WireConnection;585;0;576;21
WireConnection;585;1;576;83
WireConnection;585;6;576;34
WireConnection;585;7;576;27
WireConnection;585;8;576;123
WireConnection;585;9;576;28
WireConnection;585;16;576;67
WireConnection;585;61;576;66
WireConnection;585;62;576;68
WireConnection;585;11;576;37
ASEEND*/
//CHKSM=736F4631E1C8D4077CAFDD5818568D6B303F19E5
